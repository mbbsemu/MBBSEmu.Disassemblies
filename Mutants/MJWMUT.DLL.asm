

;
; +-------------------------------------------------------------------------+
; |      This file was generated by The Interactive Disassembler (IDA)      |
; |           Copyright (c) 2020 Hex-Rays, <support@hex-rays.com>           |
; |                      License info: 48-3437-7A44-A2                      |
; |                              Eric Nusbaum                               |
; +-------------------------------------------------------------------------+
;
; Input SHA256 : 6844E0DA8ACB572C3D8D6CD73B06F3E5B06DE0CFEAE7D5D04B960D0CD0E144A8
; Input MD5    : 57A96A66F2AEC8EDE128FEFD94CBE545
; Input CRC32  : 3F2A9639

; ---------------------------------------------------------------------------
; File Name   : C:\dos\modules\mutants\MJWMUT.DLL
; Format      : New Executable (NE) Windows
; Title 'MJWMUT.DLL'
; Target operating system         MS Windows
; File Load CRC                   000000000h
; Program Entry Point   (CS:IP)   0000:0000
; Initial Stack Pointer (SS:SP)   0000:0000
; Auto Data Segment Index         0015h  (    21. )
; Initial Local Heap Size         0000h  (     0. )
; Initial Stack Size              0000h  (     0. )
; Linker Version                  5.10
; Minimum code swap area size     0
; Expected Windows Version        3.0
; Program Flags (8009): DLL Single data
; Other EXE Flags (0000):
; ----------------------------------------------------------------------------
; Segment Number    : 1
; Alloc Size        : 0674h
; Offset in the file: 0200h  Length: 0674h
; Attributes  (0D00): CODE Relocations DPL: 3

                .686p
                .mmx
                .model flat

; ===========================================================================

; Segment type: Pure code
cseg01          segment para public 'CODE' use16
                assume cs:cseg01
                assume es:nothing, ss:nothing, ds:dseg21, fs:nothing, gs:nothing
                push    ds
                push    bp
                push    si
                push    di
                mov     dx, seg dseg21
                mov     ah, 62h ; 'b'
                int     21h             ; DOS - 3+ - GET PSP ADDRESS
                mov     es, bx
                mov     ds, bx
                push    cs
                push    seg dseg21
                push    offset word_2B347
                call    PHAPI_DOSCREATEDSALIAS
                or      ax, ax
                jz      short loc_21
                jmp     short loc_79
; ---------------------------------------------------------------------------

loc_21:                                 ; CODE XREF: cseg01:001D↑j
                push    es
                mov     ax, seg dseg21
                mov     es, ax
                assume es:dseg21
                mov     es, es:word_2B347
                assume es:cseg01
                mov     es:word_1A4, seg dseg21
                pop     es
                assume es:nothing
                mov     ah, 30h ; '0'
                int     21h             ; DOS - GET DOS VERSION
                                        ; Return: AL = major version number (00h for DOS 1.x)
                mov     bx, word_2B2FC
                mov     ds, dx
                mov     word_2B351, ax
                mov     word_2B34F, es
                mov     word ptr dword_2B349+2, bx
                les     di, dword_2B349
                mov     ax, di
                mov     bx, ax
                mov     cx, 7FFFh
                cld

loc_55:                                 ; CODE XREF: cseg01:005D↓j
                repne scasb
                jcxz    short loc_79
                inc     bx
                cmp     es:[di], al
                jnz     short loc_55
                or      ch, 80h
                neg     cx
                mov     word ptr dword_2B349, cx
                mov     cx, 2
                shl     bx, cl
                add     bx, 10h
                and     bx, 0FFF0h
                mov     word_2B34D, bx
                jmp     short loc_7E
; ---------------------------------------------------------------------------

loc_79:                                 ; CODE XREF: cseg01:001F↑j
                                        ; cseg01:0057↑j
                mov     ax, 0
                jmp     short loc_B6
; ---------------------------------------------------------------------------

loc_7E:                                 ; CODE XREF: cseg01:0077↑j
                mov     dx, ds
                mov     ah, 0
                int     1Ah             ; CLOCK - GET TIME OF DAY
                                        ; Return: CX:DX = clock count
                                        ; AL = 00h if clock was read or written (via AH=0,1) since the previous
                                        ; midnight
                                        ; Otherwise, AL > 0
                mov     word_2B355, dx
                mov     word_2B357, cx
                xor     bp, bp
                mov     ax, seg dseg21
                mov     ds, ax
                mov     si, 9Ah
                mov     di, 9Ah
                call    near ptr byte_143
                mov     ds, cs:word_1A4
                push    es
                mov     es, word_2B347
                assume es:cseg01
                mov     es:byte_155, 72h ; 'r'
                mov     es:byte_144, 0
                pop     es
                assume es:nothing
                mov     ax, 1

loc_B6:                                 ; CODE XREF: cseg01:007C↑j
                pop     di
                pop     si
                pop     bp
                pop     ds
                retf
; ---------------------------------------------------------------------------
                mov     es, cs:word_1A4
                push    si
                push    di
                mov     si, 9Ah
                mov     di, 9Ah
                call    near ptr byte_143
                pop     di
                pop     si
                retf
; ---------------------------------------------------------------------------
                retf
; ---------------------------------------------------------------------------
                db 8Bh, 0ECh, 0B4h, 4Ch, 8Ah, 46h, 4, 0CDh, 21h, 0B8h
                dw seg dseg21
                db 8Eh, 0D8h, 0BEh, 9Ah, 0, 0BFh, 9Ah, 0, 0E8h, 5Dh, 0
                db 2Eh, 8Eh, 1Eh, 0A4h, 1, 0FFh, 1Eh
                dw offset _EXITBUF      ; void (*_exitbuf)(void);
                db 0FFh, 1Eh
                dw offset _EXITFOPEN    ; void (*_exitfopen)(void)
                db 0FFh, 1Eh
                dw offset _EXITOPEN     ; void (*_exitopen)(void)
                db 50h, 2Eh, 8Eh, 1Eh, 0A4h, 1, 0Eh, 0E8h, 22h, 0, 8Bh
                db 0ECh, 0B4h, 4Ch, 8Ah, 46h, 4, 0CDh, 21h, 0B9h, 0Eh
                db 0, 0BAh, 2Fh, 0, 0E9h, 81h, 0, 6Ah, 0, 0Eh, 68h, 0Ah
                db 1, 1Eh, 68h, 5Dh, 0, 9Ah
                dd DOSCALLS_89
; ---------------------------------------------------------------------------
                retn

; =============== S U B R O U T I N E =======================================


sub_123         proc far
                push    ds
                mov     ds, cs:word_1A4
                push    ax
                push    ax
                mov     ax, sp
                push    0
                push    word_2B32F
                push    word_2B32D
                push    ss
                push    ax
                call    DOSCALLS_89
                add     sp, 4
                pop     ds
                retf
sub_123         endp

; ---------------------------------------------------------------------------
byte_143        db 0B4h                 ; CODE XREF: cseg01:0099↑p
                                        ; cseg01:00C8↑p
byte_144        db 0FFh                 ; DATA XREF: cseg01:00AC↑w
                db 8Bh, 0D7h, 8Bh, 0DEh, 3Bh, 0DFh, 74h, 14h, 80h, 3Fh
                db 0FFh, 74h, 0Ah, 38h, 67h, 1
byte_155        db 77h                  ; DATA XREF: cseg01:00A6↑w
; ---------------------------------------------------------------------------
                add     ax, 678Ah
                add     [bp+di-7C2Dh], cx
                retn
; ---------------------------------------------------------------------------
                db 6, 0EBh, 0E8h, 3Bh, 0D7h, 74h, 20h, 8Bh, 0DAh, 1Eh
                db 7, 6, 80h, 3Fh, 0, 0C6h, 7, 0FFh, 2Eh, 8Eh, 1Eh, 0A4h
                db 1, 74h, 7, 26h, 0FFh, 5Fh, 2, 1Fh, 0EBh, 0C5h, 26h
                db 0FFh, 57h, 2, 1Fh, 0EBh, 0BEh, 0C3h

; =============== S U B R O U T I N E =======================================


sub_186         proc near
                mov     ah, 40h ; '@'
                mov     bx, 2
                int     21h             ; DOS - 2+ - WRITE TO FILE WITH HANDLE
                                        ; BX = file handle, CX = number of bytes to write, DS:DX -> buffer
                retn
sub_186         endp

; ---------------------------------------------------------------------------
                db 0B9h, 1Eh, 0, 0BAh, 3Dh, 0, 2Eh, 8Eh, 1Eh, 0A4h, 1
                db 0E8h, 0EAh, 0FFh, 0B8h, 3, 0, 50h, 0Eh, 0E8h, 54h, 0FFh
word_1A4        dw 0                    ; DATA XREF: cseg01:002C↑w
                                        ; cseg01:009C↑r ...
                db 5, 0C0h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1A8         proc near               ; CODE XREF: cseg01:02E7↓p
                                        ; cseg01:0320↓p
                push    bp
                mov     bp, sp
                push    ds
                mov     ax, seg dseg20
                mov     ds, ax
                assume ds:dseg20
                mov     al, 5Fh ; '_'
                and     al, dl
                cmp     al, 47h ; 'G'
                jnz     short loc_1C7

loc_1B9:                                ; CODE XREF: sub_1A8+1B↓j
                cmp     byte ptr es:[bx-1], 30h ; '0'
                jnz     short loc_1C7
                dec     bx
                cmp     bx, cx
                ja      short loc_1B9
                jmp     short loc_1CF
; ---------------------------------------------------------------------------

loc_1C7:                                ; CODE XREF: sub_1A8+F↑j
                                        ; sub_1A8+16↑j
                cmp     byte ptr es:[bx-1], 2Eh ; '.'
                jnz     short loc_1CF
                dec     bx

loc_1CF:                                ; CODE XREF: sub_1A8+1D↑j
                                        ; sub_1A8+24↑j
                pop     ds
                assume ds:dseg21
                pop     bp
                retn
sub_1A8         endp

; ---------------------------------------------------------------------------
                push    bp
                mov     bp, sp
                sub     sp, 30h
                push    si
                push    di
                push    ds
                mov     ax, seg dseg20
                mov     ds, ax
                assume ds:dseg20
                push    es
                mov     ax, [bp+0Eh]
                cmp     ax, 28h ; '('
                jbe     short loc_1EF
                mov     ax, 28h ; '('
                mov     [bp+0Eh], ax

loc_1EF:                                ; CODE XREF: cseg01:01E7↑j
                mov     [bp-4], ax
                mov     dl, [bp+8]
                and     dl, 0DFh
                cmp     dl, 46h ; 'F'
                jnz     short loc_208
                neg     ax
                jle     short loc_211
                sub     ax, ax
                mov     [bp+0Eh], ax
                jmp     short loc_211
; ---------------------------------------------------------------------------

loc_208:                                ; CODE XREF: cseg01:01FB↑j
                or      ax, ax
                jg      short loc_211
                mov     ax, 1
                jmp     short loc_21A
; ---------------------------------------------------------------------------

loc_211:                                ; CODE XREF: cseg01:01FF↑j
                                        ; cseg01:0206↑j ...
                cmp     dl, 45h ; 'E'
                jnz     short loc_21A
                inc     ax
                inc     word ptr [bp+0Eh]

loc_21A:                                ; CODE XREF: cseg01:020F↑j
                                        ; cseg01:0214↑j
                push    word ptr [bp+12h]
                push    word ptr [bp+10h]
                push    ax
                push    ss
                lea     bx, [bp-2]
                push    bx
                push    ss
                lea     si, [bp-30h]
                push    si
                mov     ax, [bp+4]
                push    ax
                call    sub_37A
                xchg    ax, bx
                les     di, [bp+0Ah]
                cld
                cmp     bx, 7FFFh
                jz      short loc_245
                cmp     bx, 7FFEh
                jz      short loc_258
                jmp     short loc_26A
; ---------------------------------------------------------------------------

loc_245:                                ; CODE XREF: cseg01:023B↑j
                mov     ax, 492Bh
                cmp     word ptr [bp-2], 0
                jz      short loc_250
                inc     ax
                inc     ax

loc_250:                                ; CODE XREF: cseg01:024C↑j
                stosw
                mov     ax, 464Eh
                stosw
                jmp     loc_361
; ---------------------------------------------------------------------------

loc_258:                                ; CODE XREF: cseg01:0241↑j
                mov     ax, 4E2Bh
                cmp     word ptr [bp-2], 0
                jz      short loc_263
                inc     ax
                inc     ax

loc_263:                                ; CODE XREF: cseg01:025F↑j
                stosw
                mov     al, 41h ; 'A'
                stosw
                jmp     loc_361
; ---------------------------------------------------------------------------

loc_26A:                                ; CODE XREF: cseg01:0243↑j
                cmp     byte ptr [bp-2], 0
                jz      short loc_273
                mov     al, 2Dh ; '-'
                stosb

loc_273:                                ; CODE XREF: cseg01:026E↑j
                mov     dl, [bp+8]
                and     dl, 5Fh
                cmp     dl, 46h ; 'F'
                jz      short loc_294
                cmp     dl, 45h ; 'E'
                jz      short loc_2F6
                cmp     bx, 0FFFDh
                jl      short loc_2F6
                mov     ax, [bp+0Eh]
                or      ax, ax
                jnz     short loc_290
                inc     ax

loc_290:                                ; CODE XREF: cseg01:028D↑j
                cmp     bx, ax
                jg      short loc_2F6

loc_294:                                ; CODE XREF: cseg01:027C↑j
                cmp     bx, 28h ; '('
                jg      short loc_2F6
                or      bx, bx
                jg      short loc_2AC
                mov     ax, 2E30h
                stosw
                mov     cx, 1
                jz      short loc_2AF
                mov     al, 30h ; '0'

loc_2A8:                                ; CODE XREF: cseg01:02AA↓j
                stosb
                inc     bx
                jnz     short loc_2A8

loc_2AC:                                ; CODE XREF: cseg01:029B↑j
                mov     cx, 0

loc_2AF:                                ; CODE XREF: cseg01:02A4↑j
                                        ; cseg01:02B7↓j ...
                lods    byte ptr ss:[si]
                or      al, al
                jz      short loc_2BF
                stosb
                dec     bx
                jnz     short loc_2AF
                mov     al, 2Eh ; '.'
                stosb
                inc     cx
                jmp     short loc_2AF
; ---------------------------------------------------------------------------

loc_2BF:                                ; CODE XREF: cseg01:02B3↑j
                mov     ax, [bp+0Eh]
                add     cx, [bp-4]
                cmp     ax, cx
                jbe     short loc_2D6
                sub     ax, cx
                mov     cx, ax
                add     bx, ax
                mov     al, 30h ; '0'
                rep stosb
                dec     bx
                jz      short loc_2EC

loc_2D6:                                ; CODE XREF: cseg01:02C7↑j
                dec     bx
                jz      short loc_2EC
                cmp     byte ptr [bp+6], 0
                jnz     short loc_2EC
                mov     dl, [bp+8]
                mov     cx, [bp+0Ah]
                xchg    bx, di
                call    sub_1A8
                xchg    di, bx

loc_2EC:                                ; CODE XREF: cseg01:02D4↑j
                                        ; cseg01:02D7↑j ...
                cmp     di, [bp+0Ah]
                jnz     short loc_2F4
                mov     al, 30h ; '0'
                stosb

loc_2F4:                                ; CODE XREF: cseg01:02EF↑j
                jmp     short loc_361
; ---------------------------------------------------------------------------

loc_2F6:                                ; CODE XREF: cseg01:0281↑j
                                        ; cseg01:0286↑j ...
                lods    word ptr ss:[si]
                stosb
                mov     al, 2Eh ; '.'
                or      ah, ah
                jnz     short loc_308
                cmp     byte ptr [bp+6], 0
                jz      short loc_325
                stosb
                jmp     short loc_325
; ---------------------------------------------------------------------------

loc_308:                                ; CODE XREF: cseg01:02FD↑j
                stosb
                mov     al, ah

loc_30B:                                ; CODE XREF: cseg01:0310↓j
                stosb
                lods    byte ptr ss:[si]
                or      al, al
                jnz     short loc_30B
                cmp     byte ptr [bp+6], 0
                jnz     short loc_325
                mov     dl, [bp+8]
                mov     cx, [bp+0Ah]
                xchg    bx, di
                call    sub_1A8
                xchg    di, bx

loc_325:                                ; CODE XREF: cseg01:0303↑j
                                        ; cseg01:0306↑j ...
                mov     al, 20h ; ' '
                and     al, [bp+8]
                or      al, 45h
                stosb
                mov     ax, 2D2Bh
                dec     bx
                jge     short loc_337
                xchg    al, ah
                neg     bx

loc_337:                                ; CODE XREF: cseg01:0331↑j
                stosb
                xchg    ax, bx
                mov     cx, 3030h
                cmp     ax, 63h ; 'c'
                jbe     short loc_35A
                cmp     ax, 3E7h
                jbe     short loc_350
                cwd
                mov     bx, 3E8h
                div     bx
                add     al, cl
                stosb
                xchg    ax, dx

loc_350:                                ; CODE XREF: cseg01:0344↑j
                mov     bl, 64h ; 'd'
                div     bl
                add     al, cl
                stosb
                xchg    al, ah
                cbw

loc_35A:                                ; CODE XREF: cseg01:033F↑j
                mov     bl, 0Ah
                div     bl
                add     ax, cx
                stosw

loc_361:                                ; CODE XREF: cseg01:0255↑j
                                        ; cseg01:0267↑j ...
                xor     al, al
                stosb
                pop     es
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                mov     sp, bp
                pop     bp
                retn    10h
; ---------------------------------------------------------------------------
                push    bp
                mov     bp, sp
                push    ds
                mov     ax, seg dseg20
                mov     ds, ax
                assume ds:dseg20
                pop     ds
                assume ds:dseg21
                pop     bp
                retn

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_37A         proc near               ; CODE XREF: cseg01:022F↑p

var_10          = tbyte ptr -10h
var_6           = word ptr -6
var_4           = word ptr -4
var_2           = word ptr -2
arg_0           = word ptr  4
arg_2           = dword ptr  6
arg_6           = dword ptr  0Ah
arg_A           = word ptr  0Eh
arg_C           = dword ptr  10h

                push    bp
                mov     bp, sp
                sub     sp, 10h
                push    si
                push    di
                push    ds
                mov     ax, seg dseg20
                mov     ds, ax
                assume ds:dseg20
                mov     [bp+var_2], 8000h
                mov     [bp+var_4], 0Ah
                push    es
                les     di, [bp+arg_C]
                mov     ax, 7FFFh
                mov     bx, [bp+arg_0]
                mov     cx, es:[bx+di]
                and     [bp+var_2], cx
                and     es:[bx+di], ax
                shr     bx, 1
                shr     bx, 1
                shl     bx, 1
                jmp     cs:off_3B0[bx]
; ---------------------------------------------------------------------------
off_3B0         dw offset loc_3B6       ; DATA XREF: sub_37A+31↑r
                dw offset loc_3BC
                dw offset loc_3C2
; ---------------------------------------------------------------------------

loc_3B6:                                ; CODE XREF: sub_37A+31↑j
                                        ; DATA XREF: sub_37A:off_3B0↑o
                wait
                fld     dword ptr es:[di]
                jmp     short loc_3D3
; ---------------------------------------------------------------------------

loc_3BC:                                ; CODE XREF: sub_37A+31↑j
                                        ; DATA XREF: sub_37A+38↑o
                wait
                fld     qword ptr es:[di]
                jmp     short loc_3D3
; ---------------------------------------------------------------------------

loc_3C2:                                ; CODE XREF: sub_37A+31↑j
                                        ; DATA XREF: sub_37A+3A↑o
                and     ax, es:[di+8]
                cmp     ax, 7FFFh
                jz      short loc_3CF
                and     byte ptr es:[di], 0F0h

loc_3CF:                                ; CODE XREF: sub_37A+4F↑j
                wait
                fld     tbyte ptr es:[di]

loc_3D3:                                ; CODE XREF: sub_37A+40↑j
                                        ; sub_37A+46↑j
                xor     bx, bx
                shl     cx, 1
                rcl     bx, 1
                les     di, [bp+arg_6]
                mov     es:[di], bx
                wait
                fxam
                fstsw   [bp+var_6]
                nop
                wait
                mov     ax, [bp+var_6]
                and     ah, 47h
                cmp     ah, 40h ; '@'
                jz      short loc_409
                cmp     ah, 5
                jz      short loc_404
                cmp     ah, 1
                jz      short loc_3FF
                jmp     short loc_42F
; ---------------------------------------------------------------------------

loc_3FF:                                ; CODE XREF: sub_37A+81↑j
                mov     dx, 7FFEh
                jmp     short loc_429
; ---------------------------------------------------------------------------

loc_404:                                ; CODE XREF: sub_37A+7C↑j
                mov     dx, 7FFFh
                jmp     short loc_429
; ---------------------------------------------------------------------------

loc_409:                                ; CODE XREF: sub_37A+77↑j
                                        ; sub_37A+E8↓j ...
                mov     dx, 1
                mov     al, 30h ; '0'
                mov     cx, [bp+arg_A]
                or      cx, cx
                jg      short loc_418
                neg     cx
                inc     cx

loc_418:                                ; CODE XREF: sub_37A+99↑j
                cmp     cx, 28h ; '('
                jbe     short loc_420
                mov     cx, 28h ; '('

loc_420:                                ; CODE XREF: sub_37A+A1↑j
                cld
                les     di, [bp+arg_2]
                rep stosb
                xor     al, al
                stosb

loc_429:                                ; CODE XREF: sub_37A+88↑j
                                        ; sub_37A+8D↑j
                wait
                fstp    st
                jmp     loc_574
; ---------------------------------------------------------------------------

loc_42F:                                ; CODE XREF: sub_37A+83↑j
                wait
                fld     st
                wait
                fstp    [bp+var_10]
                nop
                wait
                mov     ax, word ptr [bp+var_10+8]
                sub     ax, 3FFFh
                mov     dx, 4D10h
                imul    dx
                xchg    ax, bx
                mov     ah, 4Dh ; 'M'
                mov     al, byte ptr [bp+var_10+7]
                shl     al, 1
                mul     ah
                add     ax, bx
                adc     dx, 0
                neg     ax
                adc     dx, 0
                mov     ax, [bp+arg_A]
                or      ax, ax
                jg      short loc_464
                neg     ax
                add     ax, dx
                jl      short loc_409

loc_464:                                ; CODE XREF: sub_37A+E2↑j
                cmp     ax, 12h
                jle     short loc_46C
                mov     ax, 12h

loc_46C:                                ; CODE XREF: sub_37A+ED↑j
                mov     bx, ax
                sub     ax, dx

loc_470:                                ; CODE XREF: sub_37A+116↓j
                                        ; sub_37A+11E↓j
                jz      short loc_49A
                mov     si, ax
                jge     short loc_478
                neg     ax

loc_478:                                ; CODE XREF: sub_37A+FA↑j
                cmp     ax, 1344h
                jle     short loc_480
                mov     ax, 1344h

loc_480:                                ; CODE XREF: sub_37A+101↑j
                push    ax
                nop
                push    cs
                call    near ptr sub_662
                pop     ax
                or      si, si
                jg      short loc_492
                wait
                fdivp   st(1), st
                add     ax, si
                jmp     short loc_470
; ---------------------------------------------------------------------------

loc_492:                                ; CODE XREF: sub_37A+10F↑j
                wait
                fmulp   st(1), st
                xchg    ax, si
                sub     ax, si
                jmp     short loc_470
; ---------------------------------------------------------------------------

loc_49A:                                ; CODE XREF: sub_37A:loc_470↑j
                push    bx
                nop
                push    cs
                call    near ptr sub_662
                pop     ax
                wait
                fcomp   st(1)
                fstsw   [bp+var_6]
                nop
                wait
                test    byte ptr [bp+var_6+1], 45h
                jz      short loc_4C4
                inc     dx
                inc     bx
                cmp     bx, 12h
                ja      short loc_4BD
                cmp     [bp+arg_A], 0
                jle     short loc_4EA

loc_4BD:                                ; CODE XREF: sub_37A+13B↑j
                wait
                fidiv   [bp+var_4]
                dec     bx
                jmp     short loc_4EA
; ---------------------------------------------------------------------------

loc_4C4:                                ; CODE XREF: sub_37A+134↑j
                mov     ax, bx
                dec     ax
                push    ax
                nop
                push    cs
                call    near ptr sub_662
                pop     ax
                wait
                fcomp   st(1)
                fstsw   [bp+var_6]
                nop
                wait
                test    byte ptr [bp+var_6+1], 41h
                jnz     short loc_4EA
                dec     dx
                dec     bx
                cmp     [bp+arg_A], 0
                jle     short loc_4EA
                wait
                fimul   [bp+var_4]
                inc     bx

loc_4EA:                                ; CODE XREF: sub_37A+141↑j
                                        ; sub_37A+148↑j ...
                or      bx, bx
                jl      short loc_513
                wait
                frndint
                wait
                fbstp   [bp+var_10]
                les     di, [bp+arg_2]
                add     di, bx
                push    di
                xor     al, al
                std
                stosb
                lea     si, [bp+var_10]
                mov     cx, 4
                nop
                wait
                or      bx, bx
                jnz     short loc_51A
                mov     ch, ss:[si]
                xor     ch, 1
                jz      short loc_535

loc_513:                                ; CODE XREF: sub_37A+172↑j
                wait
                fldz
                pop     di
                jmp     loc_409
; ---------------------------------------------------------------------------

loc_51A:                                ; CODE XREF: sub_37A+18F↑j
                                        ; sub_37A+1B9↓j
                mov     al, ss:[si]
                inc     si
                mov     ah, al
                shr     ah, cl
                and     al, 0Fh
                add     ax, 3030h
                stosb
                or      ch, al
                dec     bx
                jz      short loc_535
                mov     al, ah
                stosb
                or      ch, al
                dec     bx
                jnz     short loc_51A

loc_535:                                ; CODE XREF: sub_37A+197↑j
                                        ; sub_37A+1B1↑j
                pop     bx
                and     ch, 0Fh
                jnz     short loc_54C
                inc     dx
                cmp     [bp+arg_A], 0
                jg      short loc_546
                mov     byte ptr es:[bx], 30h ; '0'

loc_546:                                ; CODE XREF: sub_37A+1C6↑j
                inc     bx
                mov     byte ptr es:[di+1], 31h ; '1'

loc_54C:                                ; CODE XREF: sub_37A+1BF↑j
                mov     cx, [bp+arg_A]
                or      cx, cx
                jg      short loc_557
                neg     cx
                add     cx, dx

loc_557:                                ; CODE XREF: sub_37A+1D7↑j
                cmp     cx, 28h ; '('
                jbe     short loc_55F
                mov     cx, 28h ; '('

loc_55F:                                ; CODE XREF: sub_37A+1E0↑j
                mov     byte ptr es:[bx], 0
                mov     ax, bx
                sub     ax, word ptr [bp+arg_2]
                sub     cx, ax
                jbe     short loc_574

loc_56C:                                ; CODE XREF: sub_37A+1F8↓j
                mov     word ptr es:[bx], 30h ; '0'
                inc     bx
                loop    loc_56C

loc_574:                                ; CODE XREF: sub_37A+B2↑j
                                        ; sub_37A+1F0↑j
                cld
                les     di, [bp+arg_C]
                mov     bx, [bp+arg_0]
                mov     cx, [bp+var_2]
                or      es:[bx+di], cx
                pop     es
                mov     ax, dx
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                mov     sp, bp
                pop     bp
                retn    10h
sub_37A         endp ; sp-analysis failed


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_58D         proc near               ; CODE XREF: sub_662+C↓p

arg_0           = word ptr  4

                push    bp
                mov     bp, sp
                push    si
                push    ds
                mov     ax, seg dseg20
                mov     ds, ax
                assume ds:dseg20
                mov     ax, seg dseg20
                mov     ds, ax
                mov     ax, [bp+arg_0]
                cmp     ax, 0ECBCh
                jge     short loc_5AA
                wait
                fldz
                jmp     loc_65C
; ---------------------------------------------------------------------------

loc_5AA:                                ; CODE XREF: sub_58D+15↑j
                cmp     ax, 1344h
                jle     short loc_5B7
                wait
                fld     flt_2B2CC
                jmp     loc_65C
; ---------------------------------------------------------------------------

loc_5B7:                                ; CODE XREF: sub_58D+20↑j
                or      ax, ax
                jnz     short loc_5C1
                wait
                fld1
                jmp     loc_65C
; ---------------------------------------------------------------------------

loc_5C1:                                ; CODE XREF: sub_58D+2C↑j
                or      ax, ax
                jge     short loc_5C7
                neg     ax

loc_5C7:                                ; CODE XREF: sub_58D+36↑j
                mov     si, 7
                and     si, ax
                shl     si, 1
                shl     si, 1
                wait
                fld     dword ptr [si+0]
                shr     ax, 1
                shr     ax, 1
                shr     ax, 1
                shr     ax, 1
                jnb     short loc_5E4
                wait
                fmul    flt_2B270

loc_5E4:                                ; CODE XREF: sub_58D+50↑j
                jnz     short loc_5E8
                jmp     short loc_651
; ---------------------------------------------------------------------------

loc_5E8:                                ; CODE XREF: sub_58D:loc_5E4↑j
                shr     ax, 1
                jnb     short loc_5F1
                wait
                fmul    dbl_2B274

loc_5F1:                                ; CODE XREF: sub_58D+5D↑j
                shr     ax, 1
                jnb     short loc_5FD
                wait
                fld     tbyte_2B27C
                wait
                fmulp   st(1), st

loc_5FD:                                ; CODE XREF: sub_58D+66↑j
                shr     ax, 1
                jnb     short loc_609
                wait
                fld     tbyte_2B286
                wait
                fmulp   st(1), st

loc_609:                                ; CODE XREF: sub_58D+72↑j
                shr     ax, 1
                jnb     short loc_615
                wait
                fld     tbyte_2B290
                wait
                fmulp   st(1), st

loc_615:                                ; CODE XREF: sub_58D+7E↑j
                shr     ax, 1
                jnb     short loc_621
                wait
                fld     tbyte_2B29A
                wait
                fmulp   st(1), st

loc_621:                                ; CODE XREF: sub_58D+8A↑j
                shr     ax, 1
                jnb     short loc_62D
                wait
                fld     tbyte_2B2A4
                wait
                fmulp   st(1), st

loc_62D:                                ; CODE XREF: sub_58D+96↑j
                shr     ax, 1
                jnb     short loc_639
                wait
                fld     tbyte_2B2AE
                wait
                fmulp   st(1), st

loc_639:                                ; CODE XREF: sub_58D+A2↑j
                shr     ax, 1
                jnb     short loc_645
                wait
                fld     tbyte_2B2B8
                wait
                fmulp   st(1), st

loc_645:                                ; CODE XREF: sub_58D+AE↑j
                shr     ax, 1
                jnb     short loc_651
                wait
                fld     tbyte_2B2C2
                wait
                fmulp   st(1), st

loc_651:                                ; CODE XREF: sub_58D+59↑j
                                        ; sub_58D+BA↑j
                test    byte ptr [bp+arg_0+1], 80h
                jz      short loc_65C
                wait
                fdivr   flt_2B250

loc_65C:                                ; CODE XREF: sub_58D+1A↑j
                                        ; sub_58D+27↑j ...
                pop     ds
                assume ds:dseg21
                pop     si
                pop     bp
                retn    2
sub_58D         endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_662         proc far                ; CODE XREF: sub_37A+109↑p
                                        ; sub_37A+123↑p ...

arg_0           = word ptr  6

                push    bp
                mov     bp, sp
                push    ds
                mov     ax, seg dseg21
                mov     ds, ax
                push    [bp+arg_0]
                call    sub_58D
                pop     ds
                pop     bp
                retf
sub_662         endp

; ---------------------------------------------------------------------------
                align 10h
cseg01          ends

; Segment Number    : 2
; Alloc Size        : 34C7h
; Offset in the file: 0C00h  Length: 34C7h
; Attributes  (0D00): CODE Relocations DPL: 3
; ===========================================================================

; Segment type: Pure code
cseg02          segment para public 'CODE' use16
                assume cs:cseg02
                assume es:nothing, ss:nothing, ds:dseg21, fs:nothing, gs:nothing

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_680         proc far                ; CODE XREF: sub_2D88+142↓p
                                        ; sub_12E92+688↓P ...

arg_0           = word ptr  6
arg_2           = word ptr  8

                push    bp
                mov     bp, sp
                push    si
                push    ds
                mov     ax, seg dseg10
                mov     ds, ax
                assume ds:dseg10
                xor     si, si
                jmp     short loc_6E2
; ---------------------------------------------------------------------------

loc_68E:                                ; CODE XREF: sub_680+6C↓j
                push    [bp+arg_2]
                push    [bp+arg_0]
                call    STRLEN          ; size_t strlen(const char* str);
                add     sp, 4
                cmp     ax, 2
                jbe     short loc_6C3
                mov     ax, si
                imul    ax, 1Eh
                add     ax, 156h
                push    seg dseg19
                push    ax
                push    [bp+arg_2]
                push    [bp+arg_0]
                call    SAMETO          ; int match=sameto(char *shorts, char *longs);
                add     sp, 8
                or      ax, ax
                jz      short loc_6C3

loc_6BF:                                ; CODE XREF: sub_680+5F↓j
                mov     ax, si
                jmp     short loc_6F1
; ---------------------------------------------------------------------------

loc_6C3:                                ; CODE XREF: sub_680+1F↑j
                                        ; sub_680+3D↑j
                mov     ax, si
                imul    ax, 1Eh
                add     ax, 156h
                push    seg dseg19
                push    ax
                push    [bp+arg_2]
                push    [bp+arg_0]
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jnz     short loc_6BF
                inc     si

loc_6E2:                                ; CODE XREF: sub_680+C↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     es:word_2AEC5, si
                jg      short loc_68E
                mov     ax, 0FFFFh

loc_6F1:                                ; CODE XREF: sub_680+41↑j
                pop     ds
                assume ds:dseg21
                pop     si
                pop     bp
                retf
sub_680         endp

;
; External Entry #2 into the Module
; Attributes (0003): Fixed Exported Shared dataseg
;

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

                public _INIT__MUTANTS
_INIT__MUTANTS  proc far

var_CE          = word ptr -0CEh
var_9C          = word ptr -9Ch
var_1A          = word ptr -1Ah
var_18          = word ptr -18h
var_16          = word ptr -16h
var_14          = word ptr -14h
var_12          = word ptr -12h
var_10          = word ptr -10h
var_E           = word ptr -0Eh
var_C           = word ptr -0Ch
var_A           = word ptr -0Ah
var_8           = word ptr -8
var_6           = word ptr -6
var_4           = word ptr -4
var_2           = word ptr -2

                enter   0CEh, 0         ; MJWMUT_2
                push    si
                push    di
                push    ds
                mov     ax, seg dseg10
                mov     ds, ax
                assume ds:dseg10
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29778, 0FFFFh
                push    19h
                push    ds
                push    offset aMjwmutMdf ; "MJWMUT.MDF"
                call    GMDNAM          ; char *gmdnam(char *mdfnam);
                add     sp, 4
                push    dx
                push    ax
                push    ds
                push    offset unk_217B0
                call    STZCPY          ; stzcpy(char *dest, char *source, int nbytes);
                add     sp, 0Ah
                push    ds
                push    offset unk_217B0
                call    REGISTER_MODULE ; int register_module(struct module *mod);
                add     sp, 4
                mov     dx, seg dseg19
                mov     es, dx
                mov     es:word_2AEB5, ax
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                mov     word ptr es:USRNUM, 0FFFFh ; int usrnum;
                push    0
                push    0
                call    TIME            ; time_t time (time_t* timer);
                add     sp, 4
                push    ax
                call    SRAND           ; void srand (unsigned int seed);
                pop     cx
                push    ds
                push    offset aMjwmutxMcv ; "MJWMUTX.MCV"
                call    OPNMSG          ; FILE *mbkprt=opnmsg(char *fileName)
                add     sp, 4
                mov     bx, seg dseg19
                mov     es, bx
                assume es:dseg19
                mov     es:word_29864, dx
                mov     es:word_29862, ax
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29864
                push    es:word_29862
                call    SETMBK          ; FILE *setmbk(mbkptr);
                add     sp, 4
                push    270Fh
                push    64h ; 'd'
                push    17h
                call    NUMOPT          ; int numopt(int msgnum,int floor,int ceiling);
                add     sp, 6
                mov     dx, seg dseg19
                mov     es, dx
                mov     es:word_29A20, ax
                push    word_218A7
                push    word_218A5
                push    word_218A3
                push    word_218A1
                push    19h
                call    LNGOPT          ; long lngopt(int msgnum,long floor,long ceiling);
                add     sp, 0Ah
                mov     bx, seg dseg19
                mov     es, bx
                mov     es:word_29A2A, dx
                mov     es:word_29A28, ax
                push    word_218A7
                push    word_218A5
                push    word_218A3
                push    word_218A1
                push    1Ah
                call    LNGOPT          ; long lngopt(int msgnum,long floor,long ceiling);
                add     sp, 0Ah
                mov     bx, seg dseg19
                mov     es, bx
                mov     es:word_29A26, dx
                mov     es:word_29A24, ax
                push    3E8h
                push    0FC18h
                push    1Bh
                call    NUMOPT          ; int numopt(int msgnum,int floor,int ceiling);
                add     sp, 6
                mov     dx, seg dseg19
                mov     es, dx
                mov     es:word_29A2C, ax
                push    3E8h
                push    0FC18h
                push    1Ch
                call    NUMOPT          ; int numopt(int msgnum,int floor,int ceiling);
                add     sp, 6
                mov     dx, seg dseg19
                mov     es, dx
                mov     es:word_29A2E, ax
                push    32h ; '2'
                push    0
                push    18h
                call    NUMOPT          ; int numopt(int msgnum,int floor,int ceiling);
                add     sp, 6
                mov     dx, seg dseg19
                mov     es, dx
                mov     es:word_29A32, ax
                push    7D00h
                push    0
                push    2Bh ; '+'
                call    NUMOPT          ; int numopt(int msgnum,int floor,int ceiling);
                add     sp, 6
                mov     dx, seg dseg19
                mov     es, dx
                mov     es:word_29A68, ax
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29A34, 1
                push    3E8h
                push    0
                push    1Dh
                call    NUMOPT          ; int numopt(int msgnum,int floor,int ceiling);
                add     sp, 6
                mov     dx, seg dseg19
                mov     es, dx
                mov     es:word_29A36, ax
                push    64h ; 'd'
                push    0
                push    1Eh
                call    NUMOPT          ; int numopt(int msgnum,int floor,int ceiling);
                add     sp, 6
                mov     dx, seg dseg19
                mov     es, dx
                mov     es:word_29A3C, ax
                push    word_218A7
                push    word_218A5
                push    word_218A3
                push    word_218A1
                push    22h ; '"'
                call    LNGOPT          ; long lngopt(int msgnum,long floor,long ceiling);
                add     sp, 0Ah
                mov     bx, seg dseg19
                mov     es, bx
                mov     es:word_29A54, dx
                mov     es:word_29A52, ax
                push    word_218A7
                push    word_218A5
                push    word_218A3
                push    word_218A1
                push    24h ; '$'
                call    LNGOPT          ; long lngopt(int msgnum,long floor,long ceiling);
                add     sp, 0Ah
                mov     bx, seg dseg19
                mov     es, bx
                mov     es:word_29A58, dx
                mov     es:word_29A56, ax
                push    23h ; '#'
                call    YNOPT           ; int ynopt(int msgnum);
                pop     cx
                mov     dx, seg dseg19
                mov     es, dx
                mov     es:word_29A5C, ax
                push    16h
                call    YNOPT           ; int ynopt(int msgnum);
                pop     cx
                mov     dx, seg dseg19
                mov     es, dx
                mov     es:word_29A5A, ax
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29A6A, 0
                push    64h ; 'd'
                push    0
                push    20h ; ' '
                call    NUMOPT          ; int numopt(int msgnum,int floor,int ceiling);
                add     sp, 6
                mov     dx, seg dseg19
                mov     es, dx
                mov     es:word_29A60, ax
                push    word_218A7
                push    word_218A5
                push    word_218A3
                push    word_218A1
                push    21h ; '!'
                call    LNGOPT          ; long lngopt(int msgnum,long floor,long ceiling);
                add     sp, 0Ah
                mov     bx, seg dseg19
                mov     es, bx
                mov     es:word_29A64, dx
                mov     es:word_29A62, ax
                push    258h
                push    0FDA8h
                push    25h ; '%'
                call    NUMOPT          ; int numopt(int msgnum,int floor,int ceiling);
                add     sp, 6
                mov     dx, seg dseg19
                mov     es, dx
                mov     es:word_29A66, ax
                push    0Fh
                push    4240h
                push    0
                push    0
                push    2Ah ; '*'
                call    LNGOPT          ; long lngopt(int msgnum,long floor,long ceiling);
                add     sp, 0Ah
                mov     bx, seg dseg19
                mov     es, bx
                mov     es:word_29A6E, dx
                mov     es:word_29A6C, ax
                push    3E8h
                push    0
                push    2Ch ; ','
                call    NUMOPT          ; int numopt(int msgnum,int floor,int ceiling);
                add     sp, 6
                mov     dx, seg dseg19
                mov     es, dx
                mov     es:word_29A70, ax
                push    2710h
                push    0
                push    29h ; ')'
                call    NUMOPT          ; int numopt(int msgnum,int floor,int ceiling);
                add     sp, 6
                mov     dx, seg dseg19
                mov     es, dx
                mov     es:word_29A72, ax
                push    2Dh ; '-'
                call    YNOPT           ; int ynopt(int msgnum);
                pop     cx
                mov     dx, seg dseg19
                mov     es, dx
                mov     es:word_29A74, ax
                push    5A0h
                push    1
                push    2Eh ; '.'
                call    NUMOPT          ; int numopt(int msgnum,int floor,int ceiling);
                add     sp, 6
                mov     dx, seg dseg19
                mov     es, dx
                mov     es:word_29A76, ax
                push    4Fh ; 'O'
                push    1
                push    26h ; '&'
                call    NUMOPT          ; int numopt(int msgnum,int floor,int ceiling);
                add     sp, 6
                mov     dx, seg dseg19
                mov     es, dx
                mov     es:word_29786, ax
                push    63h ; 'c'
                push    0FF9Dh
                push    27h ; '''
                call    NUMOPT          ; int numopt(int msgnum,int floor,int ceiling);
                add     sp, 6
                mov     dx, seg dseg19
                mov     es, dx
                mov     es:word_29784, ax
                push    63h ; 'c'
                push    0FF9Dh
                push    28h ; '('
                call    NUMOPT          ; int numopt(int msgnum,int floor,int ceiling);
                add     sp, 6
                mov     dx, seg dseg19
                mov     es, dx
                mov     es:word_29782, ax
                push    14h
                push    1
                push    1Fh
                call    NUMOPT          ; int numopt(int msgnum,int floor,int ceiling);
                add     sp, 6
                mov     dx, seg dseg19
                mov     es, dx
                mov     es:word_29A3A, ax
                push    15h
                call    STGOPT          ; char *string=stgopt(int msgnum);
                pop     cx
                mov     bx, seg dseg19
                mov     es, bx
                mov     es:word_29774, dx
                mov     es:word_29772, ax
                push    96h
                push    ds
                push    offset aMjwmutrDat ; "MJWMUTR.DAT"
                nop
                push    cs
                call    near ptr sub_3B04
                add     sp, 6
                mov     bx, seg dseg19
                mov     es, bx
                mov     es:word_29884, dx
                mov     es:word_29882, ax
                push    96h
                push    ds
                push    offset aMjwmutsDat ; "MJWMUTS.DAT"
                nop
                push    cs
                call    near ptr sub_3B04
                add     sp, 6
                mov     bx, seg dseg19
                mov     es, bx
                mov     es:word_29880, dx
                mov     es:word_2987E, ax
                push    15Ch
                push    ds
                push    offset aMjwmutplDat ; "MJWMUTPL.DAT"
                nop
                push    cs
                call    near ptr sub_3B04
                add     sp, 6
                mov     bx, seg dseg19
                mov     es, bx
                mov     es:word_29888, dx
                mov     es:word_29886, ax
                push    96h
                push    ds
                push    offset aMjwmutloDat ; "MJWMUTLO.DAT"
                nop
                push    cs
                call    near ptr sub_3B04
                add     sp, 6
                mov     bx, seg dseg19
                mov     es, bx
                mov     es:word_2987C, dx
                mov     es:word_2987A, ax
                push    32h ; '2'
                push    ds
                push    offset aMjwmuthiDat ; "MJWMUTHI.DAT"
                nop
                push    cs
                call    near ptr sub_3B04
                add     sp, 6
                mov     bx, seg dseg19
                mov     es, bx
                mov     es:word_29878, dx
                mov     es:word_29876, ax
                call    sub_41C0
                push    32h ; '2'
                push    ds
                push    offset aMjwmutiDat ; "MJWMUTI.DAT"
                nop
                push    cs
                call    near ptr sub_3B04
                add     sp, 6
                mov     bx, seg dseg19
                mov     es, bx
                mov     es:word_29870, dx
                mov     es:word_2986E, ax
                push    82h
                push    ds
                push    offset aMjwmutmDat ; "MJWMUTM.DAT"
                nop
                push    cs
                call    near ptr sub_3B04
                add     sp, 6
                mov     bx, seg dseg19
                mov     es, bx
                mov     es:word_29874, dx
                mov     es:word_29872, ax
                mov     ax, seg NTERMS
                mov     es, ax
                assume es:nothing
                mov     ax, word ptr es:NTERMS ; int nterms;
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     es:word_2AED1, ax
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:word_2AED1
                mov     dx, seg dseg19
                mov     es, dx
                add     ax, es:word_29A20
                mov     dx, seg dseg19
                mov     es, dx
                mov     es:word_2AECF, ax
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:word_2AED1
                mov     dx, seg dseg19
                mov     es, dx
                mov     es:word_2AECD, ax
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:word_29A20
                shl     ax, 1
                push    ax
                call    ALCZER          ; char *alczer(unsigned nbytes);
                pop     cx
                mov     bx, seg dseg19
                mov     es, bx
                mov     word ptr es:dword_2B234+2, dx
                mov     word ptr es:dword_2B234, ax
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_2B232, 0
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_2977E, 0
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_2977C, 0
                mov     es:word_2977A, 0
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_2985E, 0BCh
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:word_2AECF
                inc     ax
                mov     [bp+var_16], ax
                mov     bx, 0BCh
                xor     dx, dx
                div     bx
                mov     di, ax
                mov     ax, [bp+var_16]
                mov     bx, 0BCh
                xor     dx, dx
                div     bx
                or      dx, dx
                jz      short loc_BDE
                inc     di

loc_BDE:                                ; CODE XREF: _INIT__MUTANTS+4E6↑j
                mov     ax, di
                shl     ax, 2
                push    ax
                call    ALCMEM          ; char *alcmem(unsigned size);
                pop     cx
                mov     bx, seg dseg19
                mov     es, bx
                mov     word ptr es:dword_2985A+2, dx
                mov     word ptr es:dword_2985A, ax
                mov     [bp+var_8], 0
                cmp     [bp+var_8], di
                jge     short loc_C37

loc_C02:                                ; CODE XREF: _INIT__MUTANTS+540↓j
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:word_2985E
                imul    ax, 15Ch
                push    ax
                call    ALCZER          ; char *alczer(unsigned nbytes);
                pop     cx
                mov     bx, [bp+var_8]
                shl     bx, 2
                mov     cx, seg dseg19
                mov     es, cx
                les     si, es:dword_2985A
                assume es:nothing
                add     si, bx
                mov     es:[si+2], dx
                mov     es:[si], ax
                inc     [bp+var_8]
                cmp     [bp+var_8], di
                jl      short loc_C02

loc_C37:                                ; CODE XREF: _INIT__MUTANTS+50B↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:word_29858, 36h ; '6'
                mov     bx, 36h ; '6'
                mov     ax, 51h ; 'Q'
                xor     dx, dx
                div     bx
                mov     di, ax
                mov     bx, 36h ; '6'
                mov     ax, 51h ; 'Q'
                xor     dx, dx
                div     bx
                or      dx, dx
                jz      short loc_C5E
                inc     di

loc_C5E:                                ; CODE XREF: _INIT__MUTANTS+566↑j
                mov     ax, di
                shl     ax, 2
                push    ax
                call    ALCMEM          ; char *alcmem(unsigned size);
                pop     cx
                mov     bx, seg dseg19
                mov     es, bx
                mov     word ptr es:dword_29854+2, dx
                mov     word ptr es:dword_29854, ax
                mov     [bp+var_8], 0
                cmp     [bp+var_8], di
                jge     short loc_CB7

loc_C82:                                ; CODE XREF: _INIT__MUTANTS+5C0↓j
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:word_29858
                imul    ax, 4B2h
                push    ax
                call    ALCZER          ; char *alczer(unsigned nbytes);
                pop     cx
                mov     bx, [bp+var_8]
                shl     bx, 2
                mov     cx, seg dseg19
                mov     es, cx
                les     si, es:dword_29854
                assume es:nothing
                add     si, bx
                mov     es:[si+2], dx
                mov     es:[si], ax
                inc     [bp+var_8]
                cmp     [bp+var_8], di
                jl      short loc_C82

loc_CB7:                                ; CODE XREF: _INIT__MUTANTS+58B↑j
                mov     [bp+var_8], 0

loc_CBC:                                ; CODE XREF: _INIT__MUTANTS+605↓j
                xor     di, di

loc_CBE:                                ; CODE XREF: _INIT__MUTANTS+5E8↓j
                push    [bp+var_8]
                call    sub_1A075
                pop     cx
                mov     bx, di
                shl     bx, 1
                add     ax, bx
                mov     bx, ax
                mov     es, dx
                mov     word ptr es:[bx+320h], 0FC1Ah
                inc     di
                cmp     di, 0C8h
                jl      short loc_CBE
                push    [bp+var_8]
                call    sub_1A075
                pop     cx
                mov     bx, ax
                mov     es, dx
                mov     word ptr es:[bx+4B0h], 0
                inc     [bp+var_8]
                cmp     [bp+var_8], 50h ; 'P'
                jl      short loc_CBC
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_29884
                push    es:word_29882
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                mov     [bp+var_8], 0

loc_D18:                                ; CODE XREF: _INIT__MUTANTS+674↓j
                mov     ax, seg dseg19
                mov     dx, [bp+var_8]
                mov     es, ax
                mov     es:word_29788, dx
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_2978A, 270Fh
                push    0Ah
                push    3
                push    seg dseg19
                push    offset word_29788
                push    seg dseg19
                push    offset byte_29BDE
                call    GETBTV          ; void getbtv(char *recptr, char *key, int keynum, int getopt);
                add     sp, 0Ch
                mov     bx, [bp+var_8]
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                mov     dx, es:word_29BEA
                mov     es, ax
                mov     es:[bx+149Ch], dx
                inc     [bp+var_8]
                cmp     [bp+var_8], 50h ; 'P'
                jl      short loc_D18
                mov     [bp+var_8], 0
                jmp     short loc_D9D
; ---------------------------------------------------------------------------

loc_D72:                                ; CODE XREF: _INIT__MUTANTS+6B4↓j
                push    [bp+var_8]
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                mov     word ptr es:[bx+0D6h], 0
                push    [bp+var_8]
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                mov     word ptr es:[bx+0DAh], 0
                inc     [bp+var_8]

loc_D9D:                                ; CODE XREF: _INIT__MUTANTS+67B↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_2AECF
                cmp     ax, [bp+var_8]
                jg      short loc_D72
                mov     ax, seg NTERMS
                mov     es, ax
                assume es:nothing
                mov     si, word ptr es:NTERMS ; int nterms;
                inc     si
                imul    si, 64h ; 'd'
                mov     ax, si
                push    ax
                call    ALCMEM          ; char *alcmem(unsigned size);
                pop     cx
                mov     bx, seg dseg19
                mov     es, bx
                assume es:dseg19
                mov     word ptr es:dword_29C74+2, dx
                mov     word ptr es:dword_29C74, ax
                push    0
                push    si
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:dword_29C74+2
                push    word ptr es:dword_29C74
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                mov     ax, seg NTERMS
                mov     es, ax
                assume es:nothing
                mov     si, word ptr es:NTERMS ; int nterms;
                inc     si
                shl     si, 1
                mov     ax, si
                push    ax
                call    ALCMEM          ; char *alcmem(unsigned size);
                pop     cx
                mov     bx, seg dseg19
                mov     es, bx
                assume es:dseg19
                mov     word ptr es:dword_2988A+2, dx
                mov     word ptr es:dword_2988A, ax
                push    0
                push    si
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:dword_2988A+2
                push    word ptr es:dword_2988A
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29884
                push    es:word_29882
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_2AEC9, 0
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_2AEBF, 0
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29A30, 0
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29874
                push    es:word_29872
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    3Fh ; '?'
                push    0
                push    0
                push    0
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jz      short loc_EA7
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    ss
                lea     ax, [bp+var_9C]
                push    ax
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                jmp     short loc_EB3
; ---------------------------------------------------------------------------

loc_EA7:                                ; CODE XREF: _INIT__MUTANTS+797↑j
                push    ds
                push    offset aNoMonstersOnFi ; "NO MONSTERS ON FILE"
                call    CATASTRO        ; catastro(char * ctlstg, TYPE pl, TYPE p2,...,pn)
                add     sp, 4

loc_EB3:                                ; CODE XREF: _INIT__MUTANTS+7B0↑j
                mov     ax, seg dseg19
                mov     dx, [bp+var_9C]
                mov     es, ax
                mov     es:word_2AEBD, dx
                mov     ax, seg dseg19
                mov     es, ax
                inc     es:word_2AEBD
                mov     ax, seg dseg19
                mov     es, ax
                mov     si, es:word_2AEBD
                inc     si
                imul    si, 82h
                mov     ax, si
                push    ax
                call    ALCMEM          ; char *alcmem(unsigned size);
                pop     cx
                mov     bx, seg dseg19
                mov     es, bx
                mov     word ptr es:dword_29BD6+2, dx
                mov     word ptr es:dword_29BD6, ax
                push    0
                push    si
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:dword_29BD6+2
                push    word ptr es:dword_29BD6
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                mov     [bp+var_12], 0
                mov     [bp+var_14], 0
                push    37h ; '7'
                push    0
                push    ss
                lea     ax, [bp+var_14]
                push    ax
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jz      short loc_F64
                xor     di, di

loc_F2C:                                ; CODE XREF: _INIT__MUTANTS+86B↓j
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                mov     ax, di
                imul    ax, 82h
                mov     dx, seg dseg19
                mov     es, dx
                mov     dx, word ptr es:dword_29BD6
                add     dx, ax
                push    word ptr es:dword_29BD6+2
                push    dx
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                inc     di
                push    38h ; '8'
                call    QNPBTV          ; int qnpbtv (int getopt);
                pop     cx
                or      ax, ax
                jnz     short loc_F2C
                jmp     short loc_F70
; ---------------------------------------------------------------------------

loc_F64:                                ; CODE XREF: _INIT__MUTANTS+833↑j
                push    ds
                push    offset aCannotFindFirs ; "CANNOT FIND FIRST MONSTER RECORD"
                call    CATASTRO        ; catastro(char * ctlstg, TYPE pl, TYPE p2,...,pn)
                add     sp, 4

loc_F70:                                ; CODE XREF: _INIT__MUTANTS+86D↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29870
                push    es:word_2986E
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    3Fh ; '?'
                push    0
                push    0
                push    0
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jz      short loc_FB4
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    ss
                lea     ax, [bp+var_CE]
                push    ax
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                jmp     short loc_FC0
; ---------------------------------------------------------------------------

loc_FB4:                                ; CODE XREF: _INIT__MUTANTS+8A4↑j
                push    ds
                push    offset aNoItemsOnFile ; "NO ITEMS ON FILE"
                call    CATASTRO        ; catastro(char * ctlstg, TYPE pl, TYPE p2,...,pn)
                add     sp, 4

loc_FC0:                                ; CODE XREF: _INIT__MUTANTS+8BD↑j
                mov     ax, seg dseg19
                mov     dx, [bp+var_CE]
                mov     es, ax
                mov     es:word_2AEBB, dx
                mov     ax, seg dseg19
                mov     es, ax
                inc     es:word_2AEBB
                mov     ax, seg dseg19
                mov     es, ax
                mov     si, es:word_2AEBB
                imul    si, 32h ; '2'
                mov     ax, si
                push    ax
                call    ALCMEM          ; char *alcmem(unsigned size);
                pop     cx
                mov     bx, seg dseg19
                mov     es, bx
                mov     word ptr es:dword_29BDA+2, dx
                mov     word ptr es:dword_29BDA, ax
                push    0
                push    si
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:dword_29BDA+2
                push    word ptr es:dword_29BDA
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                mov     [bp+var_12], 0
                mov     [bp+var_14], 0
                push    37h ; '7'
                push    0
                push    ss
                lea     ax, [bp+var_14]
                push    ax
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jz      short loc_106E
                xor     di, di

loc_1037:                               ; CODE XREF: _INIT__MUTANTS+975↓j
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                mov     ax, di
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                push    word ptr es:dword_29BDA+2
                push    dx
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                inc     di
                push    38h ; '8'
                call    QNPBTV          ; int qnpbtv (int getopt);
                pop     cx
                or      ax, ax
                jnz     short loc_1037
                jmp     short loc_107A
; ---------------------------------------------------------------------------

loc_106E:                               ; CODE XREF: _INIT__MUTANTS+93E↑j
                push    ds
                push    offset aCannotFindFirs_0 ; "CANNOT FIND FIRST ITEM RECORD"
                call    CATASTRO        ; catastro(char * ctlstg, TYPE pl, TYPE p2,...,pn)
                add     sp, 4

loc_107A:                               ; CODE XREF: _INIT__MUTANTS+977↑j
                xor     cx, cx
                xor     di, di
                jmp     short loc_10CA
; ---------------------------------------------------------------------------

loc_1080:                               ; CODE XREF: _INIT__MUTANTS+9DF↓j
                mov     ax, di
                imul    ax, 32h ; '2'
                mov     [bp+var_18], ax
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29BDA
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+1Ch], 7
                jnz     short loc_10C9
                mov     bx, cx
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:[bx+159Eh], di
                mov     bx, cx
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                les     si, es:dword_29BDA
                assume es:nothing
                add     si, [bp+var_18]
                mov     dx, es:[si+1Eh]
                mov     es, ax
                assume es:dseg19
                mov     es:[bx+1666h], dx
                inc     cx

loc_10C9:                               ; CODE XREF: _INIT__MUTANTS+9A4↑j
                inc     di

loc_10CA:                               ; CODE XREF: _INIT__MUTANTS+989↑j
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AEBB, di
                jg      short loc_1080
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29A1E, cx
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29780, 1
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29776, 0
                push    ds
                push    offset aRb      ; "rb"
                push    ds
                push    offset aMjwmutIxx ; "MJWMUT.IXX"
                call    F_OPEN          ; file* fopen(const char* filename, USE);
                add     sp, 8
                mov     [bp+var_2], dx
                mov     [bp+var_4], ax
                or      ax, dx
                jnz     short loc_111E
                push    ds
                push    offset aMutantsCannotF ; "MUTANTS: Cannot find MUTMAP.IXX"
                call    CATASTRO        ; catastro(char * ctlstg, TYPE pl, TYPE p2,...,pn)
                add     sp, 4

loc_111E:                               ; CODE XREF: _INIT__MUTANTS+A1B↑j
                mov     [bp+var_A], 0
                mov     [bp+var_8], 0
                jmp     loc_129B
; ---------------------------------------------------------------------------

loc_112B:                               ; CODE XREF: _INIT__MUTANTS+BAC↓j
                push    12Ch
                call    ALCMEM          ; char *alcmem(unsigned size);
                pop     cx
                mov     bx, [bp+var_8]
                imul    bx, 0Ah
                mov     cx, seg dseg19
                mov     es, cx
                mov     es:[bx+2BE9h], dx
                mov     es:[bx+2BE7h], ax
                push    12Ch
                call    ALCMEM          ; char *alcmem(unsigned size);
                pop     cx
                mov     bx, [bp+var_8]
                imul    bx, 0Ah
                mov     di, bx
                mov     cx, seg dseg19
                mov     es, cx
                mov     es:[bx+2BEDh], dx
                mov     es:[bx+2BEBh], ax
                mov     ax, seg dseg19
                mov     es, ax
                mov     word ptr es:[di+2BEFh], 0

loc_1175:                               ; CODE XREF: _INIT__MUTANTS+B88↓j
                                        ; _INIT__MUTANTS+B95↓j
                push    [bp+var_2]
                push    [bp+var_4]
                push    50h ; 'P'
                push    ds
                push    offset byte_217ED
                call    FGETS           ; char* fgets(char* str, int num, FILE* stream );
                add     sp, 0Ah
                or      ax, dx
                jnz     short loc_1195
                mov     [bp+var_A], 1
                jmp     loc_128D
; ---------------------------------------------------------------------------

loc_1195:                               ; CODE XREF: _INIT__MUTANTS+A96↑j
                mov     al, byte_217F5
                mov     ah, 0
                push    ax
                mov     al, byte_217F4
                mov     ah, 0
                push    ax
                mov     al, byte_217F3
                mov     ah, 0
                push    ax
                push    ds
                push    offset aCCC     ; "%c%c%c"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 0Ah
                push    dx
                push    ax
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                mov     si, ax
                cmp     si, [bp+var_8]
                jz      short loc_11C7
                jmp     loc_128D
; ---------------------------------------------------------------------------

loc_11C7:                               ; CODE XREF: _INIT__MUTANTS+ACD↑j
                mov     al, byte_217EF
                mov     ah, 0
                push    ax
                mov     al, byte_217EE
                mov     ah, 0
                push    ax
                mov     al, byte_217ED
                mov     ah, 0
                push    ax
                push    ds
                push    offset aCCC     ; "%c%c%c"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 0Ah
                push    dx
                push    ax
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                mov     bx, [bp+var_8]
                imul    bx, 0Ah
                mov     di, bx
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:[bx+2BE7h]
                assume es:nothing
                mov     dx, seg dseg19
                push    ax
                push    es
                mov     es, dx
                assume es:dseg19
                mov     ax, es:[di+2BEFh]
                shl     ax, 1
                add     bx, ax
                pop     es
                assume es:nothing
                pop     ax
                mov     es:[bx], ax
                mov     al, byte_217F2
                mov     ah, 0
                push    ax
                mov     al, byte_217F1
                mov     ah, 0
                push    ax
                mov     al, byte_217F0
                mov     ah, 0
                push    ax
                push    ds
                push    offset aCCC     ; "%c%c%c"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 0Ah
                push    dx
                push    ax
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                mov     bx, [bp+var_8]
                imul    bx, 0Ah
                mov     di, bx
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:[bx+2BEBh]
                assume es:nothing
                mov     dx, seg dseg19
                push    ax
                push    es
                mov     es, dx
                assume es:dseg19
                mov     ax, es:[di+2BEFh]
                shl     ax, 1
                add     bx, ax
                pop     es
                assume es:nothing
                pop     ax
                mov     es:[bx], ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                inc     word ptr es:[di+2BEFh]
                mov     ax, seg dseg19
                mov     es, ax
                cmp     word ptr es:[di+2BEFh], 94h
                jg      short loc_1280
                jmp     loc_1175
; ---------------------------------------------------------------------------

loc_1280:                               ; CODE XREF: _INIT__MUTANTS+B86↑j
                mov     ax, seg dseg19
                mov     es, ax
                dec     word ptr es:[di+2BEFh]
                jmp     loc_1175
; ---------------------------------------------------------------------------

loc_128D:                               ; CODE XREF: _INIT__MUTANTS+A9D↑j
                                        ; _INIT__MUTANTS+ACF↑j
                cmp     [bp+var_A], 0
                jz      short loc_1298
                mov     [bp+var_8], 50h ; 'P'

loc_1298:                               ; CODE XREF: _INIT__MUTANTS+B9C↑j
                inc     [bp+var_8]

loc_129B:                               ; CODE XREF: _INIT__MUTANTS+A33↑j
                cmp     [bp+var_8], 50h ; 'P'
                jge     short loc_12A4
                jmp     loc_112B
; ---------------------------------------------------------------------------

loc_12A4:                               ; CODE XREF: _INIT__MUTANTS+BAA↑j
                push    [bp+var_2]
                push    [bp+var_4]
                call    FCLOSE          ; int fclose(FILE* stream );
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:word_29786
                mov     [bp+var_6], ax
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:word_2AED1
                mov     [bp+var_8], ax
                jmp     loc_13B4
; ---------------------------------------------------------------------------

loc_12CD:                               ; CODE XREF: _INIT__MUTANTS+CCD↓j
                push    0
                push    8000h
                call    RAND            ; int rand (void);
                cwd
                mov     bx, [bp+var_6]
                imul    bx, 0Ah
                mov     cx, seg dseg19
                mov     es, cx
                push    ax
                mov     ax, es:[bx+2BEFh]
                push    dx
                cwd
                pop     cx
                pop     bx
                call    F_LXMUL
                push    dx
                push    ax
                call    F_LDIV
                mov     si, ax
                mov     bx, [bp+var_6]
                imul    bx, 0Ah
                mov     [bp+var_1A], bx
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:[bx+2BE7h]
                assume es:nothing
                mov     ax, si
                shl     ax, 1
                add     bx, ax
                mov     ax, es:[bx]
                mov     [bp+var_C], ax
                mov     bx, [bp+var_1A]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:[bx+2BEBh]
                assume es:nothing
                mov     ax, si
                shl     ax, 1
                add     bx, ax
                mov     ax, es:[bx]
                mov     [bp+var_E], ax
                mov     si, [bp+var_6]
                push    [bp+var_6]
                call    sub_1A633
                pop     cx
                mov     di, ax
                push    si
                call    sub_1A075
                pop     cx
                mov     bx, di
                shl     bx, 1
                add     ax, bx
                mov     bx, [bp+var_C]
                mov     es, dx
                xchg    ax, bx
                mov     es:[bx], ax
                push    si
                call    sub_1A075
                pop     cx
                mov     bx, di
                shl     bx, 1
                add     ax, bx
                mov     bx, [bp+var_E]
                mov     es, dx
                xchg    ax, bx
                mov     es:[bx+190h], ax
                push    si
                call    sub_1A075
                pop     cx
                mov     bx, di
                shl     bx, 1
                add     ax, bx
                mov     bx, [bp+var_8]
                mov     es, dx
                xchg    ax, bx
                mov     es:[bx+320h], ax
                push    [bp+var_8]
                push    si
                push    [bp+var_E]
                push    [bp+var_C]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_1E0E0
                add     sp, 6
                inc     [bp+var_6]
                cmp     [bp+var_6], 4Fh ; 'O'
                jle     short loc_13B1
                mov     [bp+var_6], 0

loc_13B1:                               ; CODE XREF: _INIT__MUTANTS+CB5↑j
                inc     [bp+var_8]

loc_13B4:                               ; CODE XREF: _INIT__MUTANTS+BD5↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_2AECF
                cmp     ax, [bp+var_8]
                jle     short loc_13C5
                jmp     loc_12CD
; ---------------------------------------------------------------------------

loc_13C5:                               ; CODE XREF: _INIT__MUTANTS+CCB↑j
                mov     [bp+var_8], 0

loc_13CA:                               ; CODE XREF: _INIT__MUTANTS+D16↓j
                mov     bx, [bp+var_8]
                imul    bx, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:[bx+2BE9h]
                push    word ptr es:[bx+2BE7h]
                call    GALFREE         ; void galfree(void *block);
                add     sp, 4
                mov     bx, [bp+var_8]
                imul    bx, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:[bx+2BEDh]
                push    word ptr es:[bx+2BEBh]
                call    GALFREE         ; void galfree(void *block);
                add     sp, 4
                inc     [bp+var_8]
                cmp     [bp+var_8], 50h ; 'P'
                jl      short loc_13CA
                call    sub_2121B
                call    sub_17C7E
                call    sub_1790E
                call    sub_17E7B
                call    sub_17F94
                call    sub_1A17A
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_2AEB9, 0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_2AEB7, 0
                call    sub_2050E
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29776, 1
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_29A74, 0
                jz      short loc_1466
                call    sub_1A900

loc_1466:                               ; CODE XREF: _INIT__MUTANTS+D6A↑j
                push    seg cseg06
                push    offset sub_1A4E3
                push    1
                call    RTKICK          ; rtkick(int time, void *rouptr());
                add     sp, 6
                xor     di, di

loc_1478:                               ; CODE XREF: _INIT__MUTANTS+F97↓j
                push    1Ah
                mov     ax, di
                add     ax, 42h ; 'B'
                push    ax
                call    GETMSG          ; char *bufard=getmsg(msgnum);
                pop     cx
                push    dx
                push    ax
                mov     ax, di
                imul    ax, 34h ; '4'
                add     ax, 0AF2h
                push    seg dseg19
                push    ax
                call    STZCPY          ; stzcpy(char *dest, char *source, int nbytes);
                add     sp, 0Ah
                push    3E8h
                push    1
                mov     ax, di
                imul    ax, 9
                add     ax, 47h ; 'G'
                push    ax
                call    NUMOPT          ; int numopt(int msgnum,int floor,int ceiling);
                add     sp, 6
                mov     bx, di
                imul    bx, 34h ; '4'
                mov     dx, seg dseg19
                mov     es, dx
                mov     es:[bx+0B0Ch], ax
                push    3E8h
                push    1
                mov     ax, di
                imul    ax, 9
                add     ax, 48h ; 'H'
                push    ax
                call    NUMOPT          ; int numopt(int msgnum,int floor,int ceiling);
                add     sp, 6
                mov     bx, di
                imul    bx, 34h ; '4'
                mov     dx, seg dseg19
                mov     es, dx
                mov     es:[bx+0B0Eh], ax
                push    3E8h
                push    1
                mov     ax, di
                imul    ax, 9
                add     ax, 49h ; 'I'
                push    ax
                call    NUMOPT          ; int numopt(int msgnum,int floor,int ceiling);
                add     sp, 6
                mov     bx, di
                imul    bx, 34h ; '4'
                mov     dx, seg dseg19
                mov     es, dx
                mov     es:[bx+0B10h], ax
                push    3E8h
                push    1
                mov     ax, di
                imul    ax, 9
                add     ax, 4Ah ; 'J'
                push    ax
                call    NUMOPT          ; int numopt(int msgnum,int floor,int ceiling);
                add     sp, 6
                mov     bx, di
                imul    bx, 34h ; '4'
                mov     dx, seg dseg19
                mov     es, dx
                mov     es:[bx+0B12h], ax
                push    3E8h
                push    1
                mov     ax, di
                imul    ax, 9
                add     ax, 4Bh ; 'K'
                push    ax
                call    NUMOPT          ; int numopt(int msgnum,int floor,int ceiling);
                add     sp, 6
                mov     bx, di
                imul    bx, 34h ; '4'
                mov     dx, seg dseg19
                mov     es, dx
                mov     es:[bx+0B14h], ax
                push    3E8h
                push    1
                mov     ax, di
                imul    ax, 9
                add     ax, 4Ch ; 'L'
                push    ax
                call    NUMOPT          ; int numopt(int msgnum,int floor,int ceiling);
                add     sp, 6
                mov     bx, di
                imul    bx, 34h ; '4'
                mov     dx, seg dseg19
                mov     es, dx
                mov     es:[bx+0B16h], ax
                push    3E8h
                push    1
                mov     ax, di
                imul    ax, 9
                add     ax, 4Dh ; 'M'
                push    ax
                call    NUMOPT          ; int numopt(int msgnum,int floor,int ceiling);
                add     sp, 6
                mov     bx, di
                imul    bx, 34h ; '4'
                mov     dx, seg dseg19
                mov     es, dx
                mov     es:[bx+0B18h], ax
                push    7D00h
                push    1
                mov     ax, di
                imul    ax, 9
                add     ax, 4Eh ; 'N'
                push    ax
                call    NUMOPT          ; int numopt(int msgnum,int floor,int ceiling);
                add     sp, 6
                mov     bx, di
                imul    bx, 34h ; '4'
                mov     dx, seg dseg19
                mov     es, dx
                mov     es:[bx+0B1Ah], ax
                push    7D00h
                push    1
                mov     ax, di
                imul    ax, 9
                add     ax, 4Fh ; 'O'
                push    ax
                call    NUMOPT          ; int numopt(int msgnum,int floor,int ceiling);
                add     sp, 6
                mov     bx, di
                imul    bx, 34h ; '4'
                mov     dx, seg dseg19
                mov     es, dx
                mov     es:[bx+0B1Ch], ax
                mov     bx, di
                shl     bx, 1
                push    word ptr [bx+0E7h]
                call    YNOPT           ; int ynopt(int msgnum);
                pop     cx
                or      ax, ax
                jnz     short loc_160E
                mov     bx, di
                imul    bx, 34h ; '4'
                mov     ax, seg dseg19
                mov     es, ax
                mov     word ptr es:[bx+0B1Eh], 0FFFFh
                jmp     short loc_1633
; ---------------------------------------------------------------------------

loc_160E:                               ; CODE XREF: _INIT__MUTANTS+F04↑j
                push    63h ; 'c'
                push    1
                mov     bx, di
                shl     bx, 1
                mov     ax, [bx+0E7h]
                inc     ax
                push    ax
                call    NUMOPT          ; int numopt(int msgnum,int floor,int ceiling);
                add     sp, 6
                mov     bx, di
                imul    bx, 34h ; '4'
                mov     dx, seg dseg19
                mov     es, dx
                mov     es:[bx+0B1Eh], ax

loc_1633:                               ; CODE XREF: _INIT__MUTANTS+F17↑j
                mov     bx, di
                shl     bx, 1
                mov     ax, [bx+0E7h]
                add     ax, 2
                push    ax
                call    YNOPT           ; int ynopt(int msgnum);
                pop     cx
                mov     bx, di
                imul    bx, 34h ; '4'
                mov     dx, seg dseg19
                mov     es, dx
                mov     es:[bx+0B20h], ax
                push    98h
                push    9680h
                push    0
                push    0
                mov     bx, di
                shl     bx, 1
                mov     ax, [bx+0E7h]
                add     ax, 3
                push    ax
                call    LNGOPT          ; long lngopt(int msgnum,long floor,long ceiling);
                add     sp, 0Ah
                mov     bx, di
                imul    bx, 34h ; '4'
                mov     cx, seg dseg19
                mov     es, cx
                mov     es:[bx+0B24h], dx
                mov     es:[bx+0B22h], ax
                inc     di
                cmp     di, 5
                jge     short loc_168F
                jmp     loc_1478
; ---------------------------------------------------------------------------

loc_168F:                               ; CODE XREF: _INIT__MUTANTS+F95↑j
                mov     [bp+var_10], 0

loc_1694:                               ; CODE XREF: _INIT__MUTANTS+1166↓j
                xor     di, di

loc_1696:                               ; CODE XREF: _INIT__MUTANTS+115A↓j
                push    98h
                push    9680h
                push    0
                push    0
                mov     bx, [bp+var_10]
                shl     bx, 1
                mov     ax, [bx+8Dh]
                add     ax, di
                push    ax
                call    LNGOPT          ; long lngopt(int msgnum,long floor,long ceiling);
                add     sp, 0Ah
                mov     bx, [bp+var_10]
                imul    bx, 0C8h
                mov     si, di
                shl     si, 2
                add     bx, si
                mov     cx, seg dseg19
                mov     es, cx
                mov     es:[bx+0BF8h], dx
                mov     es:[bx+0BF6h], ax
                push    63h ; 'c'
                push    0
                mov     bx, [bp+var_10]
                shl     bx, 1
                mov     ax, [bx+97h]
                add     ax, di
                push    ax
                call    NUMOPT          ; int numopt(int msgnum,int floor,int ceiling);
                add     sp, 6
                mov     bx, [bp+var_10]
                imul    bx, 0C8h
                mov     dx, di
                shl     dx, 1
                add     bx, dx
                mov     dx, seg dseg19
                mov     es, dx
                mov     es:[bx+0C1Eh], ax
                push    63h ; 'c'
                push    0
                mov     bx, [bp+var_10]
                shl     bx, 1
                mov     ax, [bx+0A1h]
                add     ax, di
                push    ax
                call    NUMOPT          ; int numopt(int msgnum,int floor,int ceiling);
                add     sp, 6
                mov     bx, [bp+var_10]
                imul    bx, 0C8h
                mov     dx, di
                shl     dx, 1
                add     bx, dx
                mov     dx, seg dseg19
                mov     es, dx
                mov     es:[bx+0C32h], ax
                push    63h ; 'c'
                push    0
                mov     bx, [bp+var_10]
                shl     bx, 1
                mov     ax, [bx+0ABh]
                add     ax, di
                push    ax
                call    NUMOPT          ; int numopt(int msgnum,int floor,int ceiling);
                add     sp, 6
                mov     bx, [bp+var_10]
                imul    bx, 0C8h
                mov     dx, di
                shl     dx, 1
                add     bx, dx
                mov     dx, seg dseg19
                mov     es, dx
                mov     es:[bx+0C46h], ax
                push    63h ; 'c'
                push    0
                mov     bx, [bp+var_10]
                shl     bx, 1
                mov     ax, [bx+0B5h]
                add     ax, di
                push    ax
                call    NUMOPT          ; int numopt(int msgnum,int floor,int ceiling);
                add     sp, 6
                mov     bx, [bp+var_10]
                imul    bx, 0C8h
                mov     dx, di
                shl     dx, 1
                add     bx, dx
                mov     dx, seg dseg19
                mov     es, dx
                mov     es:[bx+0C5Ah], ax
                push    63h ; 'c'
                push    0
                mov     bx, [bp+var_10]
                shl     bx, 1
                mov     ax, [bx+0BFh]
                add     ax, di
                push    ax
                call    NUMOPT          ; int numopt(int msgnum,int floor,int ceiling);
                add     sp, 6
                mov     bx, [bp+var_10]
                imul    bx, 0C8h
                mov     dx, di
                shl     dx, 1
                add     bx, dx
                mov     dx, seg dseg19
                mov     es, dx
                mov     es:[bx+0C6Eh], ax
                push    63h ; 'c'
                push    0
                mov     bx, [bp+var_10]
                shl     bx, 1
                mov     ax, [bx+0C9h]
                add     ax, di
                push    ax
                call    NUMOPT          ; int numopt(int msgnum,int floor,int ceiling);
                add     sp, 6
                mov     bx, [bp+var_10]
                imul    bx, 0C8h
                mov     dx, di
                shl     dx, 1
                add     bx, dx
                mov     dx, seg dseg19
                mov     es, dx
                mov     es:[bx+0C82h], ax
                push    63h ; 'c'
                push    0
                mov     bx, [bp+var_10]
                shl     bx, 1
                mov     ax, [bx+0D3h]
                add     ax, di
                push    ax
                call    NUMOPT          ; int numopt(int msgnum,int floor,int ceiling);
                add     sp, 6
                mov     bx, [bp+var_10]
                imul    bx, 0C8h
                mov     dx, di
                shl     dx, 1
                add     bx, dx
                mov     dx, seg dseg19
                mov     es, dx
                mov     es:[bx+0C96h], ax
                push    63h ; 'c'
                push    0FFFFh
                mov     bx, [bp+var_10]
                shl     bx, 1
                mov     ax, [bx+0DDh]
                add     ax, di
                push    ax
                call    NUMOPT          ; int numopt(int msgnum,int floor,int ceiling);
                add     sp, 6
                mov     bx, [bp+var_10]
                imul    bx, 0C8h
                mov     dx, di
                shl     dx, 1
                add     bx, dx
                mov     dx, seg dseg19
                mov     es, dx
                mov     es:[bx+0CAAh], ax
                inc     di
                cmp     di, 0Ah
                jge     short loc_1852
                jmp     loc_1696
; ---------------------------------------------------------------------------

loc_1852:                               ; CODE XREF: _INIT__MUTANTS+1158↑j
                inc     [bp+var_10]
                cmp     [bp+var_10], 5
                jge     short loc_185E
                jmp     loc_1694
; ---------------------------------------------------------------------------

loc_185E:                               ; CODE XREF: _INIT__MUTANTS+1164↑j
                mov     [bp+var_10], 0
                jmp     loc_1942
; ---------------------------------------------------------------------------

loc_1866:                               ; CODE XREF: _INIT__MUTANTS+125B↓j
                push    1Eh
                mov     ax, [bp+var_10]
                imul    ax, 5
                add     ax, 24Ah
                push    ax
                call    GETMSG          ; char *bufard=getmsg(msgnum);
                pop     cx
                push    dx
                push    ax
                mov     ax, [bp+var_10]
                imul    ax, 36h ; '6'
                add     ax, 0FDEh
                push    seg dseg19
                push    ax
                call    STZCPY          ; stzcpy(char *dest, char *source, int nbytes);
                add     sp, 0Ah
                push    3E8h
                push    0
                mov     ax, [bp+var_10]
                imul    ax, 5
                add     ax, 24Bh
                push    ax
                call    NUMOPT          ; int numopt(int msgnum,int floor,int ceiling);
                add     sp, 6
                mov     bx, [bp+var_10]
                imul    bx, 36h ; '6'
                mov     dx, seg dseg19
                mov     es, dx
                mov     es:[bx+0FFCh], ax
                push    98h
                push    9680h
                push    0
                push    0
                mov     ax, [bp+var_10]
                imul    ax, 5
                add     ax, 24Ch
                push    ax
                call    LNGOPT          ; long lngopt(int msgnum,long floor,long ceiling);
                add     sp, 0Ah
                mov     bx, [bp+var_10]
                imul    bx, 36h ; '6'
                mov     cx, seg dseg19
                mov     es, cx
                mov     es:[bx+100Ah], dx
                mov     es:[bx+1008h], ax
                push    98h
                push    9680h
                push    0
                push    0
                mov     ax, [bp+var_10]
                imul    ax, 5
                add     ax, 24Dh
                push    ax
                call    LNGOPT          ; long lngopt(int msgnum,long floor,long ceiling);
                add     sp, 0Ah
                mov     bx, [bp+var_10]
                imul    bx, 36h ; '6'
                mov     cx, seg dseg19
                mov     es, cx
                mov     es:[bx+100Eh], dx
                mov     es:[bx+100Ch], ax
                push    3E8h
                push    0FFFFh
                mov     ax, [bp+var_10]
                imul    ax, 5
                add     ax, 24Eh
                push    ax
                call    NUMOPT          ; int numopt(int msgnum,int floor,int ceiling);
                add     sp, 6
                mov     bx, [bp+var_10]
                imul    bx, 36h ; '6'
                mov     dx, seg dseg19
                mov     es, dx
                mov     es:[bx+1010h], ax
                inc     [bp+var_10]

loc_1942:                               ; CODE XREF: _INIT__MUTANTS+116E↑j
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:word_2AEC1
                cmp     ax, [bp+var_10]
                jle     short loc_1953
                jmp     loc_1866
; ---------------------------------------------------------------------------

loc_1953:                               ; CODE XREF: _INIT__MUTANTS+1259↑j
                mov     [bp+var_10], 0
                jmp     short loc_1983
; ---------------------------------------------------------------------------

loc_195A:                               ; CODE XREF: _INIT__MUTANTS+129A↓j
                push    14h
                mov     ax, [bp+var_10]
                add     ax, 2B8h
                push    ax
                call    GETMSG          ; char *bufard=getmsg(msgnum);
                pop     cx
                push    dx
                push    ax
                mov     ax, [bp+var_10]
                imul    ax, 1Eh
                add     ax, 156h
                push    seg dseg19
                push    ax
                call    STZCPY          ; stzcpy(char *dest, char *source, int nbytes);
                add     sp, 0Ah
                inc     [bp+var_10]

loc_1983:                               ; CODE XREF: _INIT__MUTANTS+1263↑j
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:word_2AEC5
                cmp     ax, [bp+var_10]
                jg      short loc_195A
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
_INIT__MUTANTS  endp


; =============== S U B R O U T I N E =======================================


lonrou          proc far                ; DATA XREF: dseg10:0019↓o
                push    ds
                mov     ax, seg dseg10
                mov     ds, ax
                assume ds:dseg10
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_29A5A, 0
                jz      short loc_19F2
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29864
                push    es:word_29862
                call    SETMBK          ; FILE *setmbk(mbkptr);
                add     sp, 4
                push    ds
                push    201h
                push    379h
                call    PRFMSG          ; prfmsg(msgnum,p1,p2, ..• ,pn);
                add     sp, 6
                mov     ax, seg dseg19
                mov     es, ax
                test    es:word_2AEB3, 2
                jz      short loc_19E2
                call    sub_6142

loc_19E2:                               ; CODE XREF: lonrou+45↑j
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    OUTPRF          ; outprf (unum);
                pop     cx

loc_19F2:                               ; CODE XREF: lonrou+11↑j
                call    sub_211FB
                xor     ax, ax
                pop     ds
                assume ds:dseg21
                retf
lonrou          endp


; =============== S U B R O U T I N E =======================================


huprou          proc far                ; DATA XREF: dseg10:002D↓o
                push    si
                push    ds
                mov     ax, seg dseg10
                mov     ds, ax
                assume ds:dseg10
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:word_29778, 1Eh
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    sub_1A0E4
                pop     cx
                mov     bx, seg dseg19
                mov     es, bx
                assume es:dseg19
                mov     word ptr es:dword_29DD4+2, dx
                mov     word ptr es:dword_29DD4, ax
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+0D6h], 2
                jz      short loc_1A41
                jmp     loc_1B31
; ---------------------------------------------------------------------------

loc_1A41:                               ; CODE XREF: huprou+41↑j
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                mov     ax, word ptr es:USRNUM ; int usrnum;
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     es:word_2AED5, ax
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     word ptr es:[bx+0D6h], 0
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+0D8h], 0
                jle     short loc_1A88
                mov     ax, seg KILIPG
                mov     es, ax
                assume es:nothing
                cmp     word ptr es:KILIPG, 0 ; int killpg;
                jnz     short loc_1A88
                call    sub_19B55

loc_1A88:                               ; CODE XREF: huprou+79↑j
                                        ; huprou+86↑j
                call    sub_1951C
                push    0
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    _BTUPMT         ; int btupmt(int chan, char pmchar);
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:word_2AEB9
                mov     dx, seg USRNUM
                mov     es, dx
                assume es:nothing
                cmp     ax, word ptr es:USRNUM ; int usrnum;
                jnz     short loc_1B31
                mov     ax, seg USRNUM
                mov     es, ax
                push    word ptr es:USRNUM ; int usrnum;
                call    STOP_POLLING    ; void stop_polling(int unum);
                pop     cx
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:word_2AEB9, 0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29778, 20h ; ' '
                xor     si, si
                jmp     short loc_1B25
; ---------------------------------------------------------------------------

loc_1AE2:                               ; CODE XREF: huprou+134↓j
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                cmp     word ptr es:USRNUM, si ; int usrnum;
                jz      short loc_1B24
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                cmp     word ptr es:[bx+0D6h], 2
                jnz     short loc_1B24
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:word_2AEB9, si
                push    seg cseg08
                push    offset sub_1EA0C
                push    si
                call    BEGIN_POLLING   ; void begin_polling(int unum,void (*rouptr)());
                add     sp, 6
                mov     ax, seg NTERMS
                mov     es, ax
                assume es:nothing
                mov     si, word ptr es:NTERMS ; int nterms;

loc_1B24:                               ; CODE XREF: huprou+F1↑j
                                        ; huprou+104↑j
                inc     si

loc_1B25:                               ; CODE XREF: huprou+E5↑j
                mov     ax, seg NTERMS
                mov     es, ax
                cmp     word ptr es:NTERMS, si ; int nterms;
                jg      short loc_1AE2

loc_1B31:                               ; CODE XREF: huprou+43↑j
                                        ; huprou+B9↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     word ptr es:[bx+0D6h], 0FFFFh
                pop     ds
                assume ds:dseg21
                pop     si
                retf
huprou          endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

mcurou          proc far                ; DATA XREF: dseg10:0031↓o

var_94          = byte ptr -94h
var_76          = byte ptr -76h
var_12          = word ptr -12h
var_10          = word ptr -10h
var_E           = byte ptr -0Eh
var_D           = byte ptr -0Dh
var_A           = word ptr -0Ah
var_8           = word ptr -8
var_6           = word ptr -6
var_4           = word ptr -4
var_2           = word ptr -2

                enter   94h, 0
                push    ds
                mov     ax, seg dseg10
                mov     ds, ax
                assume ds:dseg10
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:word_29A30, 1
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                mov     word ptr es:USRNUM, 0FFFFh ; int usrnum;
                call    sub_41CC
                or      ax, ax
                jz      short loc_1B73
                jmp     loc_2183
; ---------------------------------------------------------------------------

loc_1B73:                               ; CODE XREF: mcurou+29↑j
                push    ds
                push    offset aMutantsCleanup ; "Mutants Cleanup"
                push    ds
                push    offset aMutantsCleanup ; "Mutants Cleanup"
                call    SHOCST          ; void shocst(char *summary, char *detail, p1, p1,...,pn);
                add     sp, 8
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_29880
                push    es:word_2987E
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    3Eh ; '>'
                push    0
                push    0
                push    0
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jnz     short loc_1BB1
                jmp     loc_1E02
; ---------------------------------------------------------------------------

loc_1BB1:                               ; CODE XREF: mcurou+67↑j
                                        ; mcurou+2BA↓j
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    seg dseg19
                push    offset byte_29B40
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                push    ds
                push    offset aVillageShop_0 ; "Village Shop"
                push    seg dseg19
                push    offset unk_29B4A
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_1C3D
                xor     dx, dx

loc_1BE0:                               ; CODE XREF: mcurou+BF↓j
                mov     bx, dx
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                mov     word ptr es:[bx+1878h], 0FFFFh
                mov     bx, dx
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                mov     word ptr es:[bx+18A0h], 0FFFFh
                inc     dx
                cmp     dx, 14h
                jl      short loc_1BE0
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29BC2, 5F5h
                mov     es:word_29BC0, 0E0FFh
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29BCE, 98h
                mov     es:word_29BCC, 967Fh

loc_1C2C:                               ; CODE XREF: mcurou+161↓j
                push    seg dseg19
                push    offset byte_29B40
                call    UPDBTV          ; void updbtv(char *recptr);
                add     sp, 4
                jmp     loc_1DDC
; ---------------------------------------------------------------------------

loc_1C3D:                               ; CODE XREF: mcurou+97↑j
                push    ds
                push    offset aForSale ; "FOR SALE"
                push    seg dseg19
                push    offset unk_29B4A
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_1C56
                jmp     loc_1DDC
; ---------------------------------------------------------------------------

loc_1C56:                               ; CODE XREF: mcurou+10C↑j
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:word_29BC2
                mov     [bp+var_10], ax
                mov     dx, es:word_29BC0
                mov     [bp+var_12], dx
                mov     bx, seg dseg19
                mov     es, bx
                sub     dx, es:word_29BC4
                sbb     ax, es:word_29BC6
                or      ax, ax
                jb      short loc_1CA8
                ja      short loc_1C83
                or      dx, dx
                jbe     short loc_1CA8

loc_1C83:                               ; CODE XREF: mcurou+138↑j
                mov     ax, [bp+var_10]
                mov     dx, [bp+var_12]
                mov     bx, seg dseg19
                mov     es, bx
                sub     dx, es:word_29BC4
                sbb     ax, es:word_29BC6
                mov     bx, seg dseg19
                mov     es, bx
                mov     es:word_29BC2, ax
                mov     es:word_29BC0, dx
                jmp     short loc_1C2C
; ---------------------------------------------------------------------------

loc_1CA8:                               ; CODE XREF: mcurou+136↑j
                                        ; mcurou+13C↑j
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29BC2, 0
                mov     es:word_29BC0, 0
                push    0
                push    4
                push    ss
                lea     ax, [bp+var_E]
                push    ax
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                mov     word ptr es:USRNUM, 0FFFFh ; int usrnum;
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     al, es:byte_29BE5
                mov     [bp+var_E], al
                mov     ax, seg dseg19
                mov     es, ax
                mov     al, es:byte_29BE6
                mov     [bp+var_D], al
                push    ss
                lea     ax, [bp+var_E]
                push    ax
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                inc     ax
                mov     [bp+var_2], ax
                push    1Eh
                push    seg dseg19
                push    offset unk_29B4A
                push    ss
                lea     ax, [bp+var_94]
                push    ax
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                push    1Eh
                push    ds
                push    offset aForSale ; "FOR SALE"
                push    seg dseg19
                push    offset unk_29B4A
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29880
                push    es:word_2987E
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    seg dseg19
                push    offset byte_29B40
                call    UPDBTV          ; void updbtv(char *recptr);
                add     sp, 4
                push    seg dseg19
                push    offset byte_29B40
                call    sub_15D7B
                add     sp, 4
                or      ax, ax
                jz      short loc_1DDC
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29BF6, 2
                push    0
                push    32h ; '2'
                push    seg dseg19
                push    offset unk_29C3C
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                mov     ax, [bp+var_2]
                cwd
                mov     bx, seg dseg19
                mov     es, bx
                push    ax
                push    dx
                mov     dx, es:word_29A26
                mov     ax, es:word_29A24
                pop     cx
                pop     bx
                call    F_LXMUL
                push    dx
                push    ax
                push    ds
                push    offset aPowerOfSaleLd ; "POWER OF SALE $ %ld"
                push    seg dseg19
                push    offset unk_29C3C
                call    SPRINTF         ; int sprintf(char *str, const char *format, ... );
                add     sp, 0Ch
                push    0
                push    0Ah
                push    seg dseg19
                push    offset unk_29C1E
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                call    sub_15DD6
                push    0
                push    0
                push    ds
                push    offset aOneOfYourStore ; "One of your stores could not meet its t"...
                push    ss
                lea     ax, [bp+var_94]
                push    ax
                call    sub_18770
                add     sp, 0Ch

loc_1DDC:                               ; CODE XREF: mcurou+F5↑j
                                        ; mcurou+10E↑j ...
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29880
                push    es:word_2987E
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    38h ; '8'
                call    QNPBTV          ; int qnpbtv (int getopt);
                pop     cx
                or      ax, ax
                jz      short loc_1E02
                jmp     loc_1BB1
; ---------------------------------------------------------------------------

loc_1E02:                               ; CODE XREF: mcurou+69↑j
                                        ; mcurou+2B8↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29888
                push    es:word_29886
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    3Eh ; '>'
                push    0
                push    0
                push    0
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jnz     short loc_1E30
                jmp     loc_208F
; ---------------------------------------------------------------------------

loc_1E30:                               ; CODE XREF: mcurou+2E6↑j
                                        ; mcurou+547↓j
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    seg dseg19
                push    offset unk_29C78
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_29D10, 0FFFFh
                jg      short loc_1E57
                jmp     loc_1EF1
; ---------------------------------------------------------------------------

loc_1E57:                               ; CODE XREF: mcurou+30D↑j
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:word_29D10
                dec     ax
                mov     dx, seg dseg19
                mov     es, dx
                mov     es:word_29D10, ax
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_29D10, 0
                jnz     short loc_1EE3
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29C96
                call    sub_18BAA
                pop     cx
                push    seg dseg19
                push    offset unk_29C78
                call    UPDBTV          ; void updbtv(char *recptr);
                add     sp, 4
                push    0
                push    64h ; 'd'
                push    ss
                lea     ax, [bp+var_76]
                push    ax
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:word_29C96
                imul    ax, 34h ; '4'
                add     ax, 0AF2h
                push    seg dseg19
                push    ax
                push    ds
                push    offset aYourSHasBeenBu ; "Your %s has been buried and layed to re"...
                push    ss
                lea     ax, [bp+var_76]
                push    ax
                call    SPRINTF         ; int sprintf(char *str, const char *format, ... );
                add     sp, 0Ch
                push    0
                push    0
                push    ss
                lea     ax, [bp+var_76]
                push    ax
                push    seg dseg19
                push    offset unk_29C78
                call    sub_18770
                add     sp, 0Ch
                jmp     short loc_1EF1
; ---------------------------------------------------------------------------

loc_1EE3:                               ; CODE XREF: mcurou+330↑j
                push    seg dseg19
                push    offset unk_29C78
                call    UPDBTV          ; void updbtv(char *recptr);
                add     sp, 4

loc_1EF1:                               ; CODE XREF: mcurou+30F↑j
                                        ; mcurou+39C↑j
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_29C96, 0
                jz      short loc_1F01
                jmp     loc_1FAA
; ---------------------------------------------------------------------------

loc_1F01:                               ; CODE XREF: mcurou+3B7↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29878
                push    es:word_29876
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    37h ; '7'
                push    0
                push    seg dseg19
                push    offset unk_29C78
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jnz     short loc_1F96
                push    1Eh
                push    seg dseg19
                push    offset unk_29C78
                push    seg dseg19
                push    offset unk_29A78
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29A98, 0
                mov     es:word_29A96, 0
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29A9C, 0
                mov     es:word_29A9A, 0
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29A9E, 0
                push    0
                push    6
                push    seg dseg19
                push    offset unk_29AA0
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                push    seg dseg19
                push    offset unk_29A78
                call    INSBTV          ; void insbtv(char *recptr);
                add     sp, 4

loc_1F96:                               ; CODE XREF: mcurou+3E7↑j
                mov     [bp+var_4], 0
                mov     [bp+var_6], 0
                mov     [bp+var_8], 0
                mov     [bp+var_A], 0

loc_1FAA:                               ; CODE XREF: mcurou+3B9↑j
                mov     ax, seg dseg19
                mov     dx, [bp+var_4]
                mov     bx, [bp+var_6]
                mov     es, ax
                add     bx, es:word_29CA4
                adc     dx, es:word_29CA6
                mov     [bp+var_4], dx
                mov     [bp+var_6], bx
                mov     ax, seg dseg19
                mov     dx, [bp+var_8]
                mov     bx, [bp+var_A]
                mov     es, ax
                add     bx, es:word_29D08
                adc     dx, es:word_29D0A
                mov     [bp+var_8], dx
                mov     [bp+var_A], bx
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_29C96, 4
                jnz     short loc_2069
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29878
                push    es:word_29876
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    37h ; '7'
                push    0
                push    seg dseg19
                push    offset unk_29C78
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jz      short loc_2069
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    seg dseg19
                push    offset unk_29A78
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     dx, [bp+var_4]
                mov     bx, [bp+var_6]
                mov     es, ax
                mov     es:word_29A98, dx
                mov     es:word_29A96, bx
                mov     ax, seg dseg19
                mov     dx, [bp+var_8]
                mov     bx, [bp+var_A]
                mov     es, ax
                mov     es:word_29A9C, dx
                mov     es:word_29A9A, bx
                push    seg dseg19
                push    offset unk_29A78
                call    UPDBTV          ; void updbtv(char *recptr);
                add     sp, 4

loc_2069:                               ; CODE XREF: mcurou+4A6↑j
                                        ; mcurou+4D3↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29888
                push    es:word_29886
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    38h ; '8'
                call    QNPBTV          ; int qnpbtv (int getopt);
                pop     cx
                or      ax, ax
                jz      short loc_208F
                jmp     loc_1E30
; ---------------------------------------------------------------------------

loc_208F:                               ; CODE XREF: mcurou+2E8↑j
                                        ; mcurou+545↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29880
                push    es:word_2987E
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    3Eh ; '>'
                push    0
                push    0
                push    0
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jnz     short loc_20BD
                jmp     loc_2177
; ---------------------------------------------------------------------------

loc_20BD:                               ; CODE XREF: mcurou+573↑j
                                        ; mcurou+62F↓j
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    seg dseg19
                push    offset byte_29B40
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29878
                push    es:word_29876
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    37h ; '7'
                push    0
                push    seg dseg19
                push    offset unk_29B4A
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jz      short loc_2151
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    seg dseg19
                push    offset unk_29A78
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:word_29A9C
                mov     dx, es:word_29A9A
                mov     bx, seg dseg19
                mov     es, bx
                add     dx, es:word_29BC0
                adc     ax, es:word_29BC2
                mov     bx, seg dseg19
                mov     es, bx
                mov     es:word_29A9C, ax
                mov     es:word_29A9A, dx
                push    seg dseg19
                push    offset unk_29A78
                call    UPDBTV          ; void updbtv(char *recptr);
                add     sp, 4

loc_2151:                               ; CODE XREF: mcurou+5BA↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29880
                push    es:word_2987E
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    38h ; '8'
                call    QNPBTV          ; int qnpbtv (int getopt);
                pop     cx
                or      ax, ax
                jz      short loc_2177
                jmp     loc_20BD
; ---------------------------------------------------------------------------

loc_2177:                               ; CODE XREF: mcurou+575↑j
                                        ; mcurou+62D↑j
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29A30, 0

loc_2183:                               ; CODE XREF: mcurou+2B↑j
                push    ds
                push    offset aMutantsCleanup_0 ; "Mutants cleanup done!"
                push    ds
                push    offset aMutantsCleanup_0 ; "Mutants cleanup done!"
                call    SHOCST          ; void shocst(char *summary, char *detail, p1, p1,...,pn);
                add     sp, 8
                pop     ds
                assume ds:dseg21
                leave
                retf
mcurou          endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

dlarou          proc far                ; DATA XREF: dseg10:0035↓o

var_17A         = byte ptr -17Ah
var_1E          = byte ptr -1Eh
arg_0           = word ptr  6
arg_2           = word ptr  8

                enter   17Ah, 0
                push    ds
                mov     ax, seg dseg10
                mov     ds, ax
                assume ds:dseg10
                push    0
                push    1Eh
                push    ss
                lea     ax, [bp+var_1E]
                push    ax
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                push    [bp+arg_2]
                push    [bp+arg_0]
                push    ss
                lea     ax, [bp+var_1E]
                push    ax
                call    STRCPY          ; char* strcpy(char* destination, const char* source );
                add     sp, 8
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2987C
                push    es:word_2987A
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    37h ; '7'
                push    0
                push    ss
                lea     ax, [bp+var_1E]
                push    ax
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jz      short loc_222F

loc_21F0:                               ; CODE XREF: dlarou+97↓j
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    seg dseg19
                push    offset unk_29AAA
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                push    seg dseg19
                push    offset unk_29AAA
                push    ss
                lea     ax, [bp+var_1E]
                push    ax
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_222F
                call    DELBTV          ; void delbtv();
                push    38h ; '8'
                call    QNPBTV          ; int qnpbtv (int getopt);
                pop     cx
                or      ax, ax
                jnz     short loc_21F0

loc_222F:                               ; CODE XREF: dlarou+58↑j
                                        ; dlarou+86↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29888
                push    es:word_29886
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    37h ; '7'
                push    0
                push    ss
                lea     ax, [bp+var_1E]
                push    ax
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jz      short loc_229A

loc_225B:                               ; CODE XREF: dlarou+102↓j
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    ss
                lea     ax, [bp+var_17A]
                push    ax
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                push    ss
                lea     ax, [bp+var_17A]
                push    ax
                push    ss
                lea     ax, [bp+var_1E]
                push    ax
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_229A
                call    DELBTV          ; void delbtv();
                push    38h ; '8'
                call    QNPBTV          ; int qnpbtv (int getopt);
                pop     cx
                or      ax, ax
                jnz     short loc_225B

loc_229A:                               ; CODE XREF: dlarou+C3↑j
                                        ; dlarou+F1↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29878
                push    es:word_29876
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    37h ; '7'
                push    0
                push    [bp+arg_2]
                push    [bp+arg_0]
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jz      short loc_2307

loc_22C7:                               ; CODE XREF: dlarou+16F↓j
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    seg dseg19
                push    offset unk_29A78
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                push    seg dseg19
                push    offset unk_29A78
                push    [bp+arg_2]
                push    [bp+arg_0]
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_2307
                call    DELBTV          ; void delbtv();
                push    38h ; '8'
                call    QNPBTV          ; int qnpbtv (int getopt);
                pop     cx
                or      ax, ax
                jnz     short loc_22C7

loc_2307:                               ; CODE XREF: dlarou+12F↑j
                                        ; dlarou+15E↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29880
                push    es:word_2987E
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    37h ; '7'
                push    1
                push    ss
                lea     ax, [bp+var_1E]
                push    ax
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jz      short loc_238E

loc_2333:                               ; CODE XREF: dlarou+1F6↓j
                push    1
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    seg dseg19
                push    offset byte_29B40
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                push    seg dseg19
                push    offset unk_29B4A
                push    ss
                lea     ax, [bp+var_1E]
                push    ax
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_238E
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29BC2, 0
                mov     es:word_29BC0, 0
                push    seg dseg19
                push    offset byte_29B40
                call    UPDBTV          ; void updbtv(char *recptr);
                add     sp, 4
                push    38h ; '8'
                call    QNPBTV          ; int qnpbtv (int getopt);
                pop     cx
                or      ax, ax
                jnz     short loc_2333

loc_238E:                               ; CODE XREF: dlarou+19B↑j
                                        ; dlarou+1C9↑j
                pop     ds
                assume ds:dseg21
                leave
                retf
dlarou          endp


; =============== S U B R O U T I N E =======================================


finrou          proc far                ; DATA XREF: dseg10:0039↓o
                push    ds
                mov     ax, seg dseg10
                mov     ds, ax
                assume ds:dseg10
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_29A30, 2
                jl      short loc_23A7
                jmp     loc_2448
; ---------------------------------------------------------------------------

loc_23A7:                               ; CODE XREF: finrou+11↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29888
                push    es:word_29886
                call    CLSBTV          ; void clsbtv (struct btvblk *bbp);
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29884
                push    es:word_29882
                call    CLSBTV          ; void clsbtv (struct btvblk *bbp);
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29880
                push    es:word_2987E
                call    CLSBTV          ; void clsbtv (struct btvblk *bbp);
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2987C
                push    es:word_2987A
                call    CLSBTV          ; void clsbtv (struct btvblk *bbp);
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29878
                push    es:word_29876
                call    CLSBTV          ; void clsbtv (struct btvblk *bbp);
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2986C
                push    es:word_2986A
                call    CLSBTV          ; void clsbtv (struct btvblk *bbp);
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29868
                push    es:word_29866
                call    CLSBTV          ; void clsbtv (struct btvblk *bbp);
                add     sp, 4

loc_2448:                               ; CODE XREF: finrou+13↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29874
                push    es:word_29872
                call    CLSBTV          ; void clsbtv (struct btvblk *bbp);
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29870
                push    es:word_2986E
                call    CLSBTV          ; void clsbtv (struct btvblk *bbp);
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29864
                push    es:word_29862
                call    CLSMSG          ; void clsmsg(FILE *mbkprt);
                add     sp, 4
                pop     ds
                assume ds:dseg21
                retf
finrou          endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sttrou          proc far                ; DATA XREF: dseg10:001D↓o

var_11E         = byte ptr -11Eh
var_1E          = byte ptr -1Eh

                enter   11Eh, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg10
                mov     ds, ax
                assume ds:dseg10
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29778, 21h ; '!'
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    sub_1A0E4
                pop     cx
                mov     bx, seg dseg19
                mov     es, bx
                assume es:dseg19
                mov     word ptr es:dword_29DD4+2, dx
                mov     word ptr es:dword_29DD4, ax
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                mov     ax, word ptr es:USRNUM ; int usrnum;
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     es:word_2AED5, ax
                mov     ax, seg MARGC
                mov     es, ax
                assume es:nothing
                mov     ax, word ptr es:MARGC ; int margc;
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     es:word_2AED3, ax
                mov     ax, seg MARGC
                mov     es, ax
                assume es:nothing
                cmp     word ptr es:MARGC, 0 ; int margc;
                jg      short loc_24F9
                jmp     loc_25D0
; ---------------------------------------------------------------------------

loc_24F9:                               ; CODE XREF: sttrou+65↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     es:word_2AED3, 14h
                jle     short loc_2512
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_2AED3, 14h

loc_2512:                               ; CODE XREF: sttrou+75↑j
                xor     si, si

loc_2514:                               ; CODE XREF: sttrou+A3↓j
                push    0
                push    0C8h
                mov     ax, si
                imul    ax, 0C8h
                add     ax, 1C23h
                push    seg dseg19
                push    ax
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                inc     si
                cmp     si, 14h
                jl      short loc_2514
                xor     si, si
                jmp     loc_25BF
; ---------------------------------------------------------------------------

loc_2539:                               ; CODE XREF: sttrou+13C↓j
                xor     di, di
                jmp     short loc_256D
; ---------------------------------------------------------------------------

loc_253D:                               ; CODE XREF: sttrou+FC↓j
                mov     bx, si
                shl     bx, 2
                mov     ax, seg MARGV
                mov     es, ax
                assume es:nothing
                les     bx, dword ptr es:MARGV[bx] ; char *margv[];
                assume es:nothing
                add     bx, di
                mov     al, es:[bx]
                mov     ah, 0
                push    ax
                call    TOLOWER         ; int tolower (int c);
                pop     cx
                mov     bx, si
                imul    bx, 0C8h
                add     bx, di
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     es:[bx+1C23h], al
                inc     di

loc_256D:                               ; CODE XREF: sttrou+AC↑j
                mov     bx, si
                shl     bx, 2
                mov     ax, seg MARGV
                mov     es, ax
                assume es:nothing
                push    word ptr es:(MARGV+2)[bx] ; char *margv[];
                push    word ptr es:MARGV[bx] ; char *margv[];
                call    STRLEN          ; size_t strlen(const char* str);
                add     sp, 4
                cmp     ax, di
                ja      short loc_253D
                mov     bx, si
                shl     bx, 2
                mov     ax, seg MARGV
                mov     es, ax
                push    word ptr es:(MARGV+2)[bx] ; char *margv[];
                push    word ptr es:MARGV[bx] ; char *margv[];
                call    STRLEN          ; size_t strlen(const char* str);
                add     sp, 4
                mov     dx, si
                imul    dx, 0C8h
                add     dx, ax
                mov     ax, seg dseg19
                mov     bx, dx
                mov     es, ax
                assume es:dseg19
                mov     byte ptr es:[bx+1C23h], 0
                inc     si

loc_25BF:                               ; CODE XREF: sttrou+A7↑j
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AED3, si
                jle     short loc_25CE
                jmp     loc_2539
; ---------------------------------------------------------------------------

loc_25CE:                               ; CODE XREF: sttrou+13A↑j
                jmp     short loc_25E4
; ---------------------------------------------------------------------------

loc_25D0:                               ; CODE XREF: sttrou+67↑j
                push    1
                push    ds
                push    (offset aMjwmutMdf+0Ah) ; ""
                push    seg dseg19
                push    offset byte_29F13
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah

loc_25E4:                               ; CODE XREF: sttrou:loc_25CE↑j
                mov     ax, seg USRPTR
                mov     es, ax
                assume es:nothing
                les     bx, dword ptr es:USRPTR ; struct user *usrptr;
                assume es:nothing
                mov     bx, es:[bx+8]
                cmp     bx, 8           ; switch 9 cases
                jbe     short loc_25FA
                jmp     def_25FC        ; jumptable 000025FC default case, case 4
; ---------------------------------------------------------------------------

loc_25FA:                               ; CODE XREF: sttrou+166↑j
                shl     bx, 1
                jmp     cs:jpt_25FC[bx] ; switch jump
; ---------------------------------------------------------------------------

loc_2601:                               ; CODE XREF: sttrou+16D↑j
                                        ; DATA XREF: cseg02:jpt_25FC↓o
                mov     ax, seg dseg19  ; jumptable 000025FC case 0
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     word ptr es:[bx+0D6h], 1
                call    sub_211DD
                or      ax, ax
                jz      short loc_2622
                nop
                push    cs
                call    near ptr sub_31D4
                jmp     short loc_263D
; ---------------------------------------------------------------------------

loc_2622:                               ; CODE XREF: sttrou+18A↑j
                push    seg dseg19
                push    offset aV315    ; "V3.15"
                push    30Bh
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    sub_15C7E
                add     sp, 8

loc_263D:                               ; CODE XREF: sttrou+191↑j
                nop
                push    cs
                call    near ptr sub_2B24
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+0D6h]
                mov     dx, seg USRPTR
                mov     es, dx
                assume es:nothing
                les     bx, dword ptr es:USRPTR ; struct user *usrptr;
                assume es:nothing
                mov     es:[bx+8], ax
                mov     ax, seg MARGV
                mov     es, ax
                assume es:nothing
                les     bx, dword ptr es:MARGV ; char *margv[];
                assume es:nothing
                mov     al, es:[bx]
                mov     ah, 0
                push    ax
                call    TOUPPER         ; int toupper (int c);
                pop     cx
                cmp     ax, 58h ; 'X'
                jz      short loc_267D
                jmp     def_25FC        ; jumptable 000025FC default case, case 4
; ---------------------------------------------------------------------------

loc_267D:                               ; CODE XREF: sttrou+1E9↑j
                call    sub_212A7
                call    sub_21399

loc_2687:                               ; CODE XREF: sttrou+242↓j
                xor     ax, ax
                jmp     loc_2B0D
; ---------------------------------------------------------------------------

loc_268C:                               ; CODE XREF: sttrou+16D↑j
                                        ; DATA XREF: cseg02:jpt_25FC↓o
                nop                     ; jumptable 000025FC case 1
                push    cs
                call    near ptr sub_2B24
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+0D6h]
                mov     dx, seg USRPTR
                mov     es, dx
                assume es:nothing
                les     bx, dword ptr es:USRPTR ; struct user *usrptr;
                assume es:nothing
                mov     es:[bx+8], ax
                mov     ax, seg MARGV
                mov     es, ax
                assume es:nothing
                les     bx, dword ptr es:MARGV ; char *margv[];
                assume es:nothing
                mov     al, es:[bx]
                mov     ah, 0
                push    ax
                call    TOUPPER         ; int toupper (int c);
                pop     cx
                cmp     ax, 58h ; 'X'
                jz      short loc_26CC
                jmp     def_25FC        ; jumptable 000025FC default case, case 4
; ---------------------------------------------------------------------------

loc_26CC:                               ; CODE XREF: sttrou+238↑j
                call    sub_212A7
                jmp     short loc_2687
; ---------------------------------------------------------------------------

loc_26D3:                               ; CODE XREF: sttrou+16D↑j
                                        ; DATA XREF: cseg02:jpt_25FC↓o
                mov     ax, seg USRNUM  ; jumptable 000025FC case 2
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                cmp     word ptr es:[bx+0D6h], 3
                jz      short loc_26F4
                nop
                push    cs
                call    near ptr sub_2D88

loc_26F4:                               ; CODE XREF: sttrou+25E↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:word_29778, 22h ; '"'
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                cmp     word ptr es:[bx+0D6h], 3
                jnz     short loc_2726
                nop
                push    cs
                call    near ptr sub_3854
                call    sub_159AB

loc_2726:                               ; CODE XREF: sttrou+28B↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:word_29778, 23h ; '#'
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                mov     ax, es:[bx+0D6h]
                mov     dx, seg USRPTR
                mov     es, dx
                assume es:nothing
                les     bx, dword ptr es:USRPTR ; struct user *usrptr;
                assume es:nothing
                mov     es:[bx+8], ax
                jmp     def_25FC        ; jumptable 000025FC default case, case 4
; ---------------------------------------------------------------------------

loc_275C:                               ; CODE XREF: sttrou+16D↑j
                                        ; DATA XREF: cseg02:jpt_25FC↓o
                push    ds              ; jumptable 000025FC case 3
                push    offset asc_21A6C ; "x"
                mov     ax, seg MARGV
                mov     es, ax
                assume es:nothing
                push    word ptr es:MARGV+2 ; char *margv[];
                push    word ptr es:MARGV ; char *margv[];
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_27C6
                push    0
                mov     ax, seg USRNUM
                mov     es, ax
                push    word ptr es:USRNUM ; int usrnum;
                call    _BTUPMT         ; int btupmt(int chan, char pmchar);
                add     sp, 4
                call    sub_211DD
                or      ax, ax
                jz      short loc_279D
                nop
                push    cs
                call    near ptr sub_31D4

loc_279D:                               ; CODE XREF: sttrou+307↑j
                push    30Ch
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     word ptr es:[bx+0D6h], 1
                jmp     def_25FC        ; jumptable 000025FC default case, case 4
; ---------------------------------------------------------------------------

loc_27C6:                               ; CODE XREF: sttrou+2EA↑j
                push    ds
                push    offset aBury    ; "BURY"
                mov     ax, seg MARGV
                mov     es, ax
                assume es:nothing
                push    word ptr es:MARGV+2 ; char *margv[];
                push    word ptr es:MARGV ; char *margv[];
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_27ED
                call    sub_FABA
                jmp     def_25FC        ; jumptable 000025FC default case, case 4
; ---------------------------------------------------------------------------

loc_27ED:                               ; CODE XREF: sttrou+354↑j
                mov     ax, seg MARGV
                mov     es, ax
                push    word ptr es:MARGV+2 ; char *margv[];
                push    word ptr es:MARGV ; char *margv[];
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                cmp     ax, 1
                jl      short loc_2825
                mov     ax, seg MARGV
                mov     es, ax
                push    word ptr es:MARGV+2 ; char *margv[];
                push    word ptr es:MARGV ; char *margv[];
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                cmp     ax, 5
                jle     short loc_2855

loc_2825:                               ; CODE XREF: sttrou+378↑j
                mov     ax, seg MARGV
                mov     es, ax
                les     bx, dword ptr es:MARGV ; char *margv[];
                assume es:nothing
                cmp     byte ptr es:[bx], 3Fh ; '?'
                jnz     short loc_283D
                call    sub_159AB
                jmp     def_25FC        ; jumptable 000025FC default case, case 4
; ---------------------------------------------------------------------------

loc_283D:                               ; CODE XREF: sttrou+3A4↑j
                push    423h
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    sub_15C7E
                add     sp, 4
                jmp     def_25FC        ; jumptable 000025FC default case, case 4
; ---------------------------------------------------------------------------

loc_2855:                               ; CODE XREF: sttrou+394↑j
                push    0
                push    1Eh
                push    ss
                lea     ax, [bp+var_1E]
                push    ax
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                mov     ax, seg USRNUM
                mov     es, ax
                push    word ptr es:USRNUM ; int usrnum;
                call    UACOFF          ; struct usracc *uaptr=uacoff(unum);
                pop     cx
                push    dx
                push    ax
                push    ss
                lea     ax, [bp+var_1E]
                push    ax
                call    STRCPY          ; char* strcpy(char* destination, const char* source );
                add     sp, 8
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_29888
                push    es:word_29886
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    37h ; '7'
                push    0
                push    ss
                lea     ax, [bp+var_1E]
                push    ax
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jz      short loc_2901
                xor     si, si

loc_28B3:                               ; CODE XREF: sttrou+470↓j
                inc     si
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                push    6
                push    0
                push    0
                call    ANPBTV          ; int anpbtv (void *recptr, int anpopt);
                add     sp, 6
                or      ax, ax
                jz      short loc_2901
                mov     ax, seg MARGV
                mov     es, ax
                assume es:nothing
                push    word ptr es:MARGV+2 ; char *margv[];
                push    word ptr es:MARGV ; char *margv[];
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                cmp     ax, si
                jg      short loc_28B3

loc_2901:                               ; CODE XREF: sttrou+420↑j
                                        ; sttrou+455↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:word_2AED3, 1
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+98h], 0FFFFh
                jz      short loc_2922
                jmp     loc_2AA6
; ---------------------------------------------------------------------------

loc_2922:                               ; CODE XREF: sttrou+48E↑j
                nop
                push    cs
                call    near ptr sub_3352
                push    3Eh ; '>'
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    _BTUPMT         ; int btupmt(int chan, char pmchar);
                add     sp, 4
                call    sub_192E8
                call    sub_15E3B
                push    4F1h
                call    PRFMSG          ; prfmsg(msgnum,p1,p2, ..• ,pn);
                pop     cx
                mov     ax, seg USRNUM
                mov     es, ax
                push    word ptr es:USRNUM ; int usrnum;
                call    OUTPRF          ; outprf (unum);
                pop     cx
                call    sub_1893B
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     es:word_2AEB9, 0FFFFh
                jnz     short loc_299A
                push    seg cseg08
                push    offset sub_1EA0C
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    BEGIN_POLLING   ; void begin_polling(int unum,void (*rouptr)());
                add     sp, 6
                mov     ax, seg USRNUM
                mov     es, ax
                mov     ax, word ptr es:USRNUM ; int usrnum;
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     es:word_2AEB9, ax

loc_299A:                               ; CODE XREF: sttrou+4DF↑j
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                mov     bx, word ptr es:USRNUM ; int usrnum;
                shl     bx, 1
                mov     ax, seg dseg18
                mov     es, ax
                assume es:dseg18
                cmp     word ptr es:[bx+0F68h], 0
                jnz     short loc_29BF
                push    ds
                push    offset aTypeRipOnToEnt ; "\r!!!\rType RIP ON to enter RIP GRAPHIC"...
                call    PRF             ; prf(string);
                add     sp, 4

loc_29BF:                               ; CODE XREF: sttrou+522↑j
                call    sub_955B
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    37Ah
                call    sub_15C18
                add     sp, 6
                push    0
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     word ptr es:[bx+0D6h], 2
                push    0
                push    0FFh
                push    ss
                lea     ax, [bp+var_11E]
                push    ax
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+1Eh]
                imul    ax, 34h ; '4'
                add     ax, 0AF2h
                push    seg dseg19
                push    ax
                push    ds
                push    offset aSSHasJustArriv ; "%s %s has just arrived into this world"
                push    ss
                lea     ax, [bp+var_11E]
                push    ax
                call    SPRINTF         ; int sprintf(char *str, const char *format, ... );
                add     sp, 10h
                push    ss
                lea     ax, [bp+var_11E]
                push    ax
                call    sub_19D25
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     word ptr es:[bx+15Ah], 0
                jmp     short def_25FC  ; jumptable 000025FC default case, case 4
; ---------------------------------------------------------------------------

loc_2AA6:                               ; CODE XREF: sttrou+490↑j
                push    37Bh
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4
                call    sub_159AB
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     word ptr es:[bx+0D6h], 3
                jmp     short def_25FC  ; jumptable 000025FC default case, case 4
; ---------------------------------------------------------------------------

loc_2AD3:                               ; CODE XREF: sttrou+16D↑j
                                        ; DATA XREF: cseg02:jpt_25FC↓o
                call    sub_4A44        ; jumptable 000025FC case 5
                jmp     short def_25FC  ; jumptable 000025FC default case, case 4
; ---------------------------------------------------------------------------

loc_2ADA:                               ; CODE XREF: sttrou+16D↑j
                                        ; DATA XREF: cseg02:jpt_25FC↓o
                call    sub_4961        ; jumptable 000025FC case 6
                jmp     short def_25FC  ; jumptable 000025FC default case, case 4
; ---------------------------------------------------------------------------

loc_2AE1:                               ; CODE XREF: sttrou+16D↑j
                                        ; DATA XREF: cseg02:jpt_25FC↓o
                call    sub_4A3C        ; jumptable 000025FC case 7
                jmp     short def_25FC  ; jumptable 000025FC default case, case 4
; ---------------------------------------------------------------------------

loc_2AE8:                               ; CODE XREF: sttrou+16D↑j
                                        ; DATA XREF: cseg02:jpt_25FC↓o
                call    sub_1AA7B       ; jumptable 000025FC case 8

def_25FC:                               ; CODE XREF: sttrou+168↑j
                                        ; sttrou+16D↑j ...
                mov     ax, seg dseg19  ; jumptable 000025FC default case, case 4
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+0D6h]
                mov     dx, seg USRPTR
                mov     es, dx
                assume es:nothing
                les     bx, dword ptr es:USRPTR ; struct user *usrptr;
                assume es:nothing
                mov     es:[bx+8], ax
                mov     ax, 1

loc_2B0D:                               ; CODE XREF: sttrou+1FA↑j
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sttrou          endp

; ---------------------------------------------------------------------------
jpt_25FC        dw offset loc_2601      ; DATA XREF: sttrou+16D↑r
                dw offset loc_268C      ; jump table for switch statement
                dw offset loc_26D3
                dw offset loc_275C
                dw offset def_25FC
                dw offset loc_2AD3
                dw offset loc_2ADA
                dw offset loc_2AE1
                dw offset loc_2AE8

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_2B24        proc far                ; CODE XREF: sttrou+1B0↑p
                                        ; sttrou+1FF↑p ...

var_20          = byte ptr -20h
var_2           = word ptr -2

                enter   20h, 0
                push    ds
                mov     ax, seg dseg10
                mov     ds, ax
                assume ds:dseg10
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_29864
                push    es:word_29862
                call    SETMBK          ; FILE *setmbk(mbkptr);
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                mov     al, es:byte_29F13
                mov     ah, 0
                push    ax
                call    TOUPPER         ; int toupper (int c);
                pop     cx
                mov     [bp+var_2], ax
                mov     cx, 7           ; switch 7 cases
                mov     bx, offset word_2D42

loc_2B60:                               ; CODE XREF: sub_2B24+47↓j
                mov     ax, cs:[bx]
                cmp     ax, [bp+var_2]
                jz      short loc_2B70
                add     bx, 2
                loop    loc_2B60
                jmp     def_2B70        ; jumptable 00002B70 default case
; ---------------------------------------------------------------------------

loc_2B70:                               ; CODE XREF: sub_2B24+42↑j
                jmp     word ptr cs:[bx+0Eh] ; switch jump
; ---------------------------------------------------------------------------

loc_2B74:                               ; CODE XREF: sub_2B24:loc_2B70↑j
                                        ; DATA XREF: cseg02:jpt_2B70↓o
                mov     ax, seg dseg19  ; jumptable 00002B70 case 80
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     word ptr es:[bx+158h], 0
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                test    es:word_2AEB3, 1
                jnz     short loc_2B96
                jmp     loc_2C15
; ---------------------------------------------------------------------------

loc_2B96:                               ; CODE XREF: sub_2B24+6D↑j
                push    0
                push    1Eh
                push    ss
                lea     ax, [bp+var_20]
                push    ax
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    UACOFF          ; struct usracc *uaptr=uacoff(unum);
                pop     cx
                push    dx
                push    ax
                push    ss
                lea     ax, [bp+var_20]
                push    ax
                call    STRCPY          ; char* strcpy(char* destination, const char* source );
                add     sp, 8
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_29888
                push    es:word_29886
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    37h ; '7'
                push    0
                push    ss
                lea     ax, [bp+var_20]
                push    ax
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jnz     short loc_2BF7
                call    sub_18B4A

loc_2BF7:                               ; CODE XREF: sub_2B24+CC↑j
                nop
                push    cs
                call    near ptr sub_3854
                call    sub_159AB
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     word ptr es:[bx+0D6h], 3
                jmp     loc_2D22
; ---------------------------------------------------------------------------

loc_2C15:                               ; CODE XREF: sub_2B24+6F↑j
                push    ds
                push    offset aSorryThisDemoH ; "Sorry,this demo has expired!\r"
                call    PRF             ; prf(string);
                add     sp, 4
                push    ds
                push    offset aPleaseTellYour ; "Please tell your SYSOP how much you enj"...
                call    PRF             ; prf(string);
                add     sp, 4
                push    ds
                push    offset aAndAskHimHerTo ; "and ask him/her to register this great "...
                jmp     short loc_2C87
; ---------------------------------------------------------------------------

loc_2C33:                               ; CODE XREF: sub_2B24:loc_2B70↑j
                                        ; DATA XREF: cseg02:jpt_2B70↓o
                nop                     ; jumptable 00002B70 case 73
                push    cs
                call    near ptr sub_2D5E
                jmp     loc_2D22
; ---------------------------------------------------------------------------

loc_2C3B:                               ; CODE XREF: sub_2B24:loc_2B70↑j
                                        ; DATA XREF: cseg02:jpt_2B70↓o
                call    sub_12D5E       ; jumptable 00002B70 case 72
                jmp     loc_2D22
; ---------------------------------------------------------------------------

loc_2C43:                               ; CODE XREF: sub_2B24:loc_2B70↑j
                                        ; DATA XREF: cseg02:jpt_2B70↓o
                nop                     ; jumptable 00002B70 case 87
                push    cs
                call    near ptr sub_319C
                jmp     loc_2D22
; ---------------------------------------------------------------------------

loc_2C4B:                               ; CODE XREF: sub_2B24:loc_2B70↑j
                                        ; DATA XREF: cseg02:jpt_2B70↓o
                mov     ax, seg dseg19  ; jumptable 00002B70 case 83
                mov     es, ax
                assume es:dseg19
                test    es:word_2AEB3, 2
                jz      short loc_2C83
                call    sub_5B48
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     word ptr es:[bx+0D6h], 5
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     word ptr es:[bx+0DAh], 0
                jmp     loc_2D22
; ---------------------------------------------------------------------------

loc_2C83:                               ; CODE XREF: sub_2B24+133↑j
                push    ds
                push    offset aSorryThisOptio ; "Sorry,this option is not available at t"...

loc_2C87:                               ; CODE XREF: sub_2B24+10D↑j
                call    PRF             ; prf(string);
                add     sp, 4
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    OUTPRF          ; outprf (unum);
                pop     cx
                jmp     loc_2D22
; ---------------------------------------------------------------------------

loc_2CA2:                               ; CODE XREF: sub_2B24:loc_2B70↑j
                                        ; DATA XREF: cseg02:jpt_2B70↓o
                push    4F0h            ; jumptable 00002B70 case 88
                call    PRFMSG          ; prfmsg(msgnum,p1,p2, ..• ,pn);
                pop     cx
                mov     ax, seg USRNUM
                mov     es, ax
                push    word ptr es:USRNUM ; int usrnum;
                call    OUTPRF          ; outprf (unum);
                pop     cx
                push    0
                mov     ax, seg USRNUM
                mov     es, ax
                push    word ptr es:USRNUM ; int usrnum;
                call    _BTUPMT         ; int btupmt(int chan, char pmchar);
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     word ptr es:[bx+0D6h], 0
                mov     ax, seg USRPTR
                mov     es, ax
                assume es:nothing
                les     bx, dword ptr es:USRPTR ; struct user *usrptr;
                assume es:nothing
                mov     word ptr es:[bx+8], 0
                jmp     short loc_2D22
; ---------------------------------------------------------------------------

loc_2CF2:                               ; CODE XREF: sub_2B24:loc_2B70↑j
                                        ; DATA XREF: cseg02:jpt_2B70↓o
                push    seg dseg19      ; jumptable 00002B70 case 63
                push    offset aV315    ; "V3.15"
                push    30Bh
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    sub_15C7E
                add     sp, 8

def_2B70:                               ; CODE XREF: sub_2B24+49↑j
                push    30Ch            ; jumptable 00002B70 default case
                mov     ax, seg USRNUM
                mov     es, ax
                push    word ptr es:USRNUM ; int usrnum;
                call    sub_15C7E
                add     sp, 4

loc_2D22:                               ; CODE XREF: sub_2B24+EE↑j
                                        ; sub_2B24+114↑j ...
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+0D6h]
                mov     dx, seg USRPTR
                mov     es, dx
                assume es:nothing
                les     bx, dword ptr es:USRPTR ; struct user *usrptr;
                assume es:nothing
                mov     es:[bx+8], ax
                pop     ds
                assume ds:dseg21
                leave
                retf
sub_2B24        endp

; ---------------------------------------------------------------------------
word_2D42       dw    3Fh,   48h,   49h,   50h
                                        ; DATA XREF: sub_2B24+39↑o
                dw    53h,   57h,   58h ; value table for switch statement
jpt_2B70        dw offset loc_2CF2      ; jump table for switch statement
                dw offset loc_2C3B
                dw offset loc_2C33
                dw offset loc_2B74
                dw offset loc_2C4B
                dw offset loc_2C43
                dw offset loc_2CA2

; =============== S U B R O U T I N E =======================================


sub_2D5E        proc far                ; CODE XREF: sub_2B24+111↑p
                push    ds
                mov     ax, seg dseg10
                mov     ds, ax
                assume ds:dseg10
                push    30Dh
                call    PRFMSG          ; prfmsg(msgnum,p1,p2, ..• ,pn);
                pop     cx
                push    30Eh
                call    PRFMSG          ; prfmsg(msgnum,p1,p2, ..• ,pn);
                pop     cx
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    OUTPRF          ; outprf (unum);
                pop     cx
                pop     ds
                assume ds:dseg21
                retf
sub_2D5E        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_2D88        proc far                ; CODE XREF: sttrou+262↑p

var_6           = word ptr -6
var_4           = dword ptr -4

                enter   6, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg10
                mov     ds, ax
                assume ds:dseg10
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     di, es:word_2AED3
                cmp     di, 3
                jle     short loc_2DA6
                mov     di, 3

loc_2DA6:                               ; CODE XREF: sub_2D88+19↑j
                push    ds
                push    offset aLast    ; "last"
                push    seg dseg19
                push    offset byte_29F13
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_2DBF
                jmp     loc_2E60
; ---------------------------------------------------------------------------

loc_2DBF:                               ; CODE XREF: sub_2D88+32↑j
                xor     si, si
                cmp     si, di
                jge     short loc_2E2D

loc_2DC5:                               ; CODE XREF: sub_2D88+A3↓j
                push    14h
                mov     ax, si
                imul    ax, 0C8h
                add     ax, 1C23h
                push    seg dseg19
                push    ax
                mov     ax, si
                imul    ax, 14h
                mov     dx, seg dseg19
                mov     es, dx
                mov     dx, word ptr es:dword_29DD4
                add     dx, ax
                add     dx, 0E8h
                push    word ptr es:dword_29DD4+2
                push    dx
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                mov     ax, si
                imul    ax, 14h
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     byte ptr es:[bx+0FBh], 0
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, seg dseg19
                push    es
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_2AED3
                pop     es
                assume es:nothing
                mov     es:[bx+124h], ax
                inc     si
                cmp     si, di
                jl      short loc_2DC5

loc_2E2D:                               ; CODE XREF: sub_2D88+3B↑j
                mov     si, di
                jmp     short loc_2E59
; ---------------------------------------------------------------------------

loc_2E31:                               ; CODE XREF: sub_2D88+D4↓j
                push    0
                push    14h
                mov     ax, si
                imul    ax, 14h
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29DD4
                add     dx, ax
                add     dx, 0E8h
                push    word ptr es:dword_29DD4+2
                push    dx
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                inc     si

loc_2E59:                               ; CODE XREF: sub_2D88+A7↑j
                cmp     si, 3
                jl      short loc_2E31
                jmp     short loc_2EC3
; ---------------------------------------------------------------------------

loc_2E60:                               ; CODE XREF: sub_2D88+34↑j
                xor     si, si

loc_2E62:                               ; CODE XREF: sub_2D88+139↓j
                push    14h
                mov     ax, si
                imul    ax, 14h
                mov     dx, seg dseg19
                mov     es, dx
                mov     dx, word ptr es:dword_29DD4
                add     dx, ax
                add     dx, 0E8h
                push    word ptr es:dword_29DD4+2
                push    dx
                mov     ax, si
                imul    ax, 0C8h
                add     ax, 1C23h
                push    seg dseg19
                push    ax
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                mov     bx, si
                imul    bx, 0C8h
                mov     ax, seg dseg19
                mov     es, ax
                mov     byte ptr es:[bx+1C36h], 0
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+124h]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     es:word_2AED3, ax
                inc     si
                cmp     si, 3
                jl      short loc_2E62

loc_2EC3:                               ; CODE XREF: sub_2D88+D6↑j
                push    seg dseg19
                push    offset byte_29F13
                push    cs
                call    near ptr sub_680
                add     sp, 4
                mov     [bp+var_6], ax
                cmp     ax, 0FFFFh
                jg      short loc_2EDB
                jmp     loc_2FA5
; ---------------------------------------------------------------------------

loc_2EDB:                               ; CODE XREF: sub_2D88+14E↑j
                mov     ax, [bp+var_6]
                imul    ax, 1Eh
                add     ax, 156h
                mov     word ptr [bp+var_4+2], seg dseg19
                mov     word ptr [bp+var_4], ax
                les     bx, [bp+var_4]
                assume es:nothing
                mov     ax, es:[bx+1Ch]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     es:word_2AEC7, ax
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29864
                push    es:word_29862
                call    SETMBK          ; FILE *setmbk(mbkptr);
                add     sp, 4
                push    2
                call    HASMKEY         ; int ok=hasmkey(int msgnum);
                pop     cx
                or      ax, ax
                jnz     short loc_2F2F
                les     bx, [bp+var_4]
                assume es:nothing
                cmp     word ptr es:[bx+18h], 1
                jnz     short loc_2F2F
                push    321h
                jmp     loc_3053
; ---------------------------------------------------------------------------

loc_2F2F:                               ; CODE XREF: sub_2D88+195↑j
                                        ; sub_2D88+19F↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+26h], 1
                jge     short loc_2F5F
                push    ds
                push    offset aHeyYouReDead ; "\r***\rHey! You're dead!\r\r"
                call    PRF             ; prf(string);
                add     sp, 4
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    OUTPRF          ; outprf (unum);
                pop     cx
                jmp     loc_3065
; ---------------------------------------------------------------------------

loc_2F5F:                               ; CODE XREF: sub_2D88+1B6↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_15D7B
                add     sp, 4
                les     bx, [bp+var_4]
                call    dword ptr es:[bx+14h]
                jmp     loc_3065
; ---------------------------------------------------------------------------

loc_2FA5:                               ; CODE XREF: sub_2D88+150↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     es:word_2AED3, 1
                jz      short loc_2FB5
                jmp     loc_3050
; ---------------------------------------------------------------------------

loc_2FB5:                               ; CODE XREF: sub_2D88+228↑j
                push    seg dseg19
                push    offset byte_29F13
                call    sub_156EA
                add     sp, 4
                push    dx
                push    ax
                push    37Ch
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8
                push    seg dseg19
                push    offset byte_29F13
                call    sub_156EA
                add     sp, 4
                push    dx
                push    ax
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    37Dh
                call    sub_15C18
                add     sp, 0Ah
                push    0
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                jmp     short loc_3065
; ---------------------------------------------------------------------------

loc_3050:                               ; CODE XREF: sub_2D88+22A↑j
                push    34Dh

loc_3053:                               ; CODE XREF: sub_2D88+1A4↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4

loc_3065:                               ; CODE XREF: sub_2D88+1D4↑j
                                        ; sub_2D88+21A↑j ...
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29778, 24h ; '$'
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AED3, 0
                jle     short loc_30BC
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                cmp     word ptr es:[bx+0D6h], 2
                jnz     short loc_30BC
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                mov     ax, word ptr es:USRNUM ; int usrnum;
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     es:word_2AED5, ax
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_1E7C4
                pop     cx

loc_30BC:                               ; CODE XREF: sub_2D88+2F4↑j
                                        ; sub_2D88+310↑j
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                mov     ax, word ptr es:USRNUM ; int usrnum;
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     es:word_2AED5, ax
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29778, 25h ; '%'
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    sub_1A0E4
                pop     cx
                mov     bx, seg dseg19
                mov     es, bx
                assume es:dseg19
                mov     word ptr es:dword_29DD4+2, dx
                mov     word ptr es:dword_29DD4, ax
                mov     ax, seg dseg19
                mov     es, ax
                test    es:word_2AEB3, 4
                jnz     short loc_3177
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+2Eh], 6
                jb      short loc_3177
                ja      short loc_3121
                cmp     word ptr es:[bx+2Ch], 1A80h
                jbe     short loc_3177

loc_3121:                               ; CODE XREF: sub_2D88+38F↑j
                push    ds
                push    offset aWhoopsSinceThi ; "Whoops! Since this is only a demo,you c"...
                call    PRF             ; prf(string);
                add     sp, 4
                push    ds
                push    offset aAMaximumOf4000 ; "a maximum of 400000 points! Please ask "...
                call    PRF             ; prf(string);
                add     sp, 4
                push    ds
                push    offset aRegisterThisGr ; "register this great game,so that you'd "...
                call    PRF             ; prf(string);
                add     sp, 4
                push    ds
                push    offset aTheFullBenifit ; "the full benifits of the real MUTANTS!"...
                call    PRF             ; prf(string);
                add     sp, 4
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    OUTPRF          ; outprf (unum);
                pop     cx
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     word ptr es:[bx+2Eh], 6
                mov     word ptr es:[bx+2Ch], 1A80h

loc_3177:                               ; CODE XREF: sub_2D88+37C↑j
                                        ; sub_2D88+38D↑j ...
                push    ds
                push    offset a137m_0  ; "\x1B[1;37m"
                push    ds
                push    offset aS_1     ; "%s"
                call    PRF             ; prf(string);
                add     sp, 8
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    OUTPRF          ; outprf (unum);
                pop     cx
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_2D88        endp


; =============== S U B R O U T I N E =======================================


sub_319C        proc far                ; CODE XREF: sub_2B24+121↑p
                push    ds
                mov     ax, seg dseg10
                mov     ds, ax
                assume ds:dseg10
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_29864
                push    es:word_29862
                call    SETMBK          ; FILE *setmbk(mbkptr);
                add     sp, 4
                push    4EAh
                call    PRFMSG          ; prfmsg(msgnum,p1,p2, ..• ,pn);
                pop     cx
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    OUTPRF          ; outprf (unum);
                pop     cx
                pop     ds
                assume ds:dseg21
                retf
sub_319C        endp


; =============== S U B R O U T I N E =======================================


sub_31D4        proc far                ; CODE XREF: sttrou+18E↑p
                                        ; sttrou+30B↑p
                push    ds
                mov     ax, seg dseg10
                mov     ds, ax
                assume ds:dseg10
                push    ds
                push    (offset aTypeRipOnToEnt+40h) ; "\r"
                call    PRF             ; prf(string);
                add     sp, 4
                mov     ax, seg USRNUM
                mov     es, ax
                push    word ptr es:USRNUM ; int usrnum;
                call    OUTPRF          ; outprf (unum);
                pop     cx
                call    sub_212A7
                call    sub_21399
                push    1
                push    18h
                push    53h ; 'S'
                push    1
                push    2
                call    sub_212BA
                add     sp, 0Ah
                push    0DCh
                push    271h
                push    0
                push    0
                call    sub_21507
                add     sp, 8
                push    7
                call    sub_2165C
                pop     cx
                push    7
                push    1
                call    sub_21423
                add     sp, 4
                push    ds
                push    (offset aMjwmutMdf+0Ah) ; ""
                push    ds
                push    (offset aMjwmutMdf+0Ah) ; ""
                push    140h
                push    271h
                push    0E6h
                push    3
                call    sub_213AC
                add     sp, 10h
                push    0E6h
                push    140h
                call    sub_2156E
                add     sp, 4
                push    4
                push    0
                push    3
                call    sub_21600
                add     sp, 6
                push    4
                call    sub_2165C
                pop     cx
                push    ds
                push    offset aMutantsV310a ; "Mutants! V3.10a"
                call    sub_215BF
                add     sp, 4
                push    2
                push    0
                push    3
                call    sub_21600
                add     sp, 6
                push    10Eh
                push    140h
                call    sub_2156E
                add     sp, 4
                push    ds
                push    offset aC199194Majorwa ; "(C) 1991-94 Majorware Inc."
                call    sub_215BF
                add     sp, 4
                push    8
                push    0
                call    sub_21423
                add     sp, 4
                push    ds
                push    offset aPM      ; "P^M"
                push    ds
                push    offset aPlayMutants ; "Play Mutants!"
                push    0
                push    0
                push    0F0h
                push    0Ah
                call    sub_213AC
                add     sp, 10h
                push    ds
                push    offset aIM      ; "I^M"
                push    ds
                push    offset aInformation ; "Information"
                push    0
                push    0
                push    109h
                push    0Ah
                call    sub_213AC
                add     sp, 10h
                push    ds
                push    offset aHM      ; "H^M"
                push    ds
                push    offset aHighScores ; "High Scores"
                push    0
                push    0
                push    122h
                push    0Ah
                call    sub_213AC
                add     sp, 10h
                push    ds
                push    offset aSM      ; "S^M"
                push    ds
                push    offset aMutantlink_1 ; "MutantLink"
                push    0
                push    0
                push    0F0h
                push    8Ch
                call    sub_213AC
                add     sp, 10h
                push    ds
                push    offset aWM      ; "W^M"
                push    ds
                push    offset aWhatsNew ; "Whats new?"
                push    0
                push    0
                push    109h
                push    8Ch
                call    sub_213AC
                add     sp, 10h
                push    ds
                push    offset aXM      ; "X^M"
                push    ds
                push    offset aExit    ; "Exit"
                push    0
                push    0
                push    122h
                push    8Ch
                call    sub_213AC
                add     sp, 10h
                pop     ds
                assume ds:dseg21
                retf
sub_31D4        endp


; =============== S U B R O U T I N E =======================================


sub_3352        proc far                ; CODE XREF: sttrou+495↑p
                                        ; sub_3A3B+82↓p
                                        ; DATA XREF: ...
                push    ds
                mov     ax, seg dseg10
                mov     ds, ax
                assume ds:dseg10
                push    ds
                push    (offset aTypeRipOnToEnt+40h) ; "\r"
                call    PRF             ; prf(string);
                add     sp, 4
                mov     ax, seg USRNUM
                mov     es, ax
                push    word ptr es:USRNUM ; int usrnum;
                call    OUTPRF          ; outprf (unum);
                pop     cx
                call    sub_212A7
                call    sub_21399
                push    1
                push    18h
                push    46h ; 'F'
                push    1
                push    2
                call    sub_212BA
                add     sp, 0Ah
                push    0DCh
                push    1F9h
                push    0
                push    0
                call    sub_21507
                add     sp, 8
                push    7
                call    sub_2165C
                pop     cx
                push    7
                push    1
                call    sub_21423
                add     sp, 4
                push    ds
                push    (offset aMjwmutMdf+0Ah) ; ""
                push    ds
                push    (offset aMjwmutMdf+0Ah) ; ""
                push    140h
                push    271h
                push    0E6h
                push    3
                call    sub_213AC
                add     sp, 10h
                push    8
                push    0
                call    sub_21423
                add     sp, 4
                push    ds
                push    offset aInvM    ; "INV^M"
                push    ds
                push    offset aInventory ; "Inventory"
                push    0
                push    0
                push    0EBh
                push    5
                call    sub_213AC
                add     sp, 10h
                push    ds
                push    offset aIteM    ; "ITE^M"
                push    ds
                push    offset aItems   ; "Items"
                push    0
                push    0
                push    0FFh
                push    5
                call    sub_213AC
                add     sp, 10h
                push    ds
                push    offset aWhoM    ; "WHO^M"
                push    ds
                push    offset aWhoSAround ; "Who's Around"
                push    0
                push    0
                push    113h
                push    5
                call    sub_213AC
                add     sp, 10h
                push    ds
                push    offset aStaM    ; "STA^M"
                push    ds
                push    offset aStat    ; "Stat"
                push    0
                push    0
                push    127h
                push    5
                call    sub_213AC
                add     sp, 10h
                push    ds
                push    offset aGet     ; "GET "
                push    ds
                push    offset aGetItem ; "Get Item"
                push    0
                push    0
                push    0EBh
                push    7Dh ; '}'
                call    sub_213AC
                add     sp, 10h
                push    ds
                push    offset aPoint   ; "POINT "
                push    ds
                push    offset aPointStaff ; "Point Staff"
                push    0
                push    0
                push    0FFh
                push    7Dh ; '}'
                call    sub_213AC
                add     sp, 10h
                push    ds
                push    offset aCombat  ; "COMBAT "
                push    ds
                push    offset aCombat_0 ; "Combat"
                push    0
                push    0
                push    113h
                push    7Dh ; '}'
                call    sub_213AC
                add     sp, 10h
                push    ds
                push    offset aWield   ; "WIELD "
                push    ds
                push    offset aWieldItem ; "Wield Item"
                push    0
                push    0
                push    127h
                push    7Dh ; '}'
                call    sub_213AC
                add     sp, 10h
                push    ds
                push    offset aHealM   ; "HEAL^M"
                push    ds
                push    offset aHealYourself ; "Heal Yourself"
                push    0
                push    0
                push    0EBh
                push    0F5h
                call    sub_213AC
                add     sp, 10h
                push    ds
                push    offset aLookM   ; "LOOK^M"
                push    ds
                push    offset aLook    ; "Look"
                push    0
                push    0
                push    0FFh
                push    0F5h
                call    sub_213AC
                add     sp, 10h
                push    ds
                push    offset aTravel  ; "TRAVEL "
                push    ds
                push    offset aTravel_0 ; "Travel"
                push    0
                push    0
                push    113h
                push    0F5h
                call    sub_213AC
                add     sp, 10h
                push    ds
                push    offset aConvert ; "CONVERT "
                push    ds
                push    offset aConvert_0 ; "Convert"
                push    0
                push    0
                push    127h
                push    0F5h
                call    sub_213AC
                add     sp, 10h
                push    ds
                push    offset aEast_0  ; "EAST "
                push    ds
                push    offset aEast_1  ; "EAST"
                push    0
                push    0
                push    0EBh
                push    16Dh
                call    sub_213AC
                add     sp, 10h
                push    ds
                push    offset aNorth_0 ; "NORTH "
                push    ds
                push    offset aNorth_1 ; "NORTH"
                push    0
                push    0
                push    0FFh
                push    16Dh
                call    sub_213AC
                add     sp, 10h
                push    ds
                push    offset aSouth_0 ; "SOUTH "
                push    ds
                push    offset aSouth_1 ; "SOUTH"
                push    0
                push    0
                push    113h
                push    16Dh
                call    sub_213AC
                add     sp, 10h
                push    ds
                push    offset aWest_0  ; "WEST "
                push    ds
                push    offset aWest_1  ; "WEST"
                push    0
                push    0
                push    127h
                push    16Dh
                call    sub_213AC
                add     sp, 10h
                push    ds
                push    offset aLastM   ; "LAST^M"
                push    ds
                push    offset aRepeatCmd ; "REPEAT CMD"
                push    0
                push    0
                push    0C8h
                push    1FEh
                call    sub_213AC
                add     sp, 10h
                push    7
                push    2
                call    sub_21423
                add     sp, 4
                push    ds
                push    offset a1       ; "1"
                push    ds
                push    offset a1       ; "1"
                push    0
                push    0
                push    0EEh
                push    1EAh
                call    sub_213AC
                add     sp, 10h
                push    ds
                push    offset a2       ; "2"
                push    ds
                push    offset a2       ; "2"
                push    0
                push    0
                push    0EEh
                push    1FEh
                call    sub_213AC
                add     sp, 10h
                push    ds
                push    offset a3       ; "3"
                push    ds
                push    offset a3       ; "3"
                push    0
                push    0
                push    0EEh
                push    212h
                call    sub_213AC
                add     sp, 10h
                push    ds
                push    offset a4       ; "4"
                push    ds
                push    offset a4       ; "4"
                push    0
                push    0
                push    102h
                push    1EAh
                call    sub_213AC
                add     sp, 10h
                push    ds
                push    offset a5       ; "5"
                push    ds
                push    offset a5       ; "5"
                push    0
                push    0
                push    102h
                push    1FEh
                call    sub_213AC
                add     sp, 10h
                push    ds
                push    offset a6       ; "6"
                push    ds
                push    offset a6       ; "6"
                push    0
                push    0
                push    102h
                push    212h
                call    sub_213AC
                add     sp, 10h
                push    ds
                push    offset a7       ; "7"
                push    ds
                push    offset a7       ; "7"
                push    0
                push    0
                push    116h
                push    1EAh
                call    sub_213AC
                add     sp, 10h
                push    ds
                push    offset a8       ; "8"
                push    ds
                push    offset a8       ; "8"
                push    0
                push    0
                push    116h
                push    1FEh
                call    sub_213AC
                add     sp, 10h
                push    ds
                push    offset a9       ; "9"
                push    ds
                push    offset a9       ; "9"
                push    0
                push    0
                push    116h
                push    212h
                call    sub_213AC
                add     sp, 10h
                push    ds
                push    (offset aPM+1)  ; "^M"
                push    ds
                push    (offset aNoMonstersOnFi+12h) ; "E"
                push    0
                push    0
                push    12Ah
                push    1EAh
                call    sub_213AC
                add     sp, 10h
                push    ds
                push    offset a0       ; "0"
                push    ds
                push    offset a0       ; "0"
                push    0
                push    0
                push    12Ah
                push    1FEh
                call    sub_213AC
                add     sp, 10h
                push    ds
                push    (offset aPM+1)  ; "^M"
                push    ds
                push    (offset aNoMonstersOnFi+12h) ; "E"
                push    0
                push    0
                push    12Ah
                push    212h
                call    sub_213AC
                add     sp, 10h
                push    ds
                push    offset aNM      ; "N^M"
                push    ds
                push    offset aN       ; "N"
                push    0
                push    0
                push    0EEh
                push    23Fh
                call    sub_213AC
                add     sp, 10h
                push    ds
                push    offset aWM      ; "W^M"
                push    ds
                push    offset aW       ; "W"
                push    0
                push    0
                push    102h
                push    22Bh
                call    sub_213AC
                add     sp, 10h
                push    ds
                push    (offset aIteM+2) ; "E^M"
                push    ds
                push    (offset aNoMonstersOnFi+12h) ; "E"
                push    0
                push    0
                push    102h
                push    253h
                call    sub_213AC
                add     sp, 10h
                push    ds
                push    offset aSM      ; "S^M"
                push    ds
                push    offset aS_13    ; "S"
                push    0
                push    0
                push    116h
                push    23Fh
                call    sub_213AC
                add     sp, 10h
                push    4
                push    2
                call    sub_21423
                add     sp, 4
                push    ds
                push    offset aResetripM ; "RESETRIP^M"
                push    ds
                push    offset aR       ; "R"
                push    0
                push    0
                push    131h
                push    262h
                call    sub_213AC
                add     sp, 10h
                push    ds
                push    offset aXM      ; "X^M"
                push    ds
                push    (offset aMjwmutIxx+9) ; "X"
                push    0
                push    0
                push    131h
                push    24Eh
                call    sub_213AC
                add     sp, 10h
                push    ds
                push    offset aRipOffM ; "RIP OFF^M"
                push    ds
                push    offset aO       ; "O"
                push    0
                push    0
                push    131h
                push    23Ah
                call    sub_213AC
                add     sp, 10h
                push    8
                push    0
                call    sub_21423
                add     sp, 4
                push    ds
                push    offset aSmf     ; "$SMF$"
                call    sub_21751
                add     sp, 4
                call    sub_21712
                call    sub_21730
                pop     ds
                assume ds:dseg21
                retf
sub_3352        endp


; =============== S U B R O U T I N E =======================================


sub_37B9        proc far
                push    si
                push    ds
                mov     ax, seg dseg10
                mov     ds, ax
                assume ds:dseg10
                push    ds
                push    offset aRepeatCommand ; "REPEAT COMMAND: "
                call    PRF             ; prf(string);
                add     sp, 4
                xor     si, si

loc_37CE:                               ; CODE XREF: sub_37B9+40↓j
                mov     ax, si
                imul    ax, 14h
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29DD4
                add     dx, ax
                add     dx, 0E8h
                push    word ptr es:dword_29DD4+2
                push    dx
                push    ds
                push    offset aS_11    ; "%s "
                call    PRF             ; prf(string);
                add     sp, 8
                inc     si
                cmp     si, 3
                jl      short loc_37CE
                push    ds
                push    (offset aTypeRipOnToEnt+40h) ; "\r"
                call    PRF             ; prf(string);
                add     sp, 4
                push    0
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                pop     ds
                assume ds:dseg21
                pop     si
                retf
sub_37B9        endp


; =============== S U B R O U T I N E =======================================


sub_3854        proc far                ; CODE XREF: sttrou+28F↑p
                                        ; sub_2B24+D5↑p
                push    ds
                mov     ax, seg dseg10
                mov     ds, ax
                assume ds:dseg10
                call    sub_212A7
                call    sub_21399
                push    1
                push    18h
                push    46h ; 'F'
                push    1
                push    2
                call    sub_212BA
                add     sp, 0Ah
                push    0DCh
                push    1F9h
                push    0
                push    0
                call    sub_21507
                add     sp, 8
                push    7
                push    1
                call    sub_21423
                add     sp, 4
                push    ds
                push    (offset aMjwmutMdf+0Ah) ; ""
                push    ds
                push    (offset aMjwmutMdf+0Ah) ; ""
                push    140h
                push    271h
                push    0E6h
                push    3
                call    sub_213AC
                add     sp, 10h
                push    0EBh
                push    0Dh
                call    sub_2156E
                add     sp, 4
                push    0
                push    0
                push    0
                call    sub_21600
                add     sp, 6
                push    4
                call    sub_2165C
                pop     cx
                push    ds
                push    offset aSelect  ; "Select"
                call    sub_215BF
                add     sp, 4
                push    0EBh
                push    11Bh
                call    sub_2156E
                add     sp, 4
                push    ds
                push    offset aBury_0  ; "Bury"
                call    sub_215BF
                add     sp, 4
                push    8
                push    0
                call    sub_21423
                add     sp, 4
                push    ds
                push    offset a1M      ; "1^M"
                push    ds
                push    offset aThief   ; "Thief"
                push    0
                push    0
                push    0FAh
                push    0Ah
                call    sub_213AC
                add     sp, 10h
                push    ds
                push    offset a2M      ; "2^M"
                push    ds
                push    offset aPriest  ; "Priest"
                push    0
                push    0
                push    110h
                push    0Ah
                call    sub_213AC
                add     sp, 10h
                push    ds
                push    offset a3M      ; "3^M"
                push    ds
                push    offset aWizard  ; "Wizard"
                push    0
                push    0
                push    126h
                push    0Ah
                call    sub_213AC
                add     sp, 10h
                push    ds
                push    offset a4M      ; "4^M"
                push    ds
                push    offset aWarrior ; "Warrior"
                push    0
                push    0
                push    0FAh
                push    82h
                call    sub_213AC
                add     sp, 10h
                push    ds
                push    offset a5M      ; "5^M"
                push    ds
                push    offset aMage    ; "Mage"
                push    0
                push    0
                push    110h
                push    82h
                call    sub_213AC
                add     sp, 10h
                push    ds
                push    offset aM       ; "?^M"
                push    ds
                push    offset aRedisplay ; "Redisplay"
                push    0
                push    0
                push    126h
                push    82h
                call    sub_213AC
                add     sp, 10h
                push    ds
                push    offset aBury1MM ; "bury 1^M?^M"
                push    ds
                push    offset aBuryThief ; "Bury Thief"
                push    0
                push    0
                push    0FAh
                push    118h
                call    sub_213AC
                add     sp, 10h
                push    ds
                push    offset aBury2MM ; "bury 2^M?^M"
                push    ds
                push    offset aBuryPriest ; "Bury Priest"
                push    0
                push    0
                push    110h
                push    118h
                call    sub_213AC
                add     sp, 10h
                push    ds
                push    offset aBury3MM ; "bury 3^M?^M"
                push    ds
                push    offset aBuryWizard ; "Bury Wizard"
                push    0
                push    0
                push    126h
                push    118h
                call    sub_213AC
                add     sp, 10h
                push    ds
                push    offset aBury4MM ; "bury 4^M?^M"
                push    ds
                push    offset aBuryWarrior ; "Bury Warrior"
                push    0
                push    0
                push    0FAh
                push    190h
                call    sub_213AC
                add     sp, 10h
                push    ds
                push    offset aBury5M  ; "bury 5^M"
                push    ds
                push    offset aBuryMage ; "Bury Mage"
                push    0
                push    0
                push    110h
                push    190h
                call    sub_213AC
                add     sp, 10h
                push    ds
                push    offset aXM      ; "X^M"
                push    ds
                push    offset aExit    ; "Exit"
                push    0
                push    0
                push    126h
                push    190h
                call    sub_213AC
                add     sp, 10h
                pop     ds
                assume ds:dseg21
                retf
sub_3854        endp


; =============== S U B R O U T I N E =======================================


sub_3A3B        proc far                ; DATA XREF: dseg19:070A↓o
                push    ds
                mov     ax, seg dseg10
                mov     ds, ax
                assume ds:dseg10
                mov     ax, seg dseg19
                mov     dx, seg NTERMS
                mov     es, dx
                assume es:nothing
                mov     dx, word ptr es:NTERMS ; int nterms;
                dec     dx
                mov     es, ax
                assume es:dseg19
                cmp     es:word_2AED5, dx
                jle     short loc_3A5B
                jmp     loc_3B02
; ---------------------------------------------------------------------------

loc_3A5B:                               ; CODE XREF: sub_3A3B+1B↑j
                mov     ax, seg MARGC
                mov     es, ax
                assume es:nothing
                cmp     word ptr es:MARGC, 2 ; int margc;
                jge     short loc_3A6B
                jmp     loc_3AFD
; ---------------------------------------------------------------------------

loc_3A6B:                               ; CODE XREF: sub_3A3B+2B↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_2AED5
                mov     dx, seg NTERMS
                mov     es, dx
                assume es:nothing
                cmp     ax, word ptr es:NTERMS ; int nterms;
                jl      short loc_3A83
                jmp     loc_3B02
; ---------------------------------------------------------------------------

loc_3A83:                               ; CODE XREF: sub_3A3B+43↑j
                mov     ax, seg MARGV
                mov     es, ax
                les     bx, dword ptr es:MARGV+4 ; char *margv[];
                assume es:nothing
                mov     al, es:[bx+1]
                mov     ah, 0
                push    ax
                call    TOUPPER         ; int toupper (int c);
                pop     cx
                cmp     ax, 46h ; 'F'
                jz      short loc_3AC2
                cmp     ax, 4Eh ; 'N'
                jnz     short loc_3AFD
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     bx, es:word_2AED5
                shl     bx, 1
                mov     ax, seg dseg18
                mov     es, ax
                assume es:dseg18
                mov     word ptr es:[bx+0F68h], 1
                push    cs
                call    near ptr sub_3352
                jmp     short loc_3B02
; ---------------------------------------------------------------------------

loc_3AC2:                               ; CODE XREF: sub_3A3B+62↑j
                call    sub_212A7
                push    ds
                push    offset unk_28A59
                call    PRF             ; prf(string);
                add     sp, 4
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    OUTPRF          ; outprf (unum);
                pop     cx
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     bx, es:word_2AED5
                shl     bx, 1
                mov     ax, seg dseg18
                mov     es, ax
                assume es:dseg18
                mov     word ptr es:[bx+0F68h], 0
                jmp     short loc_3B02
; ---------------------------------------------------------------------------

loc_3AFD:                               ; CODE XREF: sub_3A3B+2D↑j
                                        ; sub_3A3B+67↑j
                call    sub_12E92

loc_3B02:                               ; CODE XREF: sub_3A3B+1D↑j
                                        ; sub_3A3B+45↑j ...
                pop     ds
                assume ds:dseg21
                retf
sub_3A3B        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_3B04        proc far                ; CODE XREF: _INIT__MUTANTS+368↑p
                                        ; _INIT__MUTANTS+385↑p ...

var_64          = byte ptr -64h
arg_0           = word ptr  6
arg_2           = word ptr  8
arg_4           = word ptr  0Ah

                enter   64h, 0
                push    ds
                mov     ax, seg dseg10
                mov     ds, ax
                assume ds:dseg10
                push    [bp+arg_2]
                push    [bp+arg_0]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_29774
                push    es:word_29772
                push    ds
                push    offset aSS      ; "%s\\%s"
                push    ss
                lea     ax, [bp+var_64]
                push    ax
                call    SPRINTF         ; int sprintf(char *str, const char *format, ... );
                add     sp, 10h
                push    [bp+arg_4]
                push    ss
                lea     ax, [bp+var_64]
                push    ax
                call    OPNBTV          ; BTVFILE *bbptr=opnbtv(char *filnae, int reclen);
                add     sp, 6
                pop     ds
                assume ds:dseg21
                leave
                retf
sub_3B04        endp

; ---------------------------------------------------------------------------
                align 10h
cseg02          ends

; Segment Number    : 3
; Alloc Size        : 4FB0h
; Offset in the file: 6200h  Length: 4FB0h
; Attributes  (0D00): CODE Relocations DPL: 3
; ===========================================================================

; Segment type: Pure code
cseg03          segment para public 'CODE' use16
                assume cs:cseg03
                assume es:nothing, ss:nothing, ds:dseg21, fs:nothing, gs:nothing

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_3B50        proc far                ; CODE XREF: sub_41C0+7↓p

var_9E          = byte ptr -9Eh
var_76          = word ptr -76h
var_74          = word ptr -74h
var_72          = word ptr -72h
var_70          = word ptr -70h
var_6E          = word ptr -6Eh
var_6C          = word ptr -6Ch
var_6A          = word ptr -6Ah
var_68          = word ptr -68h
var_62          = byte ptr -62h
var_5E          = word ptr -5Eh
var_5C          = word ptr -5Ch
var_5A          = byte ptr -5Ah
var_54          = byte ptr -54h
var_13          = word ptr -13h
var_11          = word ptr -11h
var_F           = word ptr -0Fh
var_D           = word ptr -0Dh
var_8           = word ptr -8
var_6           = word ptr -6
var_4           = word ptr -4
var_2           = word ptr -2

                enter   9Eh, 0
                push    si
                push    ds
                mov     ax, seg dseg11
                mov     ds, ax
                assume ds:dseg11
                call    sub_21794
                push    5Ah ; 'Z'
                push    ds
                push    offset aMjwlnkhdDat ; "MJWLNKHD.DAT"
                call    sub_3B04
                add     sp, 6
                mov     bx, seg dseg19
                mov     es, bx
                assume es:dseg19
                mov     es:word_2986C, dx
                mov     es:word_2986A, ax
                push    3Ch ; '<'
                push    ds
                push    offset aMjwlnkusDat ; "MJWLNKUS.DAT"
                call    sub_3B04
                add     sp, 6
                mov     bx, seg dseg19
                mov     es, bx
                mov     es:word_29868, dx
                mov     es:word_29866, ax
                nop
                push    cs
                call    near ptr sub_5D04
                push    3
                push    ds
                push    offset aCnf     ; "CNF"
                push    ds
                push    offset unk_22A70
                call    STZCPY          ; stzcpy(char *dest, char *source, int nbytes);
                add     sp, 0Ah
                push    4
                push    ds
                push    offset aAzz     ; "AZZ"
                push    ds
                push    offset unk_22A74
                call    STZCPY          ; stzcpy(char *dest, char *source, int nbytes);
                add     sp, 0Ah
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                mov     word ptr es:USRNUM, 0FFFFh ; int usrnum;
                push    3Ch ; '<'
                push    ds
                push    offset aWelcomeToMutan ; "Welcome to Mutantlink, Local Version!"
                push    seg dseg19
                push    offset unk_29DD8
                call    STZCPY          ; stzcpy(char *dest, char *source, int nbytes);
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                test    es:word_2AEB3, 2
                jnz     short loc_3BF2
                jmp     loc_3F5A
; ---------------------------------------------------------------------------

loc_3BF2:                               ; CODE XREF: sub_3B50+9D↑j
                nop
                push    cs
                call    near ptr sub_859C
                nop
                push    cs
                call    near ptr sub_61BB
                nop
                push    cs
                call    near ptr sub_54B6
                nop
                push    cs
                call    near ptr sub_8527
                nop
                push    cs
                call    near ptr sub_51B5
                push    ds
                push    offset unk_22A67
                nop
                push    cs
                call    near ptr sub_7A99
                add     sp, 4
                push    ax
                push    ds
                push    offset unk_22A6B
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                pop     dx
                cmp     dx, ax
                jnz     short loc_3C39
                push    ds
                push    offset unk_22A6B
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                or      ax, ax
                jnz     short loc_3C5C

loc_3C39:                               ; CODE XREF: sub_3B50+D7↑j
                push    ds
                push    offset aMutantlinkIdPa ; "Mutantlink ID Password incorrect"
                push    ds
                push    offset aMutantlinkDisa ; "Mutantlink disabled: IDPASS"
                call    SHOCST          ; void shocst(char *summary, char *detail, p1, p1,...,pn);
                add     sp, 8
                nop
                push    cs
                call    near ptr sub_8918
                mov     ax, seg dseg19
                mov     es, ax
                and     es:word_2AEB3, 0FFFDh
                jmp     loc_3F5A
; ---------------------------------------------------------------------------

loc_3C5C:                               ; CODE XREF: sub_3B50+E7↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29878
                push    es:word_29876
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    3Fh ; '?'
                push    1
                push    0
                push    0
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jnz     short loc_3C8A
                jmp     loc_3DE2
; ---------------------------------------------------------------------------

loc_3C8A:                               ; CODE XREF: sub_3B50+135↑j
                xor     si, si

loc_3C8C:                               ; CODE XREF: sub_3B50+28F↓j
                push    1
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    seg dseg19
                push    offset unk_29A78
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                call    ABSBTV          ; long absbtv (void);
                mov     [bp+var_2], dx
                mov     [bp+var_4], ax
                push    ds
                push    offset aMl      ; "ML"
                push    seg dseg19
                push    offset unk_29A78
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_3CC7
                jmp     loc_3DA1
; ---------------------------------------------------------------------------

loc_3CC7:                               ; CODE XREF: sub_3B50+172↑j
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_29A9E, 0
                jz      short loc_3CD7
                jmp     loc_3DA1
; ---------------------------------------------------------------------------

loc_3CD7:                               ; CODE XREF: sub_3B50+182↑j
                push    0
                push    28h ; '('
                push    ss
                lea     ax, [bp+var_9E]
                push    ax
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                push    ds
                push    offset unk_22A67
                push    seg dseg19
                push    offset unk_29A78
                push    ds
                push    offset aSS_0    ; "%s@%s"
                push    ss
                lea     ax, [bp+var_9E]
                push    ax
                call    SPRINTF         ; int sprintf(char *str, const char *format, ... );
                add     sp, 10h
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:word_29A98
                mov     dx, es:word_29A96
                mov     [bp+var_74], ax
                mov     [bp+var_76], dx
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:word_29A9C
                mov     dx, es:word_29A9A
                mov     [bp+var_70], ax
                mov     [bp+var_72], dx
                nop
                push    cs
                call    near ptr sub_4148
                mov     [bp+var_6C], dx
                mov     [bp+var_6E], ax
                nop
                push    cs
                call    near ptr sub_40D0
                mov     [bp+var_68], dx
                mov     [bp+var_6A], ax
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29868
                push    es:word_29866
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    37h ; '7'
                push    0
                push    ss
                lea     ax, [bp+var_9E]
                push    ax
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jz      short loc_3D92
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    0
                push    0
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                push    ss
                lea     ax, [bp+var_9E]
                push    ax
                call    UPDBTV          ; void updbtv(char *recptr);
                jmp     short loc_3D9D
; ---------------------------------------------------------------------------

loc_3D92:                               ; CODE XREF: sub_3B50+21E↑j
                push    ss
                lea     ax, [bp+var_9E]
                push    ax
                call    INSBTV          ; void insbtv(char *recptr);

loc_3D9D:                               ; CODE XREF: sub_3B50+240↑j
                add     sp, 4
                inc     si

loc_3DA1:                               ; CODE XREF: sub_3B50+174↑j
                                        ; sub_3B50+184↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29878
                push    es:word_29876
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    1
                push    [bp+var_2]
                push    [bp+var_4]
                push    seg dseg19
                push    offset unk_29A78
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                push    39h ; '9'
                call    QNPBTV          ; int qnpbtv (int getopt);
                pop     cx
                or      ax, ax
                jz      short loc_3DE2
                cmp     si, 0Ah
                jge     short loc_3DE2
                jmp     loc_3C8C
; ---------------------------------------------------------------------------

loc_3DE2:                               ; CODE XREF: sub_3B50+137↑j
                                        ; sub_3B50+288↑j ...
                mov     [bp+var_6], 0
                mov     [bp+var_8], 0
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29868
                push    es:word_29866
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    3Fh ; '?'
                push    1
                push    0
                push    0
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jz      short loc_3E70
                xor     si, si

loc_3E19:                               ; CODE XREF: sub_3B50+31E↓j
                push    1
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    ss
                lea     ax, [bp+var_9E]
                push    ax
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                push    ds
                push    offset unk_22A67
                push    1
                push    ss
                lea     ax, [bp+var_9E]
                push    ax
                nop
                push    cs
                call    near ptr sub_4050
                add     sp, 6
                push    dx
                push    ax
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_3E5F
                mov     ax, [bp+var_74]
                mov     dx, [bp+var_76]
                add     [bp+var_8], dx
                adc     [bp+var_6], ax
                inc     si

loc_3E5F:                               ; CODE XREF: sub_3B50+300↑j
                push    39h ; '9'
                call    QNPBTV          ; int qnpbtv (int getopt);
                pop     cx
                or      ax, ax
                jz      short loc_3E70
                cmp     si, 0Ah
                jl      short loc_3E19

loc_3E70:                               ; CODE XREF: sub_3B50+2C5↑j
                                        ; sub_3B50+319↑j
                push    4
                push    ds
                push    offset unk_22A67
                push    ss
                lea     ax, [bp+var_62]
                push    ax
                call    STZCPY          ; stzcpy(char *dest, char *source, int nbytes);
                add     sp, 0Ah
                mov     ax, [bp+var_6]
                mov     dx, [bp+var_8]
                mov     [bp+var_5C], ax
                mov     [bp+var_5E], dx
                push    6
                push    ds
                push    offset unk_22A6B
                push    ss
                lea     ax, [bp+var_5A]
                push    ax
                call    STZCPY          ; stzcpy(char *dest, char *source, int nbytes);
                add     sp, 0Ah
                push    41h ; 'A'
                push    ds
                push    offset unk_22C84
                push    ss
                lea     ax, [bp+var_54]
                push    ax
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                nop
                push    cs
                call    near ptr sub_4148
                mov     [bp+var_11], dx
                mov     [bp+var_13], ax
                nop
                push    cs
                call    near ptr sub_40D0
                mov     [bp+var_D], dx
                mov     [bp+var_F], ax
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2986C
                push    es:word_2986A
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    37h ; '7'
                push    0
                push    ss
                lea     ax, [bp+var_62]
                push    ax
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jz      short loc_3F18
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    0
                push    0
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                push    ss
                lea     ax, [bp+var_62]
                push    ax
                call    UPDBTV          ; void updbtv(char *recptr);
                jmp     short loc_3F32
; ---------------------------------------------------------------------------

loc_3F18:                               ; CODE XREF: sub_3B50+3A5↑j
                push    ds
                push    offset aMutantlinkInit ; "Mutantlink Initialized"
                push    ds
                push    offset aMutantlinkInit ; "Mutantlink Initialized"
                call    SHOCST          ; void shocst(char *summary, char *detail, p1, p1,...,pn);
                add     sp, 8
                push    ss
                lea     ax, [bp+var_62]
                push    ax
                call    INSBTV          ; void insbtv(char *recptr);

loc_3F32:                               ; CODE XREF: sub_3B50+3C6↑j
                add     sp, 4
                push    ds
                push    offset aMutantlinkActi ; "Mutantlink Active"
                push    ds
                push    offset aMutantlinkActi ; "Mutantlink Active"
                call    SHOCST          ; void shocst(char *summary, char *detail, p1, p1,...,pn);
                add     sp, 8
                cmp     word_22D05, 0FFFFh
                jle     short loc_3F5A
                nop
                push    cs
                call    near ptr sub_89BA
                or      ax, ax
                jz      short loc_3F5A
                nop
                push    cs
                call    near ptr sub_5BAC

loc_3F5A:                               ; CODE XREF: sub_3B50+9F↑j
                                        ; sub_3B50+109↑j ...
                xor     ax, ax
                pop     ds
                assume ds:dseg21
                pop     si
                leave
                retf
sub_3B50        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_3F60        proc far                ; CODE XREF: sub_8344+E2↓p

var_A           = byte ptr -0Ah
var_9           = byte ptr -9
var_8           = byte ptr -8
var_7           = byte ptr -7
var_6           = byte ptr -6
var_5           = byte ptr -5
arg_0           = word ptr  6
arg_2           = word ptr  8

                enter   0Ah, 0
                push    ds
                mov     ax, seg dseg11
                mov     ds, ax
                assume ds:dseg11
                push    0
                push    0Ah
                push    ds
                push    offset byte_2200A
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                push    [bp+arg_2]
                push    [bp+arg_0]
                push    ds
                push    offset aLd_0    ; "%ld"
                push    ss
                lea     ax, [bp+var_A]
                push    ax
                call    SPRINTF         ; int sprintf(char *str, const char *format, ... );
                add     sp, 0Ch
                mov     al, [bp+var_8]
                mov     byte_2200A, al
                mov     al, [bp+var_7]
                mov     byte_2200B, al
                mov     byte_2200C, 2Fh ; '/'
                mov     al, [bp+var_6]
                mov     byte_2200D, al
                mov     al, [bp+var_5]
                mov     byte_2200E, al
                mov     byte_2200F, 2Fh ; '/'
                mov     al, [bp+var_A]
                mov     byte_22010, al
                mov     al, [bp+var_9]
                mov     byte_22011, al
                mov     dx, ds
                mov     ax, 0BAh
                pop     ds
                assume ds:dseg21
                leave
                retf
sub_3F60        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_3FC7        proc far                ; CODE XREF: sub_41CC+9F↓p
                                        ; sub_651D+122↓p ...

var_5A          = byte ptr -5Ah
var_52          = byte ptr -52h

                enter   5Ah, 0
                push    ds
                mov     ax, seg dseg11
                mov     ds, ax
                assume ds:dseg11
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2986C
                push    es:word_2986A
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    0
                push    6
                push    ss
                lea     ax, [bp+var_52]
                push    ax
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                push    37h ; '7'
                push    0
                push    ds
                push    offset unk_22A70
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jz      short loc_4038
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    ss
                lea     ax, [bp+var_5A]
                push    ax
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                push    6
                push    ss
                lea     ax, [bp+var_52]
                push    ax
                push    ds
                push    offset unk_22014
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                jmp     short loc_4048
; ---------------------------------------------------------------------------

loc_4038:                               ; CODE XREF: sub_3FC7+44↑j
                push    0
                push    6
                push    ds
                push    offset unk_22014
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8

loc_4048:                               ; CODE XREF: sub_3FC7+6F↑j
                mov     dx, ds
                mov     ax, 0C4h
                pop     ds
                assume ds:dseg21
                leave
                retf
sub_3FC7        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4050        proc far                ; CODE XREF: sub_3B50+2EE↑p
                                        ; sub_41CC+5A1↓p ...

arg_0           = dword ptr  6
arg_4           = word ptr  0Ah

                push    bp
                mov     bp, sp
                push    si
                push    di
                push    ds
                mov     ax, seg dseg11
                mov     ds, ax
                assume ds:dseg11
                push    0
                push    28h ; '('
                push    ds
                push    offset unk_2201A
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                push    0
                push    5
                push    ds
                push    offset unk_22042
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                xor     dx, dx
                xor     di, di
                xor     cx, cx
                jmp     short loc_40B0
; ---------------------------------------------------------------------------

loc_4083:                               ; CODE XREF: sub_4050+67↓j
                les     bx, [bp+arg_0]
                assume es:nothing
                cmp     byte ptr es:[bx], 40h ; '@'
                jnz     short loc_4091
                inc     dx
                xor     di, di
                jmp     short loc_40AC
; ---------------------------------------------------------------------------

loc_4091:                               ; CODE XREF: sub_4050+3A↑j
                or      dx, dx
                jnz     short loc_40A1
                les     bx, [bp+arg_0]
                mov     al, es:[bx]
                mov     [di+0CAh], al
                jmp     short loc_40AB
; ---------------------------------------------------------------------------

loc_40A1:                               ; CODE XREF: sub_4050+43↑j
                les     bx, [bp+arg_0]
                mov     al, es:[bx]
                mov     [di+0F2h], al

loc_40AB:                               ; CODE XREF: sub_4050+4F↑j
                inc     di

loc_40AC:                               ; CODE XREF: sub_4050+3F↑j
                inc     word ptr [bp+arg_0]
                inc     cx

loc_40B0:                               ; CODE XREF: sub_4050+31↑j
                les     bx, [bp+arg_0]
                cmp     byte ptr es:[bx], 0
                jnz     short loc_4083
                cmp     [bp+arg_4], 0
                jnz     short loc_40C6
                mov     dx, ds
                mov     ax, 0CAh
                jmp     short loc_40CB
; ---------------------------------------------------------------------------

loc_40C6:                               ; CODE XREF: sub_4050+6D↑j
                mov     dx, ds
                mov     ax, 0F2h

loc_40CB:                               ; CODE XREF: sub_4050+74↑j
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                pop     bp
                retf
sub_4050        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_40D0        proc far                ; CODE XREF: sub_3B50+1EA↑p
                                        ; sub_3B50+372↑p

var_2C          = byte ptr -2Ch
var_2B          = byte ptr -2Bh
var_2A          = byte ptr -2Ah
var_29          = byte ptr -29h
var_28          = byte ptr -28h
var_27          = byte ptr -27h
var_18          = byte ptr -18h
var_17          = byte ptr -17h
var_15          = byte ptr -15h
var_14          = byte ptr -14h
var_12          = byte ptr -12h
var_11          = byte ptr -11h
var_4           = word ptr -4
var_2           = word ptr -2

                enter   2Ch, 0
                push    ds
                mov     ax, seg dseg11
                mov     ds, ax
                assume ds:dseg11
                push    14h
                call    NOW             ; int time=now()
                push    ax
                call    NCTIME          ; char *asctim=nctime(int time);
                pop     cx
                push    dx
                push    ax
                push    ss
                lea     ax, [bp+var_18]
                push    ax
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                push    0
                push    14h
                push    ss
                lea     ax, [bp+var_2C]
                push    ax
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                mov     al, [bp+var_18]
                mov     [bp+var_2C], al
                mov     al, [bp+var_17]
                mov     [bp+var_2B], al
                mov     al, [bp+var_15]
                mov     [bp+var_2A], al
                mov     al, [bp+var_14]
                mov     [bp+var_29], al
                mov     al, [bp+var_12]
                mov     [bp+var_28], al
                mov     al, [bp+var_11]
                mov     [bp+var_27], al
                push    ss
                lea     ax, [bp+var_2C]
                push    ax
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                mov     [bp+var_2], dx
                mov     [bp+var_4], ax
                mov     dx, [bp+var_2]
                mov     ax, [bp+var_4]
                pop     ds
                assume ds:dseg21
                leave
                retf
sub_40D0        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4148        proc far                ; CODE XREF: sub_3B50+1DF↑p
                                        ; sub_3B50+367↑p

var_2C          = byte ptr -2Ch
var_2B          = byte ptr -2Bh
var_2A          = byte ptr -2Ah
var_29          = byte ptr -29h
var_28          = byte ptr -28h
var_27          = byte ptr -27h
var_18          = byte ptr -18h
var_17          = byte ptr -17h
var_15          = byte ptr -15h
var_14          = byte ptr -14h
var_12          = byte ptr -12h
var_11          = byte ptr -11h
var_4           = word ptr -4
var_2           = word ptr -2

                enter   2Ch, 0
                push    ds
                mov     ax, seg dseg11
                mov     ds, ax
                assume ds:dseg11
                push    14h
                call    TODAY           ; int date=today();
                push    ax
                call    NCDATE          ; char *ascdat=ncdate(int date);
                pop     cx
                push    dx
                push    ax
                push    ss
                lea     ax, [bp+var_18]
                push    ax
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                push    0
                push    14h
                push    ss
                lea     ax, [bp+var_2C]
                push    ax
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                mov     al, [bp+var_12]
                mov     [bp+var_2C], al
                mov     al, [bp+var_11]
                mov     [bp+var_2B], al
                mov     al, [bp+var_18]
                mov     [bp+var_2A], al
                mov     al, [bp+var_17]
                mov     [bp+var_29], al
                mov     al, [bp+var_15]
                mov     [bp+var_28], al
                mov     al, [bp+var_14]
                mov     [bp+var_27], al
                push    ss
                lea     ax, [bp+var_2C]
                push    ax
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                mov     [bp+var_2], dx
                mov     [bp+var_4], ax
                mov     dx, [bp+var_2]
                mov     ax, [bp+var_4]
                pop     ds
                assume ds:dseg21
                leave
                retf
sub_4148        endp


; =============== S U B R O U T I N E =======================================


sub_41C0        proc far                ; CODE XREF: _INIT__MUTANTS+3EF↑P
                push    ds
                mov     ax, seg dseg11
                mov     ds, ax
                assume ds:dseg11
                push    cs
                call    near ptr sub_3B50
                pop     ds
                assume ds:dseg21
                retf
sub_41C0        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_41CC        proc far                ; CODE XREF: mcurou+22↑P

var_120         = byte ptr -120h
var_104         = byte ptr -104h
var_F4          = byte ptr -0F4h
var_E4          = byte ptr -0E4h
var_A2          = byte ptr -0A2h
var_66          = byte ptr -66h
var_62          = word ptr -62h
var_60          = word ptr -60h
var_5E          = byte ptr -5Eh
var_58          = byte ptr -58h
var_17          = word ptr -17h
var_15          = word ptr -15h
var_13          = word ptr -13h
var_11          = word ptr -11h
var_C           = word ptr -0Ch
var_A           = word ptr -0Ah
var_8           = word ptr -8
var_6           = byte ptr -6

                enter   120h, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg11
                mov     ds, ax
                assume ds:dseg11
                lea     ax, [bp+var_120]
                push    ss
                push    ax
                push    ds
                push    offset off_22047
                mov     cx, 1Ch
                call    F_SCOPY
                mov     ax, seg GENBB
                mov     es, ax
                assume es:nothing
                push    word ptr es:GENBB+2 ; BTVFILE *genbb;
                push    word ptr es:GENBB ; BTVFILE *genbb;
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    19h
                push    ds
                push    offset a294hsuyd ; "294HSUYD"
                push    seg dseg19
                push    offset unk_2B215
                call    STZCPY          ; stzcpy(char *dest, char *source, int nbytes);
                add     sp, 0Ah
                push    37h ; '7'
                push    1
                push    seg dseg19
                push    offset unk_2B215
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jz      short loc_425C
                push    1
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    seg dseg19
                push    offset unk_2B1F7
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                inc     es:word_2B22E
                push    3Bh ; ';'
                push    seg dseg19
                push    offset unk_2B1F7
                call    UPVBTV          ; void upvbtv(char *recptr, int length);
                add     sp, 6

loc_425C:                               ; CODE XREF: sub_41CC+5D↑j
                nop
                push    cs
                call    near ptr sub_79D2
                or      ax, ax
                jnz     short loc_4268
                jmp     loc_4704
; ---------------------------------------------------------------------------

loc_4268:                               ; CODE XREF: sub_41CC+97↑j
                push    6
                push    cs
                call    near ptr sub_3FC7
                push    dx
                push    ax
                push    ss
                lea     ax, [bp+var_6]
                push    ax
                call    STZCPY          ; stzcpy(char *dest, char *source, int nbytes);
                add     sp, 0Ah
                push    0
                push    41h ; 'A'
                push    ss
                lea     ax, [bp+var_58]
                push    ax
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2986C
                push    es:word_2986A
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    37h ; '7'
                push    0
                push    ds
                push    offset unk_22A70
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jz      short loc_42CF
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    ss
                lea     ax, [bp+var_66]
                push    ax
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah

loc_42CF:                               ; CODE XREF: sub_41CC+EB↑j
                push    41h ; 'A'
                push    ss
                lea     ax, [bp+var_58]
                push    ax
                push    ss
                lea     ax, [bp+var_E4]
                push    ax
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29888
                push    es:word_29886
                call    CLSBTV          ; void clsbtv (struct btvblk *bbp);
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29884
                push    es:word_29882
                call    CLSBTV          ; void clsbtv (struct btvblk *bbp);
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29880
                push    es:word_2987E
                call    CLSBTV          ; void clsbtv (struct btvblk *bbp);
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2987C
                push    es:word_2987A
                call    CLSBTV          ; void clsbtv (struct btvblk *bbp);
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29878
                push    es:word_29876
                call    CLSBTV          ; void clsbtv (struct btvblk *bbp);
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2986C
                push    es:word_2986A
                call    CLSBTV          ; void clsbtv (struct btvblk *bbp);
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29868
                push    es:word_29866
                call    CLSBTV          ; void clsbtv (struct btvblk *bbp);
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29A30, 2
                push    ds
                push    offset aResettingMutan ; "Resetting Mutants"
                push    ds
                push    offset aResettingMutan ; "Resetting Mutants"
                call    SHOCST          ; void shocst(char *summary, char *detail, p1, p1,...,pn);
                add     sp, 8
                mov     [bp+var_8], 7
                mov     di, 1
                xor     si, si

loc_43AB:                               ; CODE XREF: sub_41CC+267↓j
                push    0
                push    0Fh
                push    ss
                lea     ax, [bp+var_F4]
                push    ax
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                mov     bx, si
                shl     bx, 2
                lea     ax, [bp+var_120]
                add     bx, ax
                push    word ptr ss:[bx+2]
                push    word ptr ss:[bx]
                push    ds
                push    offset aSVir    ; "%s.VIR"
                push    ss
                lea     ax, [bp+var_F4]
                push    ax
                call    SPRINTF         ; int sprintf(char *str, const char *format, ... );
                add     sp, 0Ch
                push    ds
                push    offset aRb_0    ; "rb"
                push    ss
                lea     ax, [bp+var_F4]
                push    ax
                call    F_OPEN          ; file* fopen(const char* filename, USE);
                add     sp, 8
                mov     [bp+var_A], dx
                mov     [bp+var_C], ax
                or      ax, dx
                jnz     short loc_441F
                push    ds
                push    offset aMutantsCannotB ; "Mutants cannot be reset"
                push    ss
                lea     ax, [bp+var_F4]
                push    ax
                push    ds
                push    offset aCanTOpenS ; "Can't open %s"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                call    SHOCST          ; void shocst(char *summary, char *detail, p1, p1,...,pn);
                add     sp, 8
                xor     di, di

loc_441F:                               ; CODE XREF: sub_41CC+22F↑j
                push    [bp+var_A]
                push    [bp+var_C]
                call    FCLOSE          ; int fclose(FILE* stream );
                add     sp, 4
                inc     si
                cmp     si, [bp+var_8]
                jge     short loc_4436
                jmp     loc_43AB
; ---------------------------------------------------------------------------

loc_4436:                               ; CODE XREF: sub_41CC+265↑j
                cmp     di, 1
                jz      short loc_443E
                jmp     loc_44EA
; ---------------------------------------------------------------------------

loc_443E:                               ; CODE XREF: sub_41CC+26D↑j
                xor     si, si
                cmp     si, [bp+var_8]
                jl      short loc_4448
                jmp     loc_44EA
; ---------------------------------------------------------------------------

loc_4448:                               ; CODE XREF: sub_41CC+277↑j
                                        ; sub_41CC+31B↓j
                push    0
                push    0Fh
                push    ss
                lea     ax, [bp+var_F4]
                push    ax
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                push    0
                push    0Fh
                push    ss
                lea     ax, [bp+var_104]
                push    ax
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                mov     bx, si
                shl     bx, 2
                lea     ax, [bp+var_120]
                add     bx, ax
                push    word ptr ss:[bx+2]
                push    word ptr ss:[bx]
                push    ds
                push    offset aSVir    ; "%s.VIR"
                push    ss
                lea     ax, [bp+var_F4]
                push    ax
                call    SPRINTF         ; int sprintf(char *str, const char *format, ... );
                add     sp, 0Ch
                mov     bx, si
                shl     bx, 2
                lea     ax, [bp+var_120]
                add     bx, ax
                push    word ptr ss:[bx+2]
                push    word ptr ss:[bx]
                push    ds
                push    offset aSDat    ; "%s.DAT"
                push    ss
                lea     ax, [bp+var_104]
                push    ax
                call    SPRINTF         ; int sprintf(char *str, const char *format, ... );
                add     sp, 0Ch
                push    ss
                lea     ax, [bp+var_104]
                push    ax
                push    ss
                lea     ax, [bp+var_F4]
                push    ax
                nop
                push    cs
                call    near ptr sub_5C3F
                add     sp, 8
                cmp     ax, 4
                jz      short loc_44E1
                push    ds
                push    offset aMutantsResetAb ; "Mutants reset aborted"
                push    ds
                push    offset aErrorResetting ; "Error resetting Mutants"
                call    SHOCST          ; void shocst(char *summary, char *detail, p1, p1,...,pn);
                add     sp, 8
                xor     di, di
                jmp     short loc_44EA
; ---------------------------------------------------------------------------

loc_44E1:                               ; CODE XREF: sub_41CC+2FF↑j
                inc     si
                cmp     si, [bp+var_8]
                jge     short loc_44EA
                jmp     loc_4448
; ---------------------------------------------------------------------------

loc_44EA:                               ; CODE XREF: sub_41CC+26F↑j
                                        ; sub_41CC+279↑j ...
                cmp     di, 1
                jz      short loc_44F2
                jmp     loc_46FE
; ---------------------------------------------------------------------------

loc_44F2:                               ; CODE XREF: sub_41CC+321↑j
                push    5Ah ; 'Z'
                push    ds
                push    offset aMjwlnkhdDat ; "MJWLNKHD.DAT"
                call    sub_3B04
                add     sp, 6
                mov     bx, seg dseg19
                mov     es, bx
                mov     es:word_2986C, dx
                mov     es:word_2986A, ax
                push    4
                push    ds
                push    offset unk_22A70
                push    ss
                lea     ax, [bp+var_66]
                push    ax
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                mov     [bp+var_60], 0
                mov     [bp+var_62], 0
                push    6
                push    ss
                lea     ax, [bp+var_6]
                push    ax
                push    ss
                lea     ax, [bp+var_5E]
                push    ax
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                push    41h ; 'A'
                push    ss
                lea     ax, [bp+var_E4]
                push    ax
                push    ss
                lea     ax, [bp+var_58]
                push    ax
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                mov     [bp+var_15], 0
                mov     [bp+var_17], 0
                mov     [bp+var_11], 0
                mov     [bp+var_13], 0
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2986C
                push    es:word_2986A
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    37h ; '7'
                push    0
                push    ds
                push    offset unk_22A70
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jz      short loc_45B4
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    0
                push    0
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                push    ss
                lea     ax, [bp+var_66]
                push    ax
                call    UPDBTV          ; void updbtv(char *recptr);
                jmp     short loc_45BE
; ---------------------------------------------------------------------------

loc_45B4:                               ; CODE XREF: sub_41CC+3C5↑j
                push    ss
                lea     ax, [bp+var_66]
                push    ax
                call    INSBTV          ; void insbtv(char *recptr);

loc_45BE:                               ; CODE XREF: sub_41CC+3E6↑j
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2986C
                push    es:word_2986A
                call    CLSBTV          ; void clsbtv (struct btvblk *bbp);
                add     sp, 4
                push    32h ; '2'
                push    ds
                push    offset aMjwmuthiDat_0 ; "MJWMUTHI.DAT"
                call    sub_3B04
                add     sp, 6
                mov     bx, seg dseg19
                mov     es, bx
                mov     es:word_29878, dx
                mov     es:word_29876, ax
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29878
                push    es:word_29876
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    1Eh
                push    ds
                push    offset aMl      ; "ML"
                push    seg dseg19
                push    offset unk_29A78
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29A98, 0
                mov     es:word_29A96, 0
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29A9C, 0
                mov     es:word_29A9A, 0
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29A9E, 1
                push    6
                push    ss
                lea     ax, [bp+var_6]
                push    ax
                push    seg dseg19
                push    offset unk_29AA0
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                push    37h ; '7'
                push    0
                push    seg dseg19
                push    offset unk_29A78
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jnz     short loc_468A
                push    seg dseg19
                push    offset unk_29A78
                call    INSBTV          ; void insbtv(char *recptr);
                add     sp, 4

loc_468A:                               ; CODE XREF: sub_41CC+4AE↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29878
                push    es:word_29876
                call    CLSBTV          ; void clsbtv (struct btvblk *bbp);
                add     sp, 4
                push    15Ch
                push    ds
                push    offset aMjwmutplDat_0 ; "MJWMUTPL.DAT"
                call    sub_3B04
                add     sp, 6
                mov     bx, seg dseg19
                mov     es, bx
                mov     es:word_29888, dx
                mov     es:word_29886, ax
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29888
                push    es:word_29886
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    3Eh ; '>'
                push    0
                push    0
                push    0
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29888
                push    es:word_29886
                call    CLSBTV          ; void clsbtv (struct btvblk *bbp);
                add     sp, 4

loc_46FE:                               ; CODE XREF: sub_41CC+323↑j
                mov     ax, 1
                jmp     loc_47E8
; ---------------------------------------------------------------------------

loc_4704:                               ; CODE XREF: sub_41CC+99↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29868
                push    es:word_29866
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    3Fh ; '?'
                push    1
                push    0
                push    0
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jnz     short loc_4732
                jmp     loc_47E6
; ---------------------------------------------------------------------------

loc_4732:                               ; CODE XREF: sub_41CC+561↑j
                                        ; sub_41CC+617↓j
                push    1
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    ss
                lea     ax, [bp+var_A2]
                push    ax
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2986C
                push    es:word_2986A
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    37h ; '7'
                push    0
                push    1
                push    ss
                lea     ax, [bp+var_A2]
                push    ax
                push    cs
                call    near ptr sub_4050
                add     sp, 6
                push    dx
                push    ax
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jz      short loc_47C0
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    ss
                lea     ax, [bp+var_66]
                push    ax
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                cmp     [bp+var_15], 0Fh
                jnz     short loc_47C0
                cmp     [bp+var_17], 423Fh
                jnz     short loc_47C0
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29868
                push    es:word_29866
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                call    DELBTV          ; void delbtv();

loc_47C0:                               ; CODE XREF: sub_41CC+5B3↑j
                                        ; sub_41CC+5CF↑j ...
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29868
                push    es:word_29866
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    39h ; '9'
                call    QNPBTV          ; int qnpbtv (int getopt);
                pop     cx
                or      ax, ax
                jz      short loc_47E6
                jmp     loc_4732
; ---------------------------------------------------------------------------

loc_47E6:                               ; CODE XREF: sub_41CC+563↑j
                                        ; sub_41CC+615↑j
                xor     ax, ax

loc_47E8:                               ; CODE XREF: sub_41CC+535↑j
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_41CC        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

stsrou          proc far                ; DATA XREF: dseg10:0021↓o

var_2           = word ptr -2

                enter   2, 0
                push    ds
                mov     ax, seg dseg11
                mov     ds, ax
                assume ds:dseg11
                mov     ax, seg USRPTR
                mov     es, ax
                assume es:nothing
                les     bx, dword ptr es:USRPTR ; struct user *usrptr;
                assume es:nothing
                mov     ax, es:[bx+6]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                cmp     ax, es:word_2AEB5
                jz      short loc_4814
                jmp     def_4836        ; jumptable 00004836 default case
; ---------------------------------------------------------------------------

loc_4814:                               ; CODE XREF: stsrou+22↑j
                mov     ax, seg STATUS
                mov     es, ax
                assume es:nothing
                mov     ax, word ptr es:STATUS ; int status;
                mov     [bp+var_2], ax
                mov     cx, 4           ; switch 4 cases
                mov     bx, offset word_4951

loc_4826:                               ; CODE XREF: stsrou+44↓j
                mov     ax, cs:[bx]
                cmp     ax, [bp+var_2]
                jz      short loc_4836
                add     bx, 2
                loop    loc_4826
                jmp     def_4836        ; jumptable 00004836 default case
; ---------------------------------------------------------------------------

loc_4836:                               ; CODE XREF: stsrou+3F↑j
                jmp     word ptr cs:[bx+8] ; switch jump
; ---------------------------------------------------------------------------

loc_483A:                               ; CODE XREF: stsrou:loc_4836↑j
                                        ; DATA XREF: cseg03:jpt_4836↓o
                mov     ax, seg USRNUM  ; jumptable 00004836 cases 1,11
                mov     es, ax
                mov     ax, word ptr es:USRNUM ; int usrnum;
                cmp     ax, word_22A7A
                jz      short loc_484C
                jmp     def_4836        ; jumptable 00004836 default case
; ---------------------------------------------------------------------------

loc_484C:                               ; CODE XREF: stsrou+5A↑j
                mov     word_22D76, 0
                mov     ax, word_22A78
                cmp     ax, 1
                jz      short loc_4862
                cmp     ax, 2
                jz      short loc_486A
                jmp     def_4836        ; jumptable 00004836 default case
; ---------------------------------------------------------------------------

loc_4862:                               ; CODE XREF: stsrou+6B↑j
                nop
                push    cs
                call    near ptr sub_7B2D
                jmp     loc_494E
; ---------------------------------------------------------------------------

loc_486A:                               ; CODE XREF: stsrou+70↑j
                nop
                push    cs
                call    near ptr sub_7D33
                jmp     loc_494E
; ---------------------------------------------------------------------------
                jmp     def_4836        ; jumptable 00004836 default case
; ---------------------------------------------------------------------------
                jmp     def_4836        ; jumptable 00004836 default case
; ---------------------------------------------------------------------------

loc_4878:                               ; CODE XREF: stsrou:loc_4836↑j
                                        ; DATA XREF: cseg03:jpt_4836↓o
                mov     ax, seg USRNUM  ; jumptable 00004836 case 240
                mov     es, ax
                mov     ax, word ptr es:USRNUM ; int usrnum;
                cmp     ax, word_22A7A
                jnz     short loc_48D4
                mov     ax, word_22A78
                cmp     ax, 1
                jz      short loc_4897
                cmp     ax, 2
                jz      short loc_48B4
                jmp     def_4836        ; jumptable 00004836 default case
; ---------------------------------------------------------------------------

loc_4897:                               ; CODE XREF: stsrou+A0↑j
                nop
                push    cs
                call    near ptr sub_5776
                or      ax, ax
                jnz     short loc_48A3
                jmp     loc_494E
; ---------------------------------------------------------------------------

loc_48A3:                               ; CODE XREF: stsrou+B1↑j
                mov     ax, seg USRNUM
                mov     es, ax
                push    word ptr es:USRNUM ; int usrnum;
                nop
                push    cs
                call    near ptr sub_6F5A
                jmp     short loc_48CF
; ---------------------------------------------------------------------------

loc_48B4:                               ; CODE XREF: stsrou+A5↑j
                nop
                push    cs
                call    near ptr sub_5776
                or      ax, ax
                jnz     short loc_48C0
                jmp     loc_494E
; ---------------------------------------------------------------------------

loc_48C0:                               ; CODE XREF: stsrou+CE↑j
                mov     ax, seg USRNUM
                mov     es, ax
                push    word ptr es:USRNUM ; int usrnum;
                nop
                push    cs
                call    near ptr sub_651D

loc_48CF:                               ; CODE XREF: stsrou+C5↑j
                pop     cx
                jmp     short loc_494E
; ---------------------------------------------------------------------------
                jmp     short def_4836  ; jumptable 00004836 default case
; ---------------------------------------------------------------------------

loc_48D4:                               ; CODE XREF: stsrou+98↑j
                mov     ax, seg USRPTR
                mov     es, ax
                les     bx, dword ptr es:USRPTR ; struct user *usrptr;
                assume es:nothing
                cmp     word ptr es:[bx+8], 5
                jnz     short def_4836  ; jumptable 00004836 default case
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                mov     ax, es:[bx+0DEh]
                cmp     ax, 1
                jz      short loc_490F
                cmp     ax, 2
                jz      short loc_4916
                cmp     ax, 3
                jz      short loc_491D
                jmp     short def_4836  ; jumptable 00004836 default case
; ---------------------------------------------------------------------------

loc_490F:                               ; CODE XREF: stsrou+114↑j
                nop
                push    cs
                call    near ptr sub_7F99
                jmp     short loc_494E
; ---------------------------------------------------------------------------

loc_4916:                               ; CODE XREF: stsrou+119↑j
                nop
                push    cs
                call    near ptr sub_819F
                jmp     short loc_494E
; ---------------------------------------------------------------------------

loc_491D:                               ; CODE XREF: stsrou+11E↑j
                nop
                push    cs
                call    near ptr sub_8344
                jmp     short loc_494E
; ---------------------------------------------------------------------------
                jmp     short def_4836  ; jumptable 00004836 default case
; ---------------------------------------------------------------------------
                jmp     short def_4836  ; jumptable 00004836 default case
; ---------------------------------------------------------------------------

loc_4928:                               ; CODE XREF: stsrou:loc_4836↑j
                                        ; DATA XREF: cseg03:jpt_4836↓o
                mov     ax, seg USRNUM  ; jumptable 00004836 case 13
                mov     es, ax
                assume es:nothing
                mov     ax, word ptr es:USRNUM ; int usrnum;
                cmp     ax, word_22A7A
                jnz     short def_4836  ; jumptable 00004836 default case
                push    1
                push    word_22A7A
                call    _BTUINJ         ; int btuinj(int chan,int status);
                add     sp, 4
                jmp     short loc_494E
; ---------------------------------------------------------------------------
                jmp     short $+2       ; jumptable 00004836 default case
; ---------------------------------------------------------------------------

def_4836:                               ; CODE XREF: stsrou+24↑j
                                        ; stsrou+46↑j ...
                call    DFSTHN          ; jumptable 00004836 default case

loc_494E:                               ; CODE XREF: stsrou+7A↑j
                                        ; stsrou+82↑j ...
                pop     ds
                assume ds:dseg21
                leave
                retf
stsrou          endp

; ---------------------------------------------------------------------------
word_4951       dw      1,   0Bh,   0Dh,  0F0h
                                        ; DATA XREF: stsrou+36↑o
                                        ; value table for switch statement
jpt_4836        dw offset loc_483A      ; jump table for switch statement
                dw offset loc_483A
                dw offset loc_4928
                dw offset loc_4878

; =============== S U B R O U T I N E =======================================


sub_4961        proc far                ; CODE XREF: sttrou:loc_2ADA↑P
                push    ds
                mov     ax, seg dseg11
                mov     ds, ax
                assume ds:dseg11
                push    ds
                push    offset aConnect ; "CONNECT"
                mov     ax, seg MARGV
                mov     es, ax
                push    word ptr es:MARGV+2 ; char *margv[];
                push    word ptr es:MARGV ; char *margv[];
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_49EE
                push    word_22A7A
                call    _BTUCLI         ; int btucli(int chan);
                pop     cx
                push    word_22A7A
                call    _BTUCLO         ; int btuclo(int chan);
                pop     cx
                mov     word_22A65, 0
                push    seg cseg03
                push    offset sub_5214
                push    word_22A7A
                call    _BTUCHI         ; int err=btuchi(int chan, char (*rouadr)());
                add     sp, 6
                mov     word_22D42, 1
                push    seg cseg03
                push    offset sub_52E5
                push    6
                call    RTKICK          ; rtkick(int time, void *rouptr());
                add     sp, 6
                push    32h ; '2'
                push    ds
                push    offset aMutantlinkConn ; "MUTANTLINK: CONNECTED"
                push    ds
                push    offset unk_22D44
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                push    ds
                push    offset unk_22D44
                nop
                push    cs
                call    near ptr sub_7AC8
                add     sp, 4
                mov     word_22D76, 6
                jmp     short loc_4A3A
; ---------------------------------------------------------------------------

loc_49EE:                               ; CODE XREF: sub_4961+23↑j
                push    ds
                push    offset aNo      ; "NO"
                mov     ax, seg MARGV
                mov     es, ax
                push    word ptr es:MARGV+2 ; char *margv[];
                push    word ptr es:MARGV ; char *margv[];
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jnz     short loc_4A2C
                push    ds
                push    offset aBusy    ; "BUSY"
                mov     ax, seg MARGV
                mov     es, ax
                push    word ptr es:MARGV+2 ; char *margv[];
                push    word ptr es:MARGV ; char *margv[];
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_4A3A

loc_4A2C:                               ; CODE XREF: sub_4961+AA↑j
                push    1
                push    word_22A7A
                call    _BTUINJ         ; int btuinj(int chan,int status);
                add     sp, 4

loc_4A3A:                               ; CODE XREF: sub_4961+8B↑j
                                        ; sub_4961+C9↑j
                pop     ds
                assume ds:dseg21
                retf
sub_4961        endp


; =============== S U B R O U T I N E =======================================


sub_4A3C        proc far                ; CODE XREF: sttrou:loc_2AE1↑P
                push    ds
                mov     ax, seg dseg11
                mov     ds, ax
                assume ds:dseg11
                pop     ds
                assume ds:dseg21
                retf
sub_4A3C        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4A44        proc far                ; CODE XREF: sttrou:loc_2AD3↑P

var_5C          = byte ptr -5Ch
var_58          = word ptr -58h
var_56          = word ptr -56h
var_54          = byte ptr -54h
var_4E          = byte ptr -4Eh
var_D           = word ptr -0Dh
var_B           = word ptr -0Bh
var_9           = word ptr -9
var_7           = word ptr -7
var_2           = word ptr -2

                enter   5Ch, 0
                push    si
                push    ds
                mov     ax, seg dseg11
                mov     ds, ax
                assume ds:dseg11
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_29864
                push    es:word_29862
                call    SETMBK          ; FILE *setmbk(mbkptr);
                add     sp, 4
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                mov     ax, es:[bx+0DAh]
                or      ax, ax
                jz      short loc_4A96
                cmp     ax, 1
                jnz     short loc_4A8B
                jmp     loc_4DED
; ---------------------------------------------------------------------------

loc_4A8B:                               ; CODE XREF: sub_4A44+42↑j
                cmp     ax, 3
                jnz     short loc_4A93
                jmp     loc_4E8A
; ---------------------------------------------------------------------------

loc_4A93:                               ; CODE XREF: sub_4A44+4A↑j
                jmp     loc_4EEC
; ---------------------------------------------------------------------------

loc_4A96:                               ; CODE XREF: sub_4A44+3D↑j
                mov     ax, seg MARGC
                mov     es, ax
                assume es:nothing
                cmp     word ptr es:MARGC, 0 ; int margc;
                jnz     short loc_4AF6
                cmp     word_22D40, 0FFFFh
                jg      short loc_4AAD
                jmp     def_4B49        ; jumptable 00004B49 default case
; ---------------------------------------------------------------------------

loc_4AAD:                               ; CODE XREF: sub_4A44+64↑j
                push    13h
                call    HASMKEY         ; int ok=hasmkey(int msgnum);
                pop     cx
                or      ax, ax
                jnz     short loc_4ABC
                jmp     def_4B49        ; jumptable 00004B49 default case
; ---------------------------------------------------------------------------

loc_4ABC:                               ; CODE XREF: sub_4A44+73↑j
                mov     ax, seg USRNUM
                mov     es, ax
                mov     ax, word ptr es:USRNUM ; int usrnum;
                cmp     ax, word_22D40
                jz      short loc_4ACE
                jmp     def_4B49        ; jumptable 00004B49 default case
; ---------------------------------------------------------------------------

loc_4ACE:                               ; CODE XREF: sub_4A44+85↑j
                                        ; sub_4A44+D4↓j
                push    ds
                push    offset aMonitorAborted ; "Monitor Aborted. (press enter)\r"
                call    PRF             ; prf(string);
                add     sp, 4
                mov     ax, seg USRNUM
                mov     es, ax
                push    word ptr es:USRNUM ; int usrnum;
                call    OUTPRF          ; outprf (unum);
                pop     cx
                mov     word_22D40, 0FFFFh
                jmp     loc_4EEC
; ---------------------------------------------------------------------------
                jmp     def_4B49        ; jumptable 00004B49 default case
; ---------------------------------------------------------------------------

loc_4AF6:                               ; CODE XREF: sub_4A44+5D↑j
                cmp     word_22D40, 0FFFFh
                jle     short loc_4B1A
                push    13h
                call    HASMKEY         ; int ok=hasmkey(int msgnum);
                pop     cx
                or      ax, ax
                jz      short loc_4B1A
                mov     ax, seg USRNUM
                mov     es, ax
                mov     ax, word ptr es:USRNUM ; int usrnum;
                cmp     ax, word_22D40
                jnz     short loc_4B1A
                jmp     short loc_4ACE
; ---------------------------------------------------------------------------

loc_4B1A:                               ; CODE XREF: sub_4A44+B7↑j
                                        ; sub_4A44+C3↑j ...
                mov     ax, seg MARGV
                mov     es, ax
                les     bx, dword ptr es:MARGV ; char *margv[];
                assume es:nothing
                mov     al, es:[bx]
                mov     ah, 0
                push    ax
                call    TOUPPER         ; int toupper (int c);
                pop     cx
                mov     [bp+var_2], ax
                mov     cx, 0Ah         ; switch 10 cases
                mov     bx, offset word_4EF2

loc_4B39:                               ; CODE XREF: sub_4A44+100↓j
                mov     ax, cs:[bx]
                cmp     ax, [bp+var_2]
                jz      short loc_4B49
                add     bx, 2
                loop    loc_4B39
                jmp     def_4B49        ; jumptable 00004B49 default case
; ---------------------------------------------------------------------------

loc_4B49:                               ; CODE XREF: sub_4A44+FB↑j
                jmp     word ptr cs:[bx+14h] ; switch jump
; ---------------------------------------------------------------------------

loc_4B4D:                               ; CODE XREF: sub_4A44:loc_4B49↑j
                                        ; DATA XREF: cseg03:jpt_4B49↓o
                push    30Ch            ; jumptable 00004B49 case 88
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    sub_15C7E
                add     sp, 4
                mov     ax, seg USRNUM
                mov     es, ax
                push    word ptr es:USRNUM ; int usrnum;
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                mov     word ptr es:[bx+0D6h], 1
                mov     ax, seg USRPTR
                mov     es, ax
                assume es:nothing
                les     bx, dword ptr es:USRPTR ; struct user *usrptr;
                assume es:nothing
                mov     word ptr es:[bx+8], 1
                jmp     loc_4EEC
; ---------------------------------------------------------------------------

loc_4B90:                               ; CODE XREF: sub_4A44:loc_4B49↑j
                                        ; DATA XREF: cseg03:jpt_4B49↓o
                nop                     ; jumptable 00004B49 case 49
                push    cs
                call    near ptr sub_5872
                jmp     loc_4EEC
; ---------------------------------------------------------------------------

loc_4B98:                               ; CODE XREF: sub_4A44:loc_4B49↑j
                                        ; DATA XREF: cseg03:jpt_4B49↓o
                nop                     ; jumptable 00004B49 case 50
                push    cs
                call    near ptr sub_5A4A
                jmp     loc_4EEC
; ---------------------------------------------------------------------------

loc_4BA0:                               ; CODE XREF: sub_4A44:loc_4B49↑j
                                        ; DATA XREF: cseg03:jpt_4B49↓o
                nop                     ; jumptable 00004B49 case 51
                push    cs
                call    near ptr sub_595E
                jmp     loc_4EEC
; ---------------------------------------------------------------------------

loc_4BA8:                               ; CODE XREF: sub_4A44:loc_4B49↑j
                                        ; DATA XREF: cseg03:jpt_4B49↓o
                push    13h             ; jumptable 00004B49 case 77
                call    HASMKEY         ; int ok=hasmkey(int msgnum);
                pop     cx
                or      ax, ax
                jnz     short loc_4BB7
                jmp     def_4B49        ; jumptable 00004B49 default case
; ---------------------------------------------------------------------------

loc_4BB7:                               ; CODE XREF: sub_4A44+16E↑j
                push    1Eh
                push    ds
                push    offset unk_22CC5
                push    ds
                push    offset unk_22CE3
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                nop
                push    cs
                call    near ptr sub_4F1A
                mov     dx, ax
                cmp     ax, 1
                jz      short loc_4BDF
                push    dx

loc_4BD6:                               ; CODE XREF: sub_4A44+225↓j
                                        ; sub_4A44+352↓j ...
                call    PRFMSG          ; prfmsg(msgnum,p1,p2, ..• ,pn);
                pop     cx
                jmp     loc_4EDC
; ---------------------------------------------------------------------------

loc_4BDF:                               ; CODE XREF: sub_4A44+18F↑j
                push    ds
                push    offset unk_22CE3
                push    4C9h
                call    PRFMSG          ; prfmsg(msgnum,p1,p2, ..• ,pn);
                add     sp, 6
                jmp     loc_4EDC
; ---------------------------------------------------------------------------
                jmp     def_4B49        ; jumptable 00004B49 default case
; ---------------------------------------------------------------------------

loc_4BF4:                               ; CODE XREF: sub_4A44:loc_4B49↑j
                                        ; DATA XREF: cseg03:jpt_4B49↓o
                push    13h             ; jumptable 00004B49 case 33
                call    HASMKEY         ; int ok=hasmkey(int msgnum);
                pop     cx
                or      ax, ax
                jnz     short loc_4C03
                jmp     def_4B49        ; jumptable 00004B49 default case
; ---------------------------------------------------------------------------

loc_4C03:                               ; CODE XREF: sub_4A44+1BA↑j
                nop
                push    cs
                call    near ptr sub_8A27
                or      ax, ax
                jz      short loc_4C13
                push    ds
                push    offset aAutodialerNowO ; "Autodialer now ON\r"
                jmp     loc_4ED4
; ---------------------------------------------------------------------------

loc_4C13:                               ; CODE XREF: sub_4A44+1C6↑j
                push    ds
                push    offset aAutodialerNowO_0 ; "Autodialer now OFF\r"
                jmp     loc_4ED4
; ---------------------------------------------------------------------------
                jmp     def_4B49        ; jumptable 00004B49 default case
; ---------------------------------------------------------------------------

loc_4C1D:                               ; CODE XREF: sub_4A44:loc_4B49↑j
                                        ; DATA XREF: cseg03:jpt_4B49↓o
                push    13h             ; jumptable 00004B49 case 68
                call    HASMKEY         ; int ok=hasmkey(int msgnum);
                pop     cx
                or      ax, ax
                jnz     short loc_4C2C
                jmp     def_4B49        ; jumptable 00004B49 default case
; ---------------------------------------------------------------------------

loc_4C2C:                               ; CODE XREF: sub_4A44+1E3↑j
                push    4C6h
                call    PRFMSG          ; prfmsg(msgnum,p1,p2, ..• ,pn);
                pop     cx
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    OUTPRF          ; outprf (unum);
                pop     cx
                mov     ax, seg USRNUM
                mov     es, ax
                push    word ptr es:USRNUM ; int usrnum;
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                mov     word ptr es:[bx+0DAh], 1
                jmp     loc_4EEC
; ---------------------------------------------------------------------------
                jmp     def_4B49        ; jumptable 00004B49 default case
; ---------------------------------------------------------------------------

loc_4C66:                               ; CODE XREF: sub_4A44:loc_4B49↑j
                                        ; DATA XREF: cseg03:jpt_4B49↓o
                push    4EBh            ; jumptable 00004B49 case 72
                jmp     loc_4BD6
; ---------------------------------------------------------------------------

loc_4C6C:                               ; CODE XREF: sub_4A44:loc_4B49↑j
                                        ; DATA XREF: cseg03:jpt_4B49↓o
                push    13h             ; jumptable 00004B49 case 83
                call    HASMKEY         ; int ok=hasmkey(int msgnum);
                pop     cx
                or      ax, ax
                jnz     short loc_4C7B
                jmp     loc_4EEC
; ---------------------------------------------------------------------------

loc_4C7B:                               ; CODE XREF: sub_4A44+232↑j
                push    4
                push    ds
                push    offset unk_22A70
                push    ss
                lea     ax, [bp+var_5C]
                push    ax
                call    STZCPY          ; stzcpy(char *dest, char *source, int nbytes);
                add     sp, 0Ah
                mov     [bp+var_56], 0
                mov     [bp+var_58], 1
                push    6
                push    0
                push    8000h
                call    RAND            ; int rand (void);
                cwd
                push    ax
                push    dx
                xor     dx, dx
                mov     ax, 1B58h
                pop     cx
                pop     bx
                call    F_LXMUL
                push    dx
                push    ax
                call    F_LDIV
                add     ax, 3E8h
                push    ax
                push    ds
                push    offset aD_0     ; "%d"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 6
                push    dx
                push    ax
                push    ss
                lea     ax, [bp+var_54]
                push    ax
                call    STZCPY          ; stzcpy(char *dest, char *source, int nbytes);
                add     sp, 0Ah
                push    0
                push    41h ; 'A'
                push    ss
                lea     ax, [bp+var_4E]
                push    ax
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                mov     si, 1
                jmp     short loc_4D21
; ---------------------------------------------------------------------------

loc_4CEF:                               ; CODE XREF: sub_4A44+2E0↓j
                push    ds
                push    offset aA       ; "A"
                push    ss
                lea     ax, [bp+var_4E]
                push    ax
                call    STRCAT          ; char *strcat(char *destination, const char *source );
                add     sp, 8
                cmp     si, 8
                jge     short loc_4D20
                push    ds
                push    offset asc_23256 ; "#"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 4
                push    dx
                push    ax
                push    ss
                lea     ax, [bp+var_4E]
                push    ax
                call    STRCAT          ; char *strcat(char *destination, const char *source );
                add     sp, 8

loc_4D20:                               ; CODE XREF: sub_4A44+2BF↑j
                inc     si

loc_4D21:                               ; CODE XREF: sub_4A44+2A9↑j
                cmp     si, 9
                jl      short loc_4CEF
                mov     [bp+var_B], 0
                mov     [bp+var_D], 0
                mov     [bp+var_7], 0
                mov     [bp+var_9], 0
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2986C
                push    es:word_2986A
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    37h ; '7'
                push    0
                push    ds
                push    offset unk_22A70
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jz      short loc_4D86
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    0
                push    0
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                push    ss
                lea     ax, [bp+var_5C]
                push    ax
                call    UPDBTV          ; void updbtv(char *recptr);
                jmp     short loc_4D90
; ---------------------------------------------------------------------------

loc_4D86:                               ; CODE XREF: sub_4A44+31F↑j
                push    ss
                lea     ax, [bp+var_5C]
                push    ax
                call    INSBTV          ; void insbtv(char *recptr);

loc_4D90:                               ; CODE XREF: sub_4A44+340↑j
                add     sp, 4
                push    515h
                jmp     loc_4BD6
; ---------------------------------------------------------------------------

loc_4D99:                               ; CODE XREF: sub_4A44:loc_4B49↑j
                                        ; DATA XREF: cseg03:jpt_4B49↓o
                push    13h             ; jumptable 00004B49 case 79
                call    HASMKEY         ; int ok=hasmkey(int msgnum);
                pop     cx
                or      ax, ax
                jnz     short loc_4DA8
                jmp     loc_4EEC
; ---------------------------------------------------------------------------

loc_4DA8:                               ; CODE XREF: sub_4A44+35F↑j
                cmp     word_22D40, 0FFFFh
                jnz     short loc_4DC2
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                mov     ax, word ptr es:USRNUM ; int usrnum;
                mov     word_22D40, ax
                push    ds
                push    offset aMonitorScriptI ; "Monitor Script is now ON\r"
                jmp     loc_4ED4
; ---------------------------------------------------------------------------

loc_4DC2:                               ; CODE XREF: sub_4A44+369↑j
                mov     ax, seg USRNUM
                mov     es, ax
                mov     ax, word ptr es:USRNUM ; int usrnum;
                cmp     ax, word_22D40
                jnz     short loc_4DDE
                mov     word_22D40, 0FFFFh
                push    ds
                push    offset aMonitorScriptI_0 ; "Monitor Script is now OFF\r"
                jmp     loc_4ED4
; ---------------------------------------------------------------------------

loc_4DDE:                               ; CODE XREF: sub_4A44+38B↑j
                push    ds
                push    offset aMonitorIsInUse ; "Monitor is in use.\r"
                jmp     loc_4ED4
; ---------------------------------------------------------------------------

def_4B49:                               ; CODE XREF: sub_4A44+66↑j
                                        ; sub_4A44+75↑j ...
                nop                     ; jumptable 00004B49 default case
                push    cs
                call    near ptr sub_5B48
                jmp     loc_4EEC
; ---------------------------------------------------------------------------

loc_4DED:                               ; CODE XREF: sub_4A44+44↑j
                mov     ax, seg MARGC
                mov     es, ax
                cmp     word ptr es:MARGC, 1 ; int margc;
                jle     short loc_4E09
                push    4C8h
                call    PRFMSG          ; prfmsg(msgnum,p1,p2, ..• ,pn);
                pop     cx
                push    4C6h
                jmp     loc_4BD6
; ---------------------------------------------------------------------------

loc_4E09:                               ; CODE XREF: sub_4A44+3B4↑j
                mov     ax, seg MARGC
                mov     es, ax
                cmp     word ptr es:MARGC, 0 ; int margc;
                jnz     short loc_4E21
                push    4CAh

loc_4E19:                               ; CODE XREF: sub_4A44+407↓j
                call    PRFMSG          ; prfmsg(msgnum,p1,p2, ..• ,pn);
                pop     cx
                jmp     short loc_4E6D
; ---------------------------------------------------------------------------

loc_4E21:                               ; CODE XREF: sub_4A44+3D0↑j
                push    1Eh
                mov     ax, seg MARGV
                mov     es, ax
                push    word ptr es:MARGV+2 ; char *margv[];
                push    word ptr es:MARGV ; char *margv[];
                push    ds
                push    offset unk_22CE3
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                nop
                push    cs
                call    near ptr sub_4F1A
                mov     dx, ax
                cmp     ax, 1
                jz      short loc_4E4D
                push    dx
                jmp     short loc_4E19
; ---------------------------------------------------------------------------

loc_4E4D:                               ; CODE XREF: sub_4A44+404↑j
                mov     word_22D2B, 1
                mov     ax, seg MARGV
                mov     es, ax
                push    word ptr es:MARGV+2 ; char *margv[];
                push    word ptr es:MARGV ; char *margv[];
                push    4C9h
                call    PRFMSG          ; prfmsg(msgnum,p1,p2, ..• ,pn);
                add     sp, 6

loc_4E6D:                               ; CODE XREF: sub_4A44+3DB↑j
                mov     ax, seg USRNUM
                mov     es, ax
                push    word ptr es:USRNUM ; int usrnum;
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                mov     word ptr es:[bx+0DAh], 0
                jmp     short loc_4EDC
; ---------------------------------------------------------------------------

loc_4E8A:                               ; CODE XREF: sub_4A44+4C↑j
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                mov     word ptr es:[bx+0DEh], 0
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                mov     word ptr es:[bx+0DAh], 0
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    _BTUCLO         ; int btuclo(int chan);
                pop     cx
                push    ds
                push    offset aListingAborted ; "\r*** LISTING ABORTED (press enter) ***"...

loc_4ED4:                               ; CODE XREF: sub_4A44+1CC↑j
                                        ; sub_4A44+1D3↑j ...
                call    PRF             ; prf(string);
                add     sp, 4

loc_4EDC:                               ; CODE XREF: sub_4A44+198↑j
                                        ; sub_4A44+1AA↑j ...
                mov     ax, seg USRNUM
                mov     es, ax
                push    word ptr es:USRNUM ; int usrnum;
                call    OUTPRF          ; outprf (unum);
                pop     cx

loc_4EEC:                               ; CODE XREF: sub_4A44:loc_4A93↑j
                                        ; sub_4A44+AC↑j ...
                xor     ax, ax
                pop     ds
                assume ds:dseg21
                pop     si
                leave
                retf
sub_4A44        endp

; ---------------------------------------------------------------------------
word_4EF2       dw    21h,   31h,   32h,   33h
                                        ; DATA XREF: sub_4A44+F2↑o
                dw    44h,   48h,   4Dh,   4Fh ; value table for switch statement
                dw    53h,   58h
jpt_4B49        dw offset loc_4BF4      ; jump table for switch statement
                dw offset loc_4B90
                dw offset loc_4B98
                dw offset loc_4BA0
                dw offset loc_4C1D
                dw offset loc_4C66
                dw offset loc_4BA8
                dw offset loc_4D99
                dw offset loc_4C6C
                dw offset loc_4B4D

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4F1A        proc far                ; CODE XREF: sub_4A44+187↑p
                                        ; sub_4A44+3FC↑p ...

var_4           = word ptr -4
var_2           = word ptr -2

                enter   4, 0
                push    si
                push    ds
                mov     ax, seg dseg11
                mov     ds, ax
                assume ds:dseg11
                nop
                push    cs
                call    near ptr sub_79D2
                or      ax, ax
                jz      short loc_4F34
                mov     ax, 4CDh
                jmp     loc_51B1
; ---------------------------------------------------------------------------

loc_4F34:                               ; CODE XREF: sub_4F1A+12↑j
                cmp     word_22A78, 0
                jz      short loc_4F41
                mov     ax, 4CBh
                jmp     loc_51B1
; ---------------------------------------------------------------------------

loc_4F41:                               ; CODE XREF: sub_4F1A+1F↑j
                cmp     word_22D42, 1
                jnz     short loc_4F4E
                mov     ax, 4EEh
                jmp     loc_51B1
; ---------------------------------------------------------------------------

loc_4F4E:                               ; CODE XREF: sub_4F1A+2C↑j
                mov     si, word_22D03
                jmp     short loc_4F9B
; ---------------------------------------------------------------------------

loc_4F54:                               ; CODE XREF: sub_4F1A+85↓j
                push    si
                call    USRIDX          ; int usridx(int chan);
                pop     cx
                mov     dx, seg OTHUSN
                mov     es, dx
                mov     word ptr es:OTHUSN, ax ; int othusn;
                mov     ax, seg OTHUSN
                mov     es, ax
                cmp     word ptr es:OTHUSN, 0FFFFh ; int othusn;
                jle     short loc_4F9A
                mov     ax, seg OTHUSN
                mov     es, ax
                mov     ax, word ptr es:OTHUSN ; int othusn;
                mov     dx, seg NTERMS
                mov     es, dx
                cmp     ax, word ptr es:NTERMS ; int nterms;
                jge     short loc_4F9A
                mov     ax, seg OTHUSN
                mov     es, ax
                push    word ptr es:OTHUSN ; int othusn;
                nop
                push    cs
                call    near ptr sub_5430
                pop     cx
                or      ax, ax
                jnz     short loc_4FA1

loc_4F9A:                               ; CODE XREF: sub_4F1A+55↑j
                                        ; sub_4F1A+6A↑j
                dec     si

loc_4F9B:                               ; CODE XREF: sub_4F1A+38↑j
                cmp     si, word_22D01
                jge     short loc_4F54

loc_4FA1:                               ; CODE XREF: sub_4F1A+7E↑j
                cmp     si, word_22D01
                jge     short loc_4FAD
                mov     ax, 4CCh
                jmp     loc_51B1
; ---------------------------------------------------------------------------

loc_4FAD:                               ; CODE XREF: sub_4F1A+8B↑j
                mov     word_22D78, 0
                mov     word_22D2B, 0
                mov     ax, seg OTHUSN
                mov     es, ax
                mov     ax, word ptr es:OTHUSN ; int othusn;
                mov     word_22A7A, ax
                mov     word_22A78, 1
                mov     word_22A7C, 0
                mov     word_22C7E, 0
                mov     word_22C80, 0
                mov     word_22C82, 0
                mov     word_22D11, 0
                mov     word_22D13, 0
                mov     word_22D3E, 0
                mov     word_22D15, 0
                mov     ax, seg OTHUSN
                mov     es, ax
                push    word ptr es:OTHUSN ; int othusn;
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                mov     word ptr es:[bx+0DAh], 0FFFFh
                mov     ax, seg OTHUSN
                mov     es, ax
                assume es:nothing
                mov     ax, word ptr es:OTHUSN ; int othusn;
                imul    ax, 29h ; ')'
                mov     dx, seg USER
                mov     es, dx
                mov     dx, word ptr es:USER+2 ; struct user;
                mov     bx, word ptr es:USER ; struct user;
                add     bx, ax
                mov     ax, seg OTHUSP
                mov     es, ax
                mov     word ptr es:OTHUSP+2, dx ; struct user *othusp;
                mov     word ptr es:OTHUSP, bx ; struct user *othusp;
                mov     ax, seg OTHUSN
                mov     es, ax
                push    word ptr es:OTHUSN ; int othusn;
                call    UACOFF          ; struct usracc *uaptr=uacoff(unum);
                pop     cx
                mov     bx, seg OTHUAP
                mov     es, bx
                mov     word ptr es:OTHUAP+2, dx ; struct usracc *othuaP;
                mov     word ptr es:OTHUAP, ax ; struct usracc *othuaP;
                mov     ax, seg OTHUSP
                mov     es, ax
                les     bx, dword ptr es:OTHUSP ; struct user *othusp;
                assume es:nothing
                mov     ax, es:[bx+14h]
                and     ax, 80h
                or      ax, 0
                jz      short loc_50BD
                push    ds
                push    offset unk_22CE3
                push    word_22D7C
                push    word_22D7A
                push    ds
                push    offset aSS_1    ; "%s%s\r"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 0Ch
                mov     [bp+var_2], dx
                mov     [bp+var_4], ax
                push    [bp+var_2]
                push    [bp+var_4]
                push    [bp+var_2]
                push    [bp+var_4]
                call    STRLEN          ; size_t strlen(const char* str);
                add     sp, 4
                push    ax
                mov     ax, seg OTHUSN
                mov     es, ax
                assume es:nothing
                push    word ptr es:OTHUSN ; int othusn;
                call    _BTUXCT         ; int btuxct(int chan,int nbyt,char *datstg);
                add     sp, 8
                jmp     short loc_50E9
; ---------------------------------------------------------------------------

loc_50BD:                               ; CODE XREF: sub_4F1A+15A↑j
                push    ds
                push    offset unk_22CE3
                push    word_22D80
                push    word_22D7E
                push    ds
                push    offset aSSm     ; "%s%sM"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 0Ch
                push    dx
                push    ax
                mov     ax, seg OTHUSN
                mov     es, ax
                push    word ptr es:OTHUSN ; int othusn;
                call    _BTUCMD         ; int btucmd(int chan,char *cmdstg);
                add     sp, 6

loc_50E9:                               ; CODE XREF: sub_4F1A+1A1↑j
                push    ds
                push    offset aMlink   ; "Mlink"
                push    ds
                push    offset a7s      ; "(%.7s)"
                mov     ax, seg OTHUAP
                mov     es, ax
                push    word ptr es:OTHUAP+2 ; struct usracc *othuaP;
                push    word ptr es:OTHUAP ; struct usracc *othuaP;
                call    SPRINTF         ; int sprintf(char *str, const char *format, ... );
                add     sp, 0Ch
                mov     ax, seg OTHUSP
                mov     es, ax
                les     bx, dword ptr es:OTHUSP ; struct user *othusp;
                assume es:nothing
                mov     word ptr es:[bx], 2
                mov     ax, seg OTHUSP
                mov     es, ax
                assume es:nothing
                les     bx, dword ptr es:OTHUSP ; struct user *othusp;
                assume es:nothing
                mov     ax, seg dseg19
                push    es
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_2AEB5
                pop     es
                assume es:nothing
                mov     es:[bx+6], ax
                mov     ax, seg OTHUSP
                mov     es, ax
                assume es:nothing
                les     bx, dword ptr es:OTHUSP ; struct user *othusp;
                assume es:nothing
                mov     word ptr es:[bx+8], 6
                mov     ax, seg OTHUSN
                mov     es, ax
                assume es:nothing
                push    word ptr es:OTHUSN ; int othusn;
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                mov     word ptr es:[bx+0D6h], 6
                mov     ax, seg OTHUSP
                mov     es, ax
                assume es:nothing
                les     bx, dword ptr es:OTHUSP ; struct user *othusp;
                assume es:nothing
                or      word ptr es:[bx+14h], 2021h
                or      word ptr es:[bx+16h], 0
                push    32h ; '2'
                push    ds
                push    offset aMutantlinkDial ; "MUTANTLINK: DIALING"
                push    ds
                push    offset unk_22D44
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                push    ds
                push    offset unk_22D44
                nop
                push    cs
                call    near ptr sub_7AC8
                add     sp, 4
                mov     ax, word_22D0F
                mov     word_22D76, ax
                mov     word_22D42, 0
                push    0
                mov     ax, seg OTHUSN
                mov     es, ax
                assume es:nothing
                push    word ptr es:OTHUSN ; int othusn;
                call    _BTECH          ; int btuech(int chan, int mode);
                add     sp, 4
                mov     ax, 1

loc_51B1:                               ; CODE XREF: sub_4F1A+17↑j
                                        ; sub_4F1A+24↑j ...
                pop     ds
                assume ds:dseg21
                pop     si
                leave
                retf
sub_4F1A        endp


; =============== S U B R O U T I N E =======================================


sub_51B5        proc far                ; CODE XREF: sub_3B50+B8↑p
                push    ds
                mov     ax, seg dseg11
                mov     ds, ax
                assume ds:dseg11
                mov     word_22D2B, 0
                mov     word_22A78, 0
                mov     word_22A7A, 0FFFFh
                mov     word_22C7C, 0
                mov     word_22D07, 0
                mov     word_22D09, 0
                mov     word_22D40, 0FFFFh
                mov     word_22D42, 0
                mov     word_22D76, 0
                push    0
                push    32h ; '2'
                push    ds
                push    offset unk_22D44
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                push    0
                push    0FFh
                push    ds
                push    offset byte_22A7E
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                pop     ds
                assume ds:dseg21
                retf
sub_51B5        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_5214        proc far                ; DATA XREF: sub_4961+42↑o
                                        ; sub_54B6+183↓o

arg_0           = word ptr  6
arg_2           = word ptr  8

                push    bp
                mov     bp, sp
                push    di
                push    ds
                mov     ax, seg dseg11
                mov     ds, ax
                assume ds:dseg11
                mov     ax, word_22A7C
                or      ax, ax
                jz      short loc_522D
                cmp     ax, 1
                jz      short loc_5262
                jmp     loc_52DF
; ---------------------------------------------------------------------------

loc_522D:                               ; CODE XREF: sub_5214+F↑j
                cmp     word_22D40, 0FFFFh
                jg      short loc_5237
                jmp     loc_52DF
; ---------------------------------------------------------------------------

loc_5237:                               ; CODE XREF: sub_5214+1E↑j
                push    word_22D40
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                cmp     word ptr es:[bx+0D6h], 5
                jz      short loc_5250
                jmp     loc_52DF
; ---------------------------------------------------------------------------

loc_5250:                               ; CODE XREF: sub_5214+37↑j
                mov     al, byte ptr [bp+arg_2]
                push    ax
                push    word_22D40
                call    _CHIOUT         ; void chiout(int chan,char c);

loc_525D:                               ; CODE XREF: sub_5214+C8↓j
                add     sp, 4
                jmp     short loc_52DF
; ---------------------------------------------------------------------------

loc_5262:                               ; CODE XREF: sub_5214+14↑j
                mov     ax, [bp+arg_2]
                cmp     ax, 96h
                jz      short loc_5271
                cmp     ax, 98h
                jz      short loc_52A5
                jmp     short loc_52B3
; ---------------------------------------------------------------------------

loc_5271:                               ; CODE XREF: sub_5214+54↑j
                inc     word_22A65
                cmp     word_22A65, 3
                jle     short loc_5290
                mov     word_22C82, 17h
                push    1
                push    word_22A7A
                call    _BTUINJ         ; int btuinj(int chan,int status);
                add     sp, 4

loc_5290:                               ; CODE XREF: sub_5214+66↑j
                mov     cx, 7Fh
                mov     di, 0B2Eh
                push    ds
                pop     es
                assume es:dseg11
                xor     ax, ax
                rep stosw
                stosb
                mov     word_22C7C, 0
                jmp     short loc_52DF
; ---------------------------------------------------------------------------

loc_52A5:                               ; CODE XREF: sub_5214+59↑j
                mov     word_22A65, 0
                push    0F0h
                push    [bp+arg_0]
                jmp     short loc_52D7
; ---------------------------------------------------------------------------

loc_52B3:                               ; CODE XREF: sub_5214+5B↑j
                cmp     word_22A65, 0
                jle     short loc_52DF
                mov     bx, word_22C7C
                mov     al, byte ptr [bp+arg_2]
                mov     [bx+0B2Eh], al
                inc     word_22C7C
                cmp     word_22C7C, 0FDh
                jle     short loc_52DF
                push    1
                push    word_22A7A

loc_52D7:                               ; CODE XREF: sub_5214+9D↑j
                call    _BTUINJ         ; int btuinj(int chan,int status);
                jmp     loc_525D
; ---------------------------------------------------------------------------

loc_52DF:                               ; CODE XREF: sub_5214+16↑j
                                        ; sub_5214+20↑j ...
                mov     al, 0
                pop     ds
                assume ds:dseg21
                pop     di
                pop     bp
                retf
sub_5214        endp


; =============== S U B R O U T I N E =======================================


sub_52E5        proc far                ; DATA XREF: sub_4961+5A↑o
                push    ds
                mov     ax, seg dseg11
                mov     ds, ax
                assume ds:dseg11
                cmp     word_22A78, 1
                jz      short loc_52F5
                jmp     loc_5382
; ---------------------------------------------------------------------------

loc_52F5:                               ; CODE XREF: sub_52E5+B↑j
                push    ds
                push    13A6h
                push    ds
                push    0DC7h
                call    F_OPEN          ; file* fopen(const char* filename, USE);
                add     sp, 8
                mov     word_22DC1, dx
                mov     word_22DBF, ax
                or      ax, dx
                jz      short loc_5369
                cmp     word_22D2B, 0
                jnz     short loc_5369
                push    ds
                push    13A8h
                nop
                push    cs
                call    near ptr sub_7AC8
                add     sp, 4
                mov     word_22C82, 16h
                mov     word_22D15, 1
                cmp     word_22D40, 0FFFFh
                jle     short loc_5362
                push    word_22D40
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                cmp     word ptr es:[bx+0D6h], 5
                jnz     short loc_5362
                push    ds
                push    13C6h
                call    PRF             ; prf(string);
                add     sp, 4
                push    word_22D40
                call    OUTPRF          ; outprf (unum);
                pop     cx

loc_5362:                               ; CODE XREF: sub_52E5+4F↑j
                                        ; sub_52E5+65↑j
                nop
                push    cs
                call    near ptr sub_63A1
                jmp     short loc_5388
; ---------------------------------------------------------------------------

loc_5369:                               ; CODE XREF: sub_52E5+29↑j
                                        ; sub_52E5+30↑j
                mov     word_22D42, 0
                nop
                push    cs
                call    near ptr sub_7F03
                mov     word_22A7C, 1
                mov     word_22C82, 16h
                jmp     short loc_5388
; ---------------------------------------------------------------------------

loc_5382:                               ; CODE XREF: sub_52E5+D↑j
                mov     word_22D42, 0

loc_5388:                               ; CODE XREF: sub_52E5+82↑j
                                        ; sub_52E5+9B↑j
                pop     ds
                assume ds:dseg21
                retf
sub_52E5        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_538A        proc far                ; CODE XREF: sub_54B6+1A9↓p
                                        ; sub_57FC+58↓p ...

var_100         = byte ptr -100h
arg_0           = dword ptr  6
arg_4           = word ptr  0Ah
arg_6           = word ptr  0Ch

                enter   100h, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg11
                mov     ds, ax
                assume ds:dseg11
                push    0FFh
                push    word ptr [bp+arg_0+2]
                push    word ptr [bp+arg_0]
                push    ds
                push    offset unk_22B7D
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                mov     cx, 64h ; 'd'
                xor     si, si
                jmp     short loc_53C6
; ---------------------------------------------------------------------------

loc_53B2:                               ; CODE XREF: sub_538A+47↓j
                mov     es, word ptr [bp+arg_0+2]
                mov     al, es:[di]
                mov     ah, 0
                add     cx, ax
                cmp     cx, 3E7h
                jle     short loc_53C5
                mov     cx, 64h ; 'd'

loc_53C5:                               ; CODE XREF: sub_538A+36↑j
                inc     si

loc_53C6:                               ; CODE XREF: sub_538A+26↑j
                les     bx, [bp+arg_0]
                add     bx, si
                mov     di, bx
                cmp     byte ptr es:[bx], 0
                jnz     short loc_53B2
                push    98h
                push    cx
                push    word ptr [bp+arg_0+2]
                push    word ptr [bp+arg_0]
                push    96h
                push    ds
                push    offset aCSDC    ; "%c%s%d%c"
                push    ss
                lea     ax, [bp+var_100]
                push    ax
                call    SPRINTF         ; int sprintf(char *str, const char *format, ... );
                add     sp, 12h
                xor     si, si
                jmp     short loc_5407
; ---------------------------------------------------------------------------

loc_53F6:                               ; CODE XREF: sub_538A+8D↓j
                mov     al, [bp+si+var_100]
                push    ax
                push    [bp+arg_4]
                call    _CHIOUT         ; void chiout(int chan,char c);
                add     sp, 4
                inc     si

loc_5407:                               ; CODE XREF: sub_538A+6A↑j
                push    ss
                lea     ax, [bp+var_100]
                push    ax
                call    STRLEN          ; size_t strlen(const char* str);
                add     sp, 4
                cmp     ax, si
                ja      short loc_53F6
                cmp     [bp+arg_6], 1
                jnz     short loc_542B
                mov     word_22C7E, 0
                mov     word_22C80, 0

loc_542B:                               ; CODE XREF: sub_538A+93↑j
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_538A        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_5430        proc far                ; CODE XREF: sub_4F1A+78↑p
                                        ; sub_54B6+28↓p

arg_0           = word ptr  6

                push    bp
                mov     bp, sp
                push    ds
                mov     ax, seg dseg11
                mov     ds, ax
                assume ds:dseg11
                mov     ax, [bp+arg_0]
                imul    ax, 29h ; ')'
                mov     dx, seg USER
                mov     es, dx
                assume es:nothing
                mov     dx, word ptr es:USER+2 ; struct user;
                mov     bx, word ptr es:USER ; struct user;
                add     bx, ax
                mov     ax, seg OTHUSP
                mov     es, ax
                mov     word ptr es:OTHUSP+2, dx ; struct user *othusp;
                mov     word ptr es:OTHUSP, bx ; struct user *othusp;
                mov     ax, seg OTHUSP
                mov     es, ax
                les     bx, dword ptr es:OTHUSP ; struct user *othusp;
                assume es:nothing
                cmp     word ptr es:[bx], 0
                jnz     short loc_54B1
                mov     ax, seg OTHUSP
                mov     es, ax
                assume es:nothing
                les     bx, dword ptr es:OTHUSP ; struct user *othusp;
                assume es:nothing
                cmp     word ptr es:[bx+6], 0FFF9h
                jnz     short loc_54B1
                mov     ax, seg OTHUSP
                mov     es, ax
                assume es:nothing
                les     bx, dword ptr es:OTHUSP ; struct user *othusp;
                assume es:nothing
                mov     ax, es:[bx+14h]
                and     ax, 8
                or      ax, 0
                jnz     short loc_54B1
                mov     ax, seg OTHUSP
                mov     es, ax
                assume es:nothing
                les     bx, dword ptr es:OTHUSP ; struct user *othusp;
                assume es:nothing
                mov     ax, es:[bx+14h]
                and     ax, 200h
                or      ax, 0
                jnz     short loc_54B1
                mov     ax, 1
                jmp     short loc_54B3
; ---------------------------------------------------------------------------

loc_54B1:                               ; CODE XREF: sub_5430+3D↑j
                                        ; sub_5430+4E↑j ...
                xor     ax, ax

loc_54B3:                               ; CODE XREF: sub_5430+7F↑j
                pop     ds
                assume ds:dseg21
                pop     bp
                retf
sub_5430        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_54B6        proc far                ; CODE XREF: sub_3B50+AE↑p
                                        ; DATA XREF: sub_54B6+24C↓o

var_2           = word ptr -2

                enter   2, 0
                push    si
                push    ds
                mov     ax, seg dseg11
                mov     ds, ax
                assume ds:dseg11
                cmp     word_22A78, 0
                jle     short loc_54CD
                nop
                push    cs
                call    near ptr sub_5713

loc_54CD:                               ; CODE XREF: sub_54B6+10↑j
                cmp     word_22A78, 0
                jz      short loc_54D7
                jmp     loc_5693
; ---------------------------------------------------------------------------

loc_54D7:                               ; CODE XREF: sub_54B6+1C↑j
                xor     si, si
                jmp     loc_5682
; ---------------------------------------------------------------------------

loc_54DC:                               ; CODE XREF: sub_54B6+1D8↓j
                push    si
                push    cs
                call    near ptr sub_5430
                pop     cx
                or      ax, ax
                jz      short loc_54E9
                jmp     loc_5681
; ---------------------------------------------------------------------------

loc_54E9:                               ; CODE XREF: sub_54B6+2E↑j
                push    ds
                push    offset aMl_0    ; "Ml"
                push    si
                call    UACOFF          ; struct usracc *uaptr=uacoff(unum);
                pop     cx
                push    dx
                push    ax
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jnz     short loc_5505
                jmp     loc_5681
; ---------------------------------------------------------------------------

loc_5505:                               ; CODE XREF: sub_54B6+4A↑j
                mov     word_22C82, 0
                mov     word_22A7A, si
                mov     word_22A78, 2
                mov     word_22A7C, 1
                mov     word_22C7E, 0
                mov     word_22C80, 0
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                mov     ax, word ptr es:USRNUM ; int usrnum;
                mov     [bp+var_2], ax
                mov     ax, seg USRNUM
                mov     es, ax
                mov     word ptr es:USRNUM, si ; int usrnum;
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                mov     word ptr es:[bx+0DAh], 0FFFFh
                push    si
                call    UACOFF          ; struct usracc *uaptr=uacoff(unum);
                pop     cx
                mov     bx, seg USAPTR
                mov     es, bx
                assume es:nothing
                mov     word ptr es:USAPTR+2, dx ; struct usracc *usaptr;
                mov     word ptr es:USAPTR, ax ; struct usracc *usaptr;
                mov     ax, si
                imul    ax, 29h ; ')'
                mov     dx, seg USER
                mov     es, dx
                mov     dx, word ptr es:USER+2 ; struct user;
                mov     bx, word ptr es:USER ; struct user;
                add     bx, ax
                mov     ax, seg USRPTR
                mov     es, ax
                mov     word ptr es:USRPTR+2, dx ; struct user *usrptr;
                mov     word ptr es:USRPTR, bx ; struct user *usrptr;
                push    ds
                push    offset aMlink_0 ; "MLink"
                push    ds
                push    offset a7s      ; "(%.7s)"
                mov     ax, seg USAPTR
                mov     es, ax
                push    word ptr es:USAPTR+2 ; struct usracc *usaptr;
                push    word ptr es:USAPTR ; struct usracc *usaptr;
                call    SPRINTF         ; int sprintf(char *str, const char *format, ... );
                add     sp, 0Ch
                mov     ax, seg USRPTR
                mov     es, ax
                les     bx, dword ptr es:USRPTR ; struct user *usrptr;
                assume es:nothing
                mov     word ptr es:[bx], 2
                push    ds
                push    offset aMutantlink ; "MUTANTLINK!"
                nop
                push    cs
                call    near ptr sub_7AC8
                add     sp, 4
                mov     ax, seg USRPTR
                mov     es, ax
                assume es:nothing
                les     bx, dword ptr es:USRPTR ; struct user *usrptr;
                assume es:nothing
                mov     ax, seg dseg19
                push    es
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_2AEB5
                pop     es
                assume es:nothing
                mov     es:[bx+6], ax
                mov     ax, seg USRPTR
                mov     es, ax
                assume es:nothing
                les     bx, dword ptr es:USRPTR ; struct user *usrptr;
                assume es:nothing
                or      word ptr es:[bx+14h], 2021h
                or      word ptr es:[bx+16h], 0
                mov     ax, seg USRPTR
                mov     es, ax
                assume es:nothing
                les     bx, dword ptr es:USRPTR ; struct user *usrptr;
                assume es:nothing
                mov     word ptr es:[bx+8], 7
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                mov     word ptr es:[bx+0D6h], 7
                push    0
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    _BTECH          ; int btuech(int chan, int mode);
                add     sp, 4
                mov     word_22A65, 0
                push    seg cseg03
                push    offset sub_5214
                mov     ax, seg USRNUM
                mov     es, ax
                push    word ptr es:USRNUM ; int usrnum;
                call    _BTUCHI         ; int err=btuchi(int chan, char (*rouadr)());
                add     sp, 6
                push    1
                mov     ax, seg USRNUM
                mov     es, ax
                push    word ptr es:USRNUM ; int usrnum;
                push    ds
                push    (offset aIllegalSystemI+0Fh) ; "ID"
                push    cs
                call    near ptr sub_538A
                add     sp, 8
                nop
                push    cs
                call    near ptr sub_57FC
                mov     ax, seg USRNUM
                mov     dx, [bp+var_2]
                mov     es, ax
                mov     word ptr es:USRNUM, dx ; int usrnum;
                mov     ax, seg NTERMS
                mov     es, ax
                mov     si, word ptr es:NTERMS ; int nterms;

loc_5681:                               ; CODE XREF: sub_54B6+30↑j
                                        ; sub_54B6+4C↑j
                inc     si

loc_5682:                               ; CODE XREF: sub_54B6+23↑j
                mov     ax, seg NTERMS
                mov     es, ax
                cmp     word ptr es:NTERMS, si ; int nterms;
                jle     short loc_5691
                jmp     loc_54DC
; ---------------------------------------------------------------------------

loc_5691:                               ; CODE XREF: sub_54B6+1D6↑j
                jmp     short loc_56FF
; ---------------------------------------------------------------------------

loc_5693:                               ; CODE XREF: sub_54B6+1E↑j
                cmp     word_22A78, 1
                jnz     short loc_56FF
                cmp     word_22C82, 0
                jnz     short loc_56B5
                mov     ax, word_22D11
                add     ax, 5
                mov     word_22D11, ax
                mov     ax, word_22D11
                cmp     ax, word_22D0F
                jl      short loc_56FF
                jmp     short loc_56F1
; ---------------------------------------------------------------------------

loc_56B5:                               ; CODE XREF: sub_54B6+1E9↑j
                inc     word_22D13
                cmp     word_22C82, 16h
                jnz     short loc_56E6
                cmp     word_22D13, 2
                jle     short loc_56FF
                cmp     word_22D15, 0
                jnz     short loc_56FF
                nop
                push    cs
                call    near ptr sub_7E49
                mov     word_22D13, 0
                inc     word_22D3E
                cmp     word_22D3E, 2
                jle     short loc_56FF
                jmp     short loc_56F1
; ---------------------------------------------------------------------------

loc_56E6:                               ; CODE XREF: sub_54B6+208↑j
                inc     word_22D13
                cmp     word_22D13, 0Ch
                jle     short loc_56FF

loc_56F1:                               ; CODE XREF: sub_54B6+1FD↑j
                                        ; sub_54B6+22E↑j
                push    1
                push    word_22A7A
                call    _BTUINJ         ; int btuinj(int chan,int status);
                add     sp, 4

loc_56FF:                               ; CODE XREF: sub_54B6:loc_5691↑j
                                        ; sub_54B6+1E2↑j ...
                push    seg cseg03
                push    offset sub_54B6
                push    5
                call    RTKICK          ; rtkick(int time, void *rouptr());
                add     sp, 6
                pop     ds
                assume ds:dseg21
                pop     si
                leave
                retf
sub_54B6        endp


; =============== S U B R O U T I N E =======================================


sub_5713        proc far                ; CODE XREF: sub_54B6+14↑p
                push    si
                push    ds
                mov     ax, seg dseg11
                mov     ds, ax
                assume ds:dseg11
                xor     si, si
                jmp     short loc_5767
; ---------------------------------------------------------------------------

loc_571E:                               ; CODE XREF: sub_5713+5E↓j
                push    ds
                push    offset aMl_0    ; "Ml"
                push    si
                call    UACOFF          ; struct usracc *uaptr=uacoff(unum);
                pop     cx
                push    dx
                push    ax
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_5766
                mov     ax, seg USRNUM
                mov     es, ax
                mov     word ptr es:USRNUM, 0FFFFh ; int usrnum;
                push    word ptr off_21FFE+2
                push    word ptr off_21FFE
                push    word ptr off_21FFE+2
                push    word ptr off_21FFE
                call    SHOCST          ; void shocst(char *summary, char *detail, p1, p1,...,pn);
                add     sp, 8
                push    1
                push    si
                call    _BTUINJ         ; int btuinj(int chan,int status);
                add     sp, 4

loc_5766:                               ; CODE XREF: sub_5713+22↑j
                inc     si

loc_5767:                               ; CODE XREF: sub_5713+9↑j
                mov     ax, seg NTERMS
                mov     es, ax
                cmp     word ptr es:NTERMS, si ; int nterms;
                jg      short loc_571E
                pop     ds
                assume ds:dseg21
                pop     si
                retf
sub_5713        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_5776        proc far                ; CODE XREF: stsrou+AC↑p
                                        ; stsrou+C9↑p

var_4           = byte ptr -4
var_3           = byte ptr -3
var_2           = byte ptr -2
var_1           = byte ptr -1

                enter   4, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg11
                mov     ds, ax
                assume ds:dseg11
                push    0
                push    4
                push    ss
                lea     ax, [bp+var_4]
                push    ax
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                push    ds
                push    offset byte_22A7E
                call    STRLEN          ; size_t strlen(const char* str);
                add     sp, 4
                mov     si, ax
                mov     al, [si+0B2Bh]
                mov     [bp+var_4], al
                mov     al, [si+0B2Ch]
                mov     [bp+var_3], al
                mov     al, [si+0B2Dh]
                mov     [bp+var_2], al
                mov     [bp+var_1], 0
                mov     byte ptr [si+0B2Bh], 0
                mov     di, 64h ; 'd'
                xor     si, si
                jmp     short loc_57D8
; ---------------------------------------------------------------------------

loc_57C6:                               ; CODE XREF: sub_5776+67↓j
                mov     al, [si+0B2Eh]
                mov     ah, 0
                add     di, ax
                cmp     di, 3E7h
                jle     short loc_57D7
                mov     di, 64h ; 'd'

loc_57D7:                               ; CODE XREF: sub_5776+5C↑j
                inc     si

loc_57D8:                               ; CODE XREF: sub_5776+4E↑j
                cmp     byte ptr [si+0B2Eh], 0
                jnz     short loc_57C6
                push    ss
                lea     ax, [bp+var_4]
                push    ax
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                cmp     ax, di
                jnz     short loc_57F5
                mov     ax, 1
                jmp     short loc_57F7
; ---------------------------------------------------------------------------

loc_57F5:                               ; CODE XREF: sub_5776+78↑j
                xor     ax, ax

loc_57F7:                               ; CODE XREF: sub_5776+7D↑j
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_5776        endp


; =============== S U B R O U T I N E =======================================


sub_57FC        proc far                ; CODE XREF: sub_54B6+1B1↑p
                                        ; DATA XREF: sub_57FC+67↓o
                push    ds
                mov     ax, seg dseg11
                mov     ds, ax
                assume ds:dseg11
                cmp     word_22A78, 2
                jnz     short loc_5870
                cmp     word_22A7A, 0FFFFh
                jle     short loc_5870
                inc     word_22C7E
                cmp     word_22C7E, 4
                jle     short loc_5860
                inc     word_22C80
                cmp     word_22C80, 4
                jle     short loc_5836
                push    1
                push    word_22A7A
                call    _BTUINJ         ; int btuinj(int chan,int status);
                add     sp, 4
                jmp     short loc_5860
; ---------------------------------------------------------------------------

loc_5836:                               ; CODE XREF: sub_57FC+28↑j
                cmp     word_22C82, 3
                jnz     short loc_5849
                push    0
                push    word_22A7A
                push    ds
                push    offset asc_2335C ; "??"
                jmp     short loc_5853
; ---------------------------------------------------------------------------

loc_5849:                               ; CODE XREF: sub_57FC+3F↑j
                push    0
                push    word_22A7A
                push    ds
                push    offset unk_22B7D

loc_5853:                               ; CODE XREF: sub_57FC+4B↑j
                push    cs
                call    near ptr sub_538A
                add     sp, 8
                mov     word_22C7E, 0

loc_5860:                               ; CODE XREF: sub_57FC+1D↑j
                                        ; sub_57FC+38↑j
                push    seg cseg03
                push    offset sub_57FC
                push    3
                call    RTKICK          ; rtkick(int time, void *rouptr());
                add     sp, 6

loc_5870:                               ; CODE XREF: sub_57FC+B↑j
                                        ; sub_57FC+12↑j
                pop     ds
                assume ds:dseg21
                retf
sub_57FC        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_5872        proc far                ; CODE XREF: sub_4A44+14E↑p

var_5A          = byte ptr -5Ah

                enter   5Ah, 0
                push    ds
                mov     ax, seg dseg11
                mov     ds, ax
                assume ds:dseg11
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_29864
                push    es:word_29862
                call    SETMBK          ; FILE *setmbk(mbkptr);
                add     sp, 4
                push    4D1h
                call    PRFMSG          ; prfmsg(msgnum,p1,p2, ..• ,pn);
                pop     cx
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    OUTPRF          ; outprf (unum);
                pop     cx
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2986C
                push    es:word_2986A
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    3Fh ; '?'
                push    1
                push    0
                push    0
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    ss
                lea     ax, [bp+var_5A]
                push    ax
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                call    ABSBTV          ; long absbtv (void);
                push    ax
                push    dx
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                pop     ax
                mov     es:[bx+0E6h], ax
                pop     ax
                mov     es:[bx+0E4h], ax
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                mov     word ptr es:[bx+0DEh], 1
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                mov     word ptr es:[bx+0DAh], 3
                push    0F0h
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    _BTUINJ         ; int btuinj(int chan,int status);
                add     sp, 4
                pop     ds
                assume ds:dseg21
                leave
                retf
sub_5872        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_595E        proc far                ; CODE XREF: sub_4A44+15E↑p

var_5A          = byte ptr -5Ah

                enter   5Ah, 0
                push    ds
                mov     ax, seg dseg11
                mov     ds, ax
                assume ds:dseg11
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_29864
                push    es:word_29862
                call    SETMBK          ; FILE *setmbk(mbkptr);
                add     sp, 4
                push    4D2h
                call    PRFMSG          ; prfmsg(msgnum,p1,p2, ..• ,pn);
                pop     cx
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    OUTPRF          ; outprf (unum);
                pop     cx
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2986C
                push    es:word_2986A
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    3Fh ; '?'
                push    1
                push    0
                push    0
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    ss
                lea     ax, [bp+var_5A]
                push    ax
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                call    ABSBTV          ; long absbtv (void);
                push    ax
                push    dx
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                pop     ax
                mov     es:[bx+0E6h], ax
                pop     ax
                mov     es:[bx+0E4h], ax
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                mov     word ptr es:[bx+0DEh], 3
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                mov     word ptr es:[bx+0DAh], 3
                push    0F0h
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    _BTUINJ         ; int btuinj(int chan,int status);
                add     sp, 4
                pop     ds
                assume ds:dseg21
                leave
                retf
sub_595E        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_5A4A        proc far                ; CODE XREF: sub_4A44+156↑p

var_3C          = byte ptr -3Ch

                enter   3Ch, 0
                push    ds
                mov     ax, seg dseg11
                mov     ds, ax
                assume ds:dseg11
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_29864
                push    es:word_29862
                call    SETMBK          ; FILE *setmbk(mbkptr);
                add     sp, 4
                push    4D4h
                call    PRFMSG          ; prfmsg(msgnum,p1,p2, ..• ,pn);
                pop     cx
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29868
                push    es:word_29866
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    3Fh ; '?'
                push    1
                push    0
                push    0
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jnz     short loc_5AA2
                jmp     loc_5B2C
; ---------------------------------------------------------------------------

loc_5AA2:                               ; CODE XREF: sub_5A4A+53↑j
                push    1
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    ss
                lea     ax, [bp+var_3C]
                push    ax
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                call    ABSBTV          ; long absbtv (void);
                push    ax
                push    dx
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                pop     ax
                mov     es:[bx+0E6h], ax
                pop     ax
                mov     es:[bx+0E4h], ax
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                mov     word ptr es:[bx+0DEh], 2
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                mov     word ptr es:[bx+0DAh], 3
                push    0F0h
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    _BTUINJ         ; int btuinj(int chan,int status);
                add     sp, 4
                jmp     short loc_5B35
; ---------------------------------------------------------------------------

loc_5B2C:                               ; CODE XREF: sub_5A4A+55↑j
                push    4CEh
                call    PRFMSG          ; prfmsg(msgnum,p1,p2, ..• ,pn);
                pop     cx

loc_5B35:                               ; CODE XREF: sub_5A4A+E0↑j
                mov     ax, seg USRNUM
                mov     es, ax
                push    word ptr es:USRNUM ; int usrnum;
                call    OUTPRF          ; outprf (unum);
                pop     cx
                pop     ds
                assume ds:dseg21
                leave
                retf
sub_5A4A        endp


; =============== S U B R O U T I N E =======================================


sub_5B48        proc far                ; CODE XREF: sub_2B24+135↑P
                                        ; sub_4A44+3A3↑p
                push    ds
                mov     ax, seg dseg11
                mov     ds, ax
                assume ds:dseg11
                push    seg dseg19
                push    offset unk_29DD8
                push    4C4h
                call    PRFMSG          ; prfmsg(msgnum,p1,p2, ..• ,pn);
                add     sp, 6
                push    13h
                call    HASMKEY         ; int ok=hasmkey(int msgnum);
                pop     cx
                or      ax, ax
                jz      short loc_5B91
                nop
                push    cs
                call    near ptr sub_89BA
                or      ax, ax
                jz      short loc_5B7E
                push    ds
                push    offset unk_22CC5
                push    ds
                push    offset aOn      ; "ON"
                jmp     short loc_5B86
; ---------------------------------------------------------------------------

loc_5B7E:                               ; CODE XREF: sub_5B48+2A↑j
                push    ds
                push    offset unk_22CC5
                push    ds
                push    offset aOff     ; "OFF"

loc_5B86:                               ; CODE XREF: sub_5B48+34↑j
                push    4C5h
                call    PRFMSG          ; prfmsg(msgnum,p1,p2, ..• ,pn);
                add     sp, 0Ah

loc_5B91:                               ; CODE XREF: sub_5B48+21↑j
                push    4C7h
                call    PRFMSG          ; prfmsg(msgnum,p1,p2, ..• ,pn);
                pop     cx
                mov     ax, seg USRNUM
                mov     es, ax
                push    word ptr es:USRNUM ; int usrnum;
                call    OUTPRF          ; outprf (unum);
                pop     cx
                pop     ds
                assume ds:dseg21
                retf
sub_5B48        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_5BAC        proc far                ; CODE XREF: sub_3B50+407↑p
                                        ; DATA XREF: sub_5BAC+82↓o

var_10          = byte ptr -10h
var_F           = byte ptr -0Fh
var_6           = byte ptr -6
var_5           = byte ptr -5
var_4           = byte ptr -4
var_2           = word ptr -2

                enter   10h, 0
                push    ds
                mov     ax, seg dseg11
                mov     ds, ax
                assume ds:dseg11
                cmp     word_22D07, 0
                jnz     short loc_5C24
                push    0Ah
                call    NOW             ; int time=now()
                push    ax
                call    NCTIME          ; char *asctim=nctime(int time);
                pop     cx
                push    dx
                push    ax
                push    ss
                lea     ax, [bp+var_10]
                push    ax
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                mov     al, [bp+var_10]
                mov     [bp+var_6], al
                mov     al, [bp+var_F]
                mov     [bp+var_5], al
                mov     [bp+var_4], 0
                push    ss
                lea     ax, [bp+var_6]
                push    ax
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                mov     [bp+var_2], ax
                mov     ax, [bp+var_2]
                cmp     ax, word_22D05
                jnz     short loc_5C24
                push    1Eh
                push    ds
                push    offset unk_22CC5
                push    ds
                push    offset unk_22CE3
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                push    cs
                call    near ptr sub_4F1A
                cmp     ax, 1
                jnz     short loc_5C24
                mov     word_22D07, 63h ; 'c'

loc_5C24:                               ; CODE XREF: sub_5BAC+F↑j
                                        ; sub_5BAC+55↑j ...
                cmp     word_22D07, 1
                jz      short loc_5C3C
                push    seg cseg03
                push    offset sub_5BAC
                push    12Ch
                call    RTKICK          ; rtkick(int time, void *rouptr());
                add     sp, 6

loc_5C3C:                               ; CODE XREF: sub_5BAC+7D↑j
                pop     ds
                assume ds:dseg21
                leave
                retf
sub_5BAC        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_5C3F        proc far                ; CODE XREF: sub_41CC+2F6↑p

var_198         = byte ptr -198h
var_8           = word ptr -8
var_6           = word ptr -6
var_4           = word ptr -4
var_2           = word ptr -2
arg_0           = word ptr  6
arg_2           = word ptr  8
arg_4           = word ptr  0Ah
arg_6           = word ptr  0Ch

                enter   198h, 0
                push    si
                push    ds
                mov     ax, seg dseg11
                mov     ds, ax
                assume ds:dseg11
                push    ds
                push    offset aRb_0    ; "rb"
                push    [bp+arg_2]
                push    [bp+arg_0]
                call    F_OPEN          ; file* fopen(const char* filename, USE);
                add     sp, 8
                mov     [bp+var_2], dx
                mov     [bp+var_4], ax
                or      ax, dx
                jnz     short loc_5C79
                push    [bp+var_2]
                push    [bp+var_4]

loc_5C6C:                               ; CODE XREF: sub_5C3F+6A↓j
                call    FCLOSE          ; int fclose(FILE* stream );
                add     sp, 4
                xor     ax, ax
                jmp     loc_5D00
; ---------------------------------------------------------------------------

loc_5C79:                               ; CODE XREF: sub_5C3F+25↑j
                push    ds
                push    offset aWb      ; "wb"
                push    [bp+arg_6]
                push    [bp+arg_4]
                call    F_OPEN          ; file* fopen(const char* filename, USE);
                add     sp, 8
                mov     [bp+var_6], dx
                mov     [bp+var_8], ax
                or      ax, dx
                jnz     short loc_5CAB
                push    [bp+var_2]
                push    [bp+var_4]
                call    FCLOSE          ; int fclose(FILE* stream );
                add     sp, 4
                push    [bp+var_6]
                push    [bp+var_8]
                jmp     short loc_5C6C
; ---------------------------------------------------------------------------

loc_5CAB:                               ; CODE XREF: sub_5C3F+54↑j
                                        ; sub_5C3F+A0↓j
                push    [bp+var_2]
                push    [bp+var_4]
                push    80h
                push    1
                push    ss
                lea     ax, [bp+var_198]
                push    ax
                call    F_READ          ; size_t fread(void* ptr, size_t size, size_t count, FILE* stream );
                add     sp, 0Ch
                mov     si, ax
                push    [bp+var_6]
                push    [bp+var_8]
                push    si
                push    1
                push    ss
                lea     ax, [bp+var_198]
                push    ax
                call    FWRITE          ; size_t fwrite ( const void * ptr, size_t size, size_t count, FILE * stream );
                add     sp, 0Ch
                or      si, si
                jnz     short loc_5CAB
                push    [bp+var_2]
                push    [bp+var_4]
                call    FCLOSE          ; int fclose(FILE* stream );
                add     sp, 4
                push    [bp+var_6]
                push    [bp+var_8]
                call    FCLOSE          ; int fclose(FILE* stream );
                add     sp, 4
                mov     ax, 4

loc_5D00:                               ; CODE XREF: sub_5C3F+37↑j
                pop     ds
                assume ds:dseg21
                pop     si
                leave
                retf
sub_5C3F        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_5D04        proc far                ; CODE XREF: sub_3B50+4A↑p

var_6C          = byte ptr -6Ch
var_8           = word ptr -8
var_6           = word ptr -6
var_4           = word ptr -4
var_2           = word ptr -2

                enter   6Ch, 0
                push    si
                push    ds
                mov     ax, seg dseg11
                mov     ds, ax
                assume ds:dseg11
                push    seg _BTURNO
                push    offset _BTURNO  ; char bturno[];
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                mov     [bp+var_2], dx
                mov     [bp+var_4], ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:word_2AEB3, 0
                push    1
                call    STGOPT          ; char *string=stgopt(int msgnum);
                pop     cx
                push    dx
                push    ax
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                mov     [bp+var_6], dx
                mov     [bp+var_8], ax
                push    0
                push    3
                push    [bp+var_2]
                push    [bp+var_4]
                call    F_LDIV
                mov     [bp+var_2], dx
                mov     [bp+var_4], ax
                mov     ax, [bp+var_2]
                mov     dx, [bp+var_4]
                add     dx, 6096h
                adc     ax, 0
                mov     [bp+var_2], ax
                mov     [bp+var_4], dx
                push    0
                push    9
                push    [bp+var_2]
                push    [bp+var_4]
                call    F_LDIV
                mov     [bp+var_2], dx
                mov     [bp+var_4], ax
                mov     ax, [bp+var_2]
                mov     dx, [bp+var_4]
                cmp     ax, [bp+var_6]
                jnz     short loc_5DE5
                cmp     dx, [bp+var_8]
                jnz     short loc_5DE5
                mov     ax, seg dseg19
                mov     es, ax
                or      es:word_2AEB3, 5
                mov     ax, seg dseg19
                mov     es, ax
                or      es:word_2AEB3, 2
                push    1
                call    STGOPT          ; char *string=stgopt(int msgnum);
                pop     cx
                push    dx
                push    ax
                push    seg dseg19
                push    offset aV315    ; "V3.15"
                push    ds
                push    offset aMutantsSRegS ; "Mutants %s Reg# %s"
                push    ss
                lea     ax, [bp+var_6C]
                push    ax
                call    SPRINTF         ; int sprintf(char *str, const char *format, ... );
                add     sp, 10h
                push    seg dseg19
                push    offset aV315    ; "V3.15"
                push    ds
                push    offset aMutantsS ; "Mutants %s"
                push    ss
                lea     ax, [bp+var_6C]
                push    ax

loc_5DDA:                               ; CODE XREF: sub_5D04+17E↓j
                call    SHOCST          ; void shocst(char *summary, char *detail, p1, p1,...,pn);
                add     sp, 0Ch
                jmp     loc_6076
; ---------------------------------------------------------------------------

loc_5DE5:                               ; CODE XREF: sub_5D04+89↑j
                                        ; sub_5D04+8E↑j
                push    seg _BTURNO
                push    offset _BTURNO  ; char bturno[];
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                mov     [bp+var_2], dx
                mov     [bp+var_4], ax
                push    0
                push    7
                push    [bp+var_2]
                push    [bp+var_4]
                call    F_LDIV
                mov     [bp+var_2], dx
                mov     [bp+var_4], ax
                mov     ax, [bp+var_2]
                mov     dx, [bp+var_4]
                add     dx, 7036h
                adc     ax, 0
                mov     [bp+var_2], ax
                mov     [bp+var_4], dx
                push    0
                push    3
                push    [bp+var_2]
                push    [bp+var_4]
                call    F_LDIV
                mov     [bp+var_2], dx
                mov     [bp+var_4], ax
                mov     ax, [bp+var_2]
                mov     dx, [bp+var_4]
                cmp     ax, [bp+var_6]
                jnz     short loc_5E85
                cmp     dx, [bp+var_8]
                jnz     short loc_5E85
                mov     ax, seg dseg19
                mov     es, ax
                or      es:word_2AEB3, 5
                push    1
                call    STGOPT          ; char *string=stgopt(int msgnum);
                pop     cx
                push    dx
                push    ax
                push    seg dseg19
                push    offset aV315    ; "V3.15"
                push    ds
                push    offset aMutantsSRegS ; "Mutants %s Reg# %s"
                push    ss
                lea     ax, [bp+var_6C]
                push    ax
                call    SPRINTF         ; int sprintf(char *str, const char *format, ... );
                add     sp, 10h
                push    seg dseg19
                push    offset aV315    ; "V3.15"
                push    ds
                push    offset aMutantsS ; "Mutants %s"
                push    seg dseg19
                push    offset aV315    ; "V3.15"
                jmp     loc_5DDA
; ---------------------------------------------------------------------------

loc_5E85:                               ; CODE XREF: sub_5D04+13B↑j
                                        ; sub_5D04+140↑j
                mov     si, 0Fh
                push    seg _BTURNO
                push    offset _BTURNO  ; char bturno[];
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                mov     [bp+var_2], dx
                mov     [bp+var_4], ax
                push    0
                push    4
                push    [bp+var_2]
                push    [bp+var_4]
                call    F_LDIV
                mov     [bp+var_2], dx
                mov     [bp+var_4], ax
                mov     ax, [bp+var_2]
                mov     dx, [bp+var_4]
                add     dx, 5D14h
                adc     ax, 0
                mov     [bp+var_2], ax
                mov     [bp+var_4], dx
                mov     cx, [bp+var_2]
                mov     bx, [bp+var_4]
                xor     dx, dx
                mov     ax, 5
                call    F_LXMUL
                mov     [bp+var_2], dx
                mov     [bp+var_4], ax
                mov     ax, [bp+var_2]
                mov     dx, [bp+var_4]
                cmp     ax, [bp+var_6]
                jnz     short loc_5EED
                cmp     dx, [bp+var_8]
                jnz     short loc_5EED
                mov     si, 1Eh

loc_5EED:                               ; CODE XREF: sub_5D04+1DF↑j
                                        ; sub_5D04+1E4↑j
                push    seg _BTURNO
                push    offset _BTURNO  ; char bturno[];
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                mov     [bp+var_2], dx
                mov     [bp+var_4], ax
                push    0
                push    7
                push    [bp+var_2]
                push    [bp+var_4]
                call    F_LDIV
                mov     [bp+var_2], dx
                mov     [bp+var_4], ax
                mov     ax, [bp+var_2]
                mov     dx, [bp+var_4]
                add     dx, 41BCh
                adc     ax, 0
                mov     [bp+var_2], ax
                mov     [bp+var_4], dx
                mov     cx, [bp+var_2]
                mov     bx, [bp+var_4]
                xor     dx, dx
                mov     ax, 5
                call    F_LXMUL
                mov     [bp+var_2], dx
                mov     [bp+var_4], ax
                mov     ax, [bp+var_2]
                mov     dx, [bp+var_4]
                cmp     ax, [bp+var_6]
                jnz     short loc_5F52
                cmp     dx, [bp+var_8]
                jnz     short loc_5F52
                mov     si, 3Ch ; '<'

loc_5F52:                               ; CODE XREF: sub_5D04+244↑j
                                        ; sub_5D04+249↑j
                push    19h
                push    ds
                push    offset a294hsuyd ; "294HSUYD"
                push    seg dseg19
                push    offset unk_2B215
                call    STZCPY          ; stzcpy(char *dest, char *source, int nbytes);
                add     sp, 0Ah
                mov     ax, seg GENBB
                mov     es, ax
                assume es:nothing
                push    word ptr es:GENBB+2 ; BTVFILE *genbb;
                push    word ptr es:GENBB ; BTVFILE *genbb;
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    37h ; '7'
                push    1
                push    seg dseg19
                push    offset unk_2B215
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jnz     short loc_5FF6
                push    0
                push    1Eh
                push    seg dseg19
                push    offset unk_2B1F7
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:word_2B22E, 1
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_2B230, 0
                push    3Bh ; ';'
                push    seg dseg19
                push    offset unk_2B1F7
                call    INVBTV          ; void invbtv(char *recptr, int length);
                add     sp, 6
                cmp     si, 0Fh
                jle     short loc_6037

loc_5FD2:                               ; CODE XREF: sub_5D04+331↓j
                mov     ax, seg dseg19
                mov     es, ax
                or      es:word_2AEB3, 5
                push    si
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2B22E
                push    seg dseg19
                push    offset aV315    ; "V3.15"
                push    ds
                push    offset aMutantsSExtdDD ; "Mutants %s EXTD %d/%d"
                jmp     short loc_6057
; ---------------------------------------------------------------------------
                jmp     short loc_6037
; ---------------------------------------------------------------------------

loc_5FF6:                               ; CODE XREF: sub_5D04+28D↑j
                push    1
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    seg dseg19
                push    offset unk_2B1F7
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2B22E, si
                jle     short loc_6032
                push    seg dseg19
                push    offset aV315    ; "V3.15"
                push    ds
                push    offset aMutantsSDemoEx ; "Mutants %s DEMO EXPIRED"
                push    ss
                lea     ax, [bp+var_6C]
                push    ax
                call    SPRINTF         ; int sprintf(char *str, const char *format, ... );
                add     sp, 0Ch
                jmp     short loc_6064
; ---------------------------------------------------------------------------

loc_6032:                               ; CODE XREF: sub_5D04+313↑j
                cmp     si, 0Fh
                jg      short loc_5FD2

loc_6037:                               ; CODE XREF: sub_5D04+2CC↑j
                                        ; sub_5D04+2F0↑j
                mov     ax, seg dseg19
                mov     es, ax
                or      es:word_2AEB3, 1
                push    si
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2B22E
                push    seg dseg19
                push    offset aV315    ; "V3.15"
                push    ds
                push    offset aMutantsSDemoDD ; "Mutants %s DEMO %d/%d"

loc_6057:                               ; CODE XREF: sub_5D04+2EE↑j
                push    ss
                lea     ax, [bp+var_6C]
                push    ax
                call    SPRINTF         ; int sprintf(char *str, const char *format, ... );
                add     sp, 10h

loc_6064:                               ; CODE XREF: sub_5D04+32C↑j
                push    ss
                lea     ax, [bp+var_6C]
                push    ax
                push    ss
                lea     ax, [bp+var_6C]
                push    ax
                call    SHOCST          ; void shocst(char *summary, char *detail, p1, p1,...,pn);
                add     sp, 8

loc_6076:                               ; CODE XREF: sub_5D04+DE↑j
                pop     ds
                assume ds:dseg21
                pop     si
                leave
                retf
sub_5D04        endp


; =============== S U B R O U T I N E =======================================


sub_607A        proc far
                push    ds
                mov     ax, seg dseg11
                mov     ds, ax
                assume ds:dseg11
                push    0Ah
                push    ds
                push    147Bh
                push    seg dseg19
                push    offset byte_29B40
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                push    0
                push    1Eh
                push    seg dseg19
                push    offset unk_29B4A
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                xor     dx, dx

loc_60A8:                               ; CODE XREF: sub_607A+52↓j
                mov     bx, dx
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                mov     word ptr es:[bx+1878h], 0FFFFh
                mov     bx, dx
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                mov     word ptr es:[bx+18A0h], 0FFFFh
                inc     dx
                cmp     dx, 14h
                jl      short loc_60A8
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29BBA, 0
                mov     es:word_29BB8, 1
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29BBE, 0
                mov     es:word_29BBC, 0
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29BC2, 0
                mov     es:word_29BC0, 0
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29BC6, 0
                mov     es:word_29BC4, 0
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29BCA, 0
                mov     es:word_29BC8, 0
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29BCE, 0
                mov     es:word_29BCC, 0
                pop     ds
                assume ds:dseg21
                retf
sub_607A        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_6142        proc far                ; CODE XREF: lonrou+47↑P

var_3C          = byte ptr -3Ch

                enter   3Ch, 0
                push    ds
                mov     ax, seg dseg11
                mov     ds, ax
                assume ds:dseg11
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29868
                push    es:word_29866
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    3Fh ; '?'
                push    1
                push    0
                push    0
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jz      short loc_61B8
                push    1
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    ss
                lea     ax, [bp+var_3C]
                push    ax
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                push    1
                push    ss
                lea     ax, [bp+var_3C]
                push    ax
                push    cs
                call    near ptr sub_4050
                add     sp, 6
                push    dx
                push    ax
                push    0
                push    ss
                lea     ax, [bp+var_3C]
                push    ax
                push    cs
                call    near ptr sub_4050
                add     sp, 6
                push    dx
                push    ax
                push    4EFh
                call    PRFMSG          ; prfmsg(msgnum,p1,p2, ..• ,pn);
                add     sp, 0Ah

loc_61B8:                               ; CODE XREF: sub_6142+33↑j
                pop     ds
                assume ds:dseg21
                leave
                retf
sub_6142        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_61BB        proc far                ; CODE XREF: sub_3B50+A9↑p

var_152         = byte ptr -152h
var_134         = byte ptr -134h
var_12A         = byte ptr -12Ah
var_10C         = byte ptr -10Ch
var_EE          = byte ptr -0EEh
var_D0          = byte ptr -0D0h
var_B2          = byte ptr -0B2h
var_94          = byte ptr -94h
var_84          = byte ptr -84h
var_83          = byte ptr -83h
var_82          = byte ptr -82h
var_81          = byte ptr -81h
var_80          = byte ptr -80h
var_7F          = byte ptr -7Fh
var_7E          = byte ptr -7Eh
var_7D          = byte ptr -7Dh
var_7C          = word ptr -7Ch
var_7A          = word ptr -7Ah
var_78          = word ptr -78h
var_76          = word ptr -76h
var_74          = byte ptr -74h
var_66          = word ptr -66h
var_64          = word ptr -64h
var_62          = byte ptr -62h
var_52          = byte ptr -52h
var_42          = word ptr -42h
var_40          = word ptr -40h
var_3E          = word ptr -3Eh
var_3C          = word ptr -3Ch
var_3A          = word ptr -3Ah
var_38          = word ptr -38h
var_36          = word ptr -36h
var_34          = word ptr -34h
var_32          = word ptr -32h
var_30          = word ptr -30h
var_2E          = byte ptr -2Eh
var_25          = byte ptr -25h

                enter   152h, 0
                push    ds
                mov     ax, seg dseg11
                mov     ds, ax
                assume ds:dseg11
                mov     ax, seg ACCBB
                mov     es, ax
                assume es:nothing
                push    word ptr es:ACCBB+2 ; BTVFILE *accbb;
                push    word ptr es:ACCBB ; BTVFILE *accbb;
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    37h ; '7'
                push    0
                push    ds
                push    offset aMl_0    ; "Ml"
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jz      short loc_61F3
                jmp     loc_639E
; ---------------------------------------------------------------------------

loc_61F3:                               ; CODE XREF: sub_61BB+33↑j
                push    1Eh
                push    ds
                push    offset aMl_0    ; "Ml"
                push    ss
                lea     ax, [bp+var_152]
                push    ax
                call    STZCPY          ; stzcpy(char *dest, char *source, int nbytes);
                add     sp, 0Ah
                push    0Ah
                push    ds
                push    offset unk_233D5
                push    ss
                lea     ax, [bp+var_134]
                push    ax
                call    STZCPY          ; stzcpy(char *dest, char *source, int nbytes);
                add     sp, 0Ah
                push    1Eh
                push    ds
                push    offset aMutantLinkId ; "Mutant-Link ID"
                push    ss
                lea     ax, [bp+var_12A]
                push    ax
                call    STZCPY          ; stzcpy(char *dest, char *source, int nbytes);
                add     sp, 0Ah
                push    1Eh
                push    ds
                push    offset aDoNotDeleteThi ; "Do not delete this user."
                push    ss
                lea     ax, [bp+var_10C]
                push    ax
                call    STZCPY          ; stzcpy(char *dest, char *source, int nbytes);
                add     sp, 0Ah
                push    1Eh
                push    ds
                push    offset aThisAccountIsU ; "This account is used for"
                push    ss
                lea     ax, [bp+var_EE]
                push    ax
                call    STZCPY          ; stzcpy(char *dest, char *source, int nbytes);
                add     sp, 0Ah
                push    1Eh
                push    ds
                push    offset aMutantlink_0 ; "Mutantlink!"
                push    ss
                lea     ax, [bp+var_D0]
                push    ax
                call    STZCPY          ; stzcpy(char *dest, char *source, int nbytes);
                add     sp, 0Ah
                push    1Eh
                push    ds
                push    offset asc_2342A ; "  "
                push    ss
                lea     ax, [bp+var_B2]
                push    ax
                call    STZCPY          ; stzcpy(char *dest, char *source, int nbytes);
                add     sp, 0Ah
                push    10h
                push    ds
                push    offset asc_2342A ; "  "
                push    ss
                lea     ax, [bp+var_94]
                push    ax
                call    STZCPY          ; stzcpy(char *dest, char *source, int nbytes);
                add     sp, 0Ah
                mov     [bp+var_84], 0
                mov     [bp+var_83], 0
                mov     [bp+var_82], 0
                mov     [bp+var_81], 50h ; 'P'
                mov     [bp+var_80], 18h
                mov     [bp+var_7F], 18h
                mov     [bp+var_7E], 32h ; '2'
                mov     [bp+var_7D], 4Dh ; 'M'
                mov     [bp+var_78], 0
                mov     [bp+var_76], 2
                xor     dx, dx

loc_62C3:                               ; CODE XREF: sub_61BB+11A↓j
                inc     dx
                mov     bx, dx
                shl     bx, 1
                lea     ax, [bp+var_74]
                add     bx, ax
                mov     word ptr ss:[bx], 0
                cmp     dx, 7
                jl      short loc_62C3
                mov     [bp+var_64], 0
                mov     [bp+var_66], 0
                push    10h
                push    ds
                push    offset unk_22D2F
                push    ss
                lea     ax, [bp+var_52]
                push    ax
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                push    10h
                push    ds
                push    offset unk_22D2F
                push    ss
                lea     ax, [bp+var_62]
                push    ax
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                mov     [bp+var_40], 0
                mov     [bp+var_42], 0
                mov     [bp+var_3E], 0
                mov     [bp+var_3C], 0
                mov     [bp+var_38], 0
                mov     [bp+var_3A], 0
                mov     [bp+var_34], 0
                mov     [bp+var_36], 0
                mov     [bp+var_30], 0
                mov     [bp+var_32], 0
                call    TODAY           ; int date=today();
                mov     [bp+var_7C], ax
                mov     [bp+var_7A], ax
                push    0
                push    9
                push    ss
                lea     ax, [bp+var_2E]
                push    ax
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                push    0
                push    25h ; '%'
                push    ss
                lea     ax, [bp+var_25]
                push    ax
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                push    ss
                lea     ax, [bp+var_152]
                push    ax
                call    INSBTV          ; void insbtv(char *recptr);
                add     sp, 4
                push    ss
                lea     ax, [bp+var_152]
                push    ax
                call    NKYREC          ; void nkyrec(char *uid);
                add     sp, 4
                mov     ax, seg USRNUM
                mov     es, ax
                mov     word ptr es:USRNUM, 0FFFFh ; int usrnum;
                push    ds
                push    offset aMutantlinkIdCr ; "Mutantlink ID Created (ML)"
                push    ds
                push    offset aMutantlinkIdCr_0 ; "Mutantlink ID created."
                call    SHOCST          ; void shocst(char *summary, char *detail, p1, p1,...,pn);
                add     sp, 8

loc_639E:                               ; CODE XREF: sub_61BB+35↑j
                pop     ds
                assume ds:dseg21
                leave
                retf
sub_61BB        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_63A1        proc far                ; CODE XREF: sub_52E5+7F↑p
                                        ; DATA XREF: sub_63A1+108↓o

var_52          = byte ptr -52h
var_51          = byte ptr -51h
var_50          = byte ptr -50h

                enter   50h, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg11
                mov     ds, ax
                assume ds:dseg11
                cmp     word_22A78, 1
                jz      short loc_63B7
                jmp     loc_6512
; ---------------------------------------------------------------------------

loc_63B7:                               ; CODE XREF: sub_63A1+11↑j
                push    ds
                push    offset aMutantlinkExce ; "MUTANTLINK: EXCECUTING SCRIPT"
                nop
                push    cs
                call    near ptr sub_7AC8
                add     sp, 4
                push    0
                push    50h ; 'P'
                push    ss
                lea     ax, [bp+var_50]
                push    ax
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                push    word_22DC1
                push    word_22DBF
                push    50h ; 'P'
                push    ss
                lea     ax, [bp+var_50]
                push    ax
                call    FGETS           ; char* fgets(char* str, int num, FILE* stream );
                add     sp, 0Ah
                or      ax, dx
                jnz     short loc_63F2
                jmp     loc_64B8
; ---------------------------------------------------------------------------

loc_63F2:                               ; CODE XREF: sub_63A1+4C↑j
                xor     si, si
                jmp     short loc_640D
; ---------------------------------------------------------------------------

loc_63F6:                               ; CODE XREF: sub_63A1+7B↓j
                lea     ax, [bp+var_50]
                mov     bx, si
                add     bx, ax
                mov     di, bx
                cmp     byte ptr ss:[bx], 0Ah
                jnz     short loc_640C
                mov     byte ptr ss:[di], 0
                mov     si, 50h ; 'P'

loc_640C:                               ; CODE XREF: sub_63A1+62↑j
                inc     si

loc_640D:                               ; CODE XREF: sub_63A1+53↑j
                push    ss
                lea     ax, [bp+var_50]
                push    ax
                call    STRLEN          ; size_t strlen(const char* str);
                add     sp, 4
                cmp     ax, si
                ja      short loc_63F6
                cmp     [bp+var_50], 2Fh ; '/'
                jz      short loc_649A
                push    ss
                lea     ax, [bp+var_50]
                push    ax
                call    STRLEN          ; size_t strlen(const char* str);
                add     sp, 4
                cmp     ax, 2
                jbe     short loc_6462
                push    ss
                lea     ax, [bp+var_50]
                push    ax
                call    STRLEN          ; size_t strlen(const char* str);
                add     sp, 4
                mov     si, ax
                lea     ax, [bp+var_52]
                mov     bx, si
                add     bx, ax
                mov     di, bx
                cmp     byte ptr ss:[bx], 2Fh ; '/'
                jnz     short loc_6462
                cmp     [bp+si+var_51], 43h ; 'C'
                jnz     short loc_6462
                mov     byte ptr ss:[di], 0Dh
                mov     [bp+si+var_51], 0

loc_6462:                               ; CODE XREF: sub_63A1+93↑j
                                        ; sub_63A1+B1↑j ...
                push    word_22A7A
                call    _BTUCLI         ; int btucli(int chan);
                pop     cx
                push    word_22A7A
                call    _BTUCLO         ; int btuclo(int chan);
                pop     cx
                xor     si, si
                jmp     short loc_648B
; ---------------------------------------------------------------------------

loc_647A:                               ; CODE XREF: sub_63A1+F7↓j
                mov     al, ss:[di]
                push    ax
                push    word_22A7A
                call    _CHIOUT         ; void chiout(int chan,char c);
                add     sp, 4
                inc     si

loc_648B:                               ; CODE XREF: sub_63A1+D7↑j
                lea     ax, [bp+var_50]
                mov     bx, si
                add     bx, ax
                mov     di, bx
                cmp     byte ptr ss:[bx], 0
                jnz     short loc_647A

loc_649A:                               ; CODE XREF: sub_63A1+81↑j
                mov     word_22D11, 0
                mov     word_22D42, 1
                push    seg cseg03
                push    offset sub_63A1
                push    3
                call    RTKICK          ; rtkick(int time, void *rouptr());
                add     sp, 6
                jmp     short loc_6518
; ---------------------------------------------------------------------------

loc_64B8:                               ; CODE XREF: sub_63A1+4E↑j
                push    word_22DC1
                push    word_22DBF
                call    FCLOSE          ; int fclose(FILE* stream );
                add     sp, 4
                mov     word_22D15, 0
                nop
                push    cs
                call    near ptr sub_7F03
                cmp     word_22D40, 0FFFFh
                jle     short loc_650C
                push    word_22D40
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                cmp     word ptr es:[bx+0D6h], 5
                jnz     short loc_650C
                push    ds
                push    offset aEndScriptSelec ; "\r\r** END SCRIPT - SELECTING TERMINAL "...
                call    PRF             ; prf(string);
                add     sp, 4
                push    word_22D40
                call    OUTPRF          ; outprf (unum);
                pop     cx
                mov     word_22D40, 0FFFFh

loc_650C:                               ; CODE XREF: sub_63A1+137↑j
                                        ; sub_63A1+14D↑j
                mov     word_22A7C, 1

loc_6512:                               ; CODE XREF: sub_63A1+13↑j
                mov     word_22D42, 0

loc_6518:                               ; CODE XREF: sub_63A1+115↑j
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_63A1        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_651D        proc far                ; CODE XREF: stsrou+DF↑p

var_332         = byte ptr -332h
var_330         = byte ptr -330h
var_230         = byte ptr -230h
var_130         = byte ptr -130h
var_100         = word ptr -100h
var_FE          = word ptr -0FEh
var_FC          = word ptr -0FCh
var_FA          = word ptr -0FAh
var_F4          = byte ptr -0F4h
var_CC          = word ptr -0CCh
var_CA          = word ptr -0CAh
var_C8          = word ptr -0C8h
var_C6          = word ptr -0C6h
var_C4          = word ptr -0C4h
var_C2          = word ptr -0C2h
var_C0          = word ptr -0C0h
var_BE          = word ptr -0BEh
var_B8          = byte ptr -0B8h
var_69          = word ptr -69h
var_67          = word ptr -67h
var_65          = word ptr -65h
var_63          = word ptr -63h
var_5E          = byte ptr -5Eh
var_5A          = word ptr -5Ah
var_58          = word ptr -58h
var_56          = byte ptr -56h
var_50          = byte ptr -50h
var_F           = word ptr -0Fh
var_D           = word ptr -0Dh
var_B           = word ptr -0Bh
var_9           = word ptr -9
var_4           = byte ptr -4
var_3           = byte ptr -3
var_2           = byte ptr -2
arg_0           = word ptr  6

                enter   330h, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg11
                mov     ds, ax
                assume ds:dseg11
                mov     si, [bp+arg_0]
                push    0
                push    3
                push    ss
                lea     ax, [bp+var_4]
                push    ax
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                mov     al, byte_22A7E
                mov     [bp+var_4], al
                mov     al, byte_22A7F
                mov     [bp+var_3], al
                mov     [bp+var_2], 0
                push    0
                push    0FFh
                push    ss
                lea     ax, [bp+var_330]
                push    ax
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                push    ds
                push    offset byte_22A7E
                call    STRLEN          ; size_t strlen(const char* str);
                add     sp, 4
                cmp     ax, 2
                jbe     short loc_6586
                mov     di, 2
                jmp     short loc_657F
; ---------------------------------------------------------------------------

loc_6576:                               ; CODE XREF: sub_651D+67↓j
                mov     al, [di+0B2Eh]
                mov     [bp+di+var_332], al
                inc     di

loc_657F:                               ; CODE XREF: sub_651D+57↑j
                cmp     byte ptr [di+0B2Eh], 0
                jnz     short loc_6576

loc_6586:                               ; CODE XREF: sub_651D+52↑j
                push    ds
                push    (offset aIllegalSystemI+0Fh) ; "ID"
                push    ss
                lea     ax, [bp+var_4]
                push    ax
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jnz     short loc_659E
                jmp     loc_6668
; ---------------------------------------------------------------------------

loc_659E:                               ; CODE XREF: sub_651D+7C↑j
                push    7Eh ; '~'
                push    ss
                lea     ax, [bp+var_330]
                push    ax
                nop
                push    cs
                call    near ptr sub_7A2D
                add     sp, 6
                push    ds
                push    offset unk_2206F
                push    ds
                push    offset aMutantlinkCall ; "MUTANTLINK: CALLER %s"
                push    ss
                lea     ax, [bp+var_230]
                push    ax
                call    SPRINTF         ; int sprintf(char *str, const char *format, ... );
                add     sp, 0Ch
                push    ss
                lea     ax, [bp+var_230]
                push    ax
                push    ss
                lea     ax, [bp+var_230]
                push    ax
                call    SHOCST          ; void shocst(char *summary, char *detail, p1, p1,...,pn);
                add     sp, 8
                push    ds
                push    offset unk_2206F
                nop
                push    cs
                call    near ptr sub_7A99
                add     sp, 4
                push    ax
                push    ds
                push    offset unk_2216E
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                pop     dx
                cmp     dx, ax
                jz      short loc_660D
                mov     word_22C82, 6

loc_65FC:                               ; CODE XREF: sub_651D+532↓j
                push    1
                push    si
                push    ds
                push    offset aDn      ; "DN"

loc_6603:                               ; CODE XREF: sub_651D+11B↓j
                                        ; sub_651D+140↓j ...
                push    cs
                call    near ptr sub_538A
                add     sp, 8
                jmp     loc_6F53
; ---------------------------------------------------------------------------

loc_660D:                               ; CODE XREF: sub_651D+D7↑j
                push    ds
                push    offset unk_22A67
                nop
                push    cs
                call    near ptr sub_7A99
                add     sp, 4
                push    ax
                push    ds
                push    offset unk_22A6B
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                pop     dx
                cmp     dx, ax
                jz      short loc_663A
                mov     word_22C82, 7
                push    1
                push    si
                push    ds
                push    offset aIl      ; "IL"
                jmp     short loc_6603
; ---------------------------------------------------------------------------

loc_663A:                               ; CODE XREF: sub_651D+10C↑j
                push    ds
                push    offset a9999    ; "9999"
                push    cs
                call    near ptr sub_3FC7
                push    dx
                push    ax
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_665F
                mov     word_22C82, 8
                push    1
                push    si
                push    ds
                push    (offset aAzz+1) ; "ZZ"
                jmp     short loc_6603
; ---------------------------------------------------------------------------

loc_665F:                               ; CODE XREF: sub_651D+131↑j
                push    1
                push    si
                push    ds
                push    offset aPs      ; "PS"
                jmp     short loc_6603
; ---------------------------------------------------------------------------

loc_6668:                               ; CODE XREF: sub_651D+7E↑j
                push    ds
                push    offset aPs      ; "PS"
                push    ss
                lea     ax, [bp+var_4]
                push    ax
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jnz     short loc_6680
                jmp     loc_678E
; ---------------------------------------------------------------------------

loc_6680:                               ; CODE XREF: sub_651D+15E↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2986C
                push    es:word_2986A
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    0
                push    41h ; 'A'
                push    ss
                lea     ax, [bp+var_50]
                push    ax
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                push    37h ; '7'
                push    0
                push    ds
                push    offset unk_22A70
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jz      short loc_66D2
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    ss
                lea     ax, [bp+var_5E]
                push    ax
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah

loc_66D2:                               ; CODE XREF: sub_651D+19D↑j
                nop
                push    cs
                call    near ptr sub_79D2
                or      ax, ax
                jz      short loc_6744
                push    cs
                call    near ptr sub_3FC7
                push    dx
                push    ax
                push    ss
                lea     ax, [bp+var_330]
                push    ax
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_6703
                mov     word_22C82, 9
                push    1
                push    si
                push    ds
                push    offset aNr      ; "NR"
                jmp     loc_6603
; ---------------------------------------------------------------------------

loc_6703:                               ; CODE XREF: sub_651D+1D4↑j
                                        ; sub_651D+25C↓j ...
                mov     word_22C82, 0Ah
                push    0
                push    0FFh
                push    ss
                lea     ax, [bp+var_330]
                push    ax
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                push    ss
                lea     ax, [bp+var_50]
                push    ax
                push    cs
                call    near ptr sub_3FC7
                push    dx
                push    ax
                push    ds
                push    offset aNbSS    ; "NB%s~%s"
                push    ss
                lea     ax, [bp+var_330]
                push    ax
                call    SPRINTF         ; int sprintf(char *str, const char *format, ... );
                add     sp, 10h
                push    1
                push    si
                push    ss
                lea     ax, [bp+var_330]
                jmp     loc_6F19
; ---------------------------------------------------------------------------

loc_6744:                               ; CODE XREF: sub_651D+1BC↑j
                push    cs
                call    near ptr sub_3FC7
                push    dx
                push    ax
                push    ss
                lea     ax, [bp+var_330]
                push    ax
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_6765
                mov     word_22C82, 3
                jmp     loc_6A52
; ---------------------------------------------------------------------------

loc_6765:                               ; CODE XREF: sub_651D+23D↑j
                push    ds
                push    offset a9999    ; "9999"
                push    ss
                lea     ax, [bp+var_330]
                push    ax
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_6703
                mov     word_22C82, 0Ch
                push    1
                push    si
                push    ds
                push    offset aHz      ; "HZ"
                jmp     loc_6603
; ---------------------------------------------------------------------------
                jmp     loc_6703
; ---------------------------------------------------------------------------

loc_678E:                               ; CODE XREF: sub_651D+160↑j
                push    ds
                push    offset aHb      ; "HB"
                push    ss
                lea     ax, [bp+var_4]
                push    ax
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jnz     short loc_67A6
                jmp     loc_6A5C
; ---------------------------------------------------------------------------

loc_67A6:                               ; CODE XREF: sub_651D+284↑j
                push    ds
                push    offset asc_234C2 ; "<>"
                push    ss
                lea     ax, [bp+var_330]
                push    ax
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jnz     short loc_67BF
                jmp     loc_6843
; ---------------------------------------------------------------------------

loc_67BF:                               ; CODE XREF: sub_651D+29D↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2986C
                push    es:word_2986A
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    3Eh ; '>'
                push    0
                push    0
                push    0
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jz      short loc_6820
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    ss
                lea     ax, [bp+var_5E]
                push    ax
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                call    ABSBTV          ; long absbtv (void);
                push    ax
                push    dx
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                pop     ax
                mov     es:[bx+0E6h], ax
                pop     ax
                mov     es:[bx+0E4h], ax
                jmp     short loc_6839
; ---------------------------------------------------------------------------

loc_6820:                               ; CODE XREF: sub_651D+2CB↑j
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                mov     word ptr es:[bx+0E6h], 0FFFFh
                mov     word ptr es:[bx+0E4h], 0FFFFh

loc_6839:                               ; CODE XREF: sub_651D+301↑j
                push    1
                push    si
                push    ds
                push    offset asc_234C5 ; "<H"
                jmp     loc_6603
; ---------------------------------------------------------------------------

loc_6843:                               ; CODE XREF: sub_651D+29F↑j
                push    7Eh ; '~'
                push    ss
                lea     ax, [bp+var_330]
                push    ax
                nop
                push    cs
                call    near ptr sub_7A2D
                add     sp, 6
                push    ds
                push    offset unk_2226D
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                push    ax
                push    ds
                push    offset unk_2206F
                nop
                push    cs
                call    near ptr sub_7A99
                add     sp, 4
                pop     dx
                cmp     dx, ax
                jz      short loc_6874
                jmp     loc_6A52
; ---------------------------------------------------------------------------

loc_6874:                               ; CODE XREF: sub_651D+352↑j
                push    ds
                push    offset unk_22A70
                push    ds
                push    offset unk_2206F
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_688B
                jmp     loc_6A52
; ---------------------------------------------------------------------------

loc_688B:                               ; CODE XREF: sub_651D+369↑j
                push    4
                push    ds
                push    offset unk_2206F
                push    ss
                lea     ax, [bp+var_5E]
                push    ax
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                push    ds
                push    offset unk_2216E
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                mov     [bp+var_58], dx
                mov     [bp+var_5A], ax
                push    6
                push    ds
                push    offset unk_2226D
                push    ss
                lea     ax, [bp+var_56]
                push    ax
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                push    41h ; 'A'
                push    ds
                push    offset unk_2236C
                push    ss
                lea     ax, [bp+var_50]
                push    ax
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                push    ds
                push    offset a999999  ; "999999"
                push    ds
                push    offset unk_2246B
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_68F6
                mov     [bp+var_D], 0Fh
                mov     [bp+var_F], 423Fh
                jmp     short loc_6908
; ---------------------------------------------------------------------------

loc_68F6:                               ; CODE XREF: sub_651D+3CB↑j
                push    ds
                push    offset unk_2246B
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                mov     [bp+var_D], dx
                mov     [bp+var_F], ax

loc_6908:                               ; CODE XREF: sub_651D+3D7↑j
                push    ds
                push    offset unk_2256A
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                mov     [bp+var_9], dx
                mov     [bp+var_B], ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2986C
                push    es:word_2986A
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    37h ; '7'
                push    0
                push    ss
                lea     ax, [bp+var_5E]
                push    ax
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jz      short loc_69B1
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    ss
                lea     ax, [bp+var_B8]
                push    ax
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                push    ds
                push    offset unk_2246B
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                cmp     dx, [bp+var_67]
                jnz     short loc_6997
                cmp     ax, [bp+var_69]
                jnz     short loc_6997
                push    ds
                push    offset unk_2256A
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                cmp     dx, [bp+var_63]
                jl      short loc_69BE
                jnz     short loc_698B
                cmp     ax, [bp+var_65]
                jb      short loc_69BE

loc_698B:                               ; CODE XREF: sub_651D+467↑j
                                        ; sub_651D+48B↓j ...
                push    ss
                lea     ax, [bp+var_5E]
                push    ax
                call    UPDBTV          ; void updbtv(char *recptr);
                jmp     short loc_69BB
; ---------------------------------------------------------------------------

loc_6997:                               ; CODE XREF: sub_651D+44F↑j
                                        ; sub_651D+454↑j
                push    ds
                push    offset unk_2246B
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                cmp     dx, [bp+var_67]
                jl      short loc_69BE
                jg      short loc_698B
                cmp     ax, [bp+var_69]
                jbe     short loc_69BE
                jmp     short loc_698B
; ---------------------------------------------------------------------------

loc_69B1:                               ; CODE XREF: sub_651D+427↑j
                push    ss
                lea     ax, [bp+var_5E]
                push    ax
                call    INSBTV          ; void insbtv(char *recptr);

loc_69BB:                               ; CODE XREF: sub_651D+478↑j
                add     sp, 4

loc_69BE:                               ; CODE XREF: sub_651D+465↑j
                                        ; sub_651D+46C↑j ...
                push    ds
                push    offset unk_2246B
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                cmp     dx, 0Fh
                jz      short loc_69D2
                jmp     loc_6A52
; ---------------------------------------------------------------------------

loc_69D2:                               ; CODE XREF: sub_651D+4B0↑j
                cmp     ax, 423Fh
                jnz     short loc_6A52
                push    ss
                lea     ax, [bp+var_5E]
                push    ax
                push    ds
                push    offset unk_22A67
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_6A52
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2986C
                push    es:word_2986A
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    37h ; '7'
                push    0
                push    ds
                push    offset unk_22A70
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    ss
                lea     ax, [bp+var_5E]
                push    ax
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                push    6
                push    ds
                push    offset a9999    ; "9999"
                push    ss
                lea     ax, [bp+var_56]
                push    ax
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                push    ss
                lea     ax, [bp+var_5E]
                push    ax
                call    UPDBTV          ; void updbtv(char *recptr);
                add     sp, 4
                mov     word_22C82, 0Dh
                jmp     loc_65FC
; ---------------------------------------------------------------------------

loc_6A52:                               ; CODE XREF: sub_651D+245↑j
                                        ; sub_651D+354↑j ...
                push    1
                push    si
                push    ds
                push    offset aHb      ; "HB"
                jmp     loc_6603
; ---------------------------------------------------------------------------

loc_6A5C:                               ; CODE XREF: sub_651D+286↑j
                push    ds
                push    offset aGh      ; "GH"
                push    ss
                lea     ax, [bp+var_4]
                push    ax
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jnz     short loc_6A74
                jmp     loc_6B6B
; ---------------------------------------------------------------------------

loc_6A74:                               ; CODE XREF: sub_651D+552↑j
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                cmp     word ptr es:[bx+0E6h], 0FFFFh
                jge     short loc_6A8A
                jmp     loc_6B61
; ---------------------------------------------------------------------------

loc_6A8A:                               ; CODE XREF: sub_651D+568↑j
                jg      short loc_6A97
                cmp     word ptr es:[bx+0E4h], 0FFFFh
                ja      short loc_6A97
                jmp     loc_6B61
; ---------------------------------------------------------------------------

loc_6A97:                               ; CODE XREF: sub_651D:loc_6A8A↑j
                                        ; sub_651D+575↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2986C
                push    es:word_2986A
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    0
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                push    word ptr es:[bx+0E6h]
                push    word ptr es:[bx+0E4h]
                push    ss
                lea     ax, [bp+var_5E]
                push    ax
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                push    0
                push    0FFh
                push    ss
                lea     ax, [bp+var_230]
                push    ax
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                push    [bp+var_9]
                push    [bp+var_B]
                push    [bp+var_D]
                push    [bp+var_F]
                push    ss
                lea     ax, [bp+var_50]
                push    ax
                push    ss
                lea     ax, [bp+var_56]
                push    ax
                push    [bp+var_58]
                push    [bp+var_5A]
                push    ss
                lea     ax, [bp+var_5E]
                push    ax
                push    ds
                push    offset aGhSLdSSLdLd ; "GH%s~%ld~%s~%s~%ld~%ld"
                push    ss
                lea     ax, [bp+var_230]
                push    ax
                call    SPRINTF         ; int sprintf(char *str, const char *format, ... );
                add     sp, 20h
                push    38h ; '8'
                call    QNPBTV          ; int qnpbtv (int getopt);
                pop     cx
                or      ax, ax
                jnz     short loc_6B27
                jmp     loc_6EF8
; ---------------------------------------------------------------------------

loc_6B27:                               ; CODE XREF: sub_651D+605↑j
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    ss
                lea     ax, [bp+var_5E]
                push    ax
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                call    ABSBTV          ; long absbtv (void);
                push    ax
                push    dx
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                pop     ax
                mov     es:[bx+0E6h], ax
                pop     ax
                mov     es:[bx+0E4h], ax
                jmp     loc_6F11
; ---------------------------------------------------------------------------
                jmp     loc_6EF8
; ---------------------------------------------------------------------------

loc_6B61:                               ; CODE XREF: sub_651D+56A↑j
                                        ; sub_651D+577↑j
                push    1
                push    si
                push    ds
                push    offset aGh_0    ; "GH<>"
                jmp     loc_6603
; ---------------------------------------------------------------------------

loc_6B6B:                               ; CODE XREF: sub_651D+554↑j
                push    ds
                push    offset aSp      ; "SP"
                push    ss
                lea     ax, [bp+var_4]
                push    ax
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_6B83
                jmp     loc_6DC5
; ---------------------------------------------------------------------------

loc_6B83:                               ; CODE XREF: sub_651D+661↑j
                push    ds
                push    offset aGp      ; "GP"
                push    ss
                lea     ax, [bp+var_4]
                push    ax
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jnz     short loc_6B9B
                jmp     loc_6DCF
; ---------------------------------------------------------------------------

loc_6B9B:                               ; CODE XREF: sub_651D+679↑j
                push    ds
                push    offset asc_234C2 ; "<>"
                push    ss
                lea     ax, [bp+var_330]
                push    ax
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jnz     short loc_6BB4
                jmp     loc_6C3F
; ---------------------------------------------------------------------------

loc_6BB4:                               ; CODE XREF: sub_651D+692↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_29868
                push    es:word_29866
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    3Fh ; '?'
                push    1
                push    0
                push    0
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jz      short loc_6C16
                push    1
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    ss
                lea     ax, [bp+var_F4]
                push    ax
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                call    ABSBTV          ; long absbtv (void);
                push    ax
                push    dx
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                pop     ax
                mov     es:[bx+0E6h], ax
                pop     ax
                mov     es:[bx+0E4h], ax
                jmp     short loc_6C2F
; ---------------------------------------------------------------------------

loc_6C16:                               ; CODE XREF: sub_651D+6C0↑j
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                mov     word ptr es:[bx+0E6h], 0FFFFh
                mov     word ptr es:[bx+0E4h], 0FFFFh

loc_6C2F:                               ; CODE XREF: sub_651D+6F7↑j
                mov     word_22D2D, 0
                push    1
                push    si
                push    ds
                push    offset aRp      ; "RP"
                jmp     loc_6603
; ---------------------------------------------------------------------------

loc_6C3F:                               ; CODE XREF: sub_651D+694↑j
                push    7Eh ; '~'
                push    ss
                lea     ax, [bp+var_330]
                push    ax
                nop
                push    cs
                call    near ptr sub_7A2D
                add     sp, 6
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2986C
                push    es:word_2986A
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    37h ; '7'
                push    0
                push    1
                push    ds
                push    offset unk_2206F
                push    cs
                call    near ptr sub_4050
                add     sp, 6
                push    dx
                push    ax
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jnz     short loc_6C88
                jmp     loc_6DC5
; ---------------------------------------------------------------------------

loc_6C88:                               ; CODE XREF: sub_651D+766↑j
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    ss
                lea     ax, [bp+var_B8]
                push    ax
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                cmp     [bp+var_67], 0Fh
                jle     short loc_6CA8
                jmp     loc_6DC5
; ---------------------------------------------------------------------------

loc_6CA8:                               ; CODE XREF: sub_651D+786↑j
                jl      short loc_6CB4
                cmp     [bp+var_69], 423Fh
                jb      short loc_6CB4
                jmp     loc_6DC5
; ---------------------------------------------------------------------------

loc_6CB4:                               ; CODE XREF: sub_651D:loc_6CA8↑j
                                        ; sub_651D+792↑j
                push    28h ; '('
                push    ds
                push    offset unk_2206F
                push    ss
                lea     ax, [bp+var_F4]
                push    ax
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                push    ds
                push    offset unk_2216E
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                mov     [bp+var_CA], dx
                mov     [bp+var_CC], ax
                push    ds
                push    offset unk_2226D
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                mov     [bp+var_C6], dx
                mov     [bp+var_C8], ax
                push    ds
                push    offset unk_2236C
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                mov     [bp+var_C2], dx
                mov     [bp+var_C4], ax
                push    ds
                push    offset unk_2246B
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                mov     [bp+var_BE], dx
                mov     [bp+var_C0], ax
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29868
                push    es:word_29866
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    37h ; '7'
                push    0
                push    ss
                lea     ax, [bp+var_F4]
                push    ax
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jz      short loc_6DB7
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    ss
                lea     ax, [bp+var_130]
                push    ax
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                push    ds
                push    offset unk_2236C
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                cmp     dx, [bp+var_FE]
                jnz     short loc_6D9B
                cmp     ax, [bp+var_100]
                jnz     short loc_6D9B
                push    ds
                push    offset unk_2246B
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                cmp     dx, [bp+var_FA]
                jl      short loc_6DC5
                jnz     short loc_6D8E
                cmp     ax, [bp+var_FC]
                jb      short loc_6DC5

loc_6D8E:                               ; CODE XREF: sub_651D+869↑j
                                        ; sub_651D+890↓j ...
                push    ss
                lea     ax, [bp+var_F4]
                push    ax
                call    UPDBTV          ; void updbtv(char *recptr);
                jmp     short loc_6DC2
; ---------------------------------------------------------------------------

loc_6D9B:                               ; CODE XREF: sub_651D+84F↑j
                                        ; sub_651D+855↑j
                push    ds
                push    offset unk_2236C
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                cmp     dx, [bp+var_FE]
                jl      short loc_6DC5
                jg      short loc_6D8E
                cmp     ax, [bp+var_100]
                jbe     short loc_6DC5
                jmp     short loc_6D8E
; ---------------------------------------------------------------------------

loc_6DB7:                               ; CODE XREF: sub_651D+826↑j
                push    ss
                lea     ax, [bp+var_F4]
                push    ax
                call    INSBTV          ; void insbtv(char *recptr);

loc_6DC2:                               ; CODE XREF: sub_651D+87C↑j
                add     sp, 4

loc_6DC5:                               ; CODE XREF: sub_651D+663↑j
                                        ; sub_651D+768↑j ...
                push    1
                push    si
                push    ds
                push    offset aGp      ; "GP"
                jmp     loc_6603
; ---------------------------------------------------------------------------

loc_6DCF:                               ; CODE XREF: sub_651D+67B↑j
                push    ds
                push    (offset aMjwmutpl+6) ; "PL"
                push    ss
                lea     ax, [bp+var_4]
                push    ax
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jnz     short loc_6DE7
                jmp     loc_6F33
; ---------------------------------------------------------------------------

loc_6DE7:                               ; CODE XREF: sub_651D+8C5↑j
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                cmp     word ptr es:[bx+0E6h], 0FFFFh
                jge     short loc_6DFD
                jmp     loc_6F1D
; ---------------------------------------------------------------------------

loc_6DFD:                               ; CODE XREF: sub_651D+8DB↑j
                jg      short loc_6E0A
                cmp     word ptr es:[bx+0E4h], 0FFFFh
                ja      short loc_6E0A
                jmp     loc_6F1D
; ---------------------------------------------------------------------------

loc_6E0A:                               ; CODE XREF: sub_651D:loc_6DFD↑j
                                        ; sub_651D+8E8↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_29868
                push    es:word_29866
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    1
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                push    word ptr es:[bx+0E6h]
                push    word ptr es:[bx+0E4h]
                push    ss
                lea     ax, [bp+var_F4]
                push    ax
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                push    0
                push    0FFh
                push    ss
                lea     ax, [bp+var_230]
                push    ax
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                push    [bp+var_BE]
                push    [bp+var_C0]
                push    [bp+var_C2]
                push    [bp+var_C4]
                push    [bp+var_C6]
                push    [bp+var_C8]
                push    [bp+var_CA]
                push    [bp+var_CC]
                push    ss
                lea     ax, [bp+var_F4]
                push    ax
                push    ds
                push    offset aPlSLdLdLdLd ; "PL%s~%ld~%ld~%ld~%ld"
                push    ss
                lea     ax, [bp+var_230]
                push    ax
                call    SPRINTF         ; int sprintf(char *str, const char *format, ... );
                add     sp, 1Ch
                push    39h ; '9'
                call    QNPBTV          ; int qnpbtv (int getopt);
                pop     cx
                or      ax, ax
                jz      short loc_6ED4
                push    1
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    ss
                lea     ax, [bp+var_F4]
                push    ax
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                call    ABSBTV          ; long absbtv (void);
                push    ax
                push    dx
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                pop     ax
                mov     es:[bx+0E6h], ax
                pop     ax
                mov     es:[bx+0E4h], ax
                jmp     short loc_6EED
; ---------------------------------------------------------------------------

loc_6ED4:                               ; CODE XREF: sub_651D+97E↑j
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                mov     word ptr es:[bx+0E6h], 0FFFFh
                mov     word ptr es:[bx+0E4h], 0FFFFh

loc_6EED:                               ; CODE XREF: sub_651D+9B5↑j
                inc     word_22D2D
                cmp     word_22D2D, 31h ; '1'
                jle     short loc_6F11

loc_6EF8:                               ; CODE XREF: sub_651D+607↑j
                                        ; sub_651D+641↑j
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                mov     word ptr es:[bx+0E6h], 0FFFFh
                mov     word ptr es:[bx+0E4h], 0FFFFh

loc_6F11:                               ; CODE XREF: sub_651D+63E↑j
                                        ; sub_651D+9D9↑j
                push    1
                push    si
                push    ss
                lea     ax, [bp+var_230]

loc_6F19:                               ; CODE XREF: sub_651D+224↑j
                push    ax
                jmp     loc_6603
; ---------------------------------------------------------------------------

loc_6F1D:                               ; CODE XREF: sub_651D+8DD↑j
                                        ; sub_651D+8EA↑j
                push    1
                push    si
                push    ds
                push    offset aPl      ; "PL<>"
                push    cs
                call    near ptr sub_538A
                add     sp, 8
                mov     word_22C82, 12h
                jmp     short loc_6F53
; ---------------------------------------------------------------------------

loc_6F33:                               ; CODE XREF: sub_651D+8C7↑j
                push    ds
                push    offset aDn      ; "DN"
                push    ss
                lea     ax, [bp+var_4]
                push    ax
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_6F53
                push    1
                push    si
                call    _BTUINJ         ; int btuinj(int chan,int status);
                add     sp, 4

loc_6F53:                               ; CODE XREF: sub_651D+ED↑j
                                        ; sub_651D+A14↑j ...
                xor     ax, ax
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_651D        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_6F5A        proc far                ; CODE XREF: stsrou+C2↑p

var_42C         = byte ptr -42Ch
var_32E         = byte ptr -32Eh
var_32C         = byte ptr -32Ch
var_22C         = byte ptr -22Ch
var_22A         = byte ptr -22Ah
var_12C         = byte ptr -12Ch
var_FC          = word ptr -0FCh
var_FA          = word ptr -0FAh
var_F8          = word ptr -0F8h
var_F6          = word ptr -0F6h
var_F0          = byte ptr -0F0h
var_C8          = word ptr -0C8h
var_C6          = word ptr -0C6h
var_C4          = word ptr -0C4h
var_C2          = word ptr -0C2h
var_C0          = word ptr -0C0h
var_BE          = word ptr -0BEh
var_BC          = word ptr -0BCh
var_BA          = word ptr -0BAh
var_B4          = byte ptr -0B4h
var_65          = word ptr -65h
var_63          = word ptr -63h
var_61          = word ptr -61h
var_5F          = word ptr -5Fh
var_5A          = byte ptr -5Ah
var_56          = word ptr -56h
var_54          = word ptr -54h
var_52          = byte ptr -52h
var_4C          = byte ptr -4Ch
var_B           = word ptr -0Bh
var_9           = word ptr -9
var_7           = word ptr -7
var_5           = word ptr -5
arg_0           = word ptr  6

                enter   42Ch, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg11
                mov     ds, ax
                assume ds:dseg11
                mov     si, [bp+arg_0]
                mov     word_22D13, 0
                push    0
                push    0FFh
                push    ss
                lea     ax, [bp+var_22C]
                push    ax
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                xor     di, di
                jmp     short loc_6F8F
; ---------------------------------------------------------------------------

loc_6F86:                               ; CODE XREF: sub_6F5A+3A↓j
                mov     al, [di+0B2Eh]
                mov     [bp+di+var_22C], al
                inc     di

loc_6F8F:                               ; CODE XREF: sub_6F5A+2A↑j
                cmp     byte ptr [di+0B2Eh], 0
                jnz     short loc_6F86
                push    ss
                lea     ax, [bp+var_22C]
                push    ax
                call    STRLEN          ; size_t strlen(const char* str);
                add     sp, 4
                cmp     ax, 2
                jbe     short loc_6FE1
                push    0
                push    0FFh
                push    ss
                lea     ax, [bp+var_32C]
                push    ax
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                mov     di, 2
                jmp     short loc_6FCA
; ---------------------------------------------------------------------------

loc_6FC1:                               ; CODE XREF: sub_6F5A+80↓j
                mov     al, [bp+di+var_22C]
                mov     [bp+di+var_32E], al
                inc     di

loc_6FCA:                               ; CODE XREF: sub_6F5A+65↑j
                push    ss
                lea     ax, [bp+var_22C]
                push    ax
                call    STRLEN          ; size_t strlen(const char* str);
                add     sp, 4
                cmp     ax, di
                ja      short loc_6FC1
                mov     [bp+var_22A], 0

loc_6FE1:                               ; CODE XREF: sub_6F5A+4D↑j
                push    ds
                push    (offset aIllegalSystemI+0Fh) ; "ID"
                push    ss
                lea     ax, [bp+var_22C]
                push    ax
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_702F
                push    ds
                push    offset aMutantlinkLink_0 ; "MUTANTLINK: LINKING"
                nop
                push    cs
                call    near ptr sub_7AC8
                add     sp, 4
                mov     word_22C82, 2
                push    ds
                push    offset unk_22A6B
                push    ds
                push    offset unk_22A67
                push    ds
                push    offset aIdSS    ; "ID%s~%s"
                push    ss
                lea     ax, [bp+var_42C]
                push    ax
                call    SPRINTF         ; int sprintf(char *str, const char *format, ... );
                add     sp, 10h

loc_7023:                               ; CODE XREF: sub_6F5A+183↓j
                                        ; sub_6F5A+3A6↓j ...
                push    1
                push    si
                push    ss
                lea     ax, [bp+var_42C]
                push    ax
                jmp     loc_79C4
; ---------------------------------------------------------------------------

loc_702F:                               ; CODE XREF: sub_6F5A+9B↑j
                push    ds
                push    offset aIl      ; "IL"
                push    ss
                lea     ax, [bp+var_22C]
                push    ax
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_704E
                mov     word_22C82, 0Eh
                jmp     loc_7970
; ---------------------------------------------------------------------------

loc_704E:                               ; CODE XREF: sub_6F5A+E9↑j
                push    ds
                push    offset aPs      ; "PS"
                push    ss
                lea     ax, [bp+var_22C]
                push    ax
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_70E0
                mov     word_22C82, 3
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2986C
                push    es:word_2986A
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    3Eh ; '>'
                push    0
                push    0
                push    0
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    ss
                lea     ax, [bp+var_5A]
                push    ax
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                call    ABSBTV          ; long absbtv (void);
                push    ax
                push    dx
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                pop     ax
                mov     es:[bx+0E6h], ax
                pop     ax
                mov     es:[bx+0E4h], ax
                push    cs
                call    near ptr sub_3FC7
                push    dx
                push    ax
                push    ds
                push    offset aPsS     ; "PS%s"
                push    ss
                lea     ax, [bp+var_42C]
                push    ax
                call    SPRINTF         ; int sprintf(char *str, const char *format, ... );
                add     sp, 0Ch
                jmp     loc_7023
; ---------------------------------------------------------------------------

loc_70E0:                               ; CODE XREF: sub_6F5A+108↑j
                push    ds
                push    offset aNr      ; "NR"
                push    ss
                lea     ax, [bp+var_22C]
                push    ax
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_70FF
                mov     word_22C82, 9
                jmp     loc_7970
; ---------------------------------------------------------------------------

loc_70FF:                               ; CODE XREF: sub_6F5A+19A↑j
                push    ds
                push    offset aNb      ; "NB"
                push    ss
                lea     ax, [bp+var_22C]
                push    ax
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jnz     short loc_7118
                jmp     loc_71E1
; ---------------------------------------------------------------------------

loc_7118:                               ; CODE XREF: sub_6F5A+1B9↑j
                push    4
                push    ds
                push    offset unk_22A70
                push    ss
                lea     ax, [bp+var_5A]
                push    ax
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                mov     [bp+var_54], 0
                mov     [bp+var_56], 1
                push    7Eh ; '~'
                push    ss
                lea     ax, [bp+var_32C]
                push    ax
                nop
                push    cs
                call    near ptr sub_7A2D
                add     sp, 6
                push    6
                push    ds
                push    offset unk_2206F
                push    ss
                lea     ax, [bp+var_52]
                push    ax
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                push    41h ; 'A'
                push    ds
                push    offset unk_2216E
                push    ss
                lea     ax, [bp+var_4C]
                push    ax
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                mov     [bp+var_9], 0
                mov     [bp+var_B], 0
                mov     [bp+var_5], 0
                mov     [bp+var_7], 0
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2986C
                push    es:word_2986A
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    37h ; '7'
                push    0
                push    ds
                push    offset unk_22A70
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jz      short loc_71CB
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    0
                push    0
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                push    ss
                lea     ax, [bp+var_5A]
                push    ax
                call    UPDBTV          ; void updbtv(char *recptr);
                jmp     short loc_71D5
; ---------------------------------------------------------------------------

loc_71CB:                               ; CODE XREF: sub_6F5A+24E↑j
                push    ss
                lea     ax, [bp+var_5A]
                push    ax
                call    INSBTV          ; void insbtv(char *recptr);

loc_71D5:                               ; CODE XREF: sub_6F5A+26F↑j
                add     sp, 4
                mov     word_22C82, 0Fh
                jmp     loc_7970
; ---------------------------------------------------------------------------

loc_71E1:                               ; CODE XREF: sub_6F5A+1BB↑j
                push    ds
                push    offset aFr      ; "FR"
                push    ss
                lea     ax, [bp+var_22C]
                push    ax
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_7200
                mov     word_22C82, 2
                jmp     loc_7970
; ---------------------------------------------------------------------------

loc_7200:                               ; CODE XREF: sub_6F5A+29B↑j
                push    ds
                push    offset aHb      ; "HB"
                push    ss
                lea     ax, [bp+var_22C]
                push    ax
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jnz     short loc_7219
                jmp     loc_7310
; ---------------------------------------------------------------------------

loc_7219:                               ; CODE XREF: sub_6F5A+2BA↑j
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                cmp     word ptr es:[bx+0E6h], 0FFFFh
                jge     short loc_722F
                jmp     loc_7306
; ---------------------------------------------------------------------------

loc_722F:                               ; CODE XREF: sub_6F5A+2D0↑j
                jg      short loc_723C
                cmp     word ptr es:[bx+0E4h], 0FFFFh
                ja      short loc_723C
                jmp     loc_7306
; ---------------------------------------------------------------------------

loc_723C:                               ; CODE XREF: sub_6F5A:loc_722F↑j
                                        ; sub_6F5A+2DD↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2986C
                push    es:word_2986A
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    0
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                push    word ptr es:[bx+0E6h]
                push    word ptr es:[bx+0E4h]
                push    ss
                lea     ax, [bp+var_5A]
                push    ax
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                push    0
                push    0FFh
                push    ss
                lea     ax, [bp+var_42C]
                push    ax
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                push    [bp+var_5]
                push    [bp+var_7]
                push    [bp+var_9]
                push    [bp+var_B]
                push    ss
                lea     ax, [bp+var_4C]
                push    ax
                push    ss
                lea     ax, [bp+var_52]
                push    ax
                push    [bp+var_54]
                push    [bp+var_56]
                push    ss
                lea     ax, [bp+var_5A]
                push    ax
                push    ds
                push    offset aHbSLdSSLdLd ; "HB%s~%ld~%s~%s~%ld~%ld"
                push    ss
                lea     ax, [bp+var_42C]
                push    ax
                call    SPRINTF         ; int sprintf(char *str, const char *format, ... );
                add     sp, 20h
                push    38h ; '8'
                call    QNPBTV          ; int qnpbtv (int getopt);
                pop     cx
                or      ax, ax
                jnz     short loc_72CC
                jmp     loc_772C
; ---------------------------------------------------------------------------

loc_72CC:                               ; CODE XREF: sub_6F5A+36D↑j
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    ss
                lea     ax, [bp+var_5A]
                push    ax
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                call    ABSBTV          ; long absbtv (void);
                push    ax
                push    dx
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                pop     ax
                mov     es:[bx+0E6h], ax
                pop     ax
                mov     es:[bx+0E4h], ax
                jmp     loc_7023
; ---------------------------------------------------------------------------
                jmp     loc_772C
; ---------------------------------------------------------------------------

loc_7306:                               ; CODE XREF: sub_6F5A+2D2↑j
                                        ; sub_6F5A+2DF↑j
                push    1
                push    si
                push    ds
                push    offset aHb_0    ; "HB<>"
                jmp     loc_79C4
; ---------------------------------------------------------------------------

loc_7310:                               ; CODE XREF: sub_6F5A+2BC↑j
                push    ds
                push    offset asc_234C5 ; "<H"
                push    ss
                lea     ax, [bp+var_22C]
                push    ax
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_7329
                jmp     loc_75F5
; ---------------------------------------------------------------------------

loc_7329:                               ; CODE XREF: sub_6F5A+3CA↑j
                push    ds
                push    offset aGh      ; "GH"
                push    ss
                lea     ax, [bp+var_22C]
                push    ax
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jnz     short loc_7342
                jmp     loc_75FF
; ---------------------------------------------------------------------------

loc_7342:                               ; CODE XREF: sub_6F5A+3E3↑j
                push    ds
                push    offset asc_234C2 ; "<>"
                push    ss
                lea     ax, [bp+var_32C]
                push    ax
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jnz     short loc_735B
                jmp     loc_73E6
; ---------------------------------------------------------------------------

loc_735B:                               ; CODE XREF: sub_6F5A+3FC↑j
                mov     word_22D2D, 0
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_29868
                push    es:word_29866
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    3Fh ; '?'
                push    1
                push    0
                push    0
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jz      short loc_73C3
                push    1
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    ss
                lea     ax, [bp+var_F0]
                push    ax
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                call    ABSBTV          ; long absbtv (void);
                push    ax
                push    dx
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                pop     ax
                mov     es:[bx+0E6h], ax
                pop     ax
                mov     es:[bx+0E4h], ax
                jmp     short loc_73DC
; ---------------------------------------------------------------------------

loc_73C3:                               ; CODE XREF: sub_6F5A+430↑j
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                mov     word ptr es:[bx+0E6h], 0FFFFh
                mov     word ptr es:[bx+0E4h], 0FFFFh

loc_73DC:                               ; CODE XREF: sub_6F5A+467↑j
                push    1
                push    si
                push    ds
                push    offset aSp      ; "SP"
                jmp     loc_79C4
; ---------------------------------------------------------------------------

loc_73E6:                               ; CODE XREF: sub_6F5A+3FE↑j
                push    7Eh ; '~'
                push    ss
                lea     ax, [bp+var_32C]
                push    ax
                nop
                push    cs
                call    near ptr sub_7A2D
                add     sp, 6
                push    ds
                push    offset unk_2226D
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                push    ax
                push    ds
                push    offset unk_2206F
                nop
                push    cs
                call    near ptr sub_7A99
                add     sp, 4
                pop     dx
                cmp     dx, ax
                jz      short loc_7417
                jmp     loc_75F5
; ---------------------------------------------------------------------------

loc_7417:                               ; CODE XREF: sub_6F5A+4B8↑j
                push    ds
                push    offset unk_22A70
                push    ds
                push    offset unk_2206F
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_742E
                jmp     loc_75F5
; ---------------------------------------------------------------------------

loc_742E:                               ; CODE XREF: sub_6F5A+4CF↑j
                push    4
                push    ds
                push    offset unk_2206F
                push    ss
                lea     ax, [bp+var_5A]
                push    ax
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                push    ds
                push    offset unk_2216E
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                mov     [bp+var_54], dx
                mov     [bp+var_56], ax
                push    6
                push    ds
                push    offset unk_2226D
                push    ss
                lea     ax, [bp+var_52]
                push    ax
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                push    41h ; 'A'
                push    ds
                push    offset unk_2236C
                push    ss
                lea     ax, [bp+var_4C]
                push    ax
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                push    ds
                push    offset a999999  ; "999999"
                push    ds
                push    offset unk_2246B
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_7499
                mov     [bp+var_9], 0Fh
                mov     [bp+var_B], 423Fh
                jmp     short loc_74AB
; ---------------------------------------------------------------------------

loc_7499:                               ; CODE XREF: sub_6F5A+531↑j
                push    ds
                push    offset unk_2246B
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                mov     [bp+var_9], dx
                mov     [bp+var_B], ax

loc_74AB:                               ; CODE XREF: sub_6F5A+53D↑j
                push    ds
                push    offset unk_2256A
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                mov     [bp+var_5], dx
                mov     [bp+var_7], ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2986C
                push    es:word_2986A
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    37h ; '7'
                push    0
                push    ss
                lea     ax, [bp+var_5A]
                push    ax
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jz      short loc_7554
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    ss
                lea     ax, [bp+var_B4]
                push    ax
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                push    ds
                push    offset unk_2246B
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                cmp     dx, [bp+var_63]
                jnz     short loc_753A
                cmp     ax, [bp+var_65]
                jnz     short loc_753A
                push    ds
                push    offset unk_2256A
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                cmp     dx, [bp+var_5F]
                jl      short loc_7561
                jnz     short loc_752E
                cmp     ax, [bp+var_61]
                jb      short loc_7561

loc_752E:                               ; CODE XREF: sub_6F5A+5CD↑j
                                        ; sub_6F5A+5F1↓j ...
                push    ss
                lea     ax, [bp+var_5A]
                push    ax
                call    UPDBTV          ; void updbtv(char *recptr);
                jmp     short loc_755E
; ---------------------------------------------------------------------------

loc_753A:                               ; CODE XREF: sub_6F5A+5B5↑j
                                        ; sub_6F5A+5BA↑j
                push    ds
                push    offset unk_2246B
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                cmp     dx, [bp+var_63]
                jl      short loc_7561
                jg      short loc_752E
                cmp     ax, [bp+var_65]
                jbe     short loc_7561
                jmp     short loc_752E
; ---------------------------------------------------------------------------

loc_7554:                               ; CODE XREF: sub_6F5A+58D↑j
                push    ss
                lea     ax, [bp+var_5A]
                push    ax
                call    INSBTV          ; void insbtv(char *recptr);

loc_755E:                               ; CODE XREF: sub_6F5A+5DE↑j
                add     sp, 4

loc_7561:                               ; CODE XREF: sub_6F5A+5CB↑j
                                        ; sub_6F5A+5D2↑j ...
                push    ds
                push    offset unk_2246B
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                cmp     dx, 0Fh
                jz      short loc_7575
                jmp     loc_75F5
; ---------------------------------------------------------------------------

loc_7575:                               ; CODE XREF: sub_6F5A+616↑j
                cmp     ax, 423Fh
                jnz     short loc_75F5
                push    ss
                lea     ax, [bp+var_5A]
                push    ax
                push    ds
                push    offset unk_22A67
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_75F5
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2986C
                push    es:word_2986A
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    37h ; '7'
                push    0
                push    ds
                push    offset unk_22A70
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    ss
                lea     ax, [bp+var_5A]
                push    ax
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                push    6
                push    ds
                push    offset a9999    ; "9999"
                push    ss
                lea     ax, [bp+var_52]
                push    ax
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                push    ss
                lea     ax, [bp+var_5A]
                push    ax
                call    UPDBTV          ; void updbtv(char *recptr);
                add     sp, 4
                mov     word_22C82, 0Dh
                jmp     loc_7970
; ---------------------------------------------------------------------------

loc_75F5:                               ; CODE XREF: sub_6F5A+3CC↑j
                                        ; sub_6F5A+4BA↑j ...
                push    1
                push    si
                push    ds
                push    offset aGh      ; "GH"
                jmp     loc_79C4
; ---------------------------------------------------------------------------

loc_75FF:                               ; CODE XREF: sub_6F5A+3E5↑j
                push    ds
                push    offset aGp      ; "GP"
                push    ss
                lea     ax, [bp+var_22C]
                push    ax
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jnz     short loc_7618
                jmp     loc_7755
; ---------------------------------------------------------------------------

loc_7618:                               ; CODE XREF: sub_6F5A+6B9↑j
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                cmp     word ptr es:[bx+0E6h], 0FFFFh
                jge     short loc_762E
                jmp     loc_774B
; ---------------------------------------------------------------------------

loc_762E:                               ; CODE XREF: sub_6F5A+6CF↑j
                jg      short loc_763B
                cmp     word ptr es:[bx+0E4h], 0FFFFh
                ja      short loc_763B
                jmp     loc_774B
; ---------------------------------------------------------------------------

loc_763B:                               ; CODE XREF: sub_6F5A:loc_762E↑j
                                        ; sub_6F5A+6DC↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_29868
                push    es:word_29866
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    1
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                push    word ptr es:[bx+0E6h]
                push    word ptr es:[bx+0E4h]
                push    ss
                lea     ax, [bp+var_F0]
                push    ax
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                push    0
                push    0FFh
                push    ss
                lea     ax, [bp+var_42C]
                push    ax
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                push    [bp+var_BA]
                push    [bp+var_BC]
                push    [bp+var_BE]
                push    [bp+var_C0]
                push    [bp+var_C2]
                push    [bp+var_C4]
                push    [bp+var_C6]
                push    [bp+var_C8]
                push    ss
                lea     ax, [bp+var_F0]
                push    ax
                push    ds
                push    offset aGpSLdLdLdLd ; "GP%s~%ld~%ld~%ld~%ld"
                push    ss
                lea     ax, [bp+var_42C]
                push    ax
                call    SPRINTF         ; int sprintf(char *str, const char *format, ... );
                add     sp, 1Ch
                push    39h ; '9'
                call    QNPBTV          ; int qnpbtv (int getopt);
                pop     cx
                or      ax, ax
                jz      short loc_7705
                push    1
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    ss
                lea     ax, [bp+var_F0]
                push    ax
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                call    ABSBTV          ; long absbtv (void);
                push    ax
                push    dx
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                pop     ax
                mov     es:[bx+0E6h], ax
                pop     ax
                mov     es:[bx+0E4h], ax
                jmp     short loc_771E
; ---------------------------------------------------------------------------

loc_7705:                               ; CODE XREF: sub_6F5A+772↑j
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                mov     word ptr es:[bx+0E6h], 0FFFFh
                mov     word ptr es:[bx+0E4h], 0FFFFh

loc_771E:                               ; CODE XREF: sub_6F5A+7A9↑j
                inc     word_22D2D
                cmp     word_22D2D, 31h ; '1'
                jg      short loc_772C
                jmp     loc_7023
; ---------------------------------------------------------------------------

loc_772C:                               ; CODE XREF: sub_6F5A+36F↑j
                                        ; sub_6F5A+3A9↑j ...
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                mov     word ptr es:[bx+0E6h], 0FFFFh
                mov     word ptr es:[bx+0E4h], 0FFFFh
                jmp     loc_7023
; ---------------------------------------------------------------------------
                jmp     loc_7023
; ---------------------------------------------------------------------------

loc_774B:                               ; CODE XREF: sub_6F5A+6D1↑j
                                        ; sub_6F5A+6DE↑j
                push    1
                push    si
                push    ds
                push    offset aGp_0    ; "GP<>"
                jmp     loc_79C4
; ---------------------------------------------------------------------------

loc_7755:                               ; CODE XREF: sub_6F5A+6BB↑j
                push    ds
                push    offset aRp      ; "RP"
                push    ss
                lea     ax, [bp+var_22C]
                push    ax
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_776E
                jmp     loc_792C
; ---------------------------------------------------------------------------

loc_776E:                               ; CODE XREF: sub_6F5A+80F↑j
                push    ds
                push    (offset aMjwmutpl+6) ; "PL"
                push    ss
                lea     ax, [bp+var_22C]
                push    ax
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jnz     short loc_7787
                jmp     loc_7936
; ---------------------------------------------------------------------------

loc_7787:                               ; CODE XREF: sub_6F5A+828↑j
                push    ds
                push    offset asc_234C2 ; "<>"
                push    ss
                lea     ax, [bp+var_32C]
                push    ax
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_77A6
                mov     word_22C82, 4
                jmp     loc_7970
; ---------------------------------------------------------------------------

loc_77A6:                               ; CODE XREF: sub_6F5A+841↑j
                push    7Eh ; '~'
                push    ss
                lea     ax, [bp+var_32C]
                push    ax
                nop
                push    cs
                call    near ptr sub_7A2D
                add     sp, 6
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2986C
                push    es:word_2986A
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    37h ; '7'
                push    0
                push    1
                push    ds
                push    offset unk_2206F
                push    cs
                call    near ptr sub_4050
                add     sp, 6
                push    dx
                push    ax
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jnz     short loc_77EF
                jmp     loc_792C
; ---------------------------------------------------------------------------

loc_77EF:                               ; CODE XREF: sub_6F5A+890↑j
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    ss
                lea     ax, [bp+var_B4]
                push    ax
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                cmp     [bp+var_63], 0Fh
                jle     short loc_780F
                jmp     loc_792C
; ---------------------------------------------------------------------------

loc_780F:                               ; CODE XREF: sub_6F5A+8B0↑j
                jl      short loc_781B
                cmp     [bp+var_65], 423Fh
                jb      short loc_781B
                jmp     loc_792C
; ---------------------------------------------------------------------------

loc_781B:                               ; CODE XREF: sub_6F5A:loc_780F↑j
                                        ; sub_6F5A+8BC↑j
                push    28h ; '('
                push    ds
                push    offset unk_2206F
                push    ss
                lea     ax, [bp+var_F0]
                push    ax
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                push    ds
                push    offset unk_2216E
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                mov     [bp+var_C6], dx
                mov     [bp+var_C8], ax
                push    ds
                push    offset unk_2226D
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                mov     [bp+var_C2], dx
                mov     [bp+var_C4], ax
                push    ds
                push    offset unk_2236C
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                mov     [bp+var_BE], dx
                mov     [bp+var_C0], ax
                push    ds
                push    offset unk_2246B
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                mov     [bp+var_BA], dx
                mov     [bp+var_BC], ax
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29868
                push    es:word_29866
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    37h ; '7'
                push    0
                push    ss
                lea     ax, [bp+var_F0]
                push    ax
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jz      short loc_791E
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    ss
                lea     ax, [bp+var_12C]
                push    ax
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                push    ds
                push    offset unk_2236C
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                cmp     dx, [bp+var_FA]
                jnz     short loc_7902
                cmp     ax, [bp+var_FC]
                jnz     short loc_7902
                push    ds
                push    offset unk_2246B
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                cmp     dx, [bp+var_F6]
                jl      short loc_792C
                jnz     short loc_78F5
                cmp     ax, [bp+var_F8]
                jb      short loc_792C

loc_78F5:                               ; CODE XREF: sub_6F5A+993↑j
                                        ; sub_6F5A+9BA↓j ...
                push    ss
                lea     ax, [bp+var_F0]
                push    ax
                call    UPDBTV          ; void updbtv(char *recptr);
                jmp     short loc_7929
; ---------------------------------------------------------------------------

loc_7902:                               ; CODE XREF: sub_6F5A+979↑j
                                        ; sub_6F5A+97F↑j
                push    ds
                push    offset unk_2236C
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                cmp     dx, [bp+var_FA]
                jl      short loc_792C
                jg      short loc_78F5
                cmp     ax, [bp+var_FC]
                jbe     short loc_792C
                jmp     short loc_78F5
; ---------------------------------------------------------------------------

loc_791E:                               ; CODE XREF: sub_6F5A+950↑j
                push    ss
                lea     ax, [bp+var_F0]
                push    ax
                call    INSBTV          ; void insbtv(char *recptr);

loc_7929:                               ; CODE XREF: sub_6F5A+9A6↑j
                add     sp, 4

loc_792C:                               ; CODE XREF: sub_6F5A+811↑j
                                        ; sub_6F5A+892↑j ...
                push    1
                push    si
                push    ds
                push    (offset aMjwmutpl+6) ; "PL"
                jmp     loc_79C4
; ---------------------------------------------------------------------------

loc_7936:                               ; CODE XREF: sub_6F5A+82A↑j
                push    ds
                push    offset aHz      ; "HZ"
                push    ss
                lea     ax, [bp+var_22C]
                push    ax
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_7954
                mov     word_22C82, 10h
                jmp     short loc_7970
; ---------------------------------------------------------------------------

loc_7954:                               ; CODE XREF: sub_6F5A+9F0↑j
                push    ds
                push    (offset aAzz+1) ; "ZZ"
                push    ss
                lea     ax, [bp+var_22C]
                push    ax
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_7979
                mov     word_22C82, 11h

loc_7970:                               ; CODE XREF: sub_6F5A+F1↑j
                                        ; sub_6F5A+1A2↑j ...
                push    1
                push    si
                push    ds
                push    offset aDn      ; "DN"
                jmp     short loc_79C4
; ---------------------------------------------------------------------------

loc_7979:                               ; CODE XREF: sub_6F5A+A0E↑j
                push    ds
                push    offset aDn      ; "DN"
                push    ss
                lea     ax, [bp+var_22C]
                push    ax
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_79A7
                push    1
                push    si
                call    _BTUINJ         ; int btuinj(int chan,int status);
                add     sp, 4
                push    1
                push    si
                call    _BTUINJ         ; int btuinj(int chan,int status);
                add     sp, 4
                jmp     short loc_79CB
; ---------------------------------------------------------------------------

loc_79A7:                               ; CODE XREF: sub_6F5A+A33↑j
                push    ds
                push    offset asc_2335C ; "??"
                push    ss
                lea     ax, [bp+var_22C]
                push    ax
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_79CB
                push    1
                push    si
                push    ds
                push    offset unk_22B7D

loc_79C4:                               ; CODE XREF: sub_6F5A+D2↑j
                                        ; sub_6F5A+3B3↑j ...
                push    cs
                call    near ptr sub_538A
                add     sp, 8

loc_79CB:                               ; CODE XREF: sub_6F5A+A4B↑j
                                        ; sub_6F5A+A61↑j
                xor     ax, ax
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_6F5A        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_79D2        proc far                ; CODE XREF: sub_41CC+92↑p
                                        ; sub_4F1A+D↑p ...

var_5A          = byte ptr -5Ah
var_56          = word ptr -56h
var_54          = word ptr -54h

                enter   5Ah, 0
                push    ds
                mov     ax, seg dseg11
                mov     ds, ax
                assume ds:dseg11
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2986C
                push    es:word_2986A
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                mov     [bp+var_54], 0
                mov     [bp+var_56], 0
                push    37h ; '7'
                push    0
                push    ds
                push    offset unk_22A70
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jz      short loc_7A27
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    ss
                lea     ax, [bp+var_5A]
                push    ax
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah

loc_7A27:                               ; CODE XREF: sub_79D2+3D↑j
                mov     ax, [bp+var_56]
                pop     ds
                assume ds:dseg21
                leave
                retf
sub_79D2        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_7A2D        proc far                ; CODE XREF: sub_651D+8B↑p
                                        ; sub_651D+330↑p ...

var_3           = byte ptr -3
var_2           = word ptr -2
arg_0           = dword ptr  6
arg_4           = byte ptr  0Ah

                enter   4, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg11
                mov     ds, ax
                assume ds:dseg11
                mov     [bp+var_2], 0
                xor     di, di
                xor     si, si

loc_7A42:                               ; CODE XREF: sub_7A2D+31↓j
                push    0
                push    0FFh
                push    ds
                mov     ax, si
                imul    ax, 0FFh
                add     ax, 11Fh
                push    ax
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                inc     si
                cmp     si, 0Ah
                jl      short loc_7A42
                jmp     short loc_7A8B
; ---------------------------------------------------------------------------

loc_7A62:                               ; CODE XREF: sub_7A2D+65↓j
                les     bx, [bp+arg_0]
                assume es:nothing
                mov     al, es:[bx]
                mov     [bp+var_3], al
                cmp     al, [bp+arg_4]
                jnz     short loc_7A77
                inc     [bp+var_2]
                xor     di, di
                jmp     short loc_7A88
; ---------------------------------------------------------------------------

loc_7A77:                               ; CODE XREF: sub_7A2D+41↑j
                mov     bx, [bp+var_2]
                imul    bx, 0FFh
                add     bx, di
                mov     al, [bp+var_3]
                mov     [bx+11Fh], al
                inc     di

loc_7A88:                               ; CODE XREF: sub_7A2D+48↑j
                inc     word ptr [bp+arg_0]

loc_7A8B:                               ; CODE XREF: sub_7A2D+33↑j
                les     bx, [bp+arg_0]
                cmp     byte ptr es:[bx], 0
                jnz     short loc_7A62
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_7A2D        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_7A99        proc far                ; CODE XREF: sub_3B50+C1↑p
                                        ; sub_651D+C1↑p ...

arg_0           = dword ptr  6

                push    bp
                mov     bp, sp
                push    si
                push    ds
                mov     ax, seg dseg11
                mov     ds, ax
                assume ds:dseg11
                xor     cx, cx
                xor     si, si

loc_7AA7:                               ; CODE XREF: sub_7A99+24↓j
                les     bx, [bp+arg_0]
                mov     al, es:[bx]
                mov     ah, 0
                mov     dx, si
                inc     dx
                imul    dx
                add     cx, ax
                inc     word ptr [bp+arg_0]
                inc     si
                cmp     si, 3
                jl      short loc_7AA7
                imul    cx, 5
                mov     ax, cx
                pop     ds
                assume ds:dseg21
                pop     si
                pop     bp
                retf
sub_7A99        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_7AC8        proc far                ; CODE XREF: sub_4961+7F↑p
                                        ; sub_4F1A+26E↑p ...

var_2           = word ptr -2
arg_0           = word ptr  6
arg_2           = word ptr  8

                enter   2, 0
                push    ds
                mov     ax, seg dseg11
                mov     ds, ax
                assume ds:dseg11
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                mov     ax, word ptr es:USRNUM ; int usrnum;
                mov     [bp+var_2], ax
                mov     ax, seg USRNUM
                mov     dx, word_22A7A
                mov     es, ax
                mov     word ptr es:USRNUM, dx ; int usrnum;
                cmp     word_22A7A, 0FFFFh
                jle     short loc_7B1D
                push    0
                mov     ax, seg USRPTR
                mov     es, ax
                les     bx, dword ptr es:USRPTR ; struct user *usrptr;
                assume es:nothing
                push    word ptr es:[bx+18h]
                call    BAUDAT          ; int baudat(unsigned baud,int blink);
                add     sp, 4
                push    ax
                push    0EAh
                push    [bp+arg_2]
                push    [bp+arg_0]
                call    SHOCHL          ; void shochl(char *legend,char sing,int attr);
                add     sp, 8

loc_7B1D:                               ; CODE XREF: sub_7AC8+29↑j
                mov     ax, seg USRNUM
                mov     dx, [bp+var_2]
                mov     es, ax
                assume es:nothing
                mov     word ptr es:USRNUM, dx ; int usrnum;
                pop     ds
                assume ds:dseg21
                leave
                retf
sub_7AC8        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_7B2D        proc far                ; CODE XREF: stsrou+77↑p

var_100         = byte ptr -100h

                enter   100h, 0
                push    ds
                mov     ax, seg dseg11
                mov     ds, ax
                assume ds:dseg11
                cmp     word_22D15, 1
                jnz     short loc_7B4E
                push    word_22DC1
                push    word_22DBF
                call    FCLOSE          ; int fclose(FILE* stream );
                add     sp, 4

loc_7B4E:                               ; CODE XREF: sub_7B2D+F↑j
                cmp     word_22D40, 0FFFFh
                jle     short loc_7B81
                push    word_22D40
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                cmp     word ptr es:[bx+0D6h], 5
                jnz     short loc_7B81
                push    ds
                push    offset aLinkDisconnect ; "\r\r*** LINK DISCONNECTED\r"
                call    PRF             ; prf(string);
                add     sp, 4
                push    word_22D40
                call    OUTPRF          ; outprf (unum);
                pop     cx

loc_7B81:                               ; CODE XREF: sub_7B2D+26↑j
                                        ; sub_7B2D+3C↑j
                mov     word_22D40, 0FFFFh
                mov     word_22A7A, 0FFFFh
                mov     word_22D2B, 0
                mov     word_22A78, 0
                mov     ax, seg USRPTR
                mov     es, ax
                assume es:nothing
                les     bx, dword ptr es:USRPTR ; struct user *usrptr;
                assume es:nothing
                mov     word ptr es:[bx], 0
                mov     ax, seg USRPTR
                mov     es, ax
                assume es:nothing
                les     bx, dword ptr es:USRPTR ; struct user *usrptr;
                assume es:nothing
                mov     word ptr es:[bx+6], 0FFF9h
                mov     ax, seg USRPTR
                mov     es, ax
                assume es:nothing
                les     bx, dword ptr es:USRPTR ; struct user *usrptr;
                assume es:nothing
                or      word ptr es:[bx+14h], 8
                or      word ptr es:[bx+16h], 0
                mov     ax, seg USRPTR
                mov     es, ax
                assume es:nothing
                les     bx, dword ptr es:USRPTR ; struct user *usrptr;
                assume es:nothing
                mov     word ptr es:[bx+8], 0
                push    1
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    _BTULOK         ; int btulok(int chan,int onoff);
                add     sp, 4
                mov     ax, seg USRNUM
                mov     es, ax
                push    word ptr es:USRNUM ; int usrnum;
                call    _BTUCLI         ; int btucli(int chan);
                pop     cx
                mov     ax, seg USRNUM
                mov     es, ax
                push    word ptr es:USRNUM ; int usrnum;
                call    _BTUCLO         ; int btuclo(int chan);
                pop     cx
                push    0
                push    0
                mov     ax, seg USRNUM
                mov     es, ax
                push    word ptr es:USRNUM ; int usrnum;
                call    _BTUCHI         ; int err=btuchi(int chan, char (*rouadr)());
                add     sp, 6
                push    1
                mov     ax, seg USRNUM
                mov     es, ax
                push    word ptr es:USRNUM ; int usrnum;
                call    _BTUOES         ; int btuoes(int chan,int onoff);
                add     sp, 4
                mov     ax, seg USRNUM
                mov     es, ax
                mov     ax, word ptr es:USRNUM ; int usrnum;
                imul    ax, 29h ; ')'
                mov     dx, seg USER
                mov     es, dx
                les     bx, dword ptr es:USER ; struct user;
                assume es:nothing
                add     bx, ax
                or      word ptr es:[bx+14h], 4
                or      word ptr es:[bx+16h], 0
                mov     bx, word_22C82
                shl     bx, 2
                push    word ptr [bx+5Ch]
                push    word ptr [bx+5Ah]
                push    ds
                push    offset aMutantlinkS ; "MUTANTLINK: %s"
                push    ss
                lea     ax, [bp+var_100]
                push    ax
                call    SPRINTF         ; int sprintf(char *str, const char *format, ... );
                add     sp, 0Ch
                push    ss
                lea     ax, [bp+var_100]
                push    ax
                push    ss
                lea     ax, [bp+var_100]
                push    ax
                call    SHOCST          ; void shocst(char *summary, char *detail, p1, p1,...,pn);
                add     sp, 8
                cmp     word_22D07, 63h ; 'c'
                jz      short loc_7C9B
                jmp     loc_7D1D
; ---------------------------------------------------------------------------

loc_7C9B:                               ; CODE XREF: sub_7B2D+169↑j
                mov     bx, word_22C82
                cmp     bx, 3           ; switch 4 cases
                ja      short def_7CA6  ; jumptable 00007CA6 default case
                shl     bx, 1
                jmp     cs:jpt_7CA6[bx] ; switch jump
; ---------------------------------------------------------------------------

loc_7CAB:                               ; CODE XREF: sub_7B2D+179↑j
                                        ; DATA XREF: cseg03:jpt_7CA6↓o
                cmp     word_22D0B, 0   ; jumptable 00007CA6 case 0
                jle     short loc_7CBF
                inc     word_22D09
                mov     ax, word_22D09
                cmp     ax, word_22D0B
                jge     short loc_7CC7

loc_7CBF:                               ; CODE XREF: sub_7B2D+183↑j
                                        ; sub_7B2D+1CA↓j ...
                mov     word_22D07, 0
                jmp     short loc_7D1D
; ---------------------------------------------------------------------------

loc_7CC7:                               ; CODE XREF: sub_7B2D+190↑j
                                        ; sub_7B2D+1E2↓j ...
                push    word ptr off_21FBE+2
                push    word ptr off_21FBE
                push    ds
                push    offset aMutantlinkS ; "MUTANTLINK: %s"
                push    ss
                lea     ax, [bp+var_100]
                push    ax
                call    SPRINTF         ; int sprintf(char *str, const char *format, ... );
                add     sp, 0Ch
                push    ss
                lea     ax, [bp+var_100]
                push    ax
                push    ss
                lea     ax, [bp+var_100]
                push    ax
                call    SHOCST          ; void shocst(char *summary, char *detail, p1, p1,...,pn);
                add     sp, 8
                jmp     short def_7CA6  ; jumptable 00007CA6 default case
; ---------------------------------------------------------------------------
                jmp     short loc_7CBF
; ---------------------------------------------------------------------------

loc_7CF9:                               ; CODE XREF: sub_7B2D+179↑j
                                        ; DATA XREF: cseg03:jpt_7CA6↓o
                jmp     short def_7CA6  ; jumptable 00007CA6 case 1
; ---------------------------------------------------------------------------

loc_7CFB:                               ; CODE XREF: sub_7B2D+179↑j
                                        ; DATA XREF: cseg03:jpt_7CA6↓o
                jmp     short def_7CA6  ; jumptable 00007CA6 case 2
; ---------------------------------------------------------------------------

loc_7CFD:                               ; CODE XREF: sub_7B2D+179↑j
                                        ; DATA XREF: cseg03:jpt_7CA6↓o
                cmp     word_22D0D, 0   ; jumptable 00007CA6 case 3
                jle     short loc_7CBF
                inc     word_22D09
                mov     ax, word_22D09
                cmp     ax, word_22D0D
                jge     short loc_7CC7
                jmp     short loc_7CBF
; ---------------------------------------------------------------------------
                jmp     short loc_7CC7
; ---------------------------------------------------------------------------
                jmp     short loc_7CBF
; ---------------------------------------------------------------------------

def_7CA6:                               ; CODE XREF: sub_7B2D+175↑j
                                        ; sub_7B2D+1C8↑j ...
                mov     word_22D07, 1   ; jumptable 00007CA6 default case

loc_7D1D:                               ; CODE XREF: sub_7B2D+16B↑j
                                        ; sub_7B2D+198↑j
                mov     word_22C82, 0FFFFh
                call    RSTCHN          ; void rstchn();
                pop     ds
                assume ds:dseg21
                leave
                retf
sub_7B2D        endp

; ---------------------------------------------------------------------------
jpt_7CA6        dw offset loc_7CAB      ; DATA XREF: sub_7B2D+179↑r
                dw offset loc_7CF9      ; jump table for switch statement
                dw offset loc_7CFB
                dw offset loc_7CFD

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_7D33        proc far                ; CODE XREF: stsrou+7F↑p

var_100         = byte ptr -100h

                enter   100h, 0
                push    ds
                mov     ax, seg dseg11
                mov     ds, ax
                assume ds:dseg11
                mov     bx, word_22C82
                shl     bx, 2
                push    word ptr [bx+5Ch]
                push    word ptr [bx+5Ah]
                push    ds
                push    offset aMutantlinkS ; "MUTANTLINK: %s"
                push    ss
                lea     ax, [bp+var_100]
                push    ax
                call    SPRINTF         ; int sprintf(char *str, const char *format, ... );
                add     sp, 0Ch
                push    ss
                lea     ax, [bp+var_100]
                push    ax
                push    ss
                lea     ax, [bp+var_100]
                push    ax
                call    SHOCST          ; void shocst(char *summary, char *detail, p1, p1,...,pn);
                add     sp, 8
                mov     word_22A7A, 0FFFFh
                mov     word_22A78, 0
                mov     ax, seg USRPTR
                mov     es, ax
                assume es:nothing
                les     bx, dword ptr es:USRPTR ; struct user *usrptr;
                assume es:nothing
                mov     word ptr es:[bx], 0
                mov     ax, seg USRPTR
                mov     es, ax
                assume es:nothing
                les     bx, dword ptr es:USRPTR ; struct user *usrptr;
                assume es:nothing
                mov     word ptr es:[bx+6], 0FFF9h
                mov     ax, seg USRPTR
                mov     es, ax
                assume es:nothing
                les     bx, dword ptr es:USRPTR ; struct user *usrptr;
                assume es:nothing
                or      word ptr es:[bx+14h], 8
                or      word ptr es:[bx+16h], 0
                mov     ax, seg USRPTR
                mov     es, ax
                assume es:nothing
                les     bx, dword ptr es:USRPTR ; struct user *usrptr;
                assume es:nothing
                mov     word ptr es:[bx+8], 0
                push    1
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    _BTULOK         ; int btulok(int chan,int onoff);
                add     sp, 4
                mov     ax, seg USRNUM
                mov     es, ax
                push    word ptr es:USRNUM ; int usrnum;
                call    _BTUCLI         ; int btucli(int chan);
                pop     cx
                mov     ax, seg USRNUM
                mov     es, ax
                push    word ptr es:USRNUM ; int usrnum;
                call    _BTUCLO         ; int btuclo(int chan);
                pop     cx
                push    0
                push    0
                mov     ax, seg USRNUM
                mov     es, ax
                push    word ptr es:USRNUM ; int usrnum;
                call    _BTUCHI         ; int err=btuchi(int chan, char (*rouadr)());
                add     sp, 6
                push    1
                mov     ax, seg USRNUM
                mov     es, ax
                push    word ptr es:USRNUM ; int usrnum;
                call    _BTUOES         ; int btuoes(int chan,int onoff);
                add     sp, 4
                mov     ax, seg USRNUM
                mov     es, ax
                mov     ax, word ptr es:USRNUM ; int usrnum;
                imul    ax, 29h ; ')'
                mov     dx, seg USER
                mov     es, dx
                les     bx, dword ptr es:USER ; struct user;
                assume es:nothing
                add     bx, ax
                or      word ptr es:[bx+14h], 4
                or      word ptr es:[bx+16h], 0
                call    RSTCHN          ; void rstchn();
                pop     ds
                assume ds:dseg21
                leave
                retf
sub_7D33        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_7E49        proc far                ; CODE XREF: sub_54B6+21A↑p
                                        ; DATA XREF: sub_7F03+85↓o

var_16          = byte ptr -16h
var_A           = byte ptr -0Ah

                enter   16h, 0
                push    si
                push    ds
                mov     ax, seg dseg11
                mov     ds, ax
                assume ds:dseg11
                lea     ax, [bp+var_16]
                push    ss
                push    ax
                push    ds
                push    offset off_22063
                mov     cx, 0Ch
                call    F_SCOPY
                mov     word_22D76, 0
                push    0
                push    0Ah
                push    ss
                lea     ax, [bp+var_A]
                push    ax
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                push    ds
                push    offset aMl_0    ; "Ml"
                push    ds
                push    (offset aSS_1+2) ; "%s\r"
                push    ss
                lea     ax, [bp+var_A]
                push    ax
                call    SPRINTF         ; int sprintf(char *str, const char *format, ... );
                add     sp, 0Ch
                cmp     word_22A78, 1
                jnz     short loc_7EF3
                cmp     word_22D78, 2
                jle     short loc_7EAF
                push    1
                push    word_22A7A
                call    _BTUINJ         ; int btuinj(int chan,int status);
                add     sp, 4
                jmp     short loc_7EF3
; ---------------------------------------------------------------------------

loc_7EAF:                               ; CODE XREF: sub_7E49+54↑j
                mov     bx, word_22D78
                shl     bx, 2
                lea     ax, [bp+var_16]
                add     bx, ax
                push    word ptr ss:[bx+2]
                push    word ptr ss:[bx]
                push    cs
                call    near ptr sub_7AC8
                add     sp, 4
                inc     word_22D78
                xor     si, si
                jmp     short loc_7EE2
; ---------------------------------------------------------------------------

loc_7ED1:                               ; CODE XREF: sub_7E49+A8↓j
                mov     al, [bp+si+var_A]
                push    ax
                push    word_22A7A
                call    _CHIOUT         ; void chiout(int chan,char c);
                add     sp, 4
                inc     si

loc_7EE2:                               ; CODE XREF: sub_7E49+86↑j
                push    ss
                lea     ax, [bp+var_A]
                push    ax
                call    STRLEN          ; size_t strlen(const char* str);
                add     sp, 4
                cmp     ax, si
                ja      short loc_7ED1

loc_7EF3:                               ; CODE XREF: sub_7E49+4D↑j
                                        ; sub_7E49+64↑j
                mov     word_22D42, 0
                mov     word_22D11, 0
                pop     ds
                assume ds:dseg21
                pop     si
                leave
                retf
sub_7E49        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_7F03        proc far                ; CODE XREF: sub_52E5+8C↑p
                                        ; sub_63A1+12F↑p

var_A           = byte ptr -0Ah

                enter   0Ah, 0
                push    si
                push    ds
                mov     ax, seg dseg11
                mov     ds, ax
                assume ds:dseg11
                push    0
                push    0Ah
                push    ss
                lea     ax, [bp+var_A]
                push    ax
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                push    ds
                push    offset a1_0     ; "1\r"
                push    ss
                lea     ax, [bp+var_A]
                push    ax
                call    SPRINTF         ; int sprintf(char *str, const char *format, ... );
                add     sp, 8
                xor     si, si
                jmp     short loc_7F45
; ---------------------------------------------------------------------------

loc_7F34:                               ; CODE XREF: sub_7F03+51↓j
                mov     al, [bp+si+var_A]
                push    ax
                push    word_22A7A
                call    _CHIOUT         ; void chiout(int chan,char c);
                add     sp, 4
                inc     si

loc_7F45:                               ; CODE XREF: sub_7F03+2F↑j
                push    ss
                lea     ax, [bp+var_A]
                push    ax
                call    STRLEN          ; size_t strlen(const char* str);
                add     sp, 4
                cmp     ax, si
                ja      short loc_7F34
                mov     word_22D42, 1
                push    32h ; '2'
                push    ds
                push    offset aMutantlinkTerm ; "MUTANTLINK: TERMINAL TYPE"
                push    ds
                push    offset unk_22D44
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                push    ds
                push    offset unk_22D44
                push    cs
                call    near ptr sub_7AC8
                add     sp, 4
                mov     word_22D76, 4
                mov     word_22D11, 0
                push    seg cseg03
                push    offset sub_7E49
                push    4
                call    RTKICK          ; rtkick(int time, void *rouptr());
                add     sp, 6
                pop     ds
                assume ds:dseg21
                pop     si
                leave
                retf
sub_7F03        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_7F99        proc far                ; CODE XREF: stsrou+124↑p

var_5A          = byte ptr -5Ah
var_56          = word ptr -56h
var_54          = word ptr -54h
var_4C          = byte ptr -4Ch
var_B           = word ptr -0Bh
var_9           = word ptr -9

                enter   5Ah, 0
                push    di
                push    ds
                mov     ax, seg dseg11
                mov     ds, ax
                assume ds:dseg11
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    _BTUOBA         ; int btuoba(int chan);
                pop     cx
                mov     dx, seg OUTBSZ
                mov     es, dx
                mov     dx, word ptr es:OUTBSZ ; int outbsz;
                dec     dx
                cmp     ax, dx
                jz      short loc_7FC6
                jmp     loc_8186
; ---------------------------------------------------------------------------

loc_7FC6:                               ; CODE XREF: sub_7F99+28↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2986C
                push    es:word_2986A
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    1
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                push    word ptr es:[bx+0E6h]
                push    word ptr es:[bx+0E4h]
                push    ss
                lea     ax, [bp+var_5A]
                push    ax
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                cmp     word_22D82, 0
                jnz     short loc_8036
                push    ds
                push    offset unk_22A67
                push    ss
                lea     ax, [bp+var_5A]
                push    ax
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jnz     short loc_8036
                mov     cx, 7
                lea     di, [bp+var_4C]
                add     di, 2Dh ; '-'
                push    ss
                pop     es
                mov     ax, 2020h
                rep stosw

loc_8036:                               ; CODE XREF: sub_7F99+76↑j
                                        ; sub_7F99+8B↑j
                push    ds
                push    offset unk_22A70
                push    ss
                lea     ax, [bp+var_5A]
                push    ax
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_804E
                jmp     loc_80D3
; ---------------------------------------------------------------------------

loc_804E:                               ; CODE XREF: sub_7F99+B0↑j
                push    ds
                push    offset unk_22A74
                push    ss
                lea     ax, [bp+var_5A]
                push    ax
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jnz     short loc_80D3
                cmp     [bp+var_9], 0Fh
                jnz     short loc_8070
                cmp     [bp+var_B], 423Fh
                jz      short loc_809B

loc_8070:                               ; CODE XREF: sub_7F99+CE↑j
                push    0B3h
                push    ds
                push    offset a133m_1  ; "\x1B[1;33m"
                push    [bp+var_54]
                push    [bp+var_56]
                push    ds
                push    offset aLd_0    ; "%ld"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                push    ss
                lea     ax, [bp+var_5A]
                push    ax
                push    ss
                lea     ax, [bp+var_4C]
                push    ax
                push    ds
                push    offset a136m_0  ; "\x1B[1;36m"
                jmp     short loc_80B4
; ---------------------------------------------------------------------------

loc_809B:                               ; CODE XREF: sub_7F99+D5↑j
                push    0B3h
                push    ds
                push    offset a133m_1  ; "\x1B[1;33m"
                push    ds
                push    offset aDqualifd ; "DQUALIFD"
                push    ss
                lea     ax, [bp+var_5A]
                push    ax
                push    ss
                lea     ax, [bp+var_4C]
                push    ax
                push    ds
                push    offset a0m      ; "\x1B[0m"

loc_80B4:                               ; CODE XREF: sub_7F99+100↑j
                push    0B3h
                push    ds
                push    offset aCS60s3s9sSC ; "%c%s%-60s %-3s  %9s  %s%c\r"
                call    PRF             ; prf(string);
                add     sp, 1Ch
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    OUTPRF          ; outprf (unum);
                pop     cx

loc_80D3:                               ; CODE XREF: sub_7F99+B2↑j
                                        ; sub_7F99+C8↑j
                push    39h ; '9'
                call    QNPBTV          ; int qnpbtv (int getopt);
                pop     cx
                or      ax, ax
                jz      short loc_811E
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    ss
                lea     ax, [bp+var_5A]
                push    ax
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                call    ABSBTV          ; long absbtv (void);
                push    ax
                push    dx
                mov     ax, seg USRNUM
                mov     es, ax
                push    word ptr es:USRNUM ; int usrnum;
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                pop     ax
                mov     es:[bx+0E6h], ax
                pop     ax
                mov     es:[bx+0E4h], ax
                jmp     short loc_8186
; ---------------------------------------------------------------------------

loc_811E:                               ; CODE XREF: sub_7F99+144↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_29864
                push    es:word_29862
                call    SETMBK          ; FILE *setmbk(mbkptr);
                add     sp, 4
                push    4D3h
                call    PRFMSG          ; prfmsg(msgnum,p1,p2, ..• ,pn);
                pop     cx
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    OUTPRF          ; outprf (unum);
                pop     cx
                mov     ax, seg USRNUM
                mov     es, ax
                push    word ptr es:USRNUM ; int usrnum;
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                mov     word ptr es:[bx+0DAh], 0
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                mov     word ptr es:[bx+0DEh], 0
                jmp     short loc_819B
; ---------------------------------------------------------------------------

loc_8186:                               ; CODE XREF: sub_7F99+2A↑j
                                        ; sub_7F99+183↑j
                push    0F0h
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    _BTUINJ         ; int btuinj(int chan,int status);
                add     sp, 4

loc_819B:                               ; CODE XREF: sub_7F99+1EB↑j
                pop     ds
                assume ds:dseg21
                pop     di
                leave
                retf
sub_7F99        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_819F        proc far                ; CODE XREF: stsrou+12B↑p

var_3C          = byte ptr -3Ch
var_14          = word ptr -14h
var_12          = word ptr -12h
var_10          = word ptr -10h
var_E           = word ptr -0Eh

                enter   3Ch, 0
                push    ds
                mov     ax, seg dseg11
                mov     ds, ax
                assume ds:dseg11
                mov     ax, seg USRNUM
                mov     es, ax
                push    word ptr es:USRNUM ; int usrnum;
                call    _BTUOBA         ; int btuoba(int chan);
                pop     cx
                mov     dx, seg OUTBSZ
                mov     es, dx
                mov     dx, word ptr es:OUTBSZ ; int outbsz;
                dec     dx
                cmp     ax, dx
                jz      short loc_81CB
                jmp     loc_832C
; ---------------------------------------------------------------------------

loc_81CB:                               ; CODE XREF: sub_819F+27↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_29868
                push    es:word_29866
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    1
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                push    word ptr es:[bx+0E6h]
                push    word ptr es:[bx+0E4h]
                push    ss
                lea     ax, [bp+var_3C]
                push    ax
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                push    0B3h
                push    [bp+var_E]
                push    [bp+var_10]
                push    ds
                push    offset aLd_0    ; "%ld"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                push    [bp+var_12]
                push    [bp+var_14]
                push    ds
                push    offset aLd_0    ; "%ld"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                push    1
                push    ss
                lea     ax, [bp+var_3C]
                push    ax
                push    cs
                call    near ptr sub_4050
                add     sp, 6
                push    dx
                push    ax
                push    0
                push    ss
                lea     ax, [bp+var_3C]
                push    ax
                push    cs
                call    near ptr sub_4050
                add     sp, 6
                push    dx
                push    ax
                push    0B3h
                push    ds
                push    offset aC30s5s10s10sC ; "%c%-30s %-5s  %10s   $ %10s            "...
                call    PRF             ; prf(string);
                add     sp, 18h
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    OUTPRF          ; outprf (unum);
                pop     cx
                push    39h ; '9'
                call    QNPBTV          ; int qnpbtv (int getopt);
                pop     cx
                or      ax, ax
                jz      short loc_82C4
                push    1
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    ss
                lea     ax, [bp+var_3C]
                push    ax
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                call    ABSBTV          ; long absbtv (void);
                push    ax
                push    dx
                mov     ax, seg USRNUM
                mov     es, ax
                push    word ptr es:USRNUM ; int usrnum;
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                pop     ax
                mov     es:[bx+0E6h], ax
                pop     ax
                mov     es:[bx+0E4h], ax
                jmp     short loc_832C
; ---------------------------------------------------------------------------

loc_82C4:                               ; CODE XREF: sub_819F+E4↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_29864
                push    es:word_29862
                call    SETMBK          ; FILE *setmbk(mbkptr);
                add     sp, 4
                push    4D5h
                call    PRFMSG          ; prfmsg(msgnum,p1,p2, ..• ,pn);
                pop     cx
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    OUTPRF          ; outprf (unum);
                pop     cx
                mov     ax, seg USRNUM
                mov     es, ax
                push    word ptr es:USRNUM ; int usrnum;
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                mov     word ptr es:[bx+0DAh], 0
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                mov     word ptr es:[bx+0DEh], 0
                jmp     short loc_8341
; ---------------------------------------------------------------------------

loc_832C:                               ; CODE XREF: sub_819F+29↑j
                                        ; sub_819F+123↑j
                push    0F0h
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    _BTUINJ         ; int btuinj(int chan,int status);
                add     sp, 4

loc_8341:                               ; CODE XREF: sub_819F+18B↑j
                pop     ds
                assume ds:dseg21
                leave
                retf
sub_819F        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_8344        proc far                ; CODE XREF: stsrou+132↑p

var_5A          = byte ptr -5Ah
var_4C          = byte ptr -4Ch
var_B           = word ptr -0Bh
var_9           = word ptr -9

                enter   5Ah, 0
                push    di
                push    ds
                mov     ax, seg dseg11
                mov     ds, ax
                assume ds:dseg11
                mov     ax, seg USRNUM
                mov     es, ax
                push    word ptr es:USRNUM ; int usrnum;
                call    _BTUOBA         ; int btuoba(int chan);
                pop     cx
                mov     dx, seg OUTBSZ
                mov     es, dx
                mov     dx, word ptr es:OUTBSZ ; int outbsz;
                dec     dx
                cmp     ax, dx
                jz      short loc_8371
                jmp     loc_850E
; ---------------------------------------------------------------------------

loc_8371:                               ; CODE XREF: sub_8344+28↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2986C
                push    es:word_2986A
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    1
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                push    word ptr es:[bx+0E6h]
                push    word ptr es:[bx+0E4h]
                push    ss
                lea     ax, [bp+var_5A]
                push    ax
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                cmp     word_22D82, 0
                jnz     short loc_83E1
                push    ds
                push    offset unk_22A67
                push    ss
                lea     ax, [bp+var_5A]
                push    ax
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jnz     short loc_83E1
                mov     cx, 7
                lea     di, [bp+var_4C]
                add     di, 2Dh ; '-'
                push    ss
                pop     es
                mov     ax, 2020h
                rep stosw

loc_83E1:                               ; CODE XREF: sub_8344+76↑j
                                        ; sub_8344+8B↑j
                push    ds
                push    offset unk_22A70
                push    ss
                lea     ax, [bp+var_5A]
                push    ax
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jnz     short loc_845B
                push    ds
                push    offset unk_22A74
                push    ss
                lea     ax, [bp+var_5A]
                push    ax
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jnz     short loc_845B
                cmp     [bp+var_9], 0Fh
                jnz     short loc_8418
                cmp     [bp+var_B], 423Fh
                jz      short loc_845B

loc_8418:                               ; CODE XREF: sub_8344+CB↑j
                push    0B3h
                push    ds
                push    offset a133m_1  ; "\x1B[1;33m"
                push    [bp+var_9]
                push    [bp+var_B]
                push    cs
                call    near ptr sub_3F60
                add     sp, 4
                push    dx
                push    ax
                push    ss
                lea     ax, [bp+var_5A]
                push    ax
                push    ss
                lea     ax, [bp+var_4C]
                push    ax
                push    ds
                push    offset a136m_0  ; "\x1B[1;36m"
                push    0B3h
                push    ds
                push    offset aCS60s3s9sSC ; "%c%s%-60s %-3s  %9s  %s%c\r"
                call    PRF             ; prf(string);
                add     sp, 1Ch
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    OUTPRF          ; outprf (unum);
                pop     cx

loc_845B:                               ; CODE XREF: sub_8344+B0↑j
                                        ; sub_8344+C5↑j ...
                push    39h ; '9'
                call    QNPBTV          ; int qnpbtv (int getopt);
                pop     cx
                or      ax, ax
                jz      short loc_84A6
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    ss
                lea     ax, [bp+var_5A]
                push    ax
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                call    ABSBTV          ; long absbtv (void);
                push    ax
                push    dx
                mov     ax, seg USRNUM
                mov     es, ax
                push    word ptr es:USRNUM ; int usrnum;
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                pop     ax
                mov     es:[bx+0E6h], ax
                pop     ax
                mov     es:[bx+0E4h], ax
                jmp     short loc_850E
; ---------------------------------------------------------------------------

loc_84A6:                               ; CODE XREF: sub_8344+121↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_29864
                push    es:word_29862
                call    SETMBK          ; FILE *setmbk(mbkptr);
                add     sp, 4
                push    4D3h
                call    PRFMSG          ; prfmsg(msgnum,p1,p2, ..• ,pn);
                pop     cx
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    OUTPRF          ; outprf (unum);
                pop     cx
                mov     ax, seg USRNUM
                mov     es, ax
                push    word ptr es:USRNUM ; int usrnum;
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                mov     word ptr es:[bx+0DAh], 0
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                mov     word ptr es:[bx+0DEh], 0
                jmp     short loc_8523
; ---------------------------------------------------------------------------

loc_850E:                               ; CODE XREF: sub_8344+2A↑j
                                        ; sub_8344+160↑j
                push    0F0h
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    _BTUINJ         ; int btuinj(int chan,int status);
                add     sp, 4

loc_8523:                               ; CODE XREF: sub_8344+1C8↑j
                pop     ds
                assume ds:dseg21
                pop     di
                leave
                retf
sub_8344        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_8527        proc far                ; CODE XREF: sub_3B50+B3↑p
                                        ; DATA XREF: sub_8527+5B↓o

var_64          = byte ptr -64h

                enter   64h, 0
                push    ds
                mov     ax, seg dseg11
                mov     ds, ax
                assume ds:dseg11
                cmp     word_22A78, 1
                jnz     short loc_857F
                cmp     word_22D76, 0
                jle     short loc_857F
                dec     word_22D76
                push    0
                push    64h ; 'd'
                push    ss
                lea     ax, [bp+var_64]
                push    ax
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                push    word_22D76
                push    ds
                push    offset unk_22D44
                push    ds
                push    offset aSD      ; "%s %d"
                push    ss
                lea     ax, [bp+var_64]
                push    ax
                call    SPRINTF         ; int sprintf(char *str, const char *format, ... );
                add     sp, 0Eh
                push    ss
                lea     ax, [bp+var_64]
                push    ax
                push    cs
                call    near ptr sub_7AC8
                add     sp, 4
                mov     word_22D13, 0

loc_857F:                               ; CODE XREF: sub_8527+F↑j
                                        ; sub_8527+16↑j
                push    seg cseg03
                push    offset sub_8527
                push    1
                call    RTKICK          ; rtkick(int time, void *rouptr());
                add     sp, 6
                pop     ds
                assume ds:dseg21
                leave
                retf
sub_8527        endp


; =============== S U B R O U T I N E =======================================


sub_8592        proc far                ; CODE XREF: sub_8918+B↓p
                push    ds
                mov     ax, seg dseg11
                mov     ds, ax
                assume ds:dseg11
                xor     ax, ax
                pop     ds
                assume ds:dseg21
                retf
sub_8592        endp


; =============== S U B R O U T I N E =======================================


sub_859C        proc far                ; CODE XREF: sub_3B50+A4↑p
                push    si
                push    ds
                mov     ax, seg dseg11
                mov     ds, ax
                assume ds:dseg11
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_29864
                push    es:word_29862
                call    SETMBK          ; FILE *setmbk(mbkptr);
                add     sp, 4
                push    14h
                push    32h ; '2'
                call    STGOPT          ; char *string=stgopt(int msgnum);
                pop     cx
                push    dx
                push    ax
                push    ds
                push    offset unk_22DAA
                call    STZCPY          ; stzcpy(char *dest, char *source, int nbytes);
                add     sp, 0Ah
                push    11h
                push    35h ; '5'
                call    STGOPT          ; char *string=stgopt(int msgnum);
                pop     cx
                push    dx
                push    ax
                push    ds
                push    offset unk_22D8A
                call    STZCPY          ; stzcpy(char *dest, char *source, int nbytes);
                add     sp, 0Ah
                push    5
                push    36h ; '6'
                call    STGOPT          ; char *string=stgopt(int msgnum);
                pop     cx
                push    dx
                push    ax
                push    ds
                push    offset unk_22D84
                call    STZCPY          ; stzcpy(char *dest, char *source, int nbytes);
                add     sp, 0Ah
                push    4
                push    33h ; '3'
                call    STGOPT          ; char *string=stgopt(int msgnum);
                pop     cx
                push    dx
                push    ax
                push    ds
                push    offset unk_22DA6
                call    STZCPY          ; stzcpy(char *dest, char *source, int nbytes);
                add     sp, 0Ah
                push    0Ah
                push    34h ; '4'
                call    STGOPT          ; char *string=stgopt(int msgnum);
                pop     cx
                push    dx
                push    ax
                push    ds
                push    offset unk_22D9C
                call    STZCPY          ; stzcpy(char *dest, char *source, int nbytes);
                add     sp, 0Ah
                push    0
                push    41h ; 'A'
                push    ds
                push    offset unk_22C84
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                push    ds
                push    offset unk_22D9C
                push    ds
                push    offset unk_22DA6
                push    ds
                push    offset unk_22D84
                push    ds
                push    offset unk_22D8A
                push    ds
                push    offset unk_22DAA
                push    ds
                push    offset a20s17s5s3sS ; "%-20s %-17s %-5s (%-3s) %s"
                push    ds
                push    offset unk_22C84
                call    SPRINTF         ; int sprintf(char *str, const char *format, ... );
                add     sp, 1Ch
                mov     byte_22DEA, 0
                push    1Eh
                push    37h ; '7'
                call    STGOPT          ; char *string=stgopt(int msgnum);
                pop     cx
                push    dx
                push    ax
                push    ds
                push    offset unk_22CC5
                call    STZCPY          ; stzcpy(char *dest, char *source, int nbytes);
                add     sp, 0Ah
                push    0Fh
                push    31h ; '1'
                call    STGOPT          ; char *string=stgopt(int msgnum);
                pop     cx
                push    dx
                push    ax
                push    ds
                push    offset unk_22D2F
                call    STZCPY          ; stzcpy(char *dest, char *source, int nbytes);
                add     sp, 0Ah
                push    0FFh
                push    1
                push    3Ah ; ':'
                call    HEXOPT          ; unsigned hexopt(int msgnum,unsigned floor,unsigned ceiling);
                add     sp, 6
                mov     word_22D01, ax
                push    0FFh
                push    1
                push    3Bh ; ';'
                call    HEXOPT          ; unsigned hexopt(int msgnum,unsigned floor,unsigned ceiling);
                add     sp, 6
                mov     word_22D03, ax
                push    41h ; 'A'
                call    YNOPT           ; int ynopt(int msgnum);
                pop     cx
                mov     word_22D82, ax
                push    17h
                push    0FFFFh
                push    3Ch ; '<'
                call    NUMOPT          ; int numopt(int msgnum,int floor,int ceiling);
                add     sp, 6
                mov     word_22D05, ax
                push    63h ; 'c'
                push    0
                push    3Dh ; '='
                call    NUMOPT          ; int numopt(int msgnum,int floor,int ceiling);
                add     sp, 6
                mov     word_22D0B, ax
                push    63h ; 'c'
                push    0
                push    3Eh ; '>'
                call    NUMOPT          ; int numopt(int msgnum,int floor,int ceiling);
                add     sp, 6
                mov     word_22D0D, ax
                push    38h ; '8'
                call    STGOPT          ; char *string=stgopt(int msgnum);
                pop     cx
                mov     word_22D7C, dx
                mov     word_22D7A, ax
                push    39h ; '9'
                call    STGOPT          ; char *string=stgopt(int msgnum);
                pop     cx
                mov     word_22D80, dx
                mov     word_22D7E, ax
                push    4
                push    2Fh ; '/'
                call    STGOPT          ; char *string=stgopt(int msgnum);
                pop     cx
                push    dx
                push    ax
                push    ds
                push    offset unk_22A67
                call    STZCPY          ; stzcpy(char *dest, char *source, int nbytes);
                add     sp, 0Ah
                xor     si, si

loc_8735:                               ; CODE XREF: sub_859C+1AE↓j
                mov     al, [si+0B17h]
                mov     ah, 0
                push    ax
                call    TOUPPER         ; int toupper (int c);
                pop     cx
                mov     [si+0B17h], al
                inc     si
                cmp     si, 3
                jl      short loc_8735
                push    5
                push    30h ; '0'
                call    STGOPT          ; char *string=stgopt(int msgnum);
                pop     cx
                push    dx
                push    ax
                push    ds
                push    offset unk_22A6B
                call    STZCPY          ; stzcpy(char *dest, char *source, int nbytes);
                add     sp, 0Ah
                push    12Ch
                push    1Eh
                push    3Fh ; '?'
                call    NUMOPT          ; int numopt(int msgnum,int floor,int ceiling);
                add     sp, 6
                mov     word_22D0F, ax
                push    14h
                push    40h ; '@'
                call    STGOPT          ; char *string=stgopt(int msgnum);
                pop     cx
                push    dx
                push    ax
                push    ds
                push    offset unk_22D17
                call    STZCPY          ; stzcpy(char *dest, char *source, int nbytes);
                add     sp, 0Ah
                pop     ds
                assume ds:dseg21
                pop     si
                retf
sub_859C        endp


; =============== S U B R O U T I N E =======================================


sub_8791        proc far
                push    ds
                mov     ax, seg dseg11
                mov     ds, ax
                assume ds:dseg11
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29860, 1
                push    6
                push    cs
                call    near ptr sub_3FC7
                push    dx
                push    ax
                push    ds
                push    offset byte_2B2D4
                call    STZCPY          ; stzcpy(char *dest, char *source, int nbytes);
                add     sp, 0Ah
                cmp     byte_21F54, 0
                jnz     short loc_87C1
                jmp     loc_8916
; ---------------------------------------------------------------------------

loc_87C1:                               ; CODE XREF: sub_8791+2B↑j
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_29A20, 1388h
                jle     short loc_87DB
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29A20, 1388h

loc_87DB:                               ; CODE XREF: sub_8791+3C↑j
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29A26, 0
                mov     es:word_29A24, 61A8h
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29A2A, 0
                mov     es:word_29A28, 1F4h
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29A2C, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29A2E, 0FFD8h
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29A34, 1
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29A36, 0
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29A3A, 4
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29A3C, 0Fh
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29A40, 0
                mov     es:word_29A3E, 3A98h
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29A44, 0
                mov     es:word_29A42, 2710h
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29A48, 0
                mov     es:word_29A46, 2EE0h
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29A4C, 0
                mov     es:word_29A4A, 2710h
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29A50, 0
                mov     es:word_29A4E, 36B0h
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29A5E, 26ACh
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29A60, 0
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29A64, 0
                mov     es:word_29A62, 0
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29A6E, 4
                mov     es:word_29A6C, 93E0h
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29A70, 3
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29A72, 1F4h
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29A74, 1
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29A76, 14h

loc_8916:                               ; CODE XREF: sub_8791+2D↑j
                pop     ds
                assume ds:dseg21
                retf
sub_8791        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_8918        proc far                ; CODE XREF: sub_3B50+FB↑p

var_5A          = byte ptr -5Ah
var_52          = byte ptr -52h
var_B           = word ptr -0Bh
var_9           = word ptr -9

                enter   5Ah, 0
                push    ds
                mov     ax, seg dseg11
                mov     ds, ax
                assume ds:dseg11
                push    cs
                call    near ptr sub_8592
                or      ax, ax
                jz      short loc_892D
                jmp     loc_89B7
; ---------------------------------------------------------------------------

loc_892D:                               ; CODE XREF: sub_8918+10↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2986C
                push    es:word_2986A
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    37h ; '7'
                push    0
                push    ds
                push    offset unk_22A70
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jz      short loc_89B7
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    ss
                lea     ax, [bp+var_5A]
                push    ax
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                cmp     [bp+var_9], 0Fh
                jg      short loc_89B7
                jl      short loc_897D
                cmp     [bp+var_B], 423Fh
                jnb     short loc_89B7

loc_897D:                               ; CODE XREF: sub_8918+5C↑j
                mov     [bp+var_9], 0Fh
                mov     [bp+var_B], 423Fh
                push    6
                push    ds
                push    offset a9999    ; "9999"
                push    ss
                lea     ax, [bp+var_52]
                push    ax
                call    STZCPY          ; stzcpy(char *dest, char *source, int nbytes);
                add     sp, 0Ah
                push    ss
                lea     ax, [bp+var_5A]
                push    ax
                call    UPDBTV          ; void updbtv(char *recptr);
                add     sp, 4
                push    ds
                push    offset aMutantlinkLink ; "Mutantlink: Link Zapped!"
                push    ds
                push    offset aMutantlinkLink ; "Mutantlink: Link Zapped!"
                call    SHOCST          ; void shocst(char *summary, char *detail, p1, p1,...,pn);
                add     sp, 8

loc_89B7:                               ; CODE XREF: sub_8918+12↑j
                                        ; sub_8918+3E↑j ...
                pop     ds
                assume ds:dseg21
                leave
                retf
sub_8918        endp


; =============== S U B R O U T I N E =======================================


sub_89BA        proc far                ; CODE XREF: sub_3B50+3FE↑p
                                        ; sub_5B48+25↑p
                push    ds
                mov     ax, seg dseg11
                mov     ds, ax
                assume ds:dseg11
                mov     ax, seg GENBB
                mov     es, ax
                assume es:nothing
                push    word ptr es:GENBB+2 ; BTVFILE *genbb;
                push    word ptr es:GENBB ; BTVFILE *genbb;
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    19h
                push    ds
                push    offset a294hsuyd ; "294HSUYD"
                push    seg dseg19
                push    offset unk_2B215
                call    STZCPY          ; stzcpy(char *dest, char *source, int nbytes);
                add     sp, 0Ah
                push    37h ; '7'
                push    1
                push    seg dseg19
                push    offset unk_2B215
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jz      short loc_8A23
                push    1
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    seg dseg19
                push    offset unk_2B1F7
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_2B230
                jmp     short loc_8A25
; ---------------------------------------------------------------------------

loc_8A23:                               ; CODE XREF: sub_89BA+45↑j
                xor     ax, ax

loc_8A25:                               ; CODE XREF: sub_89BA+67↑j
                pop     ds
                assume ds:dseg21
                retf
sub_89BA        endp


; =============== S U B R O U T I N E =======================================


sub_8A27        proc far                ; CODE XREF: sub_4A44+1C1↑p
                push    ds
                mov     ax, seg dseg11
                mov     ds, ax
                assume ds:dseg11
                mov     ax, seg GENBB
                mov     es, ax
                assume es:nothing
                push    word ptr es:GENBB+2 ; BTVFILE *genbb;
                push    word ptr es:GENBB ; BTVFILE *genbb;
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    19h
                push    ds
                push    offset a294hsuyd ; "294HSUYD"
                push    seg dseg19
                push    offset unk_2B215
                call    STZCPY          ; stzcpy(char *dest, char *source, int nbytes);
                add     sp, 0Ah
                push    37h ; '7'
                push    1
                push    seg dseg19
                push    offset unk_2B215
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jz      short loc_8ABB
                push    1
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    seg dseg19
                push    offset unk_2B1F7
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     es:word_2B230, 0
                jz      short loc_8AA0
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_2B230, 0
                jmp     short loc_8AAC
; ---------------------------------------------------------------------------

loc_8AA0:                               ; CODE XREF: sub_8A27+69↑j
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_2B230, 1

loc_8AAC:                               ; CODE XREF: sub_8A27+77↑j
                push    3Bh ; ';'
                push    seg dseg19
                push    offset unk_2B1F7
                call    UPVBTV          ; void upvbtv(char *recptr, int length);
                jmp     short loc_8AF2
; ---------------------------------------------------------------------------

loc_8ABB:                               ; CODE XREF: sub_8A27+45↑j
                push    0
                push    1Eh
                push    seg dseg19
                push    offset unk_2B1F7
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_2B22E, 1
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_2B230, 1
                push    3Bh ; ';'
                push    seg dseg19
                push    offset unk_2B1F7
                call    INVBTV          ; void invbtv(char *recptr, int length);

loc_8AF2:                               ; CODE XREF: sub_8A27+92↑j
                add     sp, 6
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:word_2B230
                pop     ds
                assume ds:dseg21
                retf
sub_8A27        endp

cseg03          ends

; Segment Number    : 4
; Alloc Size        : B2D2h
; Offset in the file: DE00h  Length: B2D2h
; Attributes  (0D00): CODE Relocations DPL: 3
; ===========================================================================

; Segment type: Pure code
cseg04          segment para public 'CODE' use16
                assume cs:cseg04
                assume es:nothing, ss:nothing, ds:dseg21, fs:nothing, gs:nothing

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_8B00        proc far                ; CODE XREF: sub_1F07A+54↓P
                                        ; sub_1F2CD+25E↓P ...

var_2           = word ptr -2

                enter   2, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg12
                mov     ds, ax
                assume ds:dseg12
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+0E0h]
                and     ax, 40h
                or      ax, 0
                jz      short loc_8B29
                push    370h
                jmp     loc_930E
; ---------------------------------------------------------------------------

loc_8B29:                               ; CODE XREF: sub_8B00+21↑j
                push    seg dseg19
                push    offset byte_29F13
                call    sub_1872A
                add     sp, 4
                mov     di, ax
                mov     [bp+var_2], 1
                cmp     di, 1
                jz      short loc_8B48
                cmp     di, 3
                jnz     short loc_8B4D

loc_8B48:                               ; CODE XREF: sub_8B00+41↑j
                mov     [bp+var_2], 0FFFFh

loc_8B4D:                               ; CODE XREF: sub_8B00+46↑j
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     word ptr es:[bx+18FCh], 0
                jz      short loc_8B61
                jmp     loc_8CF7
; ---------------------------------------------------------------------------

loc_8B61:                               ; CODE XREF: sub_8B00+5C↑j
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+0E0h]
                and     ax, 1
                or      ax, 0
                jnz     short loc_8B7B
                jmp     loc_8CF1
; ---------------------------------------------------------------------------

loc_8B7B:                               ; CODE XREF: sub_8B00+76↑j
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+20h]
                mov     es, ax
                assume es:dseg19
                add     dx, es:[bx+8]
                cmp     dx, 62h ; 'b'
                jg      short loc_8BFF
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+20h]
                mov     es, ax
                assume es:dseg19
                add     dx, es:[bx+8]
                cmp     dx, 0FF9Eh
                jl      short loc_8BFF
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+22h]
                mov     es, ax
                assume es:dseg19
                add     dx, es:[bx+10h]
                cmp     dx, 62h ; 'b'
                jg      short loc_8BFF
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+22h]
                mov     es, ax
                assume es:dseg19
                add     dx, es:[bx+10h]
                cmp     dx, 0FF9Eh
                jge     short loc_8C1E

loc_8BFF:                               ; CODE XREF: sub_8B00+9A↑j
                                        ; sub_8B00+BB↑j ...
                push    ds
                push    offset aYouGetThrownBa ; "You get thrown back!\r"
                call    PRF             ; prf(string);
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_17567

loc_8C1A:                               ; CODE XREF: sub_8B00+52C↓j
                pop     cx
                jmp     loc_9320
; ---------------------------------------------------------------------------

loc_8C1E:                               ; CODE XREF: sub_8B00+FD↑j
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+24h]
                mov     es, ax
                assume es:dseg19
                add     dx, es:[bx+18h]
                push    dx
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+22h]
                mov     es, ax
                assume es:dseg19
                add     dx, es:[bx+10h]
                push    dx
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+20h]
                mov     es, ax
                assume es:dseg19
                add     dx, es:[bx+8]
                push    dx
                call    sub_18EDF
                add     sp, 6
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:[bx+8]
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     es:[bx+20h], ax
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:[bx+10h]
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     es:[bx+22h], ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_15D7B
                jmp     loc_931D
; ---------------------------------------------------------------------------

loc_8CF1:                               ; CODE XREF: sub_8B00+78↑j
                push    37Eh
                jmp     loc_930E
; ---------------------------------------------------------------------------

loc_8CF7:                               ; CODE XREF: sub_8B00+5E↑j
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     word ptr es:[bx+18FCh], 1
                jz      short loc_8D1C
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                cmp     word ptr es:[bx+18FCh], 0Ah
                jz      short loc_8D1C
                jmp     loc_92BD
; ---------------------------------------------------------------------------

loc_8D1C:                               ; CODE XREF: sub_8B00+206↑j
                                        ; sub_8B00+217↑j
                push    0
                call    sub_18EAF
                pop     cx
                or      ax, ax
                jz      short loc_8D2B
                jmp     loc_8DBA
; ---------------------------------------------------------------------------

loc_8D2B:                               ; CODE XREF: sub_8B00+226↑j
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+0E0h]
                and     ax, 4
                or      ax, 0
                jnz     short loc_8DBA
                mov     bx, di
                shl     bx, 2
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    word ptr es:[bx+28h]
                push    word ptr es:[bx+26h]
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    37Fh
                call    sub_15C18
                add     sp, 0Ah
                push    0
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah

loc_8DBA:                               ; CODE XREF: sub_8B00+228↑j
                                        ; sub_8B00+240↑j
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+20h]
                mov     es, ax
                assume es:dseg19
                add     dx, es:[bx+8]
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     es:[bx+20h], dx
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+22h]
                mov     es, ax
                assume es:dseg19
                add     dx, es:[bx+10h]
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     es:[bx+22h], dx
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+24h]
                mov     es, ax
                assume es:dseg19
                add     dx, es:[bx+18h]
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     es:[bx+24h], dx
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+20h], 0FF9Eh
                jl      short loc_8E7F
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+20h], 62h ; 'b'
                jg      short loc_8E7F
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+22h], 0FF9Eh
                jl      short loc_8E7F
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+22h], 62h ; 'b'
                jg      short loc_8E7F
                jmp     loc_8F1C
; ---------------------------------------------------------------------------

loc_8E7F:                               ; CODE XREF: sub_8B00+347↑j
                                        ; sub_8B00+358↑j ...
                push    ds
                push    offset aYouGetThrownBa ; "You get thrown back!\r"
                call    PRF             ; prf(string);
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_17567
                pop     cx
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+20h]
                mov     es, ax
                assume es:dseg19
                sub     dx, es:[bx+8]
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     es:[bx+20h], dx
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+22h]
                mov     es, ax
                assume es:dseg19
                sub     dx, es:[bx+10h]
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     es:[bx+22h], dx
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+24h]
                mov     es, ax
                assume es:dseg19
                sub     dx, es:[bx+18h]
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     es:[bx+24h], dx
                jmp     loc_9320
; ---------------------------------------------------------------------------

loc_8F1C:                               ; CODE XREF: sub_8B00+37C↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_15D7B
                add     sp, 4
                or      ax, ax
                jz      short loc_8F5F
                jmp     loc_902F
; ---------------------------------------------------------------------------

loc_8F5F:                               ; CODE XREF: sub_8B00+45A↑j
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+20h]
                mov     es, ax
                assume es:dseg19
                sub     dx, es:[bx+8]
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     es:[bx+20h], dx
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+22h]
                mov     es, ax
                assume es:dseg19
                sub     dx, es:[bx+10h]
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     es:[bx+22h], dx
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+24h]
                mov     es, ax
                assume es:dseg19
                sub     dx, es:[bx+18h]
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     es:[bx+24h], dx
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_2AED5
                mov     dx, seg NTERMS
                mov     es, dx
                assume es:nothing
                cmp     ax, word ptr es:NTERMS ; int nterms;
                jl      short loc_8FF5
                jmp     loc_9320
; ---------------------------------------------------------------------------

loc_8FF5:                               ; CODE XREF: sub_8B00+4F0↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     es:word_2AED5, 0FFFFh
                jg      short loc_9005
                jmp     loc_9320
; ---------------------------------------------------------------------------

loc_9005:                               ; CODE XREF: sub_8B00+500↑j
                push    ds
                push    offset aAMagicalForceS ; "***\rA magical force strikes you and th"...
                call    PRF             ; prf(string);
                add     sp, 4
                push    ds
                push    offset aYouGetTheFeeli ; "***\rYou get the feeling you should lea"...
                call    PRF             ; prf(string);
                add     sp, 4
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    OUTPRF          ; outprf (unum);
                jmp     loc_8C1A
; ---------------------------------------------------------------------------

loc_902F:                               ; CODE XREF: sub_8B00+45C↑j
                push    0
                call    sub_18EAF
                pop     cx
                or      ax, ax
                jnz     short loc_9040
                call    sub_18E2F

loc_9040:                               ; CODE XREF: sub_8B00+539↑j
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    word ptr es:[bx+10h]
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:[bx+8]
                call    sub_19D99
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+0E0h]
                and     ax, 1
                or      ax, 0
                jz      short loc_907E
                jmp     loc_91F6
; ---------------------------------------------------------------------------

loc_907E:                               ; CODE XREF: sub_8B00+579↑j
                push    ds
                push    (offset aYouGetThrownBa+15h) ; ""
                push    seg dseg19
                push    offset unk_29C1E
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_9097
                jmp     loc_91F6
; ---------------------------------------------------------------------------

loc_9097:                               ; CODE XREF: sub_8B00+592↑j
                push    seg dseg19
                push    offset unk_29C1E
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_90BB
                jmp     loc_91F6
; ---------------------------------------------------------------------------

loc_90BB:                               ; CODE XREF: sub_8B00+5B6↑j
                push    380h
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+20h]
                mov     es, ax
                assume es:dseg19
                sub     dx, es:[bx+8]
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     es:[bx+20h], dx
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+22h]
                mov     es, ax
                assume es:dseg19
                sub     dx, es:[bx+10h]
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     es:[bx+22h], dx
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+24h]
                mov     es, ax
                assume es:dseg19
                sub     dx, es:[bx+18h]
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     es:[bx+24h], dx
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:[bx+10h]
                neg     ax
                push    ax
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:[bx+8]
                neg     ax
                push    ax
                call    sub_19D99
                add     sp, 4
                mov     bx, di
                add     bx, [bp+var_2]
                shl     bx, 2
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:[bx+28h]
                push    word ptr es:[bx+26h]
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    381h
                call    sub_15C18
                add     sp, 0Ah
                push    0
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                jmp     loc_9320
; ---------------------------------------------------------------------------

loc_91F6:                               ; CODE XREF: sub_8B00+57B↑j
                                        ; sub_8B00+594↑j ...
                push    0
                call    sub_18EAF
                pop     cx
                or      ax, ax
                jnz     short loc_924E
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+0E0h]
                and     ax, 4
                or      ax, 0
                jnz     short loc_924E
                mov     bx, di
                add     bx, [bp+var_2]
                shl     bx, 2
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    word ptr es:[bx+28h]
                push    word ptr es:[bx+26h]
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    382h
                call    sub_15C18
                add     sp, 0Ah
                push    3
                jmp     short loc_9259
; ---------------------------------------------------------------------------

loc_924E:                               ; CODE XREF: sub_8B00+700↑j
                                        ; sub_8B00+717↑j
                push    383h
                call    sub_15C18
                pop     cx
                push    0

loc_9259:                               ; CODE XREF: sub_8B00+74C↑j
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_2AED5
                mov     dx, seg dseg19
                mov     es, dx
                cmp     ax, es:word_2AED1
                jge     short loc_9320
                nop
                push    cs
                call    near ptr sub_955B
                jmp     short loc_9320
; ---------------------------------------------------------------------------

loc_92BD:                               ; CODE XREF: sub_8B00+219↑j
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                cmp     word ptr es:[bx+18FCh], 2
                jnz     short loc_92D3
                push    387h
                jmp     short loc_930E
; ---------------------------------------------------------------------------

loc_92D3:                               ; CODE XREF: sub_8B00+7CC↑j
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                cmp     word ptr es:[bx+18FCh], 0Ah
                jle     short loc_92FA
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                cmp     word ptr es:[bx+18FCh], 14h
                jge     short loc_92FA
                push    388h
                jmp     short loc_930E
; ---------------------------------------------------------------------------

loc_92FA:                               ; CODE XREF: sub_8B00+7E2↑j
                                        ; sub_8B00+7F3↑j
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                cmp     word ptr es:[bx+18FCh], 13h
                jle     short loc_9320
                push    389h

loc_930E:                               ; CODE XREF: sub_8B00+26↑j
                                        ; sub_8B00+1F4↑j ...
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E

loc_931D:                               ; CODE XREF: sub_8B00+1EE↑j
                add     sp, 4

loc_9320:                               ; CODE XREF: sub_8B00+11B↑j
                                        ; sub_8B00+419↑j ...
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_8B00        endp


; =============== S U B R O U T I N E =======================================


sub_9325        proc far                ; DATA XREF: dseg19:0548↓o
                push    si
                push    di
                push    ds
                mov     ax, seg dseg12
                mov     ds, ax
                assume ds:dseg12
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:word_2AED5
                mov     dx, seg dseg19
                mov     es, dx
                cmp     ax, es:word_2AED1
                jl      short loc_9345
                jmp     loc_93D4
; ---------------------------------------------------------------------------

loc_9345:                               ; CODE XREF: sub_9325+1B↑j
                push    ds
                push    offset aNorth_4 ; "\r       NORTH\r"
                call    PRF             ; prf(string);
                add     sp, 4
                xor     di, di

loc_9353:                               ; CODE XREF: sub_9325+91↓j
                xor     si, si

loc_9355:                               ; CODE XREF: sub_9325+7F↓j
                cmp     di, 4
                jnz     short loc_936D
                cmp     si, 4
                jnz     short loc_936D
                push    ds
                push    offset aY       ; "Y "
                call    PRF             ; prf(string);
                add     sp, 4
                jmp     short loc_93A0
; ---------------------------------------------------------------------------

loc_936D:                               ; CODE XREF: sub_9325+33↑j
                                        ; sub_9325+38↑j
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:word_2AED5
                imul    ax, 64h ; 'd'
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29C74
                assume es:nothing
                add     bx, ax
                mov     ax, si
                imul    ax, 0Ah
                add     bx, ax
                add     bx, di
                mov     al, es:[bx]
                mov     ah, 0
                push    ax
                push    ds
                push    offset aC       ; "%c "
                call    PRF             ; prf(string);
                add     sp, 6

loc_93A0:                               ; CODE XREF: sub_9325+46↑j
                inc     si
                cmp     si, 9
                jl      short loc_9355
                push    ds
                push    (offset aYouGetThrownBa+14h) ; "\r"
                call    PRF             ; prf(string);
                add     sp, 4
                inc     di
                cmp     di, 9
                jl      short loc_9353
                push    ds
                push    offset aMMaintenanceSh ; "\rm-maintenance shop\rt-trading center"...
                call    PRF             ; prf(string);
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_17567
                pop     cx

loc_93D4:                               ; CODE XREF: sub_9325+1D↑j
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                retf
sub_9325        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_93D8        proc far                ; DATA XREF: dseg19:0386↓o
                                        ; dseg19:0656↓o ...

var_100         = byte ptr -100h

                enter   100h, 0
                push    si
                push    ds
                mov     ax, seg dseg12
                mov     ds, ax
                assume ds:dseg12
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                mov     ax, word ptr es:USRNUM ; int usrnum;
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     es:word_2AED5, ax
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29778, 27h ; '''
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_1A0E4
                pop     cx
                mov     bx, seg dseg19
                mov     es, bx
                mov     word ptr es:dword_29DD4+2, dx
                mov     word ptr es:dword_29DD4, ax
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+0D8h], 0
                jle     short loc_9446
                push    378h
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_15C7E
                jmp     loc_9554
; ---------------------------------------------------------------------------

loc_9446:                               ; CODE XREF: sub_93D8+57↑j
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                mov     ax, word ptr es:USRNUM ; int usrnum;
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                cmp     ax, es:word_2AEB9
                jnz     short loc_94D6
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    STOP_POLLING    ; void stop_polling(int unum);
                pop     cx
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:word_2AEB9, 0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29778, 28h ; '('
                xor     si, si
                jmp     short loc_94CA
; ---------------------------------------------------------------------------

loc_9487:                               ; CODE XREF: sub_93D8+FC↓j
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                cmp     word ptr es:[bx+0D6h], 2
                jnz     short loc_94C9
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                cmp     word ptr es:USRNUM, si ; int usrnum;
                jz      short loc_94C9
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:word_2AEB9, si
                push    seg cseg08
                push    offset sub_1EA0C
                push    si
                call    BEGIN_POLLING   ; void begin_polling(int unum,void (*rouptr)());
                add     sp, 6
                mov     ax, seg NTERMS
                mov     es, ax
                assume es:nothing
                mov     si, word ptr es:NTERMS ; int nterms;

loc_94C9:                               ; CODE XREF: sub_93D8+C0↑j
                                        ; sub_93D8+CC↑j
                inc     si

loc_94CA:                               ; CODE XREF: sub_93D8+AD↑j
                mov     ax, seg NTERMS
                mov     es, ax
                cmp     word ptr es:NTERMS, si ; int nterms;
                jg      short loc_9487

loc_94D6:                               ; CODE XREF: sub_93D8+81↑j
                push    0
                mov     ax, seg USRNUM
                mov     es, ax
                push    word ptr es:USRNUM ; int usrnum;
                call    _BTUPMT         ; int btupmt(int chan, char pmchar);
                add     sp, 4
                call    sub_1951C
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     word ptr es:[bx+0D6h], 3
                mov     ax, seg USRPTR
                mov     es, ax
                assume es:nothing
                les     bx, dword ptr es:USRPTR ; struct user *usrptr;
                assume es:nothing
                mov     word ptr es:[bx+8], 3
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+1Eh]
                imul    ax, 34h ; '4'
                add     ax, 0AF2h
                push    seg dseg19
                push    ax
                push    ds
                push    offset aSSHasJustDemat ; "%s %s has just dematerialized from this"...
                push    ss
                lea     ax, [bp+var_100]
                push    ax
                call    SPRINTF         ; int sprintf(char *str, const char *format, ... );
                add     sp, 10h
                push    ss
                lea     ax, [bp+var_100]
                push    ax
                call    sub_19D25

loc_9554:                               ; CODE XREF: sub_93D8+6B↑j
                add     sp, 4
                pop     ds
                assume ds:dseg21
                pop     si
                leave
                retf
sub_93D8        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_955B        proc far                ; CODE XREF: sttrou:loc_29BF↑P
                                        ; sub_8B00+7B8↑p ...

var_2           = word ptr -2

                enter   2, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg12
                mov     ds, ax
                assume ds:dseg12
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_15D7B
                add     sp, 4
                push    0
                call    sub_18EAF
                pop     cx
                cmp     ax, 1
                jnz     short loc_95C8
                push    373h

loc_95B3:                               ; CODE XREF: sub_955B+AF9↓j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4
                jmp     loc_A072
; ---------------------------------------------------------------------------

loc_95C8:                               ; CODE XREF: sub_955B+53↑j
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AED3, 1
                jnz     short loc_95DD
                nop
                push    cs
                call    near ptr sub_A077
                jmp     loc_A072
; ---------------------------------------------------------------------------

loc_95DD:                               ; CODE XREF: sub_955B+78↑j
                push    seg dseg19
                push    offset byte_29FDB
                call    sub_15FC6
                add     sp, 4
                mov     si, ax
                cmp     ax, 0FFFFh
                jg      short loc_95F5
                jmp     loc_9879
; ---------------------------------------------------------------------------

loc_95F5:                               ; CODE XREF: sub_955B+95↑j
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29778, 29h ; ')'
                push    si
                call    sub_1A0E4
                pop     cx
                push    dx
                push    ax
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    33Bh
                call    sub_15C18
                add     sp, 0Ah
                push    0
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                push    si
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    323h
                push    si
                call    sub_15C7E
                add     sp, 8
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AED1, si
                jle     short loc_96AF
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                mov     ax, es:[bx+1Eh]
                imul    ax, 34h ; '4'
                add     ax, 0AF2h
                push    seg dseg19
                push    ax
                jmp     short loc_96D7
; ---------------------------------------------------------------------------

loc_96AF:                               ; CODE XREF: sub_955B+137↑j
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                mov     ax, es:[bx+1Eh]
                imul    ax, 82h
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BD6
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BD6+2
                push    dx

loc_96D7:                               ; CODE XREF: sub_955B+152↑j
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                push    word ptr es:[bx+2Ah]
                push    ds
                push    offset aD_2     ; "%d"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 6
                push    dx
                push    ax
                push    33Ah
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 0Ch
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                mov     ax, es:[bx+26h]
                push    ax
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                pop     ax
                cmp     ax, es:[bx+28h]
                jnz     short loc_973A
                push    si
                call    sub_1A0E4
                pop     cx
                push    dx
                push    ax
                push    310h
                jmp     loc_981C
; ---------------------------------------------------------------------------

loc_973A:                               ; CODE XREF: sub_955B+1CE↑j
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                mov     ax, es:[bx+28h]
                push    ax
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                mov     ax, es:[bx+28h]
                shr     ax, 2
                pop     dx
                sub     dx, ax
                push    dx
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                pop     ax
                cmp     ax, es:[bx+26h]
                jnb     short loc_9781
                push    si
                call    sub_1A0E4
                pop     cx
                push    dx
                push    ax
                push    311h
                jmp     loc_981C
; ---------------------------------------------------------------------------

loc_9781:                               ; CODE XREF: sub_955B+215↑j
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                mov     ax, es:[bx+28h]
                push    ax
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                mov     ax, es:[bx+28h]
                mov     bx, 3
                xor     dx, dx
                div     bx
                pop     dx
                sub     dx, ax
                push    dx
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                pop     ax
                cmp     ax, es:[bx+26h]
                jnb     short loc_97CB
                push    si
                call    sub_1A0E4
                pop     cx
                push    dx
                push    ax
                push    312h
                jmp     short loc_981C
; ---------------------------------------------------------------------------

loc_97CB:                               ; CODE XREF: sub_955B+260↑j
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                mov     ax, es:[bx+28h]
                push    ax
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                mov     ax, es:[bx+28h]
                shr     ax, 1
                pop     dx
                sub     dx, ax
                push    dx
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                pop     ax
                cmp     ax, es:[bx+26h]
                jnb     short loc_9810
                push    si
                call    sub_1A0E4
                pop     cx
                push    dx
                push    ax
                push    313h
                jmp     short loc_981C
; ---------------------------------------------------------------------------

loc_9810:                               ; CODE XREF: sub_955B+2A5↑j
                push    si
                call    sub_1A0E4
                pop     cx
                push    dx
                push    ax
                push    314h

loc_981C:                               ; CODE XREF: sub_955B+1DC↑j
                                        ; sub_955B+223↑j ...
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                cmp     word ptr es:[bx+3Ch], 0FFFFh
                jg      short loc_9843
                jmp     loc_A072
; ---------------------------------------------------------------------------

loc_9843:                               ; CODE XREF: sub_955B+2E3↑j
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                push    si
                call    sub_1A0E4
                pop     cx
                push    dx
                push    ax
                push    329h
                jmp     loc_9D09
; ---------------------------------------------------------------------------

loc_9879:                               ; CODE XREF: sub_955B+97↑j
                push    2
                push    seg dseg19
                push    offset byte_29FDB
                call    sub_1609C
                add     sp, 6
                cmp     ax, 0FFFFh
                jg      short loc_9891
                jmp     loc_9D50
; ---------------------------------------------------------------------------

loc_9891:                               ; CODE XREF: sub_955B+331↑j
                push    2
                push    seg dseg19
                push    offset byte_29FDB
                call    sub_1609C
                add     sp, 6
                mov     si, ax
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29BDA
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+1Ch], 3
                jnz     short loc_9921
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                push    word ptr es:[bx+50h]
                push    ds
                push    offset aD_2     ; "%d"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 6
                push    dx
                push    ax
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                push    39Fh
                jmp     loc_9D09
; ---------------------------------------------------------------------------

loc_9921:                               ; CODE XREF: sub_955B+370↑j
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29BDA
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+1Ch], 0
                jz      short loc_994E
                jmp     loc_9A37
; ---------------------------------------------------------------------------

loc_994E:                               ; CODE XREF: sub_955B+3EE↑j
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+50h], 64h ; 'd'
                jle     short loc_9968
                jmp     loc_9A7E
; ---------------------------------------------------------------------------

loc_9968:                               ; CODE XREF: sub_955B+408↑j
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                push    ds
                push    offset aTheS    ; "The %s "
                call    PRF             ; prf(string);
                add     sp, 8
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+50h], 5Ah ; 'Z'
                jle     short loc_99BD
                push    3A0h
                jmp     loc_9BAC
; ---------------------------------------------------------------------------

loc_99BD:                               ; CODE XREF: sub_955B+45A↑j
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+50h], 46h ; 'F'
                jle     short loc_99DA
                push    3A1h
                jmp     loc_9BAC
; ---------------------------------------------------------------------------

loc_99DA:                               ; CODE XREF: sub_955B+477↑j
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+50h], 32h ; '2'
                jle     short loc_99F7
                push    3A2h
                jmp     loc_9BAC
; ---------------------------------------------------------------------------

loc_99F7:                               ; CODE XREF: sub_955B+494↑j
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+50h], 1Eh
                jle     short loc_9A14
                push    3A3h
                jmp     loc_9BAC
; ---------------------------------------------------------------------------

loc_9A14:                               ; CODE XREF: sub_955B+4B1↑j
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+50h], 0Ah
                jle     short loc_9A31
                push    3A4h
                jmp     loc_9BAC
; ---------------------------------------------------------------------------

loc_9A31:                               ; CODE XREF: sub_955B+4CE↑j
                push    3A5h
                jmp     loc_9BAC
; ---------------------------------------------------------------------------

loc_9A37:                               ; CODE XREF: sub_955B+3F0↑j
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29BDA
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+1Ch], 2
                jz      short loc_9A64
                jmp     loc_9BC5
; ---------------------------------------------------------------------------

loc_9A64:                               ; CODE XREF: sub_955B+504↑j
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+50h], 64h ; 'd'
                jg      short loc_9A7E
                jmp     loc_9B14
; ---------------------------------------------------------------------------

loc_9A7E:                               ; CODE XREF: sub_955B+40A↑j
                                        ; sub_955B+51E↑j
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+50h]
                add     ax, 0FF9Ch
                push    ax
                push    ds
                push    offset aD_2     ; "%d"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 6
                push    dx
                push    ax
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                push    35Dh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 10h
                jmp     loc_A072
; ---------------------------------------------------------------------------

loc_9B14:                               ; CODE XREF: sub_955B+520↑j
                push    3A6h
                call    sub_15C18
                pop     cx
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+50h], 5Ah ; 'Z'
                jle     short loc_9B39
                push    3A7h
                jmp     short loc_9BAC
; ---------------------------------------------------------------------------

loc_9B39:                               ; CODE XREF: sub_955B+5D7↑j
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+50h], 46h ; 'F'
                jle     short loc_9B55
                push    3A8h
                jmp     short loc_9BAC
; ---------------------------------------------------------------------------

loc_9B55:                               ; CODE XREF: sub_955B+5F3↑j
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+50h], 32h ; '2'
                jle     short loc_9B71
                push    3A9h
                jmp     short loc_9BAC
; ---------------------------------------------------------------------------

loc_9B71:                               ; CODE XREF: sub_955B+60F↑j
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+50h], 1Eh
                jle     short loc_9B8D
                push    3AAh
                jmp     short loc_9BAC
; ---------------------------------------------------------------------------

loc_9B8D:                               ; CODE XREF: sub_955B+62B↑j
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+50h], 0Ah
                jle     short loc_9BA9
                push    3ABh
                jmp     short loc_9BAC
; ---------------------------------------------------------------------------

loc_9BA9:                               ; CODE XREF: sub_955B+647↑j
                push    3ACh

loc_9BAC:                               ; CODE XREF: sub_955B+45F↑j
                                        ; sub_955B+47C↑j ...
                call    sub_15C18
                pop     cx
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_17567
                pop     cx
                jmp     loc_A072
; ---------------------------------------------------------------------------

loc_9BC5:                               ; CODE XREF: sub_955B+506↑j
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29BDA
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+1Ch], 1
                jz      short loc_9BF2
                jmp     loc_9C94
; ---------------------------------------------------------------------------

loc_9BF2:                               ; CODE XREF: sub_955B+692↑j
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+50h], 6Fh ; 'o'
                jnz     short loc_9C13
                push    ds
                push    offset aAHuman  ; "a human"

loc_9C0D:                               ; CODE XREF: sub_955B+736↓j
                push    33Dh
                jmp     loc_A060
; ---------------------------------------------------------------------------

loc_9C13:                               ; CODE XREF: sub_955B+6AC↑j
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+50h]
                imul    ax, 82h
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BD6
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BD6+2
                push    dx
                push    1
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+50h]
                imul    ax, 82h
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BD6
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BD6+2
                push    dx
                call    sub_15560
                add     sp, 6
                push    dx
                push    ax
                push    ds
                push    offset aSS_5    ; "%s%s"
                push    seg dseg19
                push    offset unk_29E14
                call    SPRINTF         ; int sprintf(char *str, const char *format, ... );
                add     sp, 10h
                push    seg dseg19
                push    offset unk_29E14
                jmp     loc_9C0D
; ---------------------------------------------------------------------------

loc_9C94:                               ; CODE XREF: sub_955B+694↑j
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29BDA
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+1Ch], 5
                jnz     short loc_9D1E
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+50h]
                imul    ax, 36h ; '6'
                add     ax, 0FDEh
                push    seg dseg19
                push    ax
                push    1
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+50h]
                imul    ax, 36h ; '6'
                add     ax, 0FDEh
                push    seg dseg19
                push    ax
                call    sub_15560
                add     sp, 6
                push    dx
                push    ax
                push    376h

loc_9D09:                               ; CODE XREF: sub_955B+31B↑j
                                        ; sub_955B+3C3↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 0Ch
                jmp     loc_A072
; ---------------------------------------------------------------------------

loc_9D1E:                               ; CODE XREF: sub_955B+761↑j
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                push    3ADh
                jmp     loc_A060
; ---------------------------------------------------------------------------

loc_9D50:                               ; CODE XREF: sub_955B+333↑j
                push    seg dseg19
                push    offset byte_29FDB
                call    sub_1872A
                add     sp, 4
                mov     di, ax
                cmp     di, 0FFFFh
                jg      short loc_9D68
                jmp     loc_A057
; ---------------------------------------------------------------------------

loc_9D68:                               ; CODE XREF: sub_955B+808↑j
                mov     [bp+var_2], 1
                cmp     di, 1
                jz      short loc_9D77
                cmp     di, 3
                jnz     short loc_9D7C

loc_9D77:                               ; CODE XREF: sub_955B+815↑j
                mov     [bp+var_2], 0FFFFh

loc_9D7C:                               ; CODE XREF: sub_955B+81A↑j
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+24h]
                mov     es, ax
                assume es:dseg19
                add     dx, es:[bx+18h]
                push    dx
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+22h]
                mov     es, ax
                assume es:dseg19
                add     dx, es:[bx+10h]
                push    dx
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+20h]
                mov     es, ax
                assume es:dseg19
                add     dx, es:[bx+8]
                push    dx
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_15D7B
                add     sp, 4
                cmp     ax, 1
                jz      short loc_9DED
                jmp     loc_A051
; ---------------------------------------------------------------------------

loc_9DED:                               ; CODE XREF: sub_955B+88D↑j
                mov     bx, di
                add     bx, [bp+var_2]
                shl     bx, 1
                mov     si, bx
                mov     ax, seg dseg19
                mov     es, ax
                cmp     word ptr es:[bx+18FCh], 1
                jz      short loc_9E13
                mov     ax, seg dseg19
                mov     es, ax
                cmp     word ptr es:[si+18FCh], 0Ah
                jz      short loc_9E13
                jmp     loc_A051
; ---------------------------------------------------------------------------

loc_9E13:                               ; CODE XREF: sub_955B+8A6↑j
                                        ; sub_955B+8B3↑j
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+20h]
                mov     es, ax
                assume es:dseg19
                add     dx, es:[bx+8]
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     es:[bx+20h], dx
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+22h]
                mov     es, ax
                assume es:dseg19
                add     dx, es:[bx+10h]
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     es:[bx+22h], dx
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+24h]
                mov     es, ax
                assume es:dseg19
                add     dx, es:[bx+18h]
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     es:[bx+24h], dx
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:word_2AEBF, 1
                mov     bx, di
                shl     bx, 2
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:[bx+28h]
                push    word ptr es:[bx+26h]
                push    ds
                push    offset aYouReLookingS ; "You're looking %s...\r"
                call    PRF             ; prf(string);
                add     sp, 8
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_17567
                pop     cx
                nop
                push    cs
                call    near ptr sub_A077
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_2AEBF, 0
                mov     bx, di
                add     bx, [bp+var_2]
                shl     bx, 2
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:[bx+28h]
                push    word ptr es:[bx+26h]
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    3AEh
                call    sub_15C18
                add     sp, 0Ah
                push    0
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+20h]
                mov     es, ax
                assume es:dseg19
                sub     dx, es:[bx+8]
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     es:[bx+20h], dx
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+22h]
                mov     es, ax
                assume es:dseg19
                sub     dx, es:[bx+10h]
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     es:[bx+22h], dx
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+24h]
                mov     es, ax
                assume es:dseg19
                sub     dx, es:[bx+18h]
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     es:[bx+24h], dx
                mov     bx, di
                shl     bx, 2
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    word ptr es:[bx+28h]
                push    word ptr es:[bx+26h]
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    3AFh
                call    sub_15C18
                add     sp, 0Ah
                push    0
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                jmp     short loc_A072
; ---------------------------------------------------------------------------

loc_A051:                               ; CODE XREF: sub_955B+88F↑j
                                        ; sub_955B+8B5↑j
                push    3B0h
                jmp     loc_95B3
; ---------------------------------------------------------------------------

loc_A057:                               ; CODE XREF: sub_955B+80A↑j
                push    seg dseg19
                push    offset byte_29FDB
                push    3B1h

loc_A060:                               ; CODE XREF: sub_955B+6B5↑j
                                        ; sub_955B+7F2↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8

loc_A072:                               ; CODE XREF: sub_955B+6A↑j
                                        ; sub_955B+7F↑j ...
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_955B        endp


; =============== S U B R O U T I N E =======================================


sub_A077        proc far                ; CODE XREF: sub_955B+7C↑p
                                        ; sub_955B+974↑p
                push    si
                push    ds
                mov     ax, seg dseg12
                mov     ds, ax
                assume ds:dseg12
                push    seg dseg19
                push    offset unk_29C3C
                push    ds
                push    offset a131m_0  ; "\x1B[1;31m"
                push    ds
                push    offset aSS_6    ; "%s%s\r"
                push    seg dseg19
                push    offset unk_29E14
                call    SPRINTF         ; int sprintf(char *str, const char *format, ... );
                add     sp, 10h
                push    seg dseg19
                push    offset unk_29E14
                push    ds
                push    (offset aSS_5+2) ; "%s"
                call    PRF             ; prf(string);
                add     sp, 8
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                push    ds
                push    offset a132m    ; "\x1B[1;32m"
                push    ds
                push    offset aScompassDeDn ; "%sCompass: (%dE : %dN)\r"
                push    seg dseg19
                push    offset unk_29E14
                call    SPRINTF         ; int sprintf(char *str, const char *format, ... );
                add     sp, 10h
                push    seg dseg19
                push    offset unk_29E14
                push    ds
                push    (offset aSS_5+2) ; "%s"
                call    PRF             ; prf(string);
                add     sp, 8
                xor     si, si

loc_A0F2:                               ; CODE XREF: sub_A077+1C2↓j
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     word ptr es:[bx+18FCh], 0Ah
                jnz     short loc_A126
                push    ds
                push    offset a136m    ; "\x1B[1;36m"
                mov     bx, si
                shl     bx, 2
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:[bx+28h]
                push    word ptr es:[bx+26h]
                push    ds
                push    offset a133m_0  ; "\x1B[1;33m"
                push    ds
                push    offset aS6sSopenGate ; "%s%-6s- %sopen gate.\r"
                jmp     loc_A202
; ---------------------------------------------------------------------------

loc_A126:                               ; CODE XREF: sub_A077+8A↑j
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                cmp     word ptr es:[bx+18FCh], 2
                jnz     short loc_A15A
                push    ds
                push    offset a136m    ; "\x1B[1;36m"
                mov     bx, si
                shl     bx, 2
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:[bx+28h]
                push    word ptr es:[bx+26h]
                push    ds
                push    offset a133m_0  ; "\x1B[1;33m"
                push    ds
                push    offset aS6sSwallOfIce ; "%s%-6s- %swall of ice.\r"
                jmp     loc_A202
; ---------------------------------------------------------------------------

loc_A15A:                               ; CODE XREF: sub_A077+BE↑j
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                cmp     word ptr es:[bx+18FCh], 0Ah
                jle     short loc_A19E
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                cmp     word ptr es:[bx+18FCh], 14h
                jge     short loc_A19E
                push    ds
                push    offset a136m    ; "\x1B[1;36m"
                mov     bx, si
                shl     bx, 2
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:[bx+28h]
                push    word ptr es:[bx+26h]
                push    ds
                push    offset a133m_0  ; "\x1B[1;33m"
                push    ds
                push    offset aS6sSclosedGate ; "%s%-6s- %sclosed gate.\r"
                jmp     short loc_A202
; ---------------------------------------------------------------------------

loc_A19E:                               ; CODE XREF: sub_A077+F2↑j
                                        ; sub_A077+103↑j
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                cmp     word ptr es:[bx+18FCh], 13h
                jle     short loc_A1D1
                push    ds
                push    offset a136m    ; "\x1B[1;36m"
                mov     bx, si
                shl     bx, 2
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:[bx+28h]
                push    word ptr es:[bx+26h]
                push    ds
                push    offset a133m_0  ; "\x1B[1;33m"
                push    ds
                push    offset aS6sSionForceFi ; "%s%-6s- %sion force field.\r"
                jmp     short loc_A202
; ---------------------------------------------------------------------------

loc_A1D1:                               ; CODE XREF: sub_A077+136↑j
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                cmp     word ptr es:[bx+18FCh], 1
                jnz     short loc_A210
                push    ds
                push    offset a136m    ; "\x1B[1;36m"
                mov     bx, si
                shl     bx, 2
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:[bx+28h]
                push    word ptr es:[bx+26h]
                push    ds
                push    offset a133m_0  ; "\x1B[1;33m"
                push    ds
                push    offset aS6sSareaContin ; "%s%-6s- %sarea continues.\r"

loc_A202:                               ; CODE XREF: sub_A077+AC↑j
                                        ; sub_A077+E0↑j ...
                push    seg dseg19
                push    offset unk_29E14
                call    SPRINTF         ; int sprintf(char *str, const char *format, ... );
                add     sp, 14h

loc_A210:                               ; CODE XREF: sub_A077+169↑j
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                cmp     word ptr es:[bx+18FCh], 0
                jle     short loc_A233
                push    seg dseg19
                push    offset unk_29E14
                push    ds
                push    (offset aSS_5+2) ; "%s"
                call    PRF             ; prf(string);
                add     sp, 8

loc_A233:                               ; CODE XREF: sub_A077+1A8↑j
                inc     si
                cmp     si, 4
                jge     short loc_A23C
                jmp     loc_A0F2
; ---------------------------------------------------------------------------

loc_A23C:                               ; CODE XREF: sub_A077+1C0↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_17567
                pop     cx
                nop
                push    cs
                call    near ptr sub_B091
                nop
                push    cs
                call    near ptr sub_A259
                pop     ds
                assume ds:dseg21
                pop     si
                retf
sub_A077        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_A259        proc far                ; CODE XREF: sub_A077+1DC↑p
                                        ; DATA XREF: dseg19:0A70↓o

var_152         = byte ptr -152h
var_EE          = byte ptr -0EEh
var_E3          = byte ptr -0E3h
var_DE          = byte ptr -0DEh
var_16          = dword ptr -16h
var_12          = word ptr -12h
var_10          = byte ptr -10h
var_8           = word ptr -8
var_6           = word ptr -6
var_4           = word ptr -4
var_2           = word ptr -2

                enter   152h, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg12
                mov     ds, ax
                assume ds:dseg12
                mov     [bp+var_6], 0
                mov     [bp+var_2], 0
                mov     [bp+var_4], 0
                push    0
                push    64h ; 'd'
                push    ss
                lea     ax, [bp+var_152]
                push    ax
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                mov     cx, 4
                lea     di, [bp+var_10]
                push    ss
                pop     es
                assume es:nothing
                xor     ax, ax
                rep stosw
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                call    sub_1A075
                pop     cx
                mov     bx, ax
                mov     es, dx
                mov     ax, es:[bx+4B0h]
                mov     [bp+var_12], ax
                xor     di, di
                jmp     loc_A4F1
; ---------------------------------------------------------------------------

loc_A2B7:                               ; CODE XREF: sub_A259+29D↓j
                cmp     [bp+var_6], 62h ; 'b'
                jle     short loc_A2C0
                jmp     loc_A4F9
; ---------------------------------------------------------------------------

loc_A2C0:                               ; CODE XREF: sub_A259+62↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:word_29778, 2Ah ; '*'
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                call    sub_1A075
                pop     cx
                mov     bx, di
                shl     bx, 1
                add     ax, bx
                mov     bx, ax
                mov     es, dx
                push    word ptr es:[bx+320h]
                call    sub_1A0E4
                pop     cx
                mov     word ptr [bp+var_16+2], dx
                mov     word ptr [bp+var_16], ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                call    sub_1A075
                pop     cx
                mov     bx, di
                shl     bx, 1
                add     ax, bx
                mov     bx, ax
                mov     es, dx
                mov     ax, es:[bx+320h]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                cmp     ax, es:word_2AED5
                jnz     short loc_A32D
                jmp     loc_A4F0
; ---------------------------------------------------------------------------

loc_A32D:                               ; CODE XREF: sub_A259+CF↑j
                les     bx, [bp+var_16]
                assume es:nothing
                cmp     word ptr es:[bx+0D6h], 2
                jz      short loc_A351
                les     bx, [bp+var_16]
                cmp     word ptr es:[bx+0D6h], 0FFFBh
                jz      short loc_A351
                les     bx, [bp+var_16]
                cmp     word ptr es:[bx+0D6h], 0FFFCh
                jz      short loc_A351
                jmp     loc_A4F0
; ---------------------------------------------------------------------------

loc_A351:                               ; CODE XREF: sub_A259+DD↑j
                                        ; sub_A259+E8↑j ...
                les     bx, [bp+var_16]
                mov     ax, es:[bx+0E0h]
                and     ax, 4
                or      ax, 0
                jz      short loc_A364
                jmp     loc_A4F0
; ---------------------------------------------------------------------------

loc_A364:                               ; CODE XREF: sub_A259+106↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+20h]
                les     bx, [bp+var_16]
                cmp     ax, es:[bx+20h]
                jz      short loc_A37E
                jmp     loc_A407
; ---------------------------------------------------------------------------

loc_A37E:                               ; CODE XREF: sub_A259+120↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+22h]
                les     bx, [bp+var_16]
                cmp     ax, es:[bx+22h]
                jnz     short loc_A407
                les     bx, [bp+var_16]
                cmp     word ptr es:[bx+0D6h], 2
                jnz     short loc_A3D7
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                call    sub_1A075
                pop     cx
                mov     bx, di
                shl     bx, 1
                add     ax, bx
                mov     bx, ax
                mov     es, dx
                mov     ax, es:[bx+320h]
                mov     bx, [bp+var_6]
                shl     bx, 1
                lea     dx, [bp+var_DE]
                add     bx, dx
                mov     ss:[bx], ax
                inc     [bp+var_6]
                jmp     loc_A4F0
; ---------------------------------------------------------------------------

loc_A3D7:                               ; CODE XREF: sub_A259+145↑j
                les     bx, [bp+var_16]
                cmp     word ptr es:[bx+0D6h], 0FFFBh
                jz      short loc_A3F0
                les     bx, [bp+var_16]
                cmp     word ptr es:[bx+0D6h], 0FFFCh
                jz      short loc_A3F0
                jmp     loc_A4F0
; ---------------------------------------------------------------------------

loc_A3F0:                               ; CODE XREF: sub_A259+187↑j
                                        ; sub_A259+192↑j
                inc     [bp+var_2]
                les     bx, [bp+var_16]
                cmp     word ptr es:[bx+0D6h], 0FFFCh
                jz      short loc_A401
                jmp     loc_A4F0
; ---------------------------------------------------------------------------

loc_A401:                               ; CODE XREF: sub_A259+1A3↑j
                inc     [bp+var_4]
                jmp     loc_A4F0
; ---------------------------------------------------------------------------

loc_A407:                               ; CODE XREF: sub_A259+122↑j
                                        ; sub_A259+13A↑j
                mov     [bp+var_8], 0

loc_A40C:                               ; CODE XREF: sub_A259+294↓j
                mov     bx, [bp+var_8]
                shl     bx, 1
                lea     ax, [bp+var_10]
                add     bx, ax
                cmp     word ptr ss:[bx], 0
                jz      short loc_A41F
                jmp     loc_A4E4
; ---------------------------------------------------------------------------

loc_A41F:                               ; CODE XREF: sub_A259+1C1↑j
                mov     bx, [bp+var_8]
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     word ptr es:[bx+18FCh], 0
                jg      short loc_A434
                jmp     loc_A4E4
; ---------------------------------------------------------------------------

loc_A434:                               ; CODE XREF: sub_A259+1D6↑j
                mov     bx, [bp+var_8]
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                cmp     word ptr es:[bx+18FCh], 0Bh
                jl      short loc_A449
                jmp     loc_A4E4
; ---------------------------------------------------------------------------

loc_A449:                               ; CODE XREF: sub_A259+1EB↑j
                mov     bx, [bp+var_8]
                shl     bx, 1
                mov     ax, seg dseg19
                les     si, [bp+var_16]
                assume es:nothing
                mov     dx, es:[si+20h]
                mov     es, ax
                assume es:dseg19
                sub     dx, es:[bx+8]
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     dx, es:[bx+20h]
                jnz     short loc_A4E4
                mov     bx, [bp+var_8]
                shl     bx, 1
                mov     ax, seg dseg19
                les     si, [bp+var_16]
                mov     dx, es:[si+22h]
                mov     es, ax
                assume es:dseg19
                sub     dx, es:[bx+10h]
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     dx, es:[bx+22h]
                jnz     short loc_A4E4
                les     bx, [bp+var_16]
                cmp     word ptr es:[bx+0D6h], 2
                jnz     short loc_A4E4
                mov     bx, [bp+var_8]
                shl     bx, 2
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    word ptr es:[bx+28h]
                push    word ptr es:[bx+26h]
                push    ss
                lea     ax, [bp+var_152]
                push    ax
                call    STRCAT          ; char *strcat(char *destination, const char *source );
                add     sp, 8
                push    ds
                push    offset asc_24A23 ; ", "
                push    ss
                lea     ax, [bp+var_152]
                push    ax
                call    STRCAT          ; char *strcat(char *destination, const char *source );
                add     sp, 8
                mov     bx, [bp+var_8]
                shl     bx, 1
                lea     ax, [bp+var_10]
                add     bx, ax
                mov     word ptr ss:[bx], 1

loc_A4E4:                               ; CODE XREF: sub_A259+1C3↑j
                                        ; sub_A259+1D8↑j ...
                inc     [bp+var_8]
                cmp     [bp+var_8], 4
                jge     short loc_A4F0
                jmp     loc_A40C
; ---------------------------------------------------------------------------

loc_A4F0:                               ; CODE XREF: sub_A259+D1↑j
                                        ; sub_A259+F5↑j ...
                inc     di

loc_A4F1:                               ; CODE XREF: sub_A259+5B↑j
                cmp     di, [bp+var_12]
                jge     short loc_A4F9
                jmp     loc_A2B7
; ---------------------------------------------------------------------------

loc_A4F9:                               ; CODE XREF: sub_A259+64↑j
                                        ; sub_A259+29B↑j
                cmp     [bp+var_6], 0
                jg      short loc_A502
                jmp     loc_A645
; ---------------------------------------------------------------------------

loc_A502:                               ; CODE XREF: sub_A259+2A4↑j
                push    ds
                push    offset aWho     ; "who"
                push    seg dseg19
                push    offset byte_29F13
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_A532
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:word_2AED5
                mov     dx, seg dseg19
                mov     es, dx
                cmp     ax, es:word_2AED1
                jge     short loc_A532
                call    sub_21712

loc_A532:                               ; CODE XREF: sub_A259+2BD↑j
                                        ; sub_A259+2D2↑j
                xor     di, di
                cmp     di, [bp+var_6]
                jl      short loc_A53C
                jmp     loc_A61D
; ---------------------------------------------------------------------------

loc_A53C:                               ; CODE XREF: sub_A259+2DE↑j
                                        ; sub_A259+3C1↓j
                cmp     [bp+var_6], 0Ah
                jge     short loc_A5B1
                push    ds
                push    offset aWho     ; "who"
                push    seg dseg19
                push    offset byte_29F13
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_A5B1
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:word_2AED5
                mov     dx, seg dseg19
                mov     es, dx
                cmp     ax, es:word_2AED1
                jge     short loc_A5B1
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29778, 2Bh ; '+'
                push    0Ch
                mov     bx, di
                shl     bx, 1
                lea     ax, [bp+var_DE]
                add     bx, ax
                push    word ptr ss:[bx]
                call    sub_1A0E4
                pop     cx
                push    dx
                push    ax
                push    ss
                lea     ax, [bp+var_EE]
                push    ax
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                mov     [bp+var_E3], 0
                push    ss
                lea     ax, [bp+var_EE]
                push    ax
                call    sub_216A2
                add     sp, 4

loc_A5B1:                               ; CODE XREF: sub_A259+2E7↑j
                                        ; sub_A259+2FD↑j ...
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29778, 2Ch ; ','
                mov     bx, di
                shl     bx, 1
                lea     ax, [bp+var_DE]
                add     bx, ax
                push    word ptr ss:[bx]
                call    sub_1A0E4
                pop     cx
                push    dx
                push    ax
                push    ds
                push    (offset aSS_5+2) ; "%s"
                call    PRF             ; prf(string);
                add     sp, 8
                mov     ax, [bp+var_6]
                dec     ax
                cmp     ax, di
                jle     short loc_A5EC
                push    ds
                push    offset asc_24A23 ; ", "
                jmp     short loc_A5F0
; ---------------------------------------------------------------------------

loc_A5EC:                               ; CODE XREF: sub_A259+38B↑j
                push    ds
                push    (offset aY+1)   ; " "

loc_A5F0:                               ; CODE XREF: sub_A259+391↑j
                call    PRF             ; prf(string);
                add     sp, 4
                mov     ax, [bp+var_6]
                add     ax, 0FFFEh
                cmp     ax, di
                jnz     short loc_A614
                cmp     [bp+var_6], 1
                jle     short loc_A614
                push    ds
                push    offset aAnd     ; "and "
                call    PRF             ; prf(string);
                add     sp, 4

loc_A614:                               ; CODE XREF: sub_A259+3A7↑j
                                        ; sub_A259+3AD↑j
                inc     di
                cmp     di, [bp+var_6]
                jge     short loc_A61D
                jmp     loc_A53C
; ---------------------------------------------------------------------------

loc_A61D:                               ; CODE XREF: sub_A259+2E0↑j
                                        ; sub_A259+3BF↑j
                cmp     [bp+var_6], 1
                jle     short loc_A629
                push    ds
                push    offset aAreHereWithYou ; "are here with you.\r"
                jmp     short loc_A62D
; ---------------------------------------------------------------------------

loc_A629:                               ; CODE XREF: sub_A259+3C8↑j
                push    ds
                push    offset aIsHere  ; "is here.\r"

loc_A62D:                               ; CODE XREF: sub_A259+3CE↑j
                call    PRF             ; prf(string);
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_17567
                pop     cx

loc_A645:                               ; CODE XREF: sub_A259+2A6↑j
                push    ds
                push    offset aWho     ; "who"
                push    seg dseg19
                push    offset byte_29F13
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jnz     short loc_A65E
                jmp     loc_A6E2
; ---------------------------------------------------------------------------

loc_A65E:                               ; CODE XREF: sub_A259+400↑j
                call    sub_21730
                cmp     [bp+var_6], 0
                jnz     short loc_A67E
                push    3B2h
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4

loc_A67E:                               ; CODE XREF: sub_A259+40E↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    3B3h
                call    sub_15C18
                add     sp, 6
                push    0
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah

loc_A6E2:                               ; CODE XREF: sub_A259+402↑j
                cmp     [bp+var_152], 0
                jz      short loc_A732
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     es:word_2AEBF, 0
                jnz     short loc_A732
                push    ss
                lea     ax, [bp+var_152]
                push    ax
                call    STRLEN          ; size_t strlen(const char* str);
                add     sp, 4
                sub     ax, 2
                lea     dx, [bp+var_152]
                add     ax, dx
                mov     bx, ax
                mov     byte ptr ss:[bx], 0
                push    ss
                lea     ax, [bp+var_152]
                push    ax
                push    ds
                push    offset aToThe   ; " to the "
                push    3B6h
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 0Ch

loc_A732:                               ; CODE XREF: sub_A259+48E↑j
                                        ; sub_A259+49B↑j
                cmp     [bp+var_2], 1
                jnz     short loc_A75A
                cmp     [bp+var_4], 0
                jz      short loc_A755
                push    4F5h

loc_A741:                               ; CODE XREF: sub_A259+4FF↓j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4
                jmp     short loc_A797
; ---------------------------------------------------------------------------

loc_A755:                               ; CODE XREF: sub_A259+4E3↑j
                push    4F4h
                jmp     short loc_A741
; ---------------------------------------------------------------------------

loc_A75A:                               ; CODE XREF: sub_A259+4DD↑j
                cmp     [bp+var_2], 1
                jle     short loc_A797
                push    [bp+var_4]
                push    ds
                push    offset aD_2     ; "%d"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 6
                push    dx
                push    ax
                push    [bp+var_2]
                push    ds
                push    offset aD_2     ; "%d"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 6
                push    dx
                push    ax
                push    4F3h
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 0Ch

loc_A797:                               ; CODE XREF: sub_A259+4FA↑j
                                        ; sub_A259+505↑j
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+0E0h]
                and     ax, 4
                or      ax, 0
                jz      short loc_A7B1
                jmp     loc_A9AA
; ---------------------------------------------------------------------------

loc_A7B1:                               ; CODE XREF: sub_A259+553↑j
                xor     si, si
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     es:word_2AED3, 1
                jz      short loc_A7C3
                jmp     loc_A9AA
; ---------------------------------------------------------------------------

loc_A7C3:                               ; CODE XREF: sub_A259+565↑j
                cmp     [bp+var_6], 0
                jg      short loc_A7CC
                jmp     loc_A9AA
; ---------------------------------------------------------------------------

loc_A7CC:                               ; CODE XREF: sub_A259+56E↑j
                xor     di, di
                cmp     di, [bp+var_6]
                jl      short loc_A7D6
                jmp     loc_A963
; ---------------------------------------------------------------------------

loc_A7D6:                               ; CODE XREF: sub_A259+578↑j
                                        ; sub_A259+707↓j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29A3A
                call    sub_18A8A
                pop     cx
                or      ax, ax
                jz      short loc_A7ED
                jmp     loc_A95A
; ---------------------------------------------------------------------------

loc_A7ED:                               ; CODE XREF: sub_A259+58F↑j
                mov     bx, di
                shl     bx, 1
                lea     ax, [bp+var_DE]
                add     bx, ax
                push    word ptr ss:[bx]
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                cmp     word ptr es:[bx+0DCh], 0FFFFh
                jz      short loc_A837
                mov     bx, di
                shl     bx, 1
                lea     ax, [bp+var_DE]
                add     bx, ax
                push    word ptr ss:[bx]
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                mov     ax, es:[bx+0DCh]
                mov     dx, seg NTERMS
                mov     es, dx
                assume es:nothing
                cmp     ax, word ptr es:NTERMS ; int nterms;
                jg      short loc_A837
                jmp     loc_A95A
; ---------------------------------------------------------------------------

loc_A837:                               ; CODE XREF: sub_A259+5B1↑j
                                        ; sub_A259+5D9↑j
                mov     bx, di
                shl     bx, 1
                lea     ax, [bp+var_DE]
                add     bx, ax
                mov     ax, seg NTERMS
                mov     es, ax
                mov     ax, word ptr es:NTERMS ; int nterms;
                dec     ax
                cmp     ss:[bx], ax
                jg      short loc_A853
                jmp     loc_A95A
; ---------------------------------------------------------------------------

loc_A853:                               ; CODE XREF: sub_A259+5F5↑j
                mov     si, 1
                mov     bx, di
                shl     bx, 1
                lea     ax, [bp+var_DE]
                add     bx, ax
                push    word ptr ss:[bx]
                call    sub_1A77E
                pop     cx
                mov     bx, di
                shl     bx, 1
                lea     ax, [bp+var_DE]
                add     bx, ax
                push    word ptr ss:[bx]
                call    sub_1A0E4
                pop     cx
                mov     bx, seg dseg19
                mov     es, bx
                assume es:dseg19
                mov     bx, es:word_2AED5
                mov     es, dx
                assume es:nothing
                xchg    ax, bx
                mov     es:[bx+0DCh], ax
                or      di, di
                jle     short loc_A89E
                push    ds
                push    offset asc_24A56 ; "***\r"
                call    PRF             ; prf(string);
                add     sp, 4

loc_A89E:                               ; CODE XREF: sub_A259+637↑j
                mov     bx, di
                shl     bx, 1
                lea     ax, [bp+var_DE]
                add     bx, ax
                push    word ptr ss:[bx]
                call    sub_1A0E4
                pop     cx
                push    dx
                push    ax
                push    ds
                push    (offset aTheS+4) ; "%s "
                call    PRF             ; prf(string);
                add     sp, 8
                mov     bx, di
                shl     bx, 1
                lea     ax, [bp+var_DE]
                add     bx, ax
                push    word ptr ss:[bx]
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                mov     ax, es:[bx+1Eh]
                imul    ax, 82h
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BD6
                add     dx, ax
                add     dx, 18h
                push    word ptr es:dword_29BD6+2
                push    dx
                push    ds
                push    offset aSs      ; "%ss: "
                call    PRF             ; prf(string);
                add     sp, 8
                mov     bx, di
                shl     bx, 1
                lea     ax, [bp+var_DE]
                add     bx, ax
                push    word ptr ss:[bx]
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                mov     ax, es:[bx+1Eh]
                imul    ax, 82h
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BD6
                add     dx, ax
                add     dx, 2Ch ; ','
                push    word ptr es:dword_29BD6+2
                push    dx
                push    ds
                push    offset aS_2     ; "%s, "
                call    PRF             ; prf(string);
                add     sp, 8
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    ds
                push    offset aS_3     ; "%s!\r"
                call    PRF             ; prf(string);
                add     sp, 8

loc_A95A:                               ; CODE XREF: sub_A259+591↑j
                                        ; sub_A259+5DB↑j ...
                inc     di
                cmp     di, [bp+var_6]
                jge     short loc_A963
                jmp     loc_A7D6
; ---------------------------------------------------------------------------

loc_A963:                               ; CODE XREF: sub_A259+57A↑j
                                        ; sub_A259+705↑j
                cmp     si, 1
                jnz     short loc_A9AA
                push    4
                push    0FFFFh
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah

loc_A9AA:                               ; CODE XREF: sub_A259+555↑j
                                        ; sub_A259+567↑j ...
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_A259        endp


; =============== S U B R O U T I N E =======================================


sub_A9AF        proc far                ; DATA XREF: dseg19:08AE↓o
                push    ds
                mov     ax, seg dseg12
                mov     ds, ax
                assume ds:dseg12
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:word_29778, 2Dh ; '-'
                push    ds
                push    (offset off_294A0+2)
                call    PRF             ; prf(string);
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+1Eh]
                imul    ax, 34h ; '4'
                add     ax, 0AF2h
                push    seg dseg19
                push    ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    ds
                push    offset unk_295EC
                push    ds
                push    offset unk_295F4
                push    ds
                push    offset unk_296AB
                call    PRF             ; prf(string);
                add     sp, 14h
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+0CAh]
                push    ds
                push    offset unk_295EC
                push    ds
                push    offset unk_295F4
                push    ds
                push    (offset off_296BC+2)
                call    PRF             ; prf(string);
                add     sp, 0Eh
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+34h]
                push    ds
                push    offset unk_295EC
                push    ds
                push    offset unk_295F4
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+30h]
                push    ds
                push    offset unk_295EC
                push    ds
                push    offset unk_295F4
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+32h]
                push    ds
                push    offset unk_295EC
                push    ds
                push    offset unk_295F4
                push    ds
                push    offset aStrength ; "Strength"
                call    PRF             ; prf(string);
                add     sp, 22h
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+36h]
                push    ds
                push    offset unk_295EC
                push    ds
                push    offset unk_295F4
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+38h]
                push    ds
                push    offset unk_295EC
                push    ds
                push    offset unk_295F4
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+3Ah]
                push    ds
                push    offset unk_295EC
                push    ds
                push    offset unk_295F4
                push    ds
                push    offset aEPoison ; "e Poison"
                call    PRF             ; prf(string);
                add     sp, 22h
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+28h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+26h]
                push    ds
                push    offset unk_295EC
                push    ds
                push    offset unk_295F4
                push    ds
                push    offset unk_29739
                call    PRF             ; prf(string);
                add     sp, 10h
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+9Ah], 0
                jbe     short loc_AB19
                push    ds
                push    offset off_295AE
                push    ds
                push    offset unk_29759
                call    PRF             ; prf(string);
                add     sp, 8

loc_AB19:                               ; CODE XREF: sub_A9AF+158↑j
                push    ds
                push    (offset off_294A0+2)
                call    PRF             ; prf(string);
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+2Ah]
                push    ds
                push    offset unk_295EC
                push    ds
                push    offset unk_295EC
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+2Eh]
                push    word ptr es:[bx+2Ch]
                push    ds
                push    offset unk_29790
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                push    ds
                push    offset unk_295EC
                push    ds
                push    offset unk_295F4
                push    ds
                push    offset unk_29766
                call    PRF             ; prf(string);
                add     sp, 1Ah
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+92h]
                push    word ptr es:[bx+90h]
                push    ds
                push    offset unk_29790
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                push    ds
                push    offset unk_295EC
                push    ds
                push    offset unk_295F4
                push    ds
                push    offset unk_29794
                call    PRF             ; prf(string);
                add     sp, 10h
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+96h]
                push    word ptr es:[bx+94h]
                push    ds
                push    offset unk_29790
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                push    ds
                push    offset unk_295EC
                push    ds
                push    offset unk_295F4
                push    ds
                push    offset unk_297AE
                call    PRF             ; prf(string);
                add     sp, 10h
                push    ds
                push    offset unk_295F4
                push    ds
                push    offset unk_297C8
                call    PRF             ; prf(string);
                add     sp, 8
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+8Ch], 0FFFFh
                jle     short loc_AC36
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+8Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                push    ds
                push    offset unk_295EC
                push    ds
                push    offset unk_297DB
                call    PRF             ; prf(string);
                add     sp, 0Ch
                jmp     short loc_AC46
; ---------------------------------------------------------------------------

loc_AC36:                               ; CODE XREF: sub_A9AF+24C↑j
                push    ds
                push    offset unk_295EC
                push    ds
                push    offset unk_297E1
                call    PRF             ; prf(string);
                add     sp, 8

loc_AC46:                               ; CODE XREF: sub_A9AF+285↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_18275
                pop     cx
                push    ax
                push    ds
                push    offset unk_295EC
                push    ds
                push    offset unk_295F4
                push    ds
                push    offset unk_297EC
                call    PRF             ; prf(string);
                add     sp, 0Eh
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+0DCh], 0FFFFh
                jle     short loc_ACF0
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+0DCh]
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                cmp     word ptr es:[bx+0D4h], 0
                jnz     short loc_ACCB
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+0DCh]
                call    sub_1A0E4
                pop     cx
                push    dx
                push    ax
                push    ds
                push    offset unk_295EC
                push    ds
                push    offset unk_295F4
                push    ds
                push    offset unk_29805

loc_ACC1:                               ; CODE XREF: sub_A9AF+33F↓j
                call    PRF             ; prf(string);
                add     sp, 10h
                jmp     short loc_AD04
; ---------------------------------------------------------------------------

loc_ACCB:                               ; CODE XREF: sub_A9AF+2ED↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+0DCh]
                call    sub_1A0E4
                pop     cx
                push    dx
                push    ax
                push    ds
                push    offset unk_295EC
                push    ds
                push    offset unk_295F4
                push    ds
                push    offset unk_29821
                jmp     short loc_ACC1
; ---------------------------------------------------------------------------

loc_ACF0:                               ; CODE XREF: sub_A9AF+2CC↑j
                push    ds
                push    offset unk_295EC
                push    ds
                push    offset unk_295F4
                push    ds
                push    offset unk_2983D
                call    PRF             ; prf(string);
                add     sp, 0Ch

loc_AD04:                               ; CODE XREF: sub_A9AF+31A↑j
                push    ds
                push    offset unk_295EC
                push    ds
                push    offset unk_295F4
                push    ds
                push    offset dword_2985A
                call    PRF             ; prf(string);
                add     sp, 0Ch
                call    sub_1830F
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+24h]
                imul    ax, 64h ; 'd'
                add     ax, 7D0h
                push    ax
                push    ds
                push    offset unk_295EC
                push    ds
                push    offset unk_295F4
                push    ds
                push    offset word_29870
                call    PRF             ; prf(string);
                add     sp, 0Eh
                push    ds
                push    (offset off_294A0+2)
                call    PRF             ; prf(string);
                add     sp, 4
                nop
                push    cs
                call    near ptr sub_AD59
                pop     ds
                assume ds:dseg21
                retf
sub_A9AF        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_AD59        proc far                ; CODE XREF: sub_A9AF+3A5↑p
                                        ; DATA XREF: dseg19:0476↓o

var_10          = byte ptr -10h
var_5           = byte ptr -5

                enter   10h, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg12
                mov     ds, ax
                assume ds:dseg12
                push    0
                push    0FFh
                push    ds
                push    offset unk_23E80
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                xor     si, si
                jmp     short loc_AD85
; ---------------------------------------------------------------------------

loc_AD7A:                               ; CODE XREF: sub_AD59+36↓j
                mov     bx, si
                shl     bx, 1
                mov     word ptr [bx+0], 0
                inc     si

loc_AD85:                               ; CODE XREF: sub_AD59+1F↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     es:word_2AEBB, si
                jg      short loc_AD7A
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+0CCh]
                push    ds
                push    offset aD_2     ; "%d"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 6
                push    dx
                push    ax
                push    ds
                push    offset a133m_0  ; "\x1B[1;33m"
                push    3B9h
                call    sub_15C18
                add     sp, 0Ah
                push    ds
                push    offset aInv     ; "inv"
                push    seg dseg19
                push    offset byte_29F13
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_ADED
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_2AED5
                mov     dx, seg dseg19
                mov     es, dx
                cmp     ax, es:word_2AED1
                jge     short loc_ADED
                call    sub_21712

loc_ADED:                               ; CODE XREF: sub_AD59+78↑j
                                        ; sub_AD59+8D↑j
                xor     di, di
                xor     si, si

loc_ADF1:                               ; CODE XREF: sub_AD59+1E5↓j
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+3Ch], 0FFFFh
                jg      short loc_AE0B
                jmp     loc_AF38
; ---------------------------------------------------------------------------

loc_AE0B:                               ; CODE XREF: sub_AD59+AD↑j
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                push    ds
                push    offset unk_23E80
                call    STRCAT          ; char *strcat(char *destination, const char *source );
                add     sp, 8
                push    ds
                push    offset aInv     ; "inv"
                push    seg dseg19
                push    offset byte_29F13
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_AEBA
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:word_2AED5
                mov     dx, seg dseg19
                mov     es, dx
                cmp     ax, es:word_2AED1
                jge     short loc_AEBA
                push    0Ch
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                push    ss
                lea     ax, [bp+var_10]
                push    ax
                call    STZCPY          ; stzcpy(char *dest, char *source, int nbytes);
                add     sp, 0Ah
                mov     [bp+var_5], 0
                push    ss
                lea     ax, [bp+var_10]
                push    ax
                call    sub_216A2
                add     sp, 4

loc_AEBA:                               ; CODE XREF: sub_AD59+FE↑j
                                        ; sub_AD59+113↑j
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     bx, es:[bx+3Ch]
                shl     bx, 1
                cmp     word ptr [bx+0], 0
                jle     short loc_AF0B
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     bx, es:[bx+3Ch]
                shl     bx, 1
                push    word ptr [bx+0]
                push    ds
                push    offset aD_1     ; " (%d)"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 6
                push    dx
                push    ax
                push    ds
                push    offset unk_23E80
                call    STRCAT          ; char *strcat(char *destination, const char *source );
                add     sp, 8

loc_AF0B:                               ; CODE XREF: sub_AD59+17C↑j
                push    ds
                push    offset asc_24A23 ; ", "
                push    ds
                push    offset unk_23E80
                call    STRCAT          ; char *strcat(char *destination, const char *source );
                add     sp, 8
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     bx, es:[bx+3Ch]
                shl     bx, 1
                inc     word ptr [bx+0]
                mov     di, 1

loc_AF38:                               ; CODE XREF: sub_AD59+AF↑j
                inc     si
                cmp     si, 0Ah
                jge     short loc_AF41
                jmp     loc_ADF1
; ---------------------------------------------------------------------------

loc_AF41:                               ; CODE XREF: sub_AD59+1E3↑j
                push    ds
                push    offset aInv     ; "inv"
                push    seg dseg19
                push    offset byte_29F13
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_AF71
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_2AED5
                mov     dx, seg dseg19
                mov     es, dx
                cmp     ax, es:word_2AED1
                jge     short loc_AF71
                call    sub_21730

loc_AF71:                               ; CODE XREF: sub_AD59+1FC↑j
                                        ; sub_AD59+211↑j
                or      di, di
                jnz     short loc_AF87
                push    ds
                push    offset aNothing ; "Nothing."
                push    ds
                push    offset unk_23E80
                call    STRCAT          ; char *strcat(char *destination, const char *source );
                add     sp, 8
                jmp     short loc_AFA2
; ---------------------------------------------------------------------------

loc_AF87:                               ; CODE XREF: sub_AD59+21A↑j
                push    ds
                push    offset unk_23E80
                call    STRLEN          ; size_t strlen(const char* str);
                add     sp, 4
                sub     ax, 2
                mov     si, ax
                mov     byte ptr [si+7D0h], 2Eh ; '.'
                mov     byte ptr [si+7D1h], 0

loc_AFA2:                               ; CODE XREF: sub_AD59+22C↑j
                push    ds
                push    offset a136m    ; "\x1B[1;36m"
                push    ds
                push    offset unk_23E80
                push    ds
                push    offset aSS_6    ; "%s%s\r"
                call    PRF             ; prf(string);
                add     sp, 0Ch
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_17567
                pop     cx
                push    ds
                push    offset aInv     ; "inv"
                push    seg dseg19
                push    offset byte_29F13
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jnz     short loc_AFDF
                jmp     loc_B08C
; ---------------------------------------------------------------------------

loc_AFDF:                               ; CODE XREF: sub_AD59+281↑j
                push    0
                call    sub_18EAF
                pop     cx
                or      ax, ax
                jz      short loc_AFEE
                jmp     loc_B08C
; ---------------------------------------------------------------------------

loc_AFEE:                               ; CODE XREF: sub_AD59+290↑j
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+0E0h]
                and     ax, 4
                or      ax, 0
                jz      short loc_B008
                jmp     loc_B08C
; ---------------------------------------------------------------------------

loc_B008:                               ; CODE XREF: sub_AD59+2AA↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+0C8h], 0
                jnz     short loc_B021
                mov     dx, ds
                mov     ax, 15A3h
                jmp     short loc_B026
; ---------------------------------------------------------------------------

loc_B021:                               ; CODE XREF: sub_AD59+2BF↑j
                mov     dx, ds
                mov     ax, 15A7h

loc_B026:                               ; CODE XREF: sub_AD59+2C6↑j
                push    dx
                push    ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    3BAh
                call    sub_15C18
                add     sp, 0Ah
                push    0
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah

loc_B08C:                               ; CODE XREF: sub_AD59+283↑j
                                        ; sub_AD59+292↑j ...
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_AD59        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_B091        proc far                ; CODE XREF: sub_A077+1D7↑p
                                        ; DATA XREF: dseg19:0494↓o

var_2E          = byte ptr -2Eh
var_10          = byte ptr -10h
var_5           = byte ptr -5

                enter   2Eh, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg12
                mov     ds, ax
                assume ds:dseg12
                push    0
                push    0FFh
                push    ds
                push    offset unk_2474F
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                xor     di, di
                xor     si, si
                jmp     short loc_B0BF
; ---------------------------------------------------------------------------

loc_B0B4:                               ; CODE XREF: sub_B091+38↓j
                mov     bx, si
                shl     bx, 1
                mov     word ptr [bx+8CFh], 0
                inc     si

loc_B0BF:                               ; CODE XREF: sub_B091+21↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     es:word_2AEBB, si
                jg      short loc_B0B4
                push    ds
                push    offset aItems_0 ; "items"
                push    seg dseg19
                push    offset byte_29F13
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_B0FB
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:word_2AED5
                mov     dx, seg dseg19
                mov     es, dx
                cmp     ax, es:word_2AED1
                jge     short loc_B0FB
                call    sub_21712

loc_B0FB:                               ; CODE XREF: sub_B091+4E↑j
                                        ; sub_B091+63↑j
                xor     si, si

loc_B0FD:                               ; CODE XREF: sub_B091+1E1↓j
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                cmp     word ptr es:[bx+190Ch], 0FFFFh
                jg      short loc_B111
                jmp     loc_B26C
; ---------------------------------------------------------------------------

loc_B111:                               ; CODE XREF: sub_B091+7B↑j
                push    1Eh
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:[bx+190Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                push    ss
                lea     ax, [bp+var_2E]
                push    ax
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                push    ds
                push    offset aItems_0 ; "items"
                push    seg dseg19
                push    offset byte_29F13
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_B1B7
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:word_2AED5
                mov     dx, seg dseg19
                mov     es, dx
                cmp     ax, es:word_2AED1
                jge     short loc_B1B7
                push    0Ch
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:[bx+190Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                push    ss
                lea     ax, [bp+var_10]
                push    ax
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                mov     [bp+var_5], 0
                push    ss
                lea     ax, [bp+var_10]
                push    ax
                call    sub_216A2
                add     sp, 4

loc_B1B7:                               ; CODE XREF: sub_B091+C9↑j
                                        ; sub_B091+DE↑j
                push    ss
                lea     ax, [bp+var_2E]
                push    ax
                call    STRLEN          ; size_t strlen(const char* str);
                add     sp, 4
                dec     ax
                lea     dx, [bp+var_2E]
                add     ax, dx
                mov     bx, ax
                cmp     byte ptr ss:[bx], 73h ; 's'
                jz      short loc_B1EF
                push    0
                push    ss
                lea     ax, [bp+var_2E]
                push    ax
                call    sub_15560
                add     sp, 6
                push    dx
                push    ax
                push    ds
                push    offset unk_2474F
                call    STRCAT          ; char *strcat(char *destination, const char *source );
                add     sp, 8

loc_B1EF:                               ; CODE XREF: sub_B091+13F↑j
                push    ss
                lea     ax, [bp+var_2E]
                push    ax
                push    ds
                push    offset unk_2474F
                call    STRCAT          ; char *strcat(char *destination, const char *source );
                add     sp, 8
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                mov     bx, es:[bx+190Ch]
                shl     bx, 1
                cmp     word ptr [bx+8CFh], 0
                jle     short loc_B245
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                mov     bx, es:[bx+190Ch]
                shl     bx, 1
                push    word ptr [bx+8CFh]
                push    ds
                push    offset aD_1     ; " (%d)"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 6
                push    dx
                push    ax
                push    ds
                push    offset unk_2474F
                call    STRCAT          ; char *strcat(char *destination, const char *source );
                add     sp, 8

loc_B245:                               ; CODE XREF: sub_B091+184↑j
                push    ds
                push    offset asc_24A23 ; ", "
                push    ds
                push    offset unk_2474F
                call    STRCAT          ; char *strcat(char *destination, const char *source );
                add     sp, 8
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                mov     bx, es:[bx+190Ch]
                shl     bx, 1
                inc     word ptr [bx+8CFh]
                mov     di, 1

loc_B26C:                               ; CODE XREF: sub_B091+7D↑j
                inc     si
                cmp     si, 6
                jge     short loc_B275
                jmp     loc_B0FD
; ---------------------------------------------------------------------------

loc_B275:                               ; CODE XREF: sub_B091+1DF↑j
                push    ds
                push    offset aItems_0 ; "items"
                push    seg dseg19
                push    offset byte_29F13
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_B2A5
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:word_2AED5
                mov     dx, seg dseg19
                mov     es, dx
                cmp     ax, es:word_2AED1
                jge     short loc_B2A5
                call    sub_21730

loc_B2A5:                               ; CODE XREF: sub_B091+1F8↑j
                                        ; sub_B091+20D↑j
                or      di, di
                jz      short loc_B2E0
                push    ds
                push    offset unk_2474F
                call    STRLEN          ; size_t strlen(const char* str);
                add     sp, 4
                sub     ax, 2
                mov     bx, ax
                mov     byte ptr [bx+109Fh], 2Eh ; '.'
                push    ds
                push    offset unk_2474F
                push    ds
                push    offset a136m    ; "\x1B[1;36m"
                push    ds
                push    offset a133m_0  ; "\x1B[1;33m"
                push    3BBh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 10h

loc_B2E0:                               ; CODE XREF: sub_B091+216↑j
                push    ds
                push    offset aItems_0 ; "items"
                push    seg dseg19
                push    offset byte_29F13
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_B373
                or      di, di
                jnz     short loc_B30F
                push    3BCh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4

loc_B30F:                               ; CODE XREF: sub_B091+267↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    3B4h
                call    sub_15C18
                add     sp, 6
                push    0
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah

loc_B373:                               ; CODE XREF: sub_B091+263↑j
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_B091        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_B378        proc far                ; CODE XREF: sub_E3E5+682↓p
                                        ; sub_1EFB5+A6↓P
                                        ; DATA XREF: ...

var_6           = word ptr -6
var_4           = word ptr -4
var_2           = word ptr -2

                enter   6, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg12
                mov     ds, ax
                assume ds:dseg12
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     es:word_2AED3, 2
                jge     short loc_B399
                call    sub_15CFA
                jmp     loc_B7DE
; ---------------------------------------------------------------------------

loc_B399:                               ; CODE XREF: sub_B378+17↑j
                push    2
                push    seg dseg19
                push    offset byte_29FDB
                call    sub_1609C
                add     sp, 6
                mov     di, ax
                cmp     di, 0FFFFh
                jg      short loc_B3B3
                jmp     loc_B7C3
; ---------------------------------------------------------------------------

loc_B3B3:                               ; CODE XREF: sub_B378+36↑j
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                push    3B5h
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8
                push    0
                call    sub_18EAF
                pop     cx
                or      ax, ax
                jz      short loc_B403
                jmp     loc_B483
; ---------------------------------------------------------------------------

loc_B403:                               ; CODE XREF: sub_B378+86↑j
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+0E0h]
                and     ax, 4
                or      ax, 0
                jnz     short loc_B483
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+0C8h], 0
                jnz     short loc_B45F
                mov     dx, ds
                mov     ax, 15A3h
                jmp     short loc_B464
; ---------------------------------------------------------------------------

loc_B45F:                               ; CODE XREF: sub_B378+DE↑j
                mov     dx, ds
                mov     ax, 15A7h

loc_B464:                               ; CODE XREF: sub_B378+E5↑j
                push    dx
                push    ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    ds
                push    offset aSDroppedSS ; "%s dropped %s %s.\r"
                call    PRF             ; prf(string);
                add     sp, 10h
                jmp     short loc_B498
; ---------------------------------------------------------------------------

loc_B483:                               ; CODE XREF: sub_B378+88↑j
                                        ; sub_B378+A0↑j
                push    3BDh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4

loc_B498:                               ; CODE XREF: sub_B378+109↑j
                push    0
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                mov     [bp+var_2], 0FFFFh
                xor     dx, dx

loc_B4E9:                               ; CODE XREF: sub_B378+18C↓j
                mov     bx, dx
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     word ptr es:[bx+190Ch], 0FFFFh
                jnz     short loc_B500
                mov     [bp+var_2], dx
                mov     dx, 6

loc_B500:                               ; CODE XREF: sub_B378+180↑j
                inc     dx
                cmp     dx, 6
                jl      short loc_B4E9
                cmp     [bp+var_2], 0FFFFh
                jz      short loc_B50F
                jmp     loc_B657
; ---------------------------------------------------------------------------

loc_B50F:                               ; CODE XREF: sub_B378+192↑j
                push    6
                call    sub_18A8A
                pop     cx
                mov     [bp+var_2], ax
                push    0
                call    sub_18EAF
                pop     cx
                or      ax, ax
                jz      short loc_B529
                jmp     loc_B616
; ---------------------------------------------------------------------------

loc_B529:                               ; CODE XREF: sub_B378+1AC↑j
                mov     bx, [bp+var_2]
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:[bx+190Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                push    0
                mov     bx, [bp+var_2]
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:[bx+190Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                call    sub_15560
                add     sp, 6
                push    dx
                push    ax
                push    3BEh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 0Ch
                mov     bx, [bp+var_2]
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:[bx+190Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                push    3BFh
                call    sub_15C18
                add     sp, 6
                push    0
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                jmp     short loc_B657
; ---------------------------------------------------------------------------

loc_B616:                               ; CODE XREF: sub_B378+1AE↑j
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                push    3C0h
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8

loc_B657:                               ; CODE XREF: sub_B378+194↑j
                                        ; sub_B378+29C↑j
                mov     bx, [bp+var_2]
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:[bx+190Ch]
                mov     [bp+var_4], ax
                mov     bx, [bp+var_2]
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:[bx+1918h]
                mov     [bp+var_6], ax
                mov     bx, [bp+var_2]
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, di
                shl     dx, 1
                mov     cx, seg dseg19
                mov     es, cx
                les     si, es:dword_29DD4
                assume es:nothing
                add     si, dx
                mov     dx, es:[si+3Ch]
                mov     es, ax
                assume es:dseg19
                mov     es:[bx+190Ch], dx
                mov     bx, [bp+var_2]
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, di
                shl     dx, 1
                mov     cx, seg dseg19
                mov     es, cx
                les     si, es:dword_29DD4
                assume es:nothing
                add     si, dx
                mov     dx, es:[si+50h]
                mov     es, ax
                assume es:dseg19
                mov     es:[bx+1918h], dx
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29BDA
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+28h]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                sub     es:[bx+0CCh], ax
                call    sub_15DD6
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, [bp+var_4]
                mov     es:[bx+3Ch], ax
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, [bp+var_6]
                mov     es:[bx+50h], ax
                cmp     [bp+var_4], 0FFFFh
                jle     short loc_B766
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29BDA
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+28h]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     es:[bx+0CCh], ax

loc_B766:                               ; CODE XREF: sub_B378+3B6↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+0E0h]
                and     ax, 40h
                or      ax, 0
                jz      short loc_B7DE
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, seg dseg19
                push    es
                mov     es, ax
                assume es:dseg19
                les     si, es:dword_29DD4
                assume es:nothing
                mov     ax, seg dseg19
                push    bx
                push    es
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_29A3C
                pop     es
                assume es:nothing
                imul    word ptr es:[si+32h]
                pop     bx
                pop     es
                cmp     es:[bx+0CCh], ax
                jge     short loc_B7DE
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                and     word ptr es:[bx+0E0h], 0FFBFh
                and     word ptr es:[bx+0E2h], 0FFFFh
                jmp     short loc_B7DE
; ---------------------------------------------------------------------------

loc_B7C3:                               ; CODE XREF: sub_B378+38↑j
                push    seg dseg19
                push    offset byte_29FDB
                push    3C1h
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8

loc_B7DE:                               ; CODE XREF: sub_B378+1E↑j
                                        ; sub_B378+403↑j ...
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_B378        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_B7E3        proc far                ; CODE XREF: sub_1EEDB+BB↓P
                                        ; DATA XREF: dseg19:03C2↓o ...

var_6           = word ptr -6
var_4           = word ptr -4
var_2           = word ptr -2

                enter   6, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg12
                mov     ds, ax
                assume ds:dseg12
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AED3, 2
                jge     short loc_B804
                call    sub_15CFA
                jmp     loc_BD06
; ---------------------------------------------------------------------------

loc_B804:                               ; CODE XREF: sub_B7E3+17↑j
                push    ds
                push    offset aEgg     ; "egg"
                push    seg dseg19
                push    offset byte_29FDB
                call    SAMETO          ; int match=sameto(char *shorts, char *longs);
                add     sp, 8
                or      ax, ax
                jz      short loc_B851
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:word_2AED5
                mov     dx, seg NTERMS
                mov     es, dx
                assume es:nothing
                cmp     ax, word ptr es:NTERMS ; int nterms;
                jl      short loc_B832
                jmp     loc_BD06
; ---------------------------------------------------------------------------

loc_B832:                               ; CODE XREF: sub_B7E3+4A↑j
                push    ds
                push    offset aHeyEggsArePois ; "Hey! Eggs are poisonous!\r"
                call    PRF             ; prf(string);
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    OUTPRF          ; outprf (unum);
                pop     cx
                jmp     loc_BD06
; ---------------------------------------------------------------------------

loc_B851:                               ; CODE XREF: sub_B7E3+35↑j
                push    0
                call    sub_18EAF
                pop     cx
                cmp     ax, 1
                jnz     short loc_B864
                push    373h
                jmp     loc_B911
; ---------------------------------------------------------------------------

loc_B864:                               ; CODE XREF: sub_B7E3+79↑j
                mov     di, 0FFFFh
                xor     cx, cx

loc_B869:                               ; CODE XREF: sub_B7E3+A6↓j
                mov     ax, cx
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+3Ch], 0FFFFh
                jnz     short loc_B885
                mov     di, cx
                mov     cx, 0Bh

loc_B885:                               ; CODE XREF: sub_B7E3+9B↑j
                inc     cx
                cmp     cx, 0Ah
                jl      short loc_B869
                push    2
                push    seg dseg19
                push    offset byte_29FDB
                call    sub_1625A
                add     sp, 6
                mov     [bp+var_2], ax
                cmp     [bp+var_2], 0FFFFh
                jg      short loc_B8A7
                jmp     loc_BCEB
; ---------------------------------------------------------------------------

loc_B8A7:                               ; CODE XREF: sub_B7E3+BF↑j
                mov     [bp+var_4], 0FFFFh
                mov     [bp+var_6], 0FFFFh
                mov     bx, [bp+var_2]
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:[bx+190Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29BDA
                assume es:nothing
                add     bx, ax
                mov     ax, seg dseg19
                push    es
                mov     es, ax
                assume es:dseg19
                les     si, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[si+32h]
                imul    ax, 0Ah
                pop     es
                cmp     es:[bx+28h], ax
                jle     short loc_B926
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_2AED5
                mov     dx, seg dseg19
                mov     es, dx
                cmp     ax, es:word_2AED1
                jge     short loc_B926
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+32h], 3Ch ; '<'
                jge     short loc_B926
                push    3C2h

loc_B911:                               ; CODE XREF: sub_B7E3+7E↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4
                jmp     loc_BD06
; ---------------------------------------------------------------------------

loc_B926:                               ; CODE XREF: sub_B7E3+103↑j
                                        ; sub_B7E3+118↑j ...
                cmp     di, 0FFFFh
                jz      short loc_B92E
                jmp     loc_BAFA
; ---------------------------------------------------------------------------

loc_B92E:                               ; CODE XREF: sub_B7E3+146↑j
                push    0Ah
                call    sub_18A8A
                pop     cx
                mov     di, ax
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                push    3C3h
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+0E0h]
                and     ax, 4
                or      ax, 0
                jz      short loc_B993
                jmp     loc_BA13
; ---------------------------------------------------------------------------

loc_B993:                               ; CODE XREF: sub_B7E3+1AB↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                push    0
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                call    sub_15560
                add     sp, 6
                push    dx
                push    ax
                push    3C4h
                call    sub_15C18
                add     sp, 0Eh
                jmp     short loc_BA82
; ---------------------------------------------------------------------------

loc_BA13:                               ; CODE XREF: sub_B7E3+1AD↑j
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                push    0
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                call    sub_15560
                add     sp, 6
                push    dx
                push    ax
                push    3C5h
                call    sub_15C18
                add     sp, 0Ah

loc_BA82:                               ; CODE XREF: sub_B7E3+22E↑j
                push    0
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                mov     [bp+var_4], ax
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+50h]
                mov     [bp+var_6], ax

loc_BAFA:                               ; CODE XREF: sub_B7E3+148↑j
                mov     bx, [bp+var_2]
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:[bx+190Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                push    3C7h
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+0E0h]
                and     ax, 4
                or      ax, 0
                jnz     short loc_BB90
                mov     bx, [bp+var_2]
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:[bx+190Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    3C8h
                call    sub_15C18
                add     sp, 0Ah
                jmp     short loc_BBC2
; ---------------------------------------------------------------------------

loc_BB90:                               ; CODE XREF: sub_B7E3+368↑j
                mov     bx, [bp+var_2]
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:[bx+190Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                push    3BFh
                call    sub_15C18
                add     sp, 6

loc_BBC2:                               ; CODE XREF: sub_B7E3+3AB↑j
                push    0
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                mov     bx, [bp+var_2]
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     word ptr es:[bx+190Ch], 0FFFFh
                jle     short loc_BC4F
                mov     bx, [bp+var_2]
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:[bx+190Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29BDA
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+28h]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     es:[bx+0CCh], ax

loc_BC4F:                               ; CODE XREF: sub_B7E3+439↑j
                mov     bx, [bp+var_2]
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:[bx+190Ch]
                mov     dx, di
                shl     dx, 1
                mov     bx, seg dseg19
                mov     es, bx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, dx
                mov     es:[bx+3Ch], ax
                mov     bx, [bp+var_2]
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:[bx+1918h]
                mov     dx, di
                shl     dx, 1
                mov     bx, seg dseg19
                mov     es, bx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, dx
                mov     es:[bx+50h], ax
                cmp     [bp+var_4], 0FFFFh
                jle     short loc_BCC0
                mov     ax, [bp+var_2]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29BDA
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+28h]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                sub     es:[bx+0CCh], ax

loc_BCC0:                               ; CODE XREF: sub_B7E3+4B6↑j
                mov     bx, [bp+var_2]
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, [bp+var_4]
                mov     es, ax
                assume es:dseg19
                mov     es:[bx+190Ch], dx
                mov     bx, [bp+var_2]
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, [bp+var_6]
                mov     es, ax
                mov     es:[bx+1918h], dx
                call    sub_15DD6
                jmp     short loc_BD06
; ---------------------------------------------------------------------------

loc_BCEB:                               ; CODE XREF: sub_B7E3+C1↑j
                push    seg dseg19
                push    offset byte_29FDB
                push    3C9h
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8

loc_BD06:                               ; CODE XREF: sub_B7E3+1E↑j
                                        ; sub_B7E3+4C↑j ...
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_B7E3        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_BD0B        proc far                ; DATA XREF: dseg19:0980↓o

var_16          = word ptr -16h
var_14          = word ptr -14h
var_12          = word ptr -12h
var_10          = word ptr -10h
var_E           = word ptr -0Eh
var_C           = word ptr -0Ch
var_A           = byte ptr -0Ah

                enter   16h, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg12
                mov     ds, ax
                assume ds:dseg12
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AED3, 3
                jge     short loc_BD27
                jmp     loc_C36C
; ---------------------------------------------------------------------------

loc_BD27:                               ; CODE XREF: sub_BD0B+17↑j
                push    3
                push    seg dseg19
                push    offset byte_2A0A3
                call    sub_1609C
                add     sp, 6
                mov     [bp+var_16], ax
                cmp     [bp+var_16], 0FFFFh
                jnz     short loc_BD5E
                push    seg dseg19
                push    offset byte_29FDB
                push    3C1h
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8
                jmp     loc_C371
; ---------------------------------------------------------------------------

loc_BD5E:                               ; CODE XREF: sub_BD0B+33↑j
                push    ds
                push    offset a0_0     ; "0"
                push    ss
                lea     ax, [bp+var_A]
                push    ax
                call    STRCPY          ; char* strcpy(char* destination, const char* source );
                add     sp, 8
                push    seg dseg19
                push    offset byte_29FDB
                call    sub_1872A
                add     sp, 4
                mov     [bp+var_C], ax
                cmp     [bp+var_C], 0FFFFh
                jg      short loc_BD89
                jmp     loc_C36C
; ---------------------------------------------------------------------------

loc_BD89:                               ; CODE XREF: sub_BD0B+79↑j
                mov     bx, [bp+var_C]
                shl     bx, 2
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:[bx+28h]
                push    word ptr es:[bx+26h]
                mov     ax, [bp+var_16]
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                push    3CAh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 0Ch
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+0E0h]
                and     ax, 4
                or      ax, 0
                jz      short loc_BDFA
                jmp     loc_BEBD
; ---------------------------------------------------------------------------

loc_BDFA:                               ; CODE XREF: sub_BD0B+EA↑j
                push    0
                call    sub_18EAF
                pop     cx
                or      ax, ax
                jz      short loc_BE09
                jmp     loc_BEBD
; ---------------------------------------------------------------------------

loc_BE09:                               ; CODE XREF: sub_BD0B+F9↑j
                mov     bx, [bp+var_C]
                shl     bx, 2
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    word ptr es:[bx+28h]
                push    word ptr es:[bx+26h]
                mov     ax, [bp+var_16]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+0C8h], 0
                jnz     short loc_BE52
                mov     dx, ds
                mov     ax, 15A3h
                jmp     short loc_BE57
; ---------------------------------------------------------------------------

loc_BE52:                               ; CODE XREF: sub_BD0B+13E↑j
                mov     dx, ds
                mov     ax, 15A7h

loc_BE57:                               ; CODE XREF: sub_BD0B+145↑j
                push    dx
                push    ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    3CBh
                call    sub_15C18
                add     sp, 12h
                push    1
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah

loc_BEBD:                               ; CODE XREF: sub_BD0B+EC↑j
                                        ; sub_BD0B+FB↑j
                mov     ax, [bp+var_16]
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29BDA
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+28h]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                sub     es:[bx+0CCh], ax
                mov     [bp+var_E], 1
                cmp     [bp+var_C], 1
                jz      short loc_BF05
                cmp     [bp+var_C], 3
                jnz     short loc_BF0A

loc_BF05:                               ; CODE XREF: sub_BD0B+1F2↑j
                mov     [bp+var_E], 0FFFFh

loc_BF0A:                               ; CODE XREF: sub_BD0B+1F8↑j
                mov     bx, [bp+var_C]
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:[bx+18FCh]
                mov     [bp+var_10], ax
                push    0Ah
                mov     bx, [bp+var_C]
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+24h]
                mov     es, ax
                assume es:dseg19
                add     dx, es:[bx+18h]
                push    dx
                mov     bx, [bp+var_C]
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+22h]
                mov     es, ax
                assume es:dseg19
                add     dx, es:[bx+10h]
                push    dx
                mov     bx, [bp+var_C]
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+20h]
                mov     es, ax
                assume es:dseg19
                add     dx, es:[bx+8]
                push    dx
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                push    ss
                lea     ax, [bp+var_A]
                push    ax
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                cmp     [bp+var_10], 1
                jz      short loc_BFDE
                cmp     [bp+var_10], 0Ah
                jz      short loc_BFDE
                push    0Ah
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                push    ss
                lea     ax, [bp+var_A]
                push    ax
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah

loc_BFDE:                               ; CODE XREF: sub_BD0B+288↑j
                                        ; sub_BD0B+28E↑j
                push    ss
                lea     ax, [bp+var_A]
                push    ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jnz     short loc_C030
                push    ss
                lea     ax, [bp+var_A]
                push    ax
                call    sub_15D7B
                add     sp, 4

loc_C030:                               ; CODE XREF: sub_BD0B+316↑j
                mov     di, 0FFFFh
                xor     dx, dx

loc_C035:                               ; CODE XREF: sub_BD0B+344↓j
                mov     bx, dx
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     word ptr es:[bx+190Ch], 0FFFFh
                jnz     short loc_C04B
                mov     di, dx
                mov     dx, 7

loc_C04B:                               ; CODE XREF: sub_BD0B+339↑j
                inc     dx
                cmp     dx, 6
                jl      short loc_C035
                mov     [bp+var_14], 0FFFFh
                mov     [bp+var_12], 0FFFFh
                cmp     di, 0FFFFh
                jz      short loc_C063
                jmp     loc_C189
; ---------------------------------------------------------------------------

loc_C063:                               ; CODE XREF: sub_BD0B+353↑j
                push    6
                call    sub_18A8A
                pop     cx
                mov     di, ax
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:[bx+190Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                push    0
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:[bx+190Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                call    sub_15560
                add     sp, 6
                push    dx
                push    ax
                push    3BEh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 0Ch
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_17567
                pop     cx
                push    0
                call    sub_18EAF
                pop     cx
                or      ax, ax
                jnz     short loc_C142
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:[bx+190Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                push    3BFh
                call    sub_15C18
                add     sp, 6
                push    0
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                push    ss
                lea     ax, [bp+var_A]
                push    ax
                call    sub_175B0
                add     sp, 0Ah

loc_C142:                               ; CODE XREF: sub_BD0B+3E9↑j
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:[bx+190Ch]
                mov     [bp+var_14], ax
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:[bx+1918h]
                mov     [bp+var_12], ax
                mov     ax, [bp+var_14]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29BDA
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+28h]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     es:[bx+0CCh], ax

loc_C189:                               ; CODE XREF: sub_BD0B+355↑j
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, [bp+var_16]
                shl     dx, 1
                mov     cx, seg dseg19
                mov     es, cx
                assume es:dseg19
                les     si, es:dword_29DD4
                assume es:nothing
                add     si, dx
                mov     dx, es:[si+3Ch]
                mov     es, ax
                assume es:dseg19
                mov     es:[bx+190Ch], dx
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, [bp+var_16]
                shl     dx, 1
                mov     cx, seg dseg19
                mov     es, cx
                les     si, es:dword_29DD4
                assume es:nothing
                add     si, dx
                mov     dx, es:[si+50h]
                mov     es, ax
                assume es:dseg19
                mov     es:[bx+1918h], dx
                call    sub_15DD6
                cmp     [bp+var_10], 1
                jnz     short loc_C24E
                push    0
                call    sub_18EAF
                pop     cx
                or      ax, ax
                jz      short loc_C1E9
                jmp     loc_C2DF
; ---------------------------------------------------------------------------

loc_C1E9:                               ; CODE XREF: sub_BD0B+4D9↑j
                mov     bx, [bp+var_C]
                add     bx, [bp+var_E]
                shl     bx, 2
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:[bx+28h]
                push    word ptr es:[bx+26h]
                mov     ax, [bp+var_16]
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                push    3CCh
                call    sub_15C18
                add     sp, 0Ah
                push    1
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                push    ss
                lea     ax, [bp+var_A]
                jmp     loc_C2D6
; ---------------------------------------------------------------------------

loc_C24E:                               ; CODE XREF: sub_BD0B+4CD↑j
                push    0
                call    sub_18EAF
                pop     cx
                or      ax, ax
                jnz     short loc_C294
                mov     ax, [bp+var_16]
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                push    3CDh
                call    sub_15C18
                add     sp, 6
                jmp     short loc_C29D
; ---------------------------------------------------------------------------

loc_C294:                               ; CODE XREF: sub_BD0B+54D↑j
                push    3BDh
                call    sub_15C18
                pop     cx

loc_C29D:                               ; CODE XREF: sub_BD0B+587↑j
                push    1
                push    0FFFFh
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx

loc_C2D6:                               ; CODE XREF: sub_BD0B+540↑j
                push    ax
                call    sub_175B0
                add     sp, 0Ah

loc_C2DF:                               ; CODE XREF: sub_BD0B+4DB↑j
                mov     ax, [bp+var_16]
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, [bp+var_14]
                mov     es:[bx+3Ch], ax
                mov     ax, [bp+var_16]
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, [bp+var_12]
                mov     es:[bx+50h], ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, seg dseg19
                push    es
                mov     es, ax
                assume es:dseg19
                les     si, es:dword_29DD4
                assume es:nothing
                mov     ax, seg dseg19
                push    bx
                push    es
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_29A3C
                pop     es
                assume es:nothing
                imul    word ptr es:[si+32h]
                pop     bx
                pop     es
                cmp     es:[bx+0CCh], ax
                jg      short loc_C371
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+0E0h]
                and     ax, 40h
                or      ax, 0
                jz      short loc_C371
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                and     word ptr es:[bx+0E0h], 0FFBFh
                and     word ptr es:[bx+0E2h], 0FFFFh
                jmp     short loc_C371
; ---------------------------------------------------------------------------

loc_C36C:                               ; CODE XREF: sub_BD0B+19↑j
                                        ; sub_BD0B+7B↑j
                call    sub_15CFA

loc_C371:                               ; CODE XREF: sub_BD0B+50↑j
                                        ; sub_BD0B+630↑j ...
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_BD0B        endp


; =============== S U B R O U T I N E =======================================


sub_C376        proc far                ; CODE XREF: sub_163FE+6A5↓P
                                        ; DATA XREF: dseg19:025A↓o
                push    si
                push    ds
                mov     ax, seg dseg12
                mov     ds, ax
                assume ds:dseg12
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:word_29778, 2Eh ; '.'
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AED3, 2
                jge     short loc_C39E
                call    sub_15CFA
                jmp     loc_C6B8
; ---------------------------------------------------------------------------

loc_C39E:                               ; CODE XREF: sub_C376+1E↑j
                push    0
                call    sub_18EAF
                pop     cx
                cmp     ax, 1
                jnz     short loc_C3B1
                push    373h
                jmp     loc_C4B3
; ---------------------------------------------------------------------------

loc_C3B1:                               ; CODE XREF: sub_C376+33↑j
                push    seg dseg19
                push    offset byte_29FDB
                call    sub_15FC6
                add     sp, 4
                mov     si, ax
                cmp     si, 0FFFFh
                jnz     short loc_C3E4
                push    seg dseg19
                push    offset byte_29FDB
                push    3C9h
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8
                jmp     loc_C6B8
; ---------------------------------------------------------------------------

loc_C3E4:                               ; CODE XREF: sub_C376+4E↑j
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AED5, si
                jnz     short loc_C3F6
                push    333h
                jmp     loc_C4B3
; ---------------------------------------------------------------------------

loc_C3F6:                               ; CODE XREF: sub_C376+78↑j
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AED1, si
                jg      short loc_C405
                jmp     loc_C4C8
; ---------------------------------------------------------------------------

loc_C405:                               ; CODE XREF: sub_C376+8A↑j
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:word_2AED5
                mov     dx, seg dseg19
                mov     es, dx
                cmp     ax, es:word_2AED1
                jl      short loc_C41D
                jmp     loc_C4C8
; ---------------------------------------------------------------------------

loc_C41D:                               ; CODE XREF: sub_C376+A2↑j
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                mov     ax, es:[bx+2Ah]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                add     ax, es:word_29A70
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     ax, es:[bx+2Ah]
                jnb     short loc_C469
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     bx, es:[bx+1Eh]
                imul    bx, 34h ; '4'
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     word ptr es:[bx+0B20h], 0
                jnz     short loc_C4C8
                push    505h
                jmp     short loc_C4B3
; ---------------------------------------------------------------------------

loc_C469:                               ; CODE XREF: sub_C376+CE↑j
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                mov     ax, es:[bx+2Ah]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                sub     ax, es:word_29A70
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     ax, es:[bx+2Ah]
                jbe     short loc_C4C8
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     bx, es:[bx+1Eh]
                imul    bx, 34h ; '4'
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     word ptr es:[bx+0B20h], 0
                jnz     short loc_C4C8
                push    506h

loc_C4B3:                               ; CODE XREF: sub_C376+38↑j
                                        ; sub_C376+7D↑j ...
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4
                jmp     loc_C6B8
; ---------------------------------------------------------------------------

loc_C4C8:                               ; CODE XREF: sub_C376+8C↑j
                                        ; sub_C376+A4↑j ...
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     es:[bx+0DCh], si
                mov     ax, seg dseg19
                mov     dx, seg NTERMS
                mov     es, dx
                assume es:nothing
                mov     dx, word ptr es:NTERMS ; int nterms;
                dec     dx
                mov     es, ax
                assume es:dseg19
                cmp     es:word_2AED5, dx
                jg      short loc_C4F1
                jmp     loc_C5DB
; ---------------------------------------------------------------------------

loc_C4F1:                               ; CODE XREF: sub_C376+176↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_1A77E
                pop     cx
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+0DCh]
                call    sub_1A0E4
                pop     cx
                push    dx
                push    ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+1Eh]
                imul    ax, 82h
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BD6
                add     dx, ax
                add     dx, 2Ch ; ','
                push    word ptr es:dword_29BD6+2
                push    dx
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+1Eh]
                imul    ax, 82h
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BD6
                add     dx, ax
                add     dx, 18h
                push    word ptr es:dword_29BD6+2
                push    dx
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    ds
                push    offset aTheSSsSS ; "The %s %ss: %s, %s!\r"
                call    PRF             ; prf(string);
                add     sp, 14h
                push    4
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_1FF54
                pop     cx

loc_C5DB:                               ; CODE XREF: sub_C376+178↑j
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+0E0h]
                and     ax, 4
                or      ax, 0
                jz      short loc_C5F7
                call    sub_1DA5C

loc_C5F7:                               ; CODE XREF: sub_C376+27A↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+0DCh]
                call    sub_1A0E4
                pop     cx
                push    dx
                push    ax
                push    3CFh
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    3D0h
                push    si
                call    sub_15C7E
                add     sp, 8
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+0DCh]
                call    sub_1A0E4
                pop     cx
                push    dx
                push    ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    3D1h
                call    sub_15C18
                add     sp, 0Ah
                push    0
                push    si
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah

loc_C6B8:                               ; CODE XREF: sub_C376+25↑j
                                        ; sub_C376+6B↑j ...
                pop     ds
                assume ds:dseg21
                pop     si
                retf
sub_C376        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_C6BB        proc far                ; DATA XREF: dseg19:01A6↓o
                                        ; dseg19:021E↓o ...

var_1E          = byte ptr -1Eh
var_B           = byte ptr -0Bh

                enter   1Eh, 0
                push    si
                push    ds
                mov     ax, seg dseg12
                mov     ds, ax
                assume ds:dseg12
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:word_29778, 32h ; '2'
                push    0
                call    sub_18EAF
                pop     cx
                cmp     ax, 1
                jnz     short loc_C6F7
                push    373h

loc_C6E2:                               ; CODE XREF: sub_C6BB+79↓j
                                        ; sub_C6BB+E6↓j ...
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4
                jmp     loc_CA82
; ---------------------------------------------------------------------------

loc_C6F7:                               ; CODE XREF: sub_C6BB+22↑j
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AED3, 1
                jnz     short loc_C736
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+0DCh], 0FFFFh
                jle     short loc_C731
                push    1Eh
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+0DCh]
                call    sub_1A0E4
                pop     cx
                push    dx
                push    ax
                jmp     short loc_C73E
; ---------------------------------------------------------------------------

loc_C731:                               ; CODE XREF: sub_C6BB+59↑j
                push    3E3h
                jmp     short loc_C6E2
; ---------------------------------------------------------------------------

loc_C736:                               ; CODE XREF: sub_C6BB+47↑j
                push    1Eh
                push    seg dseg19
                push    offset byte_29FDB

loc_C73E:                               ; CODE XREF: sub_C6BB+74↑j
                push    ss
                lea     ax, [bp+var_1E]
                push    ax
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                mov     [bp+var_B], 0
                push    ss
                lea     ax, [bp+var_1E]
                push    ax
                call    sub_15FC6
                add     sp, 4
                mov     si, ax
                cmp     si, 0FFFFh
                jnz     short loc_C7C2
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     es:word_2AED3, 1
                jnz     short loc_C7A4
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+0DCh], 0FFFFh
                jle     short loc_C79E
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+0DCh]
                call    sub_1A0E4
                pop     cx
                push    dx
                push    ax
                push    3C9h
                jmp     short loc_C7AD
; ---------------------------------------------------------------------------

loc_C79E:                               ; CODE XREF: sub_C6BB+C5↑j
                push    3D2h
                jmp     loc_C6E2
; ---------------------------------------------------------------------------

loc_C7A4:                               ; CODE XREF: sub_C6BB+B3↑j
                push    seg dseg19
                push    offset byte_29FDB
                push    3D3h

loc_C7AD:                               ; CODE XREF: sub_C6BB+E1↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8
                jmp     loc_CA82
; ---------------------------------------------------------------------------

loc_C7C2:                               ; CODE XREF: sub_C6BB+A6↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    si
                call    sub_1A0E4
                pop     cx
                push    dx
                push    ax
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_C7EC
                push    333h
                jmp     loc_C6E2
; ---------------------------------------------------------------------------

loc_C7EC:                               ; CODE XREF: sub_C6BB+129↑j
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AED1, si
                jg      short loc_C7FB
                jmp     loc_C895
; ---------------------------------------------------------------------------

loc_C7FB:                               ; CODE XREF: sub_C6BB+13B↑j
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                mov     ax, es:[bx+2Ah]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                add     ax, es:word_29A70
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     ax, es:[bx+2Ah]
                jnb     short loc_C848
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     bx, es:[bx+1Eh]
                imul    bx, 34h ; '4'
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     word ptr es:[bx+0B20h], 0
                jnz     short loc_C895
                push    505h
                jmp     loc_C6E2
; ---------------------------------------------------------------------------

loc_C848:                               ; CODE XREF: sub_C6BB+167↑j
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                mov     ax, es:[bx+2Ah]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                sub     ax, es:word_29A70
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     ax, es:[bx+2Ah]
                jbe     short loc_C895
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     bx, es:[bx+1Eh]
                imul    bx, 34h ; '4'
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     word ptr es:[bx+0B20h], 0
                jnz     short loc_C895
                push    506h
                jmp     loc_C6E2
; ---------------------------------------------------------------------------

loc_C895:                               ; CODE XREF: sub_C6BB+13D↑j
                                        ; sub_C6BB+185↑j ...
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+0E0h]
                and     ax, 4
                or      ax, 0
                jz      short loc_C8B1
                call    sub_1DA5C

loc_C8B1:                               ; CODE XREF: sub_C6BB+1EF↑j
                push    0FFFFh
                push    si
                call    sub_18AC3
                add     sp, 4
                cmp     ax, 1
                jz      short loc_C8C4
                jmp     loc_C9C6
; ---------------------------------------------------------------------------

loc_C8C4:                               ; CODE XREF: sub_C6BB+204↑j
                push    si
                call    sub_1A0E4
                pop     cx
                push    dx
                push    ax
                push    seg dseg19
                push    offset byte_29F13
                call    sub_156EA
                add     sp, 4
                push    dx
                push    ax
                push    3D4h
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 0Ch
                push    seg dseg19
                push    offset byte_29F13
                call    sub_156EA
                add     sp, 4
                push    dx
                push    ax
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    3D5h
                push    si
                call    sub_15C7E
                add     sp, 0Ch
                push    si
                call    sub_1A0E4
                pop     cx
                push    dx
                push    ax
                push    seg dseg19
                push    offset byte_29F13
                call    sub_156EA
                add     sp, 4
                push    dx
                push    ax
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    3D6h
                call    sub_15C18
                add     sp, 0Eh
                push    5
                push    si
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_2AED1
                dec     ax
                cmp     ax, si
                jge     short loc_C9AE
                push    si
                call    sub_1FF54
                pop     cx

loc_C9AE:                               ; CODE XREF: sub_C6BB+2EA↑j
                push    0FFFFh
                push    si
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_163FE
                add     sp, 6
                jmp     loc_CA82
; ---------------------------------------------------------------------------

loc_C9C6:                               ; CODE XREF: sub_C6BB+206↑j
                push    3D7h
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4
                push    si
                call    sub_1A0E4
                pop     cx
                push    dx
                push    ax
                push    seg dseg19
                push    offset byte_29F13
                call    sub_156EA
                add     sp, 4
                push    dx
                push    ax
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    3D8h
                call    sub_15C18
                add     sp, 0Eh
                push    0
                push    si
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                push    seg dseg19
                push    offset byte_29F13
                call    sub_156EA
                add     sp, 4
                push    dx
                push    ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    3D9h
                push    si
                call    sub_15C7E
                add     sp, 0Ch

loc_CA82:                               ; CODE XREF: sub_C6BB+39↑j
                                        ; sub_C6BB+104↑j ...
                pop     ds
                assume ds:dseg21
                pop     si
                leave
                retf
sub_C6BB        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_CA86        proc far                ; DATA XREF: dseg19:03E0↓o

var_22          = byte ptr -22h
var_4           = word ptr -4
var_2           = word ptr -2

                enter   22h, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg12
                mov     ds, ax
                assume ds:dseg12
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29778, 34h ; '4'
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AED3, 3
                jge     short loc_CAB3

loc_CAAB:                               ; CODE XREF: sub_CA86+7B↓j
                                        ; sub_CA86+81↓j
                call    sub_15CFA
                jmp     loc_CBF9
; ---------------------------------------------------------------------------

loc_CAB3:                               ; CODE XREF: sub_CA86+23↑j
                push    1Eh
                push    seg dseg19
                push    offset byte_29FDB
                push    ss
                lea     ax, [bp+var_22]
                push    ax
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                push    ss
                lea     ax, [bp+var_22]
                push    ax
                call    sub_15FC6
                add     sp, 4
                mov     di, ax
                cmp     di, 0FFFFh
                jnz     short loc_CAE7
                push    seg dseg19
                push    offset byte_29FDB
                push    3D3h
                jmp     short loc_CB4E
; ---------------------------------------------------------------------------

loc_CAE7:                               ; CODE XREF: sub_CA86+54↑j
                push    seg dseg19
                push    offset byte_2A0A3
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                mov     [bp+var_2], dx
                mov     [bp+var_4], ax
                cmp     [bp+var_2], 0
                jg      short loc_CB09
                jl      short loc_CAAB
                cmp     [bp+var_4], 0
                jb      short loc_CAAB

loc_CB09:                               ; CODE XREF: sub_CA86+79↑j
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+92h]
                mov     dx, es:[bx+90h]
                cmp     ax, [bp+var_2]
                ja      short loc_CB63
                jb      short loc_CB29
                cmp     dx, [bp+var_4]
                jnb     short loc_CB63

loc_CB29:                               ; CODE XREF: sub_CA86+9C↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+92h]
                push    word ptr es:[bx+90h]
                push    ds
                push    offset aLd_1    ; "%ld"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                push    4FDh

loc_CB4E:                               ; CODE XREF: sub_CA86+5F↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8
                jmp     loc_CBF9
; ---------------------------------------------------------------------------

loc_CB63:                               ; CODE XREF: sub_CA86+9A↑j
                                        ; sub_CA86+A1↑j
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, [bp+var_2]
                mov     dx, [bp+var_4]
                sub     es:[bx+90h], dx
                sbb     es:[bx+92h], ax
                push    di
                call    sub_1A0E4
                pop     cx
                mov     bx, [bp+var_2]
                mov     cx, [bp+var_4]
                mov     si, ax
                mov     es, dx
                add     es:[si+90h], cx
                adc     es:[si+92h], bx
                push    [bp+var_2]
                push    [bp+var_4]
                push    ds
                push    offset aLd_1    ; "%ld"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    4FEh
                push    di
                call    sub_15C7E
                add     sp, 0Ch
                push    [bp+var_2]
                push    [bp+var_4]
                push    ds
                push    offset aLd_1    ; "%ld"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                push    di
                call    sub_1A0E4
                pop     cx
                push    dx
                push    ax
                push    4FFh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 0Ch

loc_CBF9:                               ; CODE XREF: sub_CA86+2A↑j
                                        ; sub_CA86+DA↑j
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_CA86        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_CBFE        proc far                ; CODE XREF: sub_1F755+330↓P
                                        ; DATA XREF: dseg19:0A8E↓o

var_2           = word ptr -2

                enter   2, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg12
                mov     ds, ax
                assume ds:dseg12
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29778, 35h ; '5'
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AED3, 2
                jge     short loc_CC2B
                call    sub_15CFA
                jmp     loc_D128
; ---------------------------------------------------------------------------

loc_CC2B:                               ; CODE XREF: sub_CBFE+23↑j
                push    0
                call    sub_18EAF
                pop     cx
                cmp     ax, 1
                jnz     short loc_CC3E
                push    373h
                jmp     loc_D116
; ---------------------------------------------------------------------------

loc_CC3E:                               ; CODE XREF: sub_CBFE+38↑j
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+0DCh], 0FFFFh
                jle     short loc_CC73
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+0DCh]
                call    sub_1A0E4
                pop     cx
                push    dx
                push    ax
                call    sub_15FC6
                add     sp, 4
                mov     di, ax
                jmp     short loc_CC76
; ---------------------------------------------------------------------------

loc_CC73:                               ; CODE XREF: sub_CBFE+50↑j
                mov     di, 0FFFFh

loc_CC76:                               ; CODE XREF: sub_CBFE+73↑j
                cmp     di, 0FFFFh
                jg      short loc_CC7E
                jmp     loc_D0D3
; ---------------------------------------------------------------------------

loc_CC7E:                               ; CODE XREF: sub_CBFE+7B↑j
                push    2
                push    seg dseg19
                push    offset byte_29FDB
                call    sub_1609C
                add     sp, 6
                mov     [bp+var_2], ax
                cmp     [bp+var_2], 0FFFFh
                jg      short loc_CC9A
                jmp     loc_D0C8
; ---------------------------------------------------------------------------

loc_CC9A:                               ; CODE XREF: sub_CBFE+97↑j
                mov     ax, [bp+var_2]
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29BDA
                assume es:nothing
                add     bx, ax
                mov     ax, seg dseg19
                push    es
                mov     es, ax
                assume es:dseg19
                les     si, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[si+32h]
                imul    ax, 5
                pop     es
                cmp     es:[bx+28h], ax
                jle     short loc_CCF2
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_2AED5
                mov     dx, seg dseg19
                mov     es, dx
                cmp     ax, es:word_2AED1
                jge     short loc_CCF2
                push    3DAh
                jmp     loc_D116
; ---------------------------------------------------------------------------

loc_CCF2:                               ; CODE XREF: sub_CBFE+D7↑j
                                        ; sub_CBFE+EC↑j
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+0E0h]
                and     ax, 40h
                or      ax, 0
                jz      short loc_CD24
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_2AED5
                mov     dx, seg dseg19
                mov     es, dx
                cmp     ax, es:word_2AED1
                jge     short loc_CD24
                push    3DBh
                jmp     loc_D116
; ---------------------------------------------------------------------------

loc_CD24:                               ; CODE XREF: sub_CBFE+109↑j
                                        ; sub_CBFE+11E↑j
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+0CAh], 63h ; 'c'
                jle     short loc_CD51
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_2AED5
                mov     dx, seg dseg19
                mov     es, dx
                cmp     ax, es:word_2AED1
                jge     short loc_CD51
                push    3DCh
                jmp     loc_D116
; ---------------------------------------------------------------------------

loc_CD51:                               ; CODE XREF: sub_CBFE+136↑j
                                        ; sub_CBFE+14B↑j
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+0E0h]
                and     ax, 4
                or      ax, 0
                jz      short loc_CD6D
                call    sub_1DA5C

loc_CD6D:                               ; CODE XREF: sub_CBFE+168↑j
                push    [bp+var_2]
                push    di
                call    sub_18AC3
                add     sp, 4
                cmp     ax, 1
                jz      short loc_CD81
                jmp     loc_CF87
; ---------------------------------------------------------------------------

loc_CD81:                               ; CODE XREF: sub_CBFE+17E↑j
                mov     ax, [bp+var_2]
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                push    di
                call    sub_1A0E4
                pop     cx
                push    dx
                push    ax
                push    3DDh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 0Ch
                mov     ax, [bp+var_2]
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+0C8h], 0
                jnz     short loc_CE12
                mov     dx, ds
                mov     ax, 15A3h
                jmp     short loc_CE17
; ---------------------------------------------------------------------------

loc_CE12:                               ; CODE XREF: sub_CBFE+20B↑j
                mov     dx, ds
                mov     ax, 15A7h

loc_CE17:                               ; CODE XREF: sub_CBFE+212↑j
                push    dx
                push    ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    3DEh
                push    di
                call    sub_15C7E
                add     sp, 10h
                mov     ax, [bp+var_2]
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+0C8h], 0
                jnz     short loc_CE7A
                mov     dx, ds
                mov     ax, 15A3h
                jmp     short loc_CE7F
; ---------------------------------------------------------------------------

loc_CE7A:                               ; CODE XREF: sub_CBFE+273↑j
                mov     dx, ds
                mov     ax, 15A7h

loc_CE7F:                               ; CODE XREF: sub_CBFE+27A↑j
                push    dx
                push    ax
                push    di
                call    sub_1A0E4
                pop     cx
                push    dx
                push    ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    3DFh
                call    sub_15C18
                add     sp, 12h
                push    5
                push    di
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_2AED1
                dec     ax
                cmp     ax, di
                jge     short loc_CF02
                push    di
                call    sub_1FF54
                pop     cx

loc_CF02:                               ; CODE XREF: sub_CBFE+2FB↑j
                mov     ax, [bp+var_2]
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29BDA
                assume es:nothing
                add     bx, ax
                mov     dx, es:[bx+28h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                sub     dx, es:[bx+38h]
                or      dx, dx
                jle     short loc_CF4B
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     es:[bx+0CAh], dx

loc_CF4B:                               ; CODE XREF: sub_CBFE+33C↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+0CAh], 64h ; 'd'
                jle     short loc_CF6E
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     word ptr es:[bx+0CAh], 64h ; 'd'

loc_CF6E:                               ; CODE XREF: sub_CBFE+35D↑j
                push    [bp+var_2]
                push    di
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_163FE
                add     sp, 6
                jmp     loc_D128
; ---------------------------------------------------------------------------

loc_CF87:                               ; CODE XREF: sub_CBFE+180↑j
                push    di
                call    sub_1A0E4
                pop     cx
                push    dx
                push    ax
                push    3E0h
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8
                mov     ax, [bp+var_2]
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+0C8h], 0
                jnz     short loc_CFEB
                mov     dx, ds
                mov     ax, 15A3h
                jmp     short loc_CFF0
; ---------------------------------------------------------------------------

loc_CFEB:                               ; CODE XREF: sub_CBFE+3E4↑j
                mov     dx, ds
                mov     ax, 15A7h

loc_CFF0:                               ; CODE XREF: sub_CBFE+3EB↑j
                push    dx
                push    ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    3E1h
                push    di
                call    sub_15C7E
                add     sp, 10h
                mov     ax, [bp+var_2]
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+0C8h], 0
                jnz     short loc_D053
                mov     dx, ds
                mov     ax, 15A3h
                jmp     short loc_D058
; ---------------------------------------------------------------------------

loc_D053:                               ; CODE XREF: sub_CBFE+44C↑j
                mov     dx, ds
                mov     ax, 15A7h

loc_D058:                               ; CODE XREF: sub_CBFE+453↑j
                push    dx
                push    ax
                push    di
                call    sub_1A0E4
                pop     cx
                push    dx
                push    ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    3E2h
                call    sub_15C18
                add     sp, 12h
                push    0
                push    di
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                jmp     short loc_D128
; ---------------------------------------------------------------------------

loc_D0C8:                               ; CODE XREF: sub_CBFE+99↑j
                push    seg dseg19
                push    offset byte_29FDB
                push    3C1h
                jmp     short loc_D0FF
; ---------------------------------------------------------------------------

loc_D0D3:                               ; CODE XREF: sub_CBFE+7D↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+0DCh], 0FFFFh
                jle     short loc_D113
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+0DCh]
                call    sub_1A0E4
                pop     cx
                push    dx
                push    ax
                push    3E4h

loc_D0FF:                               ; CODE XREF: sub_CBFE+4D3↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8
                jmp     short loc_D128
; ---------------------------------------------------------------------------

loc_D113:                               ; CODE XREF: sub_CBFE+4E5↑j
                push    3E3h

loc_D116:                               ; CODE XREF: sub_CBFE+3D↑j
                                        ; sub_CBFE+F1↑j ...
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4

loc_D128:                               ; CODE XREF: sub_CBFE+2A↑j
                                        ; sub_CBFE+386↑j ...
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_CBFE        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_D12D        proc far                ; DATA XREF: dseg19:04EE↓o

var_2           = word ptr -2

                enter   2, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg12
                mov     ds, ax
                assume ds:dseg12
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29778, 36h ; '6'
                xor     di, di
                mov     [bp+var_2], 0
                xor     si, si

loc_D14E:                               ; CODE XREF: sub_D12D+CB↓j
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+64h], 0FFFFh
                jg      short loc_D168
                jmp     loc_D1F2
; ---------------------------------------------------------------------------

loc_D168:                               ; CODE XREF: sub_D12D+36↑j
                or      di, di
                jnz     short loc_D175
                push    3E5h
                call    sub_15C18
                pop     cx

loc_D175:                               ; CODE XREF: sub_D12D+3D↑j
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     bx, es:[bx+64h]
                imul    bx, 36h ; '6'
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     dx, es:[bx+0FFCh]
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                sub     dx, es:[bx+30h]
                or      dx, dx
                jge     short loc_D1AA
                xor     dx, dx

loc_D1AA:                               ; CODE XREF: sub_D12D+79↑j
                push    dx
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+64h]
                imul    ax, 36h ; '6'
                add     ax, 0FDEh
                push    seg dseg19
                push    ax
                push    ds
                push    offset a20s3d   ; "%-20s: %-3d "
                call    PRF             ; prf(string);
                add     sp, 0Ah
                mov     di, 1
                inc     [bp+var_2]
                cmp     [bp+var_2], 2
                jle     short loc_D1F2
                push    ds
                push    (offset aYouGetThrownBa+14h) ; "\r"
                call    PRF             ; prf(string);
                add     sp, 4
                mov     [bp+var_2], 0

loc_D1F2:                               ; CODE XREF: sub_D12D+38↑j
                                        ; sub_D12D+B2↑j
                inc     si
                cmp     si, 14h
                jge     short loc_D1FB
                jmp     loc_D14E
; ---------------------------------------------------------------------------

loc_D1FB:                               ; CODE XREF: sub_D12D+C9↑j
                or      di, di
                jnz     short loc_D20A
                push    3E6h
                call    sub_15C18
                pop     cx
                jmp     short loc_D21B
; ---------------------------------------------------------------------------

loc_D20A:                               ; CODE XREF: sub_D12D+D0↑j
                cmp     di, 1
                jnz     short loc_D21B
                push    ds
                push    (offset aYouGetThrownBa+14h) ; "\r"
                call    PRF             ; prf(string);
                add     sp, 4

loc_D21B:                               ; CODE XREF: sub_D12D+DB↑j
                                        ; sub_D12D+E0↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_17567
                pop     cx
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_D12D        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_D230        proc far                ; CODE XREF: sub_1FBDE+17B↓P
                                        ; DATA XREF: dseg19:0A34↓o

var_6           = word ptr -6
var_4           = word ptr -4
var_2           = word ptr -2

                enter   6, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg12
                mov     ds, ax
                assume ds:dseg12
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29778, 37h ; '7'
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AED3, 2
                jge     short loc_D25D
                call    sub_15CFA
                jmp     loc_D667
; ---------------------------------------------------------------------------

loc_D25D:                               ; CODE XREF: sub_D230+23↑j
                push    2
                push    seg dseg19
                push    offset byte_29FDB
                call    sub_1609C
                add     sp, 6
                mov     di, ax
                cmp     di, 0FFFFh
                jnz     short loc_D292
                push    seg dseg19
                push    offset byte_29FDB
                push    3C1h
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8
                jmp     loc_D667
; ---------------------------------------------------------------------------

loc_D292:                               ; CODE XREF: sub_D230+42↑j
                mov     [bp+var_2], 0FFFFh
                mov     [bp+var_4], 0FFFFh
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29BDA
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+1Ch], 2
                jz      short loc_D2DE
                push    3E7h
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4
                jmp     loc_D667
; ---------------------------------------------------------------------------

loc_D2DE:                               ; CODE XREF: sub_D230+94↑j
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29BDA
                assume es:nothing
                add     bx, ax
                mov     ax, seg dseg19
                push    es
                mov     es, ax
                assume es:dseg19
                les     si, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[si+32h]
                imul    ax, 0Ah
                pop     es
                cmp     es:[bx+28h], ax
                jle     short loc_D35F
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_2AED5
                mov     dx, seg dseg19
                mov     es, dx
                cmp     ax, es:word_2AED1
                jge     short loc_D35F
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+32h], 3Ch ; '<'
                jge     short loc_D35F
                push    ds
                push    offset aYouDonTHaveThe ; "You don't have the strength to put that"...
                call    PRF             ; prf(string);
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    OUTPRF          ; outprf (unum);
                pop     cx
                jmp     loc_D667
; ---------------------------------------------------------------------------

loc_D35F:                               ; CODE XREF: sub_D230+E8↑j
                                        ; sub_D230+FD↑j ...
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+8Ch], 0FFFFh
                jg      short loc_D374
                jmp     loc_D498
; ---------------------------------------------------------------------------

loc_D374:                               ; CODE XREF: sub_D230+13F↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+8Ch]
                mov     [bp+var_2], ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+8Eh]
                mov     [bp+var_4], ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+0CCh]
                mov     dx, [bp+var_2]
                imul    dx, 32h ; '2'
                mov     [bp+var_6], dx
                mov     bx, seg dseg19
                mov     es, bx
                assume es:dseg19
                les     bx, es:dword_29BDA
                assume es:nothing
                add     bx, dx
                add     ax, es:[bx+28h]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     es:[bx+0CCh], ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, word ptr es:dword_29BDA
                add     ax, [bp+var_6]
                add     ax, 4
                push    word ptr es:dword_29BDA+2
                push    ax
                push    3E8h
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8
                mov     ax, [bp+var_2]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+0C8h], 0
                jnz     short loc_D42D
                mov     dx, ds
                mov     ax, 15A3h
                jmp     short loc_D432
; ---------------------------------------------------------------------------

loc_D42D:                               ; CODE XREF: sub_D230+1F4↑j
                mov     dx, ds
                mov     ax, 15A7h

loc_D432:                               ; CODE XREF: sub_D230+1FB↑j
                push    dx
                push    ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    3E9h
                call    sub_15C18
                add     sp, 0Eh
                push    0
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah

loc_D498:                               ; CODE XREF: sub_D230+141↑j
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     es:[bx+8Ch], ax
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+50h]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     es:[bx+8Eh], ax
                cmp     [bp+var_2], 0FFFFh
                jnz     short loc_D512
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     word ptr es:[bx+3Ch], 0FFFFh
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     word ptr es:[bx+50h], 0FFFFh
                jmp     short loc_D540
; ---------------------------------------------------------------------------

loc_D512:                               ; CODE XREF: sub_D230+2B2↑j
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, [bp+var_2]
                mov     es:[bx+3Ch], ax
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, [bp+var_4]
                mov     es:[bx+50h], ax

loc_D540:                               ; CODE XREF: sub_D230+2E0↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+0CCh]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[bx+8Ch]
                imul    dx, 32h ; '2'
                mov     bx, seg dseg19
                mov     es, bx
                assume es:dseg19
                les     bx, es:dword_29BDA
                assume es:nothing
                add     bx, dx
                sub     ax, es:[bx+28h]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     es:[bx+0CCh], ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+8Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                push    3EAh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+8Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+0C8h], 0
                jnz     short loc_D5FC
                mov     dx, ds
                mov     ax, 15A3h
                jmp     short loc_D601
; ---------------------------------------------------------------------------

loc_D5FC:                               ; CODE XREF: sub_D230+3C3↑j
                mov     dx, ds
                mov     ax, 15A7h

loc_D601:                               ; CODE XREF: sub_D230+3CA↑j
                push    dx
                push    ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    3EBh
                call    sub_15C18
                add     sp, 0Eh
                push    0
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah

loc_D667:                               ; CODE XREF: sub_D230+2A↑j
                                        ; sub_D230+5F↑j ...
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_D230        endp


; =============== S U B R O U T I N E =======================================


sub_D66C        proc far                ; CODE XREF: sub_1FA9B+11B↓P
                                        ; DATA XREF: dseg19:0692↓o
                push    si
                push    ds
                mov     ax, seg dseg12
                mov     ds, ax
                assume ds:dseg12
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:word_29778, 38h ; '8'
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+8Ch], 0FFFFh
                jg      short loc_D694
                jmp     loc_D859
; ---------------------------------------------------------------------------

loc_D694:                               ; CODE XREF: sub_D66C+23↑j
                mov     si, 0FFFFh
                xor     cx, cx

loc_D699:                               ; CODE XREF: sub_D66C+4D↓j
                mov     ax, cx
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+3Ch], 0FFFFh
                jnz     short loc_D6B5
                mov     si, cx
                mov     cx, 0Ah

loc_D6B5:                               ; CODE XREF: sub_D66C+42↑j
                inc     cx
                cmp     cx, 0Ah
                jl      short loc_D699
                cmp     si, 0FFFFh
                jg      short loc_D6C3
                jmp     loc_D854
; ---------------------------------------------------------------------------

loc_D6C3:                               ; CODE XREF: sub_D66C+52↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+8Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                push    3ECh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+8Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+0C8h], 0
                jnz     short loc_D73F
                mov     dx, ds
                mov     ax, 15A3h
                jmp     short loc_D744
; ---------------------------------------------------------------------------

loc_D73F:                               ; CODE XREF: sub_D66C+CA↑j
                mov     dx, ds
                mov     ax, 15A7h

loc_D744:                               ; CODE XREF: sub_D66C+D1↑j
                push    dx
                push    ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    3EDh
                call    sub_15C18
                add     sp, 0Eh
                push    0
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+0CCh]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[bx+8Ch]
                imul    dx, 32h ; '2'
                mov     bx, seg dseg19
                mov     es, bx
                assume es:dseg19
                les     bx, es:dword_29BDA
                assume es:nothing
                add     bx, dx
                add     ax, es:[bx+28h]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     es:[bx+0CCh], ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+8Ch]
                mov     dx, si
                shl     dx, 1
                mov     bx, seg dseg19
                mov     es, bx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, dx
                mov     es:[bx+3Ch], ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+8Eh]
                mov     dx, si
                shl     dx, 1
                mov     bx, seg dseg19
                mov     es, bx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, dx
                mov     es:[bx+50h], ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     word ptr es:[bx+8Ch], 0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     word ptr es:[bx+8Eh], 0FFFFh
                jmp     short loc_D86E
; ---------------------------------------------------------------------------

loc_D854:                               ; CODE XREF: sub_D66C+54↑j
                push    3EEh
                jmp     short loc_D85C
; ---------------------------------------------------------------------------

loc_D859:                               ; CODE XREF: sub_D66C+25↑j
                push    328h

loc_D85C:                               ; CODE XREF: sub_D66C+1EB↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4

loc_D86E:                               ; CODE XREF: sub_D66C+1E6↑j
                pop     ds
                assume ds:dseg21
                pop     si
                retf
sub_D66C        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_D871        proc far                ; DATA XREF: dseg19:07FA↓o

var_CE          = byte ptr -0CEh
var_6           = word ptr -6
var_4           = word ptr -4
var_2           = word ptr -2

                enter   0CEh, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg12
                mov     ds, ax
                assume ds:dseg12
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29778, 39h ; '9'
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AED3, 2
                jge     short loc_D89E

loc_D896:                               ; CODE XREF: sub_D871+51↓j
                call    sub_15CFA
                jmp     loc_DE40
; ---------------------------------------------------------------------------

loc_D89E:                               ; CODE XREF: sub_D871+23↑j
                push    ds
                push    offset aStore   ; "store"
                push    seg dseg19
                push    offset byte_29FDB
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jnz     short loc_D8B7
                jmp     loc_DAB9
; ---------------------------------------------------------------------------

loc_D8B7:                               ; CODE XREF: sub_D871+41↑j
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AED3, 3
                jl      short loc_D896
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29880
                push    es:word_2987E
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    37h ; '7'
                push    0
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jnz     short loc_D922
                jmp     loc_DAB1
; ---------------------------------------------------------------------------

loc_D922:                               ; CODE XREF: sub_D871+AC↑j
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    seg dseg19
                push    offset byte_29B40
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    seg dseg19
                push    offset unk_29B4A
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jnz     short loc_D95D
                jmp     loc_DAB1
; ---------------------------------------------------------------------------

loc_D95D:                               ; CODE XREF: sub_D871+E7↑j
                push    seg dseg19
                push    offset byte_2A0A3
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                or      dx, dx
                jg      short loc_D97B
                jl      short loc_D975
                or      ax, ax
                jnb     short loc_D97B

loc_D975:                               ; CODE XREF: sub_D871+FE↑j
                push    ds
                push    offset aMutantPlayersH ; "Mutant Players have been known to explo"...
                jmp     short loc_D992
; ---------------------------------------------------------------------------

loc_D97B:                               ; CODE XREF: sub_D871+FC↑j
                                        ; sub_D871+102↑j
                push    seg dseg19
                push    offset byte_2A0A3
                call    STRLEN          ; size_t strlen(const char* str);
                add     sp, 4
                cmp     ax, 8
                jbe     short loc_D9AD
                push    ds
                push    offset aALittleExpensi ; "A little expensive,don't you think?\r"

loc_D992:                               ; CODE XREF: sub_D871+108↑j
                call    PRF             ; prf(string);
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_17567
                pop     cx
                jmp     loc_DE40
; ---------------------------------------------------------------------------

loc_D9AD:                               ; CODE XREF: sub_D871+11B↑j
                push    seg dseg19
                push    offset byte_2A0A3
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                mov     bx, seg dseg19
                mov     es, bx
                mov     es:word_29BCA, dx
                mov     es:word_29BC8, ax
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+92h]
                mov     dx, es:[bx+90h]
                mov     bx, seg dseg19
                mov     es, bx
                assume es:dseg19
                add     dx, es:word_29BC0
                adc     ax, es:word_29BC2
                mov     bx, seg dseg19
                mov     es, bx
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     es:[bx+92h], ax
                mov     es:[bx+90h], dx
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_29BC2
                push    es:word_29BC0
                push    ds
                push    offset aLd_1    ; "%ld"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                push    36Ch
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29BC2, 0
                mov     es:word_29BC0, 0
                push    seg dseg19
                push    offset byte_29B40
                call    UPDBTV          ; void updbtv(char *recptr);
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29884
                push    es:word_29882
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    0
                push    32h ; '2'
                push    seg dseg19
                push    offset unk_29C3C
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29BCA
                push    es:word_29BC8
                push    ds
                push    offset aForSaleByOwner ; "FOR SALE BY OWNER $ %ld"
                push    seg dseg19
                push    offset unk_29C3C
                call    SPRINTF         ; int sprintf(char *str, const char *format, ... );
                add     sp, 0Ch
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29BF6, 2
                call    sub_15DD6
                jmp     loc_DE40
; ---------------------------------------------------------------------------

loc_DAB1:                               ; CODE XREF: sub_D871+AE↑j
                                        ; sub_D871+E9↑j ...
                push    369h
                jmp     loc_DE11
; ---------------------------------------------------------------------------
                jmp     short loc_DAB1
; ---------------------------------------------------------------------------

loc_DAB9:                               ; CODE XREF: sub_D871+43↑j
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_29BF6, 1
                jz      short loc_DACC
                push    352h
                jmp     loc_DE11
; ---------------------------------------------------------------------------

loc_DACC:                               ; CODE XREF: sub_D871+253↑j
                push    2
                push    seg dseg19
                push    offset byte_29FDB
                call    sub_1609C
                add     sp, 6
                mov     di, ax
                cmp     di, 0FFFFh
                jg      short loc_DAE6
                jmp     loc_DE25
; ---------------------------------------------------------------------------

loc_DAE6:                               ; CODE XREF: sub_D871+270↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29880
                push    es:word_2987E
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    37h ; '7'
                push    0
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jz      short loc_DB7C
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    seg dseg19
                push    offset byte_29B40
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                mov     [bp+var_2], 0FFFFh
                xor     dx, dx

loc_DB5F:                               ; CODE XREF: sub_D871+309↓j
                mov     bx, dx
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     word ptr es:[bx+1878h], 0FFFFh
                jnz     short loc_DB76
                mov     [bp+var_2], dx
                mov     dx, 14h

loc_DB76:                               ; CODE XREF: sub_D871+2FD↑j
                inc     dx
                cmp     dx, 14h
                jl      short loc_DB5F

loc_DB7C:                               ; CODE XREF: sub_D871+2CE↑j
                cmp     [bp+var_2], 0FFFFh
                jg      short loc_DB85
                jmp     loc_DE0E
; ---------------------------------------------------------------------------

loc_DB85:                               ; CODE XREF: sub_D871+30F↑j
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                push    word ptr es:[bx+3Ch]
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                push    word ptr es:[bx+50h]
                call    sub_15850
                add     sp, 4
                mov     [bp+var_4], dx
                mov     [bp+var_6], ax
                push    0
                push    64h ; 'd'
                push    0
                call    sub_158D5
                pop     cx
                cwd
                push    ax
                push    dx
                mov     dx, [bp+var_4]
                mov     ax, [bp+var_6]
                pop     cx
                pop     bx
                call    F_LXMUL
                push    dx
                push    ax
                call    F_LDIV
                mov     bx, [bp+var_4]
                mov     cx, [bp+var_6]
                add     cx, ax
                adc     bx, dx
                mov     [bp+var_4], bx
                mov     [bp+var_6], cx
                cmp     [bp+var_4], 0
                jg      short loc_DC02
                jl      short loc_DBFC
                cmp     [bp+var_6], 1
                jnb     short loc_DC02

loc_DBFC:                               ; CODE XREF: sub_D871+383↑j
                push    350h
                jmp     loc_DE11
; ---------------------------------------------------------------------------

loc_DC02:                               ; CODE XREF: sub_D871+381↑j
                                        ; sub_D871+389↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_29BC2
                mov     dx, es:word_29BC0
                cmp     ax, [bp+var_4]
                ja      short loc_DC22
                jb      short loc_DC1C
                cmp     dx, [bp+var_6]
                jnb     short loc_DC22

loc_DC1C:                               ; CODE XREF: sub_D871+3A4↑j
                push    363h
                jmp     loc_DE11
; ---------------------------------------------------------------------------

loc_DC22:                               ; CODE XREF: sub_D871+3A2↑j
                                        ; sub_D871+3A9↑j
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29BDA
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+28h]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                sub     es:[bx+0CCh], ax
                push    [bp+var_4]
                push    [bp+var_6]
                push    ds
                push    offset aLd_1    ; "%ld"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                push    34Fh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 0Ch
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+92h]
                mov     dx, es:[bx+90h]
                add     dx, [bp+var_6]
                adc     ax, [bp+var_4]
                mov     bx, seg dseg19
                mov     es, bx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     es:[bx+92h], ax
                mov     es:[bx+90h], dx
                mov     bx, [bp+var_2]
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, di
                shl     dx, 1
                mov     cx, seg dseg19
                mov     es, cx
                assume es:dseg19
                les     si, es:dword_29DD4
                assume es:nothing
                add     si, dx
                mov     dx, es:[si+3Ch]
                mov     es, ax
                assume es:dseg19
                mov     es:[bx+1878h], dx
                mov     bx, [bp+var_2]
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, di
                shl     dx, 1
                mov     cx, seg dseg19
                mov     es, cx
                les     si, es:dword_29DD4
                assume es:nothing
                add     si, dx
                mov     dx, es:[si+50h]
                mov     es, ax
                assume es:dseg19
                mov     es:[bx+18A0h], dx
                push    ds
                push    offset aVillageShop_1 ; "Village Shop"
                push    seg dseg19
                push    offset unk_29B4A
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jnz     short loc_DD59
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:word_29BC2
                mov     dx, es:word_29BC0
                sub     dx, [bp+var_6]
                sbb     ax, [bp+var_4]
                mov     bx, seg dseg19
                mov     es, bx
                mov     es:word_29BC2, ax
                mov     es:word_29BC0, dx

loc_DD59:                               ; CODE XREF: sub_D871+4C4↑j
                push    seg dseg19
                push    offset byte_29B40
                call    UPDBTV          ; void updbtv(char *recptr);
                add     sp, 4
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     word ptr es:[bx+3Ch], 0FFFFh
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     word ptr es:[bx+50h], 0FFFFh
                push    0
                push    0C8h
                push    ss
                lea     ax, [bp+var_CE]
                push    ax
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                push    [bp+var_4]
                push    [bp+var_6]
                mov     bx, [bp+var_2]
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:[bx+1878h]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    ds
                push    offset aSSoldOneOfYour ; "%s sold one of your stores a %s for $ %"...
                push    ss
                lea     ax, [bp+var_CE]
                push    ax
                call    SPRINTF         ; int sprintf(char *str, const char *format, ... );
                add     sp, 14h
                push    0FFFFh
                push    0FFF6h
                push    ss
                lea     ax, [bp+var_CE]
                push    ax
                push    seg dseg19
                push    offset unk_29B4A
                call    sub_18770
                add     sp, 0Ch
                jmp     short loc_DE40
; ---------------------------------------------------------------------------

loc_DE0E:                               ; CODE XREF: sub_D871+311↑j
                push    3EFh

loc_DE11:                               ; CODE XREF: sub_D871+243↑j
                                        ; sub_D871+258↑j ...
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4
                jmp     short loc_DE40
; ---------------------------------------------------------------------------

loc_DE25:                               ; CODE XREF: sub_D871+272↑j
                push    seg dseg19
                push    offset byte_29FDB
                push    3C1h
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8

loc_DE40:                               ; CODE XREF: sub_D871+2A↑j
                                        ; sub_D871+139↑j ...
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_D871        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_DE45        proc far                ; DATA XREF: dseg19:0188↓o

var_4           = word ptr -4
var_2           = word ptr -2

                enter   4, 0
                push    si
                push    ds
                mov     ax, seg dseg12
                mov     ds, ax
                assume ds:dseg12
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29778, 3Ah ; ':'
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AED3, 2
                jge     short loc_DE71
                call    sub_15CFA
                jmp     loc_DFB3
; ---------------------------------------------------------------------------

loc_DE71:                               ; CODE XREF: sub_DE45+22↑j
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_29BF8, 1
                jnz     short loc_DE86
                nop
                push    cs
                call    near ptr sub_DFB7
                jmp     loc_DFB3
; ---------------------------------------------------------------------------

loc_DE86:                               ; CODE XREF: sub_DE45+37↑j
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_29BF6, 1
                jz      short loc_DE99
                push    352h
                jmp     loc_DF2D
; ---------------------------------------------------------------------------

loc_DE99:                               ; CODE XREF: sub_DE45+4C↑j
                push    2
                push    seg dseg19
                push    offset byte_29FDB
                call    sub_1609C
                add     sp, 6
                mov     si, ax
                cmp     si, 0FFFFh
                jg      short loc_DEB3
                jmp     loc_DF98
; ---------------------------------------------------------------------------

loc_DEB3:                               ; CODE XREF: sub_DE45+69↑j
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                push    word ptr es:[bx+3Ch]
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                push    word ptr es:[bx+50h]
                call    sub_15850
                add     sp, 4
                mov     [bp+var_2], dx
                mov     [bp+var_4], ax
                push    0
                push    64h ; 'd'
                push    0
                call    sub_158D5
                pop     cx
                cwd
                push    ax
                push    dx
                mov     dx, [bp+var_2]
                mov     ax, [bp+var_4]
                pop     cx
                pop     bx
                call    F_LXMUL
                push    dx
                push    ax
                call    F_LDIV
                mov     bx, [bp+var_2]
                mov     cx, [bp+var_4]
                add     cx, ax
                adc     bx, dx
                mov     [bp+var_2], bx
                mov     [bp+var_4], cx
                cmp     [bp+var_2], 0
                jg      short loc_DF41
                jl      short loc_DF2A
                cmp     [bp+var_4], 1
                jnb     short loc_DF41

loc_DF2A:                               ; CODE XREF: sub_DE45+DD↑j
                push    354h

loc_DF2D:                               ; CODE XREF: sub_DE45+51↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4
                jmp     short loc_DFB3
; ---------------------------------------------------------------------------

loc_DF41:                               ; CODE XREF: sub_DE45+DB↑j
                                        ; sub_DE45+E3↑j
                push    [bp+var_2]
                push    [bp+var_4]
                push    ds
                push    offset aLd_1    ; "%ld"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                push    351h
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 0Ch
                jmp     short loc_DFB3
; ---------------------------------------------------------------------------

loc_DF98:                               ; CODE XREF: sub_DE45+6B↑j
                push    seg dseg19
                push    offset byte_29FDB
                push    3C1h
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8

loc_DFB3:                               ; CODE XREF: sub_DE45+29↑j
                                        ; sub_DE45+3E↑j ...
                pop     ds
                assume ds:dseg21
                pop     si
                leave
                retf
sub_DE45        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_DFB7        proc far                ; CODE XREF: sub_DE45+3B↑p

var_4           = word ptr -4
var_2           = word ptr -2

                enter   4, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg12
                mov     ds, ax
                assume ds:dseg12
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29778, 3Bh ; ';'
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AED3, 2
                jge     short loc_DFE4
                call    sub_15CFA
                jmp     loc_E15A
; ---------------------------------------------------------------------------

loc_DFE4:                               ; CODE XREF: sub_DFB7+23↑j
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_29BF8, 0
                jg      short loc_DFF4
                jmp     loc_E145
; ---------------------------------------------------------------------------

loc_DFF4:                               ; CODE XREF: sub_DFB7+38↑j
                push    2
                mov     ax, seg MARGV
                mov     es, ax
                assume es:nothing
                push    word ptr es:MARGV+6 ; char *margv[];
                push    word ptr es:MARGV+4 ; char *margv[];
                call    sub_1609C
                add     sp, 6
                mov     di, ax
                cmp     di, 0FFFFh
                jg      short loc_E017
                jmp     loc_E128
; ---------------------------------------------------------------------------

loc_E017:                               ; CODE XREF: sub_DFB7+5B↑j
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+50h], 0
                jg      short loc_E031
                jmp     loc_E123
; ---------------------------------------------------------------------------

loc_E031:                               ; CODE XREF: sub_DFB7+75↑j
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29BDA
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+1Eh]
                mov     dx, di
                shl     dx, 1
                mov     bx, seg dseg19
                mov     es, bx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, dx
                sub     ax, es:[bx+50h]
                cwd
                mov     bx, di
                shl     bx, 1
                mov     cx, seg dseg19
                mov     es, cx
                assume es:dseg19
                les     si, es:dword_29DD4
                assume es:nothing
                add     si, bx
                mov     bx, es:[si+3Ch]
                imul    bx, 32h ; '2'
                mov     cx, seg dseg19
                mov     es, cx
                assume es:dseg19
                les     si, es:dword_29BDA
                assume es:nothing
                add     si, bx
                push    ax
                push    dx
                mov     dx, es:[si+26h]
                mov     ax, es:[si+24h]
                pop     cx
                pop     bx
                call    F_LXMUL
                mov     [bp+var_2], dx
                mov     [bp+var_4], ax
                cmp     [bp+var_2], 0
                jg      short loc_E0F8
                jl      short loc_E0B5
                cmp     [bp+var_4], 1
                jnb     short loc_E0F8

loc_E0B5:                               ; CODE XREF: sub_DFB7+F6↑j
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                push    35Ah
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8
                jmp     short loc_E15A
; ---------------------------------------------------------------------------

loc_E0F8:                               ; CODE XREF: sub_DFB7+F4↑j
                                        ; sub_DFB7+FC↑j
                push    [bp+var_2]
                push    [bp+var_4]
                push    ds
                push    offset aLd_1    ; "%ld"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                push    355h
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8
                jmp     short loc_E15A
; ---------------------------------------------------------------------------

loc_E123:                               ; CODE XREF: sub_DFB7+77↑j
                push    356h
                jmp     short loc_E148
; ---------------------------------------------------------------------------

loc_E128:                               ; CODE XREF: sub_DFB7+5D↑j
                push    seg dseg19
                push    offset byte_29FDB
                push    3C1h
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8
                jmp     short loc_E15A
; ---------------------------------------------------------------------------

loc_E145:                               ; CODE XREF: sub_DFB7+3A↑j
                push    352h

loc_E148:                               ; CODE XREF: sub_DFB7+16F↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4

loc_E15A:                               ; CODE XREF: sub_DFB7+2A↑j
                                        ; sub_DFB7+13F↑j ...
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_DFB7        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_E15F        proc far                ; DATA XREF: dseg19:03A4↓o

var_4           = word ptr -4
var_2           = word ptr -2

                enter   4, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg12
                mov     ds, ax
                assume ds:dseg12
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29778, 3Ch ; '<'
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AED3, 2
                jge     short loc_E18C
                call    sub_15CFA
                jmp     loc_E3E0
; ---------------------------------------------------------------------------

loc_E18C:                               ; CODE XREF: sub_E15F+23↑j
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_29BF8, 0
                jg      short loc_E19C
                jmp     loc_E3CB
; ---------------------------------------------------------------------------

loc_E19C:                               ; CODE XREF: sub_E15F+38↑j
                push    2
                push    seg dseg19
                push    offset byte_29FDB
                call    sub_1609C
                add     sp, 6
                mov     di, ax
                cmp     di, 0FFFFh
                jg      short loc_E1B6
                jmp     loc_E3AE
; ---------------------------------------------------------------------------

loc_E1B6:                               ; CODE XREF: sub_E15F+52↑j
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+50h], 0
                jg      short loc_E1D0
                jmp     loc_E3A9
; ---------------------------------------------------------------------------

loc_E1D0:                               ; CODE XREF: sub_E15F+6C↑j
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29BDA
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+1Eh]
                mov     dx, di
                shl     dx, 1
                mov     bx, seg dseg19
                mov     es, bx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, dx
                sub     ax, es:[bx+50h]
                cwd
                mov     bx, di
                shl     bx, 1
                mov     cx, seg dseg19
                mov     es, cx
                assume es:dseg19
                les     si, es:dword_29DD4
                assume es:nothing
                add     si, bx
                mov     bx, es:[si+3Ch]
                imul    bx, 32h ; '2'
                mov     cx, seg dseg19
                mov     es, cx
                assume es:dseg19
                les     si, es:dword_29BDA
                assume es:nothing
                add     si, bx
                push    ax
                push    dx
                mov     dx, es:[si+26h]
                mov     ax, es:[si+24h]
                pop     cx
                pop     bx
                call    F_LXMUL
                mov     [bp+var_2], dx
                mov     [bp+var_4], ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+92h]
                mov     dx, es:[bx+90h]
                cmp     ax, [bp+var_2]
                jnb     short loc_E262
                jmp     loc_E37E
; ---------------------------------------------------------------------------

loc_E262:                               ; CODE XREF: sub_E15F+FE↑j
                jnz     short loc_E26C
                cmp     dx, [bp+var_4]
                jnb     short loc_E26C
                jmp     loc_E37E
; ---------------------------------------------------------------------------

loc_E26C:                               ; CODE XREF: sub_E15F:loc_E262↑j
                                        ; sub_E15F+108↑j
                cmp     [bp+var_2], 0
                jg      short loc_E2BE
                jnz     short loc_E27A
                cmp     [bp+var_4], 0
                ja      short loc_E2BE

loc_E27A:                               ; CODE XREF: sub_E15F+113↑j
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                push    35Ah
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8
                jmp     loc_E3E0
; ---------------------------------------------------------------------------

loc_E2BE:                               ; CODE XREF: sub_E15F+111↑j
                                        ; sub_E15F+119↑j
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                push    [bp+var_2]
                push    [bp+var_4]
                push    ds
                push    offset aLd_1    ; "%ld"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                push    357h
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 0Ch
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+92h]
                mov     dx, es:[bx+90h]
                sub     dx, [bp+var_4]
                sbb     ax, [bp+var_2]
                mov     bx, seg dseg19
                mov     es, bx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     es:[bx+92h], ax
                mov     es:[bx+90h], dx
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29BDA
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+1Eh]
                mov     dx, di
                shl     dx, 1
                mov     bx, seg dseg19
                mov     es, bx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, dx
                mov     es:[bx+50h], ax
                jmp     short loc_E3E0
; ---------------------------------------------------------------------------

loc_E37E:                               ; CODE XREF: sub_E15F+100↑j
                                        ; sub_E15F+10A↑j
                push    [bp+var_2]
                push    [bp+var_4]
                push    ds
                push    offset aLd_1    ; "%ld"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                push    358h
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8
                jmp     short loc_E3E0
; ---------------------------------------------------------------------------

loc_E3A9:                               ; CODE XREF: sub_E15F+6E↑j
                push    356h
                jmp     short loc_E3CE
; ---------------------------------------------------------------------------

loc_E3AE:                               ; CODE XREF: sub_E15F+54↑j
                push    seg dseg19
                push    offset byte_29FDB
                push    3C1h
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8
                jmp     short loc_E3E0
; ---------------------------------------------------------------------------

loc_E3CB:                               ; CODE XREF: sub_E15F+3A↑j
                push    352h

loc_E3CE:                               ; CODE XREF: sub_E15F+24D↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4

loc_E3E0:                               ; CODE XREF: sub_E15F+2A↑j
                                        ; sub_E15F+15C↑j ...
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_E15F        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_E3E5        proc far                ; DATA XREF: dseg19:01E2↓o

var_134         = byte ptr -134h
var_6C          = byte ptr -6Ch
var_8           = word ptr -8
var_6           = word ptr -6
var_4           = word ptr -4
var_2           = word ptr -2

                enter   134h, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg12
                mov     ds, ax
                assume ds:dseg12
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29778, 3Dh ; '='
                xor     si, si
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AED3, 1
                jg      short loc_E40F
                jmp     loc_E665
; ---------------------------------------------------------------------------

loc_E40F:                               ; CODE XREF: sub_E3E5+25↑j
                push    ds
                push    offset aCredits ; "credits"
                push    seg dseg19
                push    offset byte_29FDB
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_E430
                nop
                push    cs
                call    near ptr sub_1374B

loc_E42A:                               ; CODE XREF: sub_E3E5+66↓j
                mov     si, 1
                jmp     loc_E665
; ---------------------------------------------------------------------------

loc_E430:                               ; CODE XREF: sub_E3E5+3E↑j
                push    ds
                push    offset aIons    ; "ions"
                push    seg dseg19
                push    offset byte_29FDB
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_E44D
                nop
                push    cs
                call    near ptr sub_13992
                jmp     short loc_E42A
; ---------------------------------------------------------------------------

loc_E44D:                               ; CODE XREF: sub_E3E5+5F↑j
                push    ds
                push    offset aStore   ; "store"
                push    seg dseg19
                push    offset byte_29FDB
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jnz     short loc_E466
                jmp     loc_E665
; ---------------------------------------------------------------------------

loc_E466:                               ; CODE XREF: sub_E3E5+7C↑j
                mov     si, 1
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_29BF6, 2
                jz      short loc_E479
                jmp     loc_E650
; ---------------------------------------------------------------------------

loc_E479:                               ; CODE XREF: sub_E3E5+8F↑j
                push    0
                call    sub_158D5
                pop     cx
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+92h]
                mov     dx, es:[bx+90h]
                mov     bx, seg dseg19
                mov     es, bx
                assume es:dseg19
                cmp     ax, es:word_29BCA
                jnb     short loc_E4A4
                jmp     loc_E61C
; ---------------------------------------------------------------------------

loc_E4A4:                               ; CODE XREF: sub_E3E5+BA↑j
                jnz     short loc_E4B0
                cmp     dx, es:word_29BC8
                jnb     short loc_E4B0
                jmp     loc_E61C
; ---------------------------------------------------------------------------

loc_E4B0:                               ; CODE XREF: sub_E3E5:loc_E4A4↑j
                                        ; sub_E3E5+C6↑j
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+92h]
                mov     dx, es:[bx+90h]
                mov     bx, seg dseg19
                mov     es, bx
                assume es:dseg19
                sub     dx, es:word_29BC8
                sbb     ax, es:word_29BCA
                mov     bx, seg dseg19
                mov     es, bx
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     es:[bx+92h], ax
                mov     es:[bx+90h], dx
                push    ds
                push    offset aForSale_1 ; "FOR SALE"
                push    seg dseg19
                push    offset unk_29B4A
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_E500
                jmp     loc_E598
; ---------------------------------------------------------------------------

loc_E500:                               ; CODE XREF: sub_E3E5+116↑j
                push    0
                push    0C8h
                push    ss
                lea     ax, [bp+var_134]
                push    ax
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    ds
                push    offset aSHasPurchasedO ; "%s has purchased one of your stores!"
                push    ss
                lea     ax, [bp+var_134]
                push    ax
                call    SPRINTF         ; int sprintf(char *str, const char *format, ... );
                add     sp, 0Ch
                push    0
                push    0
                push    ss
                lea     ax, [bp+var_134]
                push    ax
                push    seg dseg19
                push    offset unk_29B4A
                call    sub_18770
                add     sp, 0Ch
                push    64h ; 'd'
                push    ds
                push    offset aPost_0  ; "POST"
                push    ss
                lea     ax, [bp+var_6C]
                push    ax
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29BCA
                push    es:word_29BC8
                push    ss
                lea     ax, [bp+var_6C]
                push    ax
                push    seg dseg19
                push    offset unk_29B4A
                call    sub_18770
                add     sp, 0Ch
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29880
                push    es:word_2987E
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4

loc_E598:                               ; CODE XREF: sub_E3E5+118↑j
                push    1Eh
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    seg dseg19
                push    offset unk_29B4A
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                push    seg dseg19
                push    offset byte_29B40
                call    UPDBTV          ; void updbtv(char *recptr);
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29BF6, 1
                push    0
                push    32h ; '2'
                push    seg dseg19
                push    offset unk_29C3C
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                push    ds
                push    offset aStoreOwnedBy ; "STORE OWNED BY "
                push    seg dseg19
                push    offset unk_29C3C
                call    STRCAT          ; char *strcat(char *destination, const char *source );
                add     sp, 8
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    seg dseg19
                push    offset unk_29C3C
                call    STRCAT          ; char *strcat(char *destination, const char *source );
                add     sp, 8
                call    sub_15DD6
                push    364h
                jmp     short loc_E653
; ---------------------------------------------------------------------------

loc_E61C:                               ; CODE XREF: sub_E3E5+BC↑j
                                        ; sub_E3E5+C8↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29BCA
                push    es:word_29BC8
                push    ds
                push    offset aLd_1    ; "%ld"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                push    359h
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8
                jmp     short loc_E665
; ---------------------------------------------------------------------------

loc_E650:                               ; CODE XREF: sub_E3E5+91↑j
                push    365h

loc_E653:                               ; CODE XREF: sub_E3E5+235↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4

loc_E665:                               ; CODE XREF: sub_E3E5+27↑j
                                        ; sub_E3E5+48↑j ...
                or      si, si
                jz      short loc_E66C
                jmp     loc_EBC5
; ---------------------------------------------------------------------------

loc_E66C:                               ; CODE XREF: sub_E3E5+282↑j
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_29BF6, 1
                jz      short loc_E67C
                jmp     loc_EB9C
; ---------------------------------------------------------------------------

loc_E67C:                               ; CODE XREF: sub_E3E5+292↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29880
                push    es:word_2987E
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    37h ; '7'
                push    0
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    seg dseg19
                push    offset byte_29B40
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     es:word_2AED3, 1
                jg      short loc_E6FA
                jmp     loc_EAA5
; ---------------------------------------------------------------------------

loc_E6FA:                               ; CODE XREF: sub_E3E5+310↑j
                push    seg dseg19
                push    offset byte_29FDB
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                mov     di, ax
                or      di, di
                jg      short loc_E711
                jmp     loc_EA9F
; ---------------------------------------------------------------------------

loc_E711:                               ; CODE XREF: sub_E3E5+327↑j
                cmp     di, 15h
                jl      short loc_E719
                jmp     loc_EA9F
; ---------------------------------------------------------------------------

loc_E719:                               ; CODE XREF: sub_E3E5+32F↑j
                dec     di
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                cmp     word ptr es:[bx+1878h], 0FFFFh
                jg      short loc_E72E
                jmp     loc_EA9F
; ---------------------------------------------------------------------------

loc_E72E:                               ; CODE XREF: sub_E3E5+344↑j
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:[bx+1878h]
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:[bx+18A0h]
                nop
                push    cs
                call    near ptr sub_13CF8
                add     sp, 4
                mov     [bp+var_6], dx
                mov     [bp+var_8], ax
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+92h]
                mov     dx, es:[bx+90h]
                cmp     ax, [bp+var_6]
                jnb     short loc_E774
                jmp     loc_EA73
; ---------------------------------------------------------------------------

loc_E774:                               ; CODE XREF: sub_E3E5+38A↑j
                jnz     short loc_E77E
                cmp     dx, [bp+var_8]
                jnb     short loc_E77E
                jmp     loc_EA73
; ---------------------------------------------------------------------------

loc_E77E:                               ; CODE XREF: sub_E3E5:loc_E774↑j
                                        ; sub_E3E5+394↑j
                mov     [bp+var_4], 0FFFFh
                xor     si, si

loc_E785:                               ; CODE XREF: sub_E3E5+3C1↓j
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+3Ch], 0FFFFh
                jnz     short loc_E7A2
                mov     [bp+var_4], si
                mov     si, 6

loc_E7A2:                               ; CODE XREF: sub_E3E5+3B5↑j
                inc     si
                cmp     si, 6
                jl      short loc_E785
                cmp     [bp+var_4], 0FFFFh
                jg      short loc_E7B1
                jmp     loc_EA6D
; ---------------------------------------------------------------------------

loc_E7B1:                               ; CODE XREF: sub_E3E5+3C7↑j
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:[bx+1878h]
                mov     dx, [bp+var_4]
                shl     dx, 1
                mov     bx, seg dseg19
                mov     es, bx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, dx
                mov     es:[bx+3Ch], ax
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:[bx+18A0h]
                mov     dx, [bp+var_4]
                shl     dx, 1
                mov     bx, seg dseg19
                mov     es, bx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, dx
                mov     es:[bx+50h], ax
                mov     ax, [bp+var_4]
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29BDA
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+28h]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     es:[bx+0CCh], ax
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     word ptr es:[bx+1878h], 0FFFFh
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                mov     word ptr es:[bx+18A0h], 0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:word_29BC2
                mov     dx, es:word_29BC0
                add     dx, [bp+var_8]
                adc     ax, [bp+var_6]
                mov     bx, seg dseg19
                mov     es, bx
                mov     es:word_29BC2, ax
                mov     es:word_29BC0, dx
                push    seg dseg19
                push    offset byte_29B40
                call    UPDBTV          ; void updbtv(char *recptr);
                add     sp, 4
                mov     ax, [bp+var_4]
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                push    [bp+var_6]
                push    [bp+var_8]
                push    ds
                push    offset aLd_1    ; "%ld"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                push    35Fh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 0Ch
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+92h]
                mov     dx, es:[bx+90h]
                sub     dx, [bp+var_8]
                sbb     ax, [bp+var_6]
                mov     bx, seg dseg19
                mov     es, bx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     es:[bx+92h], ax
                mov     es:[bx+90h], dx
                push    0
                push    0C8h
                push    ss
                lea     ax, [bp+var_134]
                push    ax
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                push    [bp+var_6]
                push    [bp+var_8]
                mov     ax, [bp+var_4]
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    ds
                push    offset aSPurchasedASFo ; "%s purchased a %s for $ %ld!"
                push    ss
                lea     ax, [bp+var_134]
                push    ax
                call    SPRINTF         ; int sprintf(char *str, const char *format, ... );
                add     sp, 14h
                push    0FFFFh
                push    0FFF6h
                push    ss
                lea     ax, [bp+var_134]
                push    ax
                push    seg dseg19
                push    offset unk_29B4A
                call    sub_18770
                add     sp, 0Ch
                mov     ax, [bp+var_4]
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29BDA
                assume es:nothing
                add     bx, ax
                mov     ax, seg dseg19
                push    es
                mov     es, ax
                assume es:dseg19
                les     si, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[si+32h]
                imul    ax, 0Ah
                pop     es
                cmp     es:[bx+28h], ax
                jg      short loc_E9C1
                jmp     loc_EBC5
; ---------------------------------------------------------------------------

loc_E9C1:                               ; CODE XREF: sub_E3E5+5D7↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_2AED5
                mov     dx, seg dseg19
                mov     es, dx
                cmp     ax, es:word_2AED1
                jl      short loc_E9D9
                jmp     loc_EBC5
; ---------------------------------------------------------------------------

loc_E9D9:                               ; CODE XREF: sub_E3E5+5EF↑j
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+32h], 3Ch ; '<'
                jl      short loc_E9ED
                jmp     loc_EBC5
; ---------------------------------------------------------------------------

loc_E9ED:                               ; CODE XREF: sub_E3E5+603↑j
                push    ds
                push    offset aItSTooHeavyToC ; "It's too heavy to carry!\r"
                call    PRF             ; prf(string);
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_17567
                pop     cx
                push    0Ah
                push    ds
                push    offset aDrop_0  ; "drop"
                push    seg dseg19
                push    offset byte_29F13
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                push    14h
                mov     ax, [bp+var_4]
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                push    seg dseg19
                push    offset byte_29FDB
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_2AED3, 2
                push    cs
                call    near ptr sub_B378
                jmp     loc_EBC5
; ---------------------------------------------------------------------------

loc_EA6D:                               ; CODE XREF: sub_E3E5+3C9↑j
                push    360h
                jmp     loc_EBB3
; ---------------------------------------------------------------------------

loc_EA73:                               ; CODE XREF: sub_E3E5+38C↑j
                                        ; sub_E3E5+396↑j
                push    [bp+var_6]
                push    [bp+var_8]
                push    ds
                push    offset aLd_1    ; "%ld"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                push    358h
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8
                jmp     loc_EBC5
; ---------------------------------------------------------------------------

loc_EA9F:                               ; CODE XREF: sub_E3E5+329↑j
                                        ; sub_E3E5+331↑j ...
                push    361h
                jmp     loc_EBB3
; ---------------------------------------------------------------------------

loc_EAA5:                               ; CODE XREF: sub_E3E5+312↑j
                mov     [bp+var_2], 0
                xor     di, di
                xor     si, si

loc_EAAE:                               ; CODE XREF: sub_E3E5+78B↓j
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                cmp     word ptr es:[bx+1878h], 0FFFFh
                jg      short loc_EAC2
                jmp     loc_EB6A
; ---------------------------------------------------------------------------

loc_EAC2:                               ; CODE XREF: sub_E3E5+6D8↑j
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:[bx+1878h]
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:[bx+18A0h]
                nop
                push    cs
                call    near ptr sub_13CF8
                add     sp, 4
                mov     [bp+var_6], dx
                mov     [bp+var_8], ax
                cmp     [bp+var_2], 0
                jnz     short loc_EB07
                push    35Eh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4

loc_EB07:                               ; CODE XREF: sub_E3E5+70B↑j
                push    [bp+var_6]
                push    [bp+var_8]
                push    ds
                push    offset aLd_1    ; "%ld"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:[bx+1878h]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                mov     ax, si
                inc     ax
                push    ax
                push    ds
                push    offset a2d20s10s ; "%2d. %-20s $ %-10s"
                call    PRF             ; prf(string);
                add     sp, 0Eh
                mov     [bp+var_2], 1
                inc     di
                cmp     di, 1
                jle     short loc_EB6A
                push    ds
                push    (offset aYouGetThrownBa+14h) ; "\r"
                call    PRF             ; prf(string);
                add     sp, 4
                xor     di, di

loc_EB6A:                               ; CODE XREF: sub_E3E5+6DA↑j
                                        ; sub_E3E5+775↑j
                inc     si
                cmp     si, 14h
                jge     short loc_EB73
                jmp     loc_EAAE
; ---------------------------------------------------------------------------

loc_EB73:                               ; CODE XREF: sub_E3E5+789↑j
                cmp     [bp+var_2], 0
                jnz     short loc_EB7E
                push    362h
                jmp     short loc_EBB3
; ---------------------------------------------------------------------------

loc_EB7E:                               ; CODE XREF: sub_E3E5+792↑j
                push    ds
                push    (offset aYouGetThrownBa+14h) ; "\r"
                call    PRF             ; prf(string);
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_17567
                pop     cx
                jmp     short loc_EBC5
; ---------------------------------------------------------------------------

loc_EB9C:                               ; CODE XREF: sub_E3E5+294↑j
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_29BF6, 2
                jnz     short loc_EBB0
                call    sub_15CFA
                jmp     short loc_EBC5
; ---------------------------------------------------------------------------

loc_EBB0:                               ; CODE XREF: sub_E3E5+7C2↑j
                push    352h

loc_EBB3:                               ; CODE XREF: sub_E3E5+68B↑j
                                        ; sub_E3E5+6BD↑j ...
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4

loc_EBC5:                               ; CODE XREF: sub_E3E5+284↑j
                                        ; sub_E3E5+5D9↑j ...
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_E3E5        endp


; =============== S U B R O U T I N E =======================================


sub_EBCA        proc far                ; DATA XREF: dseg19:06B0↓o
                push    si
                push    di
                push    ds
                mov     ax, seg dseg12
                mov     ds, ax
                assume ds:dseg12
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29778, 3Eh ; '>'
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29880
                push    es:word_2987E
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                xor     si, si
                push    37h ; '7'
                push    0
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jnz     short loc_EC3E
                jmp     loc_ED72
; ---------------------------------------------------------------------------

loc_EC3E:                               ; CODE XREF: sub_EBCA+6F↑j
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    seg dseg19
                push    offset byte_29B40
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    seg dseg19
                push    offset unk_29B4A
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jnz     short loc_EC79
                jmp     loc_ED72
; ---------------------------------------------------------------------------

loc_EC79:                               ; CODE XREF: sub_EBCA+AA↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29864
                push    es:word_29862
                call    SETMBK          ; FILE *setmbk(mbkptr);
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29BC6
                push    es:word_29BC4
                push    ds
                push    offset aLd_1    ; "%ld"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29BC2
                push    es:word_29BC0
                push    ds
                push    offset aLd_1    ; "%ld"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29BBE
                push    es:word_29BBC
                push    ds
                push    offset aLd_1    ; "%ld"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29BBA
                push    es:word_29BB8
                push    ds
                push    offset aLd_1    ; "%ld"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                push    367h
                call    PRFMSG          ; prfmsg(msgnum,p1,p2, ..• ,pn);
                add     sp, 12h
                mov     ax, seg dseg19
                mov     es, ax
                mov     cx, es:word_29BC6
                mov     bx, es:word_29BC4
                xor     dx, dx
                mov     ax, 32h ; '2'
                call    F_LXMUL
                push    dx
                push    ax
                push    ds
                push    offset aLd_1    ; "%ld"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29BCE
                push    es:word_29BCC
                push    ds
                push    offset aLd_1    ; "%ld"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                push    368h
                call    PRFMSG          ; prfmsg(msgnum,p1,p2, ..• ,pn);
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_17567
                pop     cx
                jmp     short loc_ED75
; ---------------------------------------------------------------------------

loc_ED72:                               ; CODE XREF: sub_EBCA+71↑j
                                        ; sub_EBCA+AC↑j
                mov     si, 1

loc_ED75:                               ; CODE XREF: sub_EBCA+1A6↑j
                cmp     si, 1
                jz      short loc_ED7D
                jmp     loc_EF4D
; ---------------------------------------------------------------------------

loc_ED7D:                               ; CODE XREF: sub_EBCA+1AE↑j
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_29BF6, 2
                jz      short loc_ED8D
                jmp     loc_EF38
; ---------------------------------------------------------------------------

loc_ED8D:                               ; CODE XREF: sub_EBCA+1BE↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29880
                push    es:word_2987E
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    37h ; '7'
                push    0
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jnz     short loc_EDEB
                jmp     loc_EF38
; ---------------------------------------------------------------------------

loc_EDEB:                               ; CODE XREF: sub_EBCA+21C↑j
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    seg dseg19
                push    offset byte_29B40
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_29BC6
                push    es:word_29BC4
                push    ds
                push    offset aLd_1    ; "%ld"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                mov     ax, seg dseg19
                mov     es, ax
                mov     cx, es:word_29BC6
                mov     bx, es:word_29BC4
                xor     dx, dx
                mov     ax, 32h ; '2'
                call    F_LXMUL
                push    dx
                push    ax
                push    ds
                push    offset aLd_1    ; "%ld"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29BCA
                push    es:word_29BC8
                push    ds
                push    offset aLd_1    ; "%ld"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                push    36Eh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 10h
                push    ds
                push    offset aForSale_1 ; "FOR SALE"
                push    seg dseg19
                push    offset unk_29B4A
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jnz     short loc_EEA4
                push    seg dseg19
                push    offset unk_29B4A
                push    ds
                push    offset aOwnedByS ; "Owned By       : %s\r"
                call    PRF             ; prf(string);
                add     sp, 8
                jmp     short loc_EEB0
; ---------------------------------------------------------------------------

loc_EEA4:                               ; CODE XREF: sub_EBCA+2C4↑j
                push    ds
                push    offset aOwnedByVillage ; "Owned By       : VILLAGE\r"
                call    PRF             ; prf(string);
                add     sp, 4

loc_EEB0:                               ; CODE XREF: sub_EBCA+2D8↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_17567
                pop     cx
                xor     si, si
                xor     di, di

loc_EEC4:                               ; CODE XREF: sub_EBCA+355↓j
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                cmp     word ptr es:[bx+1878h], 0FFFFh
                jle     short loc_EF1B
                or      si, si
                jnz     short loc_EEE2
                push    3F0h
                call    sub_15C18
                pop     cx

loc_EEE2:                               ; CODE XREF: sub_EBCA+30D↑j
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:[bx+1878h]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                mov     ax, di
                inc     ax
                push    ax
                push    ds
                push    offset aDS      ; "%d. %s\r"
                call    PRF             ; prf(string);
                add     sp, 0Ah
                mov     si, 1

loc_EF1B:                               ; CODE XREF: sub_EBCA+309↑j
                inc     di
                cmp     di, 14h
                jl      short loc_EEC4
                cmp     si, 1
                jnz     short loc_EF4D
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_17567
                pop     cx
                jmp     short loc_EF4D
; ---------------------------------------------------------------------------

loc_EF38:                               ; CODE XREF: sub_EBCA+1C0↑j
                                        ; sub_EBCA+21E↑j
                push    366h
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4

loc_EF4D:                               ; CODE XREF: sub_EBCA+1B0↑j
                                        ; sub_EBCA+35A↑j ...
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                retf
sub_EBCA        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_EF51        proc far                ; DATA XREF: dseg19:08EA↓o

var_2           = word ptr -2

                enter   2, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg12
                mov     ds, ax
                assume ds:dseg12
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29778, 3Fh ; '?'
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AED3, 2
                jge     short loc_EF7E
                call    sub_15CFA
                jmp     loc_F193
; ---------------------------------------------------------------------------

loc_EF7E:                               ; CODE XREF: sub_EF51+23↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29880
                push    es:word_2987E
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    37h ; '7'
                push    0
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jnz     short loc_EFDC
                jmp     loc_F17E
; ---------------------------------------------------------------------------

loc_EFDC:                               ; CODE XREF: sub_EF51+86↑j
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    seg dseg19
                push    offset byte_29B40
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    seg dseg19
                push    offset unk_29B4A
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jnz     short loc_F017
                jmp     loc_F179
; ---------------------------------------------------------------------------

loc_F017:                               ; CODE XREF: sub_EF51+C1↑j
                push    2
                push    seg dseg19
                push    offset byte_29FDB
                call    sub_1609C
                add     sp, 6
                mov     di, ax
                cmp     di, 0FFFFh
                jg      short loc_F031
                jmp     loc_F15C
; ---------------------------------------------------------------------------

loc_F031:                               ; CODE XREF: sub_EF51+DB↑j
                mov     [bp+var_2], 0FFFFh
                xor     dx, dx

loc_F038:                               ; CODE XREF: sub_EF51+102↓j
                mov     bx, dx
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                cmp     word ptr es:[bx+1878h], 0FFFFh
                jnz     short loc_F04F
                mov     [bp+var_2], dx
                mov     dx, 14h

loc_F04F:                               ; CODE XREF: sub_EF51+F6↑j
                inc     dx
                cmp     dx, 14h
                jl      short loc_F038
                cmp     [bp+var_2], 0FFFFh
                jg      short loc_F05E
                jmp     loc_F157
; ---------------------------------------------------------------------------

loc_F05E:                               ; CODE XREF: sub_EF51+108↑j
                mov     bx, [bp+var_2]
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, di
                shl     dx, 1
                mov     cx, seg dseg19
                mov     es, cx
                les     si, es:dword_29DD4
                assume es:nothing
                add     si, dx
                mov     dx, es:[si+3Ch]
                mov     es, ax
                assume es:dseg19
                mov     es:[bx+1878h], dx
                mov     bx, [bp+var_2]
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, di
                shl     dx, 1
                mov     cx, seg dseg19
                mov     es, cx
                les     si, es:dword_29DD4
                assume es:nothing
                add     si, dx
                mov     dx, es:[si+50h]
                mov     es, ax
                assume es:dseg19
                mov     es:[bx+18A0h], dx
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29BDA
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+28h]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                sub     es:[bx+0CCh], ax
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                push    3F1h
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8
                push    seg dseg19
                push    offset byte_29B40
                call    UPDBTV          ; void updbtv(char *recptr);
                add     sp, 4
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     word ptr es:[bx+3Ch], 0FFFFh
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     word ptr es:[bx+50h], 0FFFFh
                jmp     short loc_F193
; ---------------------------------------------------------------------------

loc_F157:                               ; CODE XREF: sub_EF51+10A↑j
                push    3F2h
                jmp     short loc_F181
; ---------------------------------------------------------------------------

loc_F15C:                               ; CODE XREF: sub_EF51+DD↑j
                push    seg dseg19
                push    offset byte_29FDB
                push    3C1h
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8
                jmp     short loc_F193
; ---------------------------------------------------------------------------

loc_F179:                               ; CODE XREF: sub_EF51+C3↑j
                push    369h
                jmp     short loc_F181
; ---------------------------------------------------------------------------

loc_F17E:                               ; CODE XREF: sub_EF51+88↑j
                push    352h

loc_F181:                               ; CODE XREF: sub_EF51+209↑j
                                        ; sub_EF51+22B↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4

loc_F193:                               ; CODE XREF: sub_EF51+2A↑j
                                        ; sub_EF51+204↑j ...
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_EF51        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_F198        proc far                ; DATA XREF: dseg19:09F8↓o

var_2           = word ptr -2

                enter   2, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg12
                mov     ds, ax
                assume ds:dseg12
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29778, 40h ; '@'
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29880
                push    es:word_2987E
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    37h ; '7'
                push    0
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jnz     short loc_F20E
                jmp     loc_F462
; ---------------------------------------------------------------------------

loc_F20E:                               ; CODE XREF: sub_F198+71↑j
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    seg dseg19
                push    offset byte_29B40
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    seg dseg19
                push    offset unk_29B4A
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jnz     short loc_F249
                jmp     loc_F45D
; ---------------------------------------------------------------------------

loc_F249:                               ; CODE XREF: sub_F198+AC↑j
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AED3, 2
                jl      short loc_F259
                jmp     loc_F2FA
; ---------------------------------------------------------------------------

loc_F259:                               ; CODE XREF: sub_F198+BC↑j
                xor     si, si
                mov     [bp+var_2], 0
                push    ds
                push    offset aStockReport ; "Stock Report\r------------\r"
                call    PRF             ; prf(string);
                add     sp, 4
                xor     di, di

loc_F26E:                               ; CODE XREF: sub_F198+13A↓j
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                cmp     word ptr es:[bx+1878h], 0FFFFh
                jle     short loc_F2CE
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:[bx+1878h]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                mov     ax, di
                inc     ax
                push    ax
                push    ds
                push    offset a2d20s   ; "%2d. %-20s"
                call    PRF             ; prf(string);
                add     sp, 0Ah
                mov     [bp+var_2], 1
                inc     si
                cmp     si, 2
                jle     short loc_F2CE
                push    ds
                push    (offset aYouGetThrownBa+14h) ; "\r"
                call    PRF             ; prf(string);
                add     sp, 4
                xor     si, si

loc_F2CE:                               ; CODE XREF: sub_F198+E5↑j
                                        ; sub_F198+126↑j
                inc     di
                cmp     di, 14h
                jl      short loc_F26E
                cmp     [bp+var_2], 0
                jnz     short loc_F2E6
                push    ds
                push    offset aNoInventory ; "No inventory."
                call    PRF             ; prf(string);
                add     sp, 4

loc_F2E6:                               ; CODE XREF: sub_F198+140↑j
                push    ds
                push    offset asc_24EA3 ; "\r\r"
                call    PRF             ; prf(string);
                add     sp, 4

loc_F2F2:                               ; CODE XREF: sub_F198+174↓j
                                        ; sub_F198+179↓j ...
                call    sub_15CFA
                jmp     loc_F477
; ---------------------------------------------------------------------------

loc_F2FA:                               ; CODE XREF: sub_F198+BE↑j
                push    seg dseg19
                push    offset byte_29FDB
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                mov     si, ax
                or      si, si
                jle     short loc_F2F2
                cmp     si, 15h
                jge     short loc_F2F2
                dec     si
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                cmp     word ptr es:[bx+1878h], 0FFFFh
                jg      short loc_F328
                jmp     loc_F43D
; ---------------------------------------------------------------------------

loc_F328:                               ; CODE XREF: sub_F198+18B↑j
                mov     [bp+var_2], 0FFFFh
                xor     di, di

loc_F32F:                               ; CODE XREF: sub_F198+1B8↓j
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+3Ch], 0FFFFh
                jnz     short loc_F34C
                mov     [bp+var_2], di
                mov     di, 0Ah

loc_F34C:                               ; CODE XREF: sub_F198+1AC↑j
                inc     di
                cmp     di, 0Ah
                jl      short loc_F32F
                cmp     [bp+var_2], 0FFFFh
                jg      short loc_F35B
                jmp     loc_F438
; ---------------------------------------------------------------------------

loc_F35B:                               ; CODE XREF: sub_F198+1BE↑j
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:[bx+1878h]
                mov     dx, [bp+var_2]
                shl     dx, 1
                mov     bx, seg dseg19
                mov     es, bx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, dx
                mov     es:[bx+3Ch], ax
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:[bx+18A0h]
                mov     dx, [bp+var_2]
                shl     dx, 1
                mov     bx, seg dseg19
                mov     es, bx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, dx
                mov     es:[bx+50h], ax
                mov     ax, [bp+var_2]
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29BDA
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+28h]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     es:[bx+0CCh], ax
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     word ptr es:[bx+1878h], 0FFFFh
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                mov     word ptr es:[bx+18A0h], 0FFFFh
                push    seg dseg19
                push    offset byte_29B40
                call    UPDBTV          ; void updbtv(char *recptr);
                add     sp, 4
                mov     ax, [bp+var_2]
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                push    3F3h
                jmp     short loc_F446
; ---------------------------------------------------------------------------

loc_F438:                               ; CODE XREF: sub_F198+1C0↑j
                push    3F4h
                jmp     short loc_F465
; ---------------------------------------------------------------------------

loc_F43D:                               ; CODE XREF: sub_F198+18D↑j
                push    seg dseg19
                push    offset byte_29FDB
                push    3F5h

loc_F446:                               ; CODE XREF: sub_F198+29E↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8
                jmp     short loc_F477
; ---------------------------------------------------------------------------
                jmp     loc_F2F2
; ---------------------------------------------------------------------------

loc_F45D:                               ; CODE XREF: sub_F198+AE↑j
                push    369h
                jmp     short loc_F465
; ---------------------------------------------------------------------------

loc_F462:                               ; CODE XREF: sub_F198+73↑j
                push    352h

loc_F465:                               ; CODE XREF: sub_F198+2A3↑j
                                        ; sub_F198+2C8↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4

loc_F477:                               ; CODE XREF: sub_F198+15F↑j
                                        ; sub_F198+2C0↑j
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_F198        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_F47C        proc far                ; DATA XREF: dseg19:0584↓o

var_4           = word ptr -4
var_2           = word ptr -2

                enter   4, 0
                push    ds
                mov     ax, seg dseg12
                mov     ds, ax
                assume ds:dseg12
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29778, 41h ; 'A'
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29880
                push    es:word_2987E
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    37h ; '7'
                push    0
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jnz     short loc_F4F0
                jmp     loc_F5CB
; ---------------------------------------------------------------------------

loc_F4F0:                               ; CODE XREF: sub_F47C+6F↑j
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    seg dseg19
                push    offset byte_29B40
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    seg dseg19
                push    offset unk_29B4A
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jnz     short loc_F52B
                jmp     loc_F5CB
; ---------------------------------------------------------------------------

loc_F52B:                               ; CODE XREF: sub_F47C+AA↑j
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AED3, 1
                jge     short loc_F540
                call    sub_15CFA
                jmp     loc_F5E0
; ---------------------------------------------------------------------------

loc_F540:                               ; CODE XREF: sub_F47C+BA↑j
                push    seg dseg19
                push    offset byte_29FDB
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                mov     [bp+var_2], dx
                mov     [bp+var_4], ax
                cmp     [bp+var_2], 0FFFFh
                jl      short loc_F572
                jnz     short loc_F563
                cmp     [bp+var_4], 0F448h
                jb      short loc_F572

loc_F563:                               ; CODE XREF: sub_F47C+DE↑j
                cmp     [bp+var_2], 0
                jl      short loc_F577
                jg      short loc_F572
                cmp     [bp+var_4], 0BB8h
                jbe     short loc_F577

loc_F572:                               ; CODE XREF: sub_F47C+DC↑j
                                        ; sub_F47C+E5↑j ...
                push    3F6h
                jmp     short loc_F5CE
; ---------------------------------------------------------------------------

loc_F577:                               ; CODE XREF: sub_F47C+EB↑j
                                        ; sub_F47C+F4↑j
                mov     ax, seg dseg19
                mov     dx, [bp+var_2]
                mov     bx, [bp+var_4]
                mov     es, ax
                mov     es:word_29BBA, dx
                mov     es:word_29BB8, bx
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29BBA
                push    es:word_29BB8
                push    ds
                push    offset aLd_1    ; "%ld"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                push    3F7h
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8
                push    seg dseg19
                push    offset byte_29B40
                call    UPDBTV          ; void updbtv(char *recptr);
                jmp     short loc_F5DD
; ---------------------------------------------------------------------------

loc_F5CB:                               ; CODE XREF: sub_F47C+71↑j
                                        ; sub_F47C+AC↑j
                push    369h

loc_F5CE:                               ; CODE XREF: sub_F47C+F9↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E

loc_F5DD:                               ; CODE XREF: sub_F47C+14D↑j
                add     sp, 4

loc_F5E0:                               ; CODE XREF: sub_F47C+C1↑j
                pop     ds
                assume ds:dseg21
                leave
                retf
sub_F47C        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_F5E3        proc far                ; DATA XREF: dseg19:0566↓o

var_4           = word ptr -4
var_2           = word ptr -2

                enter   4, 0
                push    ds
                mov     ax, seg dseg12
                mov     ds, ax
                assume ds:dseg12
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29778, 42h ; 'B'
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29880
                push    es:word_2987E
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    37h ; '7'
                push    0
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jnz     short loc_F657
                jmp     loc_F732
; ---------------------------------------------------------------------------

loc_F657:                               ; CODE XREF: sub_F5E3+6F↑j
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    seg dseg19
                push    offset byte_29B40
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    seg dseg19
                push    offset unk_29B4A
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jnz     short loc_F692
                jmp     loc_F732
; ---------------------------------------------------------------------------

loc_F692:                               ; CODE XREF: sub_F5E3+AA↑j
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AED3, 1
                jge     short loc_F6A7
                call    sub_15CFA
                jmp     loc_F747
; ---------------------------------------------------------------------------

loc_F6A7:                               ; CODE XREF: sub_F5E3+BA↑j
                push    seg dseg19
                push    offset byte_29FDB
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                mov     [bp+var_2], dx
                mov     [bp+var_4], ax
                cmp     [bp+var_2], 0FFFFh
                jl      short loc_F6D9
                jnz     short loc_F6CA
                cmp     [bp+var_4], 0F448h
                jb      short loc_F6D9

loc_F6CA:                               ; CODE XREF: sub_F5E3+DE↑j
                cmp     [bp+var_2], 0
                jl      short loc_F6DE
                jg      short loc_F6D9
                cmp     [bp+var_4], 0BB8h
                jbe     short loc_F6DE

loc_F6D9:                               ; CODE XREF: sub_F5E3+DC↑j
                                        ; sub_F5E3+E5↑j ...
                push    3F6h
                jmp     short loc_F735
; ---------------------------------------------------------------------------

loc_F6DE:                               ; CODE XREF: sub_F5E3+EB↑j
                                        ; sub_F5E3+F4↑j
                mov     ax, seg dseg19
                mov     dx, [bp+var_2]
                mov     bx, [bp+var_4]
                mov     es, ax
                mov     es:word_29BBE, dx
                mov     es:word_29BBC, bx
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29BBE
                push    es:word_29BBC
                push    ds
                push    offset aLd_1    ; "%ld"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                push    3F8h
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8
                push    seg dseg19
                push    offset byte_29B40
                call    UPDBTV          ; void updbtv(char *recptr);
                jmp     short loc_F744
; ---------------------------------------------------------------------------

loc_F732:                               ; CODE XREF: sub_F5E3+71↑j
                                        ; sub_F5E3+AC↑j
                push    369h

loc_F735:                               ; CODE XREF: sub_F5E3+F9↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E

loc_F744:                               ; CODE XREF: sub_F5E3+14D↑j
                add     sp, 4

loc_F747:                               ; CODE XREF: sub_F5E3+C1↑j
                pop     ds
                assume ds:dseg21
                leave
                retf
sub_F5E3        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_F74A        proc far                ; DATA XREF: dseg19:0AAC↓o

var_8           = word ptr -8
var_6           = word ptr -6
var_4           = word ptr -4
var_2           = word ptr -2

                enter   8, 0
                push    ds
                mov     ax, seg dseg12
                mov     ds, ax
                assume ds:dseg12
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29778, 43h ; 'C'
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29880
                push    es:word_2987E
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    37h ; '7'
                push    0
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jnz     short loc_F7BE
                jmp     loc_F8E6
; ---------------------------------------------------------------------------

loc_F7BE:                               ; CODE XREF: sub_F74A+6F↑j
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    seg dseg19
                push    offset byte_29B40
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    seg dseg19
                push    offset unk_29B4A
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jnz     short loc_F7F9
                jmp     loc_F8E6
; ---------------------------------------------------------------------------

loc_F7F9:                               ; CODE XREF: sub_F74A+AA↑j
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AED3, 1
                jge     short loc_F80E
                call    sub_15CFA
                jmp     loc_F8FB
; ---------------------------------------------------------------------------

loc_F80E:                               ; CODE XREF: sub_F74A+BA↑j
                push    seg dseg19
                push    offset byte_29FDB
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                mov     [bp+var_2], dx
                mov     [bp+var_4], ax
                cmp     [bp+var_2], 0
                jg      short loc_F83A
                jl      short loc_F830
                cmp     [bp+var_4], 0
                jnb     short loc_F83A

loc_F830:                               ; CODE XREF: sub_F74A+DE↑j
                mov     [bp+var_2], 0
                mov     [bp+var_4], 0

loc_F83A:                               ; CODE XREF: sub_F74A+DC↑j
                                        ; sub_F74A+E4↑j
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:word_29BC2
                mov     [bp+var_6], ax
                mov     dx, es:word_29BC0
                mov     [bp+var_8], dx
                cmp     ax, [bp+var_2]
                jnb     short loc_F856
                jmp     loc_F8E1
; ---------------------------------------------------------------------------

loc_F856:                               ; CODE XREF: sub_F74A+107↑j
                jnz     short loc_F860
                cmp     dx, [bp+var_4]
                jnb     short loc_F860
                jmp     loc_F8E1
; ---------------------------------------------------------------------------

loc_F860:                               ; CODE XREF: sub_F74A:loc_F856↑j
                                        ; sub_F74A+111↑j
                mov     ax, [bp+var_6]
                mov     dx, [bp+var_8]
                sub     dx, [bp+var_4]
                sbb     ax, [bp+var_2]
                mov     bx, seg dseg19
                mov     es, bx
                mov     es:word_29BC2, ax
                mov     es:word_29BC0, dx
                push    seg dseg19
                push    offset byte_29B40
                call    UPDBTV          ; void updbtv(char *recptr);
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+92h]
                mov     dx, es:[bx+90h]
                add     dx, [bp+var_4]
                adc     ax, [bp+var_2]
                mov     bx, seg dseg19
                mov     es, bx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     es:[bx+92h], ax
                mov     es:[bx+90h], dx
                push    [bp+var_2]
                push    [bp+var_4]
                push    ds
                push    offset aLd_1    ; "%ld"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                push    3F9h
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8
                jmp     short loc_F8FB
; ---------------------------------------------------------------------------

loc_F8E1:                               ; CODE XREF: sub_F74A+109↑j
                                        ; sub_F74A+113↑j
                push    36Ah
                jmp     short loc_F8E9
; ---------------------------------------------------------------------------

loc_F8E6:                               ; CODE XREF: sub_F74A+71↑j
                                        ; sub_F74A+AC↑j
                push    369h

loc_F8E9:                               ; CODE XREF: sub_F74A+19A↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4

loc_F8FB:                               ; CODE XREF: sub_F74A+C1↑j
                                        ; sub_F74A+195↑j
                pop     ds
                assume ds:dseg21
                leave
                retf
sub_F74A        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_F8FE        proc far                ; DATA XREF: dseg19:02D2↓o

var_4           = word ptr -4
var_2           = word ptr -2

                enter   4, 0
                push    ds
                mov     ax, seg dseg12
                mov     ds, ax
                assume ds:dseg12
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29778, 44h ; 'D'
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29880
                push    es:word_2987E
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    37h ; '7'
                push    0
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jnz     short loc_F972
                jmp     loc_FAA2
; ---------------------------------------------------------------------------

loc_F972:                               ; CODE XREF: sub_F8FE+6F↑j
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    seg dseg19
                push    offset byte_29B40
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    seg dseg19
                push    offset unk_29B4A
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jnz     short loc_F9AD
                jmp     loc_FAA2
; ---------------------------------------------------------------------------

loc_F9AD:                               ; CODE XREF: sub_F8FE+AA↑j
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AED3, 1
                jge     short loc_F9C2
                call    sub_15CFA
                jmp     loc_FAB7
; ---------------------------------------------------------------------------

loc_F9C2:                               ; CODE XREF: sub_F8FE+BA↑j
                push    seg dseg19
                push    offset byte_29FDB
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                mov     [bp+var_2], dx
                mov     [bp+var_4], ax
                cmp     [bp+var_2], 0
                jg      short loc_F9EE
                jl      short loc_F9E4
                cmp     [bp+var_4], 0
                jnb     short loc_F9EE

loc_F9E4:                               ; CODE XREF: sub_F8FE+DE↑j
                mov     [bp+var_2], 0
                mov     [bp+var_4], 0

loc_F9EE:                               ; CODE XREF: sub_F8FE+DC↑j
                                        ; sub_F8FE+E4↑j
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+92h]
                mov     dx, es:[bx+90h]
                cmp     ax, [bp+var_2]
                jnb     short loc_FA0A
                jmp     loc_FA9D
; ---------------------------------------------------------------------------

loc_FA0A:                               ; CODE XREF: sub_F8FE+107↑j
                jnz     short loc_FA14
                cmp     dx, [bp+var_4]
                jnb     short loc_FA14
                jmp     loc_FA9D
; ---------------------------------------------------------------------------

loc_FA14:                               ; CODE XREF: sub_F8FE:loc_FA0A↑j
                                        ; sub_F8FE+111↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+92h]
                mov     dx, es:[bx+90h]
                sub     dx, [bp+var_4]
                sbb     ax, [bp+var_2]
                mov     bx, seg dseg19
                mov     es, bx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     es:[bx+92h], ax
                mov     es:[bx+90h], dx
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_29BC2
                mov     dx, es:word_29BC0
                add     dx, [bp+var_4]
                adc     ax, [bp+var_2]
                mov     bx, seg dseg19
                mov     es, bx
                mov     es:word_29BC2, ax
                mov     es:word_29BC0, dx
                push    seg dseg19
                push    offset byte_29B40
                call    UPDBTV          ; void updbtv(char *recptr);
                add     sp, 4
                push    [bp+var_2]
                push    [bp+var_4]
                push    ds
                push    offset aLd_1    ; "%ld"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                push    3FAh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8
                jmp     short loc_FAB7
; ---------------------------------------------------------------------------

loc_FA9D:                               ; CODE XREF: sub_F8FE+109↑j
                                        ; sub_F8FE+113↑j
                push    36Bh
                jmp     short loc_FAA5
; ---------------------------------------------------------------------------

loc_FAA2:                               ; CODE XREF: sub_F8FE+71↑j
                                        ; sub_F8FE+AC↑j
                push    369h

loc_FAA5:                               ; CODE XREF: sub_F8FE+1A2↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4

loc_FAB7:                               ; CODE XREF: sub_F8FE+C1↑j
                                        ; sub_F8FE+19D↑j
                pop     ds
                assume ds:dseg21
                leave
                retf
sub_F8FE        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_FABA        proc far                ; CODE XREF: sttrou+356↑P

var_1E          = byte ptr -1Eh

                enter   1Eh, 0
                push    si
                push    ds
                mov     ax, seg dseg12
                mov     ds, ax
                assume ds:dseg12
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29778, 45h ; 'E'
                mov     ax, seg MARGC
                mov     es, ax
                assume es:nothing
                cmp     word ptr es:MARGC, 2 ; int margc;
                jge     short loc_FB0B
                push    32Ah

loc_FAE1:                               ; CODE XREF: sub_FABA+8C↓j
                mov     ax, seg USRNUM
                mov     es, ax
                push    word ptr es:USRNUM ; int usrnum;
                call    sub_15C7E
                add     sp, 4
                push    423h
                mov     ax, seg USRNUM
                mov     es, ax
                push    word ptr es:USRNUM ; int usrnum;
                call    sub_15C7E
                add     sp, 4
                jmp     loc_FC5E
; ---------------------------------------------------------------------------

loc_FB0B:                               ; CODE XREF: sub_FABA+22↑j
                mov     ax, seg MARGV
                mov     es, ax
                push    word ptr es:MARGV+6 ; char *margv[];
                push    word ptr es:MARGV+4 ; char *margv[];
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                cmp     ax, 1
                jl      short loc_FB43
                mov     ax, seg MARGV
                mov     es, ax
                push    word ptr es:MARGV+6 ; char *margv[];
                push    word ptr es:MARGV+4 ; char *margv[];
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                cmp     ax, 5
                jle     short loc_FB48

loc_FB43:                               ; CODE XREF: sub_FABA+6B↑j
                push    32Bh
                jmp     short loc_FAE1
; ---------------------------------------------------------------------------

loc_FB48:                               ; CODE XREF: sub_FABA+87↑j
                xor     si, si
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_29888
                push    es:word_29886
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    1Eh
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    UACOFF          ; struct usracc *uaptr=uacoff(unum);
                pop     cx
                push    dx
                push    ax
                push    ss
                lea     ax, [bp+var_1E]
                push    ax
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                push    37h ; '7'
                push    0
                push    ss
                lea     ax, [bp+var_1E]
                push    ax
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jz      short loc_FBEF

loc_FB97:                               ; CODE XREF: sub_FABA+131↓j
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    seg dseg19
                push    offset unk_29C78
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                mov     ax, seg MARGV
                mov     es, ax
                push    word ptr es:MARGV+6 ; char *margv[];
                push    word ptr es:MARGV+4 ; char *margv[];
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                dec     ax
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                cmp     ax, es:word_29C96
                jz      short loc_FBE6
                push    6
                push    seg dseg19
                push    offset unk_29C78
                call    ANPBTV          ; int anpbtv (void *recptr, int anpopt);
                add     sp, 6
                or      ax, ax
                jnz     short loc_FBE9

loc_FBE6:                               ; CODE XREF: sub_FABA+116↑j
                mov     si, 1

loc_FBE9:                               ; CODE XREF: sub_FABA+12A↑j
                or      si, si
                jz      short loc_FB97
                jmp     short loc_FBFB
; ---------------------------------------------------------------------------

loc_FBEF:                               ; CODE XREF: sub_FABA+DB↑j
                push    ds
                push    offset aPlayerNotFound ; "PLAYER NOT FOUND-DUN_ERROR: 2402"
                call    CATASTRO        ; catastro(char * ctlstg, TYPE pl, TYPE p2,...,pn)
                add     sp, 4

loc_FBFB:                               ; CODE XREF: sub_FABA+133↑j
                mov     ax, seg MARGV
                mov     es, ax
                assume es:nothing
                push    word ptr es:MARGV+6 ; char *margv[];
                push    word ptr es:MARGV+4 ; char *margv[];
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                dec     ax
                push    ax
                call    sub_18BAA
                pop     cx
                push    seg dseg19
                push    offset unk_29C78
                call    UPDBTV          ; void updbtv(char *recptr);
                add     sp, 4
                mov     ax, seg MARGV
                mov     es, ax
                push    word ptr es:MARGV+6 ; char *margv[];
                push    word ptr es:MARGV+4 ; char *margv[];
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                imul    ax, 34h ; '4'
                add     ax, 0ABEh
                push    seg dseg19
                push    ax
                push    3FBh
                mov     ax, seg USRNUM
                mov     es, ax
                push    word ptr es:USRNUM ; int usrnum;
                call    sub_15C7E
                add     sp, 8

loc_FC5E:                               ; CODE XREF: sub_FABA+4E↑j
                pop     ds
                assume ds:dseg21
                pop     si
                leave
                retf
sub_FABA        endp


; =============== S U B R O U T I N E =======================================


sub_FC62        proc far                ; DATA XREF: dseg19:0746↓o
                                        ; dseg19:07BE↓o ...
                push    si
                push    ds
                mov     ax, seg dseg12
                mov     ds, ax
                assume ds:dseg12
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:word_29778, 46h ; 'F'
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AED3, 1
                jg      short loc_FC85
                jmp     loc_FD45
; ---------------------------------------------------------------------------

loc_FC85:                               ; CODE XREF: sub_FC62+1E↑j
                push    seg dseg19
                push    offset byte_29F13
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    ds
                push    offset aSSs     ; "%s %ss: "
                call    PRF             ; prf(string);
                add     sp, 0Ch
                mov     si, 1
                jmp     short loc_FCC5
; ---------------------------------------------------------------------------

loc_FCAB:                               ; CODE XREF: sub_FC62+6D↓j
                mov     ax, si
                imul    ax, 0C8h
                add     ax, 1C23h
                push    seg dseg19
                push    ax
                push    ds
                push    (offset aTheS+4) ; "%s "
                call    PRF             ; prf(string);
                add     sp, 8
                inc     si

loc_FCC5:                               ; CODE XREF: sub_FC62+47↑j
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AED3, si
                jg      short loc_FCAB
                push    ds
                push    (offset aYouGetThrownBa+14h) ; "\r"
                call    PRF             ; prf(string);
                add     sp, 4
                push    8
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                push    ds
                push    offset aUnderstood ; "Understood!\r"
                call    PRF             ; prf(string);
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_17567
                pop     cx
                jmp     short loc_FD4A
; ---------------------------------------------------------------------------

loc_FD45:                               ; CODE XREF: sub_FC62+20↑j
                call    sub_15CFA

loc_FD4A:                               ; CODE XREF: sub_FC62+E1↑j
                pop     ds
                assume ds:dseg21
                pop     si
                retf
sub_FC62        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_FD4D        proc far                ; DATA XREF: dseg19:06EC↓o

var_6           = word ptr -6
var_4           = word ptr -4
var_2           = word ptr -2

                enter   6, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg12
                mov     ds, ax
                assume ds:dseg12
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29778, 47h ; 'G'
                mov     ax, seg dseg19
                mov     dx, seg NTERMS
                mov     es, dx
                assume es:nothing
                mov     dx, word ptr es:NTERMS ; int nterms;
                dec     dx
                mov     es, ax
                assume es:dseg19
                cmp     es:word_2AED5, dx
                jle     short loc_FD7F
                jmp     loc_10088
; ---------------------------------------------------------------------------

loc_FD7F:                               ; CODE XREF: sub_FD4D+2D↑j
                xor     si, si
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AED3, 1
                jle     short loc_FDB7
                push    seg dseg19
                push    offset byte_29FDB
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                cmp     ax, 1
                jl      short loc_FDB4
                push    seg dseg19
                push    offset byte_29FDB
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                cmp     ax, 5
                jle     short loc_FDB7

loc_FDB4:                               ; CODE XREF: sub_FD4D+52↑j
                mov     si, 1

loc_FDB7:                               ; CODE XREF: sub_FD4D+3F↑j
                                        ; sub_FD4D+65↑j
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AED3, 2
                jge     short loc_FDC7
                mov     si, 1

loc_FDC7:                               ; CODE XREF: sub_FD4D+75↑j
                cmp     si, 1
                jz      short loc_FDCF
                jmp     loc_FEC6
; ---------------------------------------------------------------------------

loc_FDCF:                               ; CODE XREF: sub_FD4D+7D↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29888
                push    es:word_29886
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                xor     si, si
                mov     [bp+var_2], 0
                push    37h ; '7'
                push    0
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jnz     short loc_FE0F
                jmp     loc_FEBA
; ---------------------------------------------------------------------------

loc_FE0F:                               ; CODE XREF: sub_FD4D+BD↑j
                xor     di, di

loc_FE11:                               ; CODE XREF: sub_FD4D+148↓j
                inc     si
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    seg dseg19
                push    offset unk_29C78
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                push    seg dseg19
                push    offset unk_29C78
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_FE77
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_29D10, 0FFFFh
                jle     short loc_FE7A
                mov     ax, si
                imul    ax, 34h ; '4'
                add     ax, 0ABEh
                push    seg dseg19
                push    ax
                push    si
                push    ds
                push    offset aDSReadyForRess ; "%d. %s (READY FOR RESSURECTION)\r"
                call    PRF             ; prf(string);
                add     sp, 0Ah
                mov     [bp+var_2], 1
                jmp     short loc_FE7A
; ---------------------------------------------------------------------------

loc_FE77:                               ; CODE XREF: sub_FD4D+FB↑j
                mov     di, 1

loc_FE7A:                               ; CODE XREF: sub_FD4D+108↑j
                                        ; sub_FD4D+128↑j
                push    6
                push    seg dseg19
                push    offset unk_29C78
                call    ANPBTV          ; int anpbtv (void *recptr, int anpopt);
                add     sp, 6
                or      ax, ax
                jnz     short loc_FE91
                mov     di, 1

loc_FE91:                               ; CODE XREF: sub_FD4D+13F↑j
                or      di, di
                jnz     short loc_FE98
                jmp     loc_FE11
; ---------------------------------------------------------------------------

loc_FE98:                               ; CODE XREF: sub_FD4D+146↑j
                cmp     [bp+var_2], 0
                jnz     short loc_FEA7
                push    3FDh
                call    sub_15C18
                pop     cx

loc_FEA7:                               ; CODE XREF: sub_FD4D+14F↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_17567
                pop     cx
                jmp     loc_10088
; ---------------------------------------------------------------------------

loc_FEBA:                               ; CODE XREF: sub_FD4D+BF↑j
                push    ds
                push    offset aPlayerNotFound_0 ; "PLAYER NOT FOUND-DUN_ERROR: 2334"
                call    CATASTRO        ; catastro(char * ctlstg, TYPE pl, TYPE p2,...,pn)
                jmp     loc_10085
; ---------------------------------------------------------------------------

loc_FEC6:                               ; CODE XREF: sub_FD4D+7F↑j
                push    seg dseg19
                push    offset byte_29FDB
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                dec     ax
                mov     si, ax
                xor     di, di
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29888
                push    es:word_29886
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    37h ; '7'
                push    0
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jz      short loc_FF4F

loc_FF0F:                               ; CODE XREF: sub_FD4D+1FE↓j
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    seg dseg19
                push    offset unk_29C78
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_29C96, si
                jz      short loc_FF46
                push    6
                push    seg dseg19
                push    offset unk_29C78
                call    ANPBTV          ; int anpbtv (void *recptr, int anpopt);
                add     sp, 6
                or      ax, ax
                jnz     short loc_FF49

loc_FF46:                               ; CODE XREF: sub_FD4D+1E3↑j
                mov     di, 1

loc_FF49:                               ; CODE XREF: sub_FD4D+1F7↑j
                or      di, di
                jz      short loc_FF0F
                jmp     short loc_FF5B
; ---------------------------------------------------------------------------

loc_FF4F:                               ; CODE XREF: sub_FD4D+1C0↑j
                push    ds
                push    offset aPlayerNotFound_1 ; "PLAYER NOT FOUND-DUN_ERROR: 2348"
                call    CATASTRO        ; catastro(char * ctlstg, TYPE pl, TYPE p2,...,pn)
                add     sp, 4

loc_FF5B:                               ; CODE XREF: sub_FD4D+200↑j
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_29D10, 0FFFFh
                jg      short loc_FF6B
                jmp     loc_10073
; ---------------------------------------------------------------------------

loc_FF6B:                               ; CODE XREF: sub_FD4D+219↑j
                mov     ax, seg dseg19
                mov     es, ax
                mov     bx, es:word_29C96
                imul    bx, 34h ; '4'
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:[bx+0B24h]
                mov     dx, es:[bx+0B22h]
                mov     [bp+var_4], ax
                mov     [bp+var_6], dx
                mov     ax, seg dseg19
                mov     es, ax
                mov     bx, es:word_29CA2
                xor     cx, cx
                mov     dx, [bp+var_4]
                mov     ax, [bp+var_6]
                call    F_LXMUL
                mov     [bp+var_4], dx
                mov     [bp+var_6], ax
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+92h]
                mov     dx, es:[bx+90h]
                cmp     ax, [bp+var_4]
                ja      short loc_FFE3
                jb      short loc_FFCA
                cmp     dx, [bp+var_6]
                jnb     short loc_FFE3

loc_FFCA:                               ; CODE XREF: sub_FD4D+276↑j
                push    [bp+var_4]
                push    [bp+var_6]
                push    ds
                push    offset aLd_1    ; "%ld"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                push    371h
                jmp     short loc_1005F
; ---------------------------------------------------------------------------

loc_FFE3:                               ; CODE XREF: sub_FD4D+274↑j
                                        ; sub_FD4D+27B↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+92h]
                mov     dx, es:[bx+90h]
                sub     dx, [bp+var_6]
                sbb     ax, [bp+var_4]
                mov     bx, seg dseg19
                mov     es, bx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     es:[bx+92h], ax
                mov     es:[bx+90h], dx
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:word_29D10, 0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:word_29CA0
                mov     dx, seg dseg19
                mov     es, dx
                mov     es:word_29C9E, ax
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29D0E, 0
                mov     es:word_29D0C, 2710h
                push    seg dseg19
                push    offset unk_29C78
                call    UPDBTV          ; void updbtv(char *recptr);
                add     sp, 4
                mov     ax, si
                imul    ax, 34h ; '4'
                add     ax, 0AF2h
                push    seg dseg19
                push    ax
                push    3FEh

loc_1005F:                              ; CODE XREF: sub_FD4D+294↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8
                jmp     short loc_10088
; ---------------------------------------------------------------------------

loc_10073:                              ; CODE XREF: sub_FD4D+21B↑j
                push    3FFh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E

loc_10085:                              ; CODE XREF: sub_FD4D+176↑j
                add     sp, 4

loc_10088:                              ; CODE XREF: sub_FD4D+2F↑j
                                        ; sub_FD4D+16A↑j ...
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_FD4D        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1008D       proc far                ; DATA XREF: dseg19:05FC↓o

var_2           = word ptr -2

                enter   2, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg12
                mov     ds, ax
                assume ds:dseg12
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29778, 48h ; 'H'
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AED3, 2
                jge     short loc_100B5
                jmp     loc_1031B
; ---------------------------------------------------------------------------

loc_100B5:                              ; CODE XREF: sub_1008D+23↑j
                push    seg dseg19
                push    offset byte_29FDB
                call    sub_1872A
                add     sp, 4
                mov     di, ax
                mov     [bp+var_2], 1
                cmp     di, 1
                jz      short loc_100D4
                cmp     di, 3
                jnz     short loc_100D9

loc_100D4:                              ; CODE XREF: sub_1008D+40↑j
                mov     [bp+var_2], 0FFFFh

loc_100D9:                              ; CODE XREF: sub_1008D+45↑j
                cmp     di, 0FFFFh
                jg      short loc_100E1
                jmp     loc_1031B
; ---------------------------------------------------------------------------

loc_100E1:                              ; CODE XREF: sub_1008D+4F↑j
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                cmp     word ptr es:[bx+18FCh], 0Bh
                jz      short loc_100F5
                jmp     loc_102C7
; ---------------------------------------------------------------------------

loc_100F5:                              ; CODE XREF: sub_1008D+63↑j
                mov     bx, di
                shl     bx, 2
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:[bx+28h]
                push    word ptr es:[bx+26h]
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    400h
                call    sub_15C18
                add     sp, 0Ah
                push    0
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                mov     bx, di
                shl     bx, 2
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    word ptr es:[bx+28h]
                push    word ptr es:[bx+26h]
                push    401h
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                mov     word ptr es:[bx+18FCh], 0Ah
                call    sub_15DD6
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+24h]
                mov     es, ax
                assume es:dseg19
                add     dx, es:[bx+18h]
                push    dx
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+22h]
                mov     es, ax
                assume es:dseg19
                add     dx, es:[bx+10h]
                push    dx
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+20h]
                mov     es, ax
                assume es:dseg19
                add     dx, es:[bx+8]
                push    dx
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_15D7B
                add     sp, 4
                mov     bx, di
                add     bx, [bp+var_2]
                shl     bx, 2
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:[bx+28h]
                push    word ptr es:[bx+26h]
                push    402h
                call    sub_15C18
                add     sp, 6
                push    0
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+24h]
                mov     es, ax
                assume es:dseg19
                add     dx, es:[bx+18h]
                push    dx
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+22h]
                mov     es, ax
                assume es:dseg19
                add     dx, es:[bx+10h]
                push    dx
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+20h]
                mov     es, ax
                assume es:dseg19
                add     dx, es:[bx+8]
                push    dx
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                mov     bx, di
                add     bx, [bp+var_2]
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                mov     word ptr es:[bx+18FCh], 0Ah
                call    sub_15DD6
                jmp     short loc_10320
; ---------------------------------------------------------------------------

loc_102C7:                              ; CODE XREF: sub_1008D+65↑j
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                cmp     word ptr es:[bx+18FCh], 0Ah
                jnz     short loc_102DD
                push    403h
                jmp     short loc_10307
; ---------------------------------------------------------------------------

loc_102DD:                              ; CODE XREF: sub_1008D+249↑j
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                cmp     word ptr es:[bx+18FCh], 0Bh
                jle     short loc_10304
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                cmp     word ptr es:[bx+18FCh], 14h
                jge     short loc_10304
                push    404h
                jmp     short loc_10307
; ---------------------------------------------------------------------------

loc_10304:                              ; CODE XREF: sub_1008D+25F↑j
                                        ; sub_1008D+270↑j
                push    405h

loc_10307:                              ; CODE XREF: sub_1008D+24E↑j
                                        ; sub_1008D+275↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4
                jmp     short loc_10320
; ---------------------------------------------------------------------------

loc_1031B:                              ; CODE XREF: sub_1008D+25↑j
                                        ; sub_1008D+51↑j
                call    sub_15CFA

loc_10320:                              ; CODE XREF: sub_1008D+238↑j
                                        ; sub_1008D+28C↑j
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_1008D       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10325       proc far                ; DATA XREF: dseg19:023C↓o

var_2           = word ptr -2

                enter   2, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg12
                mov     ds, ax
                assume ds:dseg12
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29778, 49h ; 'I'
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AED3, 2
                jge     short loc_1034D
                jmp     loc_1058C
; ---------------------------------------------------------------------------

loc_1034D:                              ; CODE XREF: sub_10325+23↑j
                push    seg dseg19
                push    offset byte_29FDB
                call    sub_1872A
                add     sp, 4
                mov     di, ax
                mov     [bp+var_2], 1
                cmp     di, 1
                jz      short loc_1036C
                cmp     di, 3
                jnz     short loc_10371

loc_1036C:                              ; CODE XREF: sub_10325+40↑j
                mov     [bp+var_2], 0FFFFh

loc_10371:                              ; CODE XREF: sub_10325+45↑j
                cmp     di, 0FFFFh
                jg      short loc_10379
                jmp     loc_1058C
; ---------------------------------------------------------------------------

loc_10379:                              ; CODE XREF: sub_10325+4F↑j
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                cmp     word ptr es:[bx+18FCh], 0Ah
                jz      short loc_1038D
                jmp     loc_1055F
; ---------------------------------------------------------------------------

loc_1038D:                              ; CODE XREF: sub_10325+63↑j
                mov     bx, di
                shl     bx, 2
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:[bx+28h]
                push    word ptr es:[bx+26h]
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    406h
                call    sub_15C18
                add     sp, 0Ah
                push    0
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                mov     bx, di
                shl     bx, 2
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    word ptr es:[bx+28h]
                push    word ptr es:[bx+26h]
                push    407h
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                mov     word ptr es:[bx+18FCh], 0Bh
                call    sub_15DD6
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+24h]
                mov     es, ax
                assume es:dseg19
                add     dx, es:[bx+18h]
                push    dx
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+22h]
                mov     es, ax
                assume es:dseg19
                add     dx, es:[bx+10h]
                push    dx
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+20h]
                mov     es, ax
                assume es:dseg19
                add     dx, es:[bx+8]
                push    dx
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_15D7B
                add     sp, 4
                mov     bx, di
                add     bx, [bp+var_2]
                shl     bx, 2
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:[bx+28h]
                push    word ptr es:[bx+26h]
                push    408h
                call    sub_15C18
                add     sp, 6
                push    0
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+24h]
                mov     es, ax
                assume es:dseg19
                add     dx, es:[bx+18h]
                push    dx
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+22h]
                mov     es, ax
                assume es:dseg19
                add     dx, es:[bx+10h]
                push    dx
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+20h]
                mov     es, ax
                assume es:dseg19
                add     dx, es:[bx+8]
                push    dx
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                mov     bx, di
                add     bx, [bp+var_2]
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                mov     word ptr es:[bx+18FCh], 0Bh
                call    sub_15DD6
                jmp     short loc_10591
; ---------------------------------------------------------------------------

loc_1055F:                              ; CODE XREF: sub_10325+65↑j
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                cmp     word ptr es:[bx+18FCh], 0Ah
                jle     short loc_10575
                push    409h
                jmp     short loc_10578
; ---------------------------------------------------------------------------

loc_10575:                              ; CODE XREF: sub_10325+249↑j
                push    405h

loc_10578:                              ; CODE XREF: sub_10325+24E↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4
                jmp     short loc_10591
; ---------------------------------------------------------------------------

loc_1058C:                              ; CODE XREF: sub_10325+25↑j
                                        ; sub_10325+51↑j
                call    sub_15CFA

loc_10591:                              ; CODE XREF: sub_10325+238↑j
                                        ; sub_10325+265↑j
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_10325       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10596       proc far                ; DATA XREF: dseg19:050C↓o

var_6           = word ptr -6
var_4           = word ptr -4
var_2           = word ptr -2

                enter   6, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg12
                mov     ds, ax
                assume ds:dseg12
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29778, 4Ah ; 'J'
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AED3, 3
                jge     short loc_105BE
                jmp     loc_108A6
; ---------------------------------------------------------------------------

loc_105BE:                              ; CODE XREF: sub_10596+23↑j
                push    seg dseg19
                push    offset byte_29FDB
                call    sub_1872A
                add     sp, 4
                mov     di, ax
                cmp     di, 0FFFFh
                jg      short loc_105D6
                jmp     loc_108A6
; ---------------------------------------------------------------------------

loc_105D6:                              ; CODE XREF: sub_10596+3B↑j
                mov     [bp+var_2], 1
                cmp     di, 1
                jz      short loc_105E5
                cmp     di, 3
                jnz     short loc_105EA

loc_105E5:                              ; CODE XREF: sub_10596+48↑j
                mov     [bp+var_2], 0FFFFh

loc_105EA:                              ; CODE XREF: sub_10596+4D↑j
                push    3
                push    seg dseg19
                push    offset byte_2A0A3
                call    sub_1609C
                add     sp, 6
                mov     [bp+var_4], ax
                cmp     [bp+var_4], 0FFFFh
                jnz     short loc_10621
                push    seg dseg19
                push    offset byte_2A0A3
                push    3C1h
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8
                jmp     loc_108AB
; ---------------------------------------------------------------------------

loc_10621:                              ; CODE XREF: sub_10596+6B↑j
                mov     ax, [bp+var_4]
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29BDA
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+1Ch], 4
                jz      short loc_1064F
                jmp     loc_1088F
; ---------------------------------------------------------------------------

loc_1064F:                              ; CODE XREF: sub_10596+B4↑j
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     word ptr es:[bx+18FCh], 0Bh
                jz      short loc_10663
                jmp     loc_1085E
; ---------------------------------------------------------------------------

loc_10663:                              ; CODE XREF: sub_10596+C8↑j
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, [bp+var_4]
                shl     dx, 1
                mov     cx, seg dseg19
                mov     es, cx
                les     si, es:dword_29DD4
                assume es:nothing
                add     si, dx
                mov     dx, es:[si+50h]
                inc     dx
                mov     es, ax
                assume es:dseg19
                mov     es:[bx+18FCh], dx
                mov     bx, di
                shl     bx, 2
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:[bx+28h]
                push    word ptr es:[bx+26h]
                push    40Ah
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8
                mov     bx, di
                shl     bx, 2
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:[bx+28h]
                push    word ptr es:[bx+26h]
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    40Bh
                call    sub_15C18
                add     sp, 0Ah
                push    0
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                call    sub_15DD6
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+24h]
                mov     es, ax
                assume es:dseg19
                add     dx, es:[bx+18h]
                push    dx
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+22h]
                mov     es, ax
                assume es:dseg19
                add     dx, es:[bx+10h]
                push    dx
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+20h]
                mov     es, ax
                assume es:dseg19
                add     dx, es:[bx+8]
                push    dx
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_15D7B
                add     sp, 4
                mov     bx, di
                add     bx, [bp+var_2]
                mov     [bp+var_6], bx
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, [bp+var_4]
                shl     dx, 1
                mov     cx, seg dseg19
                mov     es, cx
                les     si, es:dword_29DD4
                assume es:nothing
                add     si, dx
                mov     dx, es:[si+50h]
                inc     dx
                mov     es, ax
                assume es:dseg19
                mov     es:[bx+18FCh], dx
                mov     bx, [bp+var_6]
                shl     bx, 2
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:[bx+28h]
                push    word ptr es:[bx+26h]
                push    40Ch
                call    sub_15C18
                add     sp, 6
                push    0
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+24h]
                mov     es, ax
                assume es:dseg19
                add     dx, es:[bx+18h]
                push    dx
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+22h]
                mov     es, ax
                assume es:dseg19
                add     dx, es:[bx+10h]
                push    dx
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+20h]
                mov     es, ax
                assume es:dseg19
                add     dx, es:[bx+8]
                push    dx
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                call    sub_15DD6
                jmp     short loc_108AB
; ---------------------------------------------------------------------------

loc_1085E:                              ; CODE XREF: sub_10596+CA↑j
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                cmp     word ptr es:[bx+18FCh], 0Ah
                jnz     short loc_10874
                push    40Dh
                jmp     short loc_10892
; ---------------------------------------------------------------------------

loc_10874:                              ; CODE XREF: sub_10596+2D7↑j
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                cmp     word ptr es:[bx+18FCh], 0Bh
                jle     short loc_1088A
                push    40Eh
                jmp     short loc_10892
; ---------------------------------------------------------------------------

loc_1088A:                              ; CODE XREF: sub_10596+2ED↑j
                push    405h
                jmp     short loc_10892
; ---------------------------------------------------------------------------

loc_1088F:                              ; CODE XREF: sub_10596+B6↑j
                push    40Fh

loc_10892:                              ; CODE XREF: sub_10596+2DC↑j
                                        ; sub_10596+2F2↑j ...
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4
                jmp     short loc_108AB
; ---------------------------------------------------------------------------

loc_108A6:                              ; CODE XREF: sub_10596+25↑j
                                        ; sub_10596+3D↑j
                call    sub_15CFA

loc_108AB:                              ; CODE XREF: sub_10596+88↑j
                                        ; sub_10596+2C6↑j ...
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_10596       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_108B0       proc far                ; DATA XREF: dseg19:09BC↓o

var_4           = word ptr -4
var_2           = word ptr -2

                enter   4, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg12
                mov     ds, ax
                assume ds:dseg12
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29778, 4Bh ; 'K'
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AED3, 3
                jge     short loc_108D8
                jmp     loc_10BD6
; ---------------------------------------------------------------------------

loc_108D8:                              ; CODE XREF: sub_108B0+23↑j
                push    seg dseg19
                push    offset byte_29FDB
                call    sub_1872A
                add     sp, 4
                mov     di, ax
                cmp     di, 0FFFFh
                jg      short loc_108F0
                jmp     loc_10BD6
; ---------------------------------------------------------------------------

loc_108F0:                              ; CODE XREF: sub_108B0+3B↑j
                push    3
                push    seg dseg19
                push    offset byte_2A0A3
                call    sub_1609C
                add     sp, 6
                mov     cx, ax
                cmp     cx, 0FFFFh
                jnz     short loc_10925
                push    seg dseg19
                push    offset byte_2A0A3
                push    3C1h
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8
                jmp     loc_10BDB
; ---------------------------------------------------------------------------

loc_10925:                              ; CODE XREF: sub_108B0+55↑j
                mov     [bp+var_2], 1
                cmp     di, 1
                jz      short loc_10934
                cmp     di, 3
                jnz     short loc_10939

loc_10934:                              ; CODE XREF: sub_108B0+7D↑j
                mov     [bp+var_2], 0FFFFh

loc_10939:                              ; CODE XREF: sub_108B0+82↑j
                mov     ax, cx
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29BDA
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+1Ch], 4
                jz      short loc_10966
                jmp     loc_10BBF
; ---------------------------------------------------------------------------

loc_10966:                              ; CODE XREF: sub_108B0+B1↑j
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     word ptr es:[bx+18FCh], 0Bh
                jg      short loc_1097A
                jmp     loc_10B8E
; ---------------------------------------------------------------------------

loc_1097A:                              ; CODE XREF: sub_108B0+C5↑j
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                cmp     word ptr es:[bx+18FCh], 14h
                jl      short loc_1098E
                jmp     loc_10B8E
; ---------------------------------------------------------------------------

loc_1098E:                              ; CODE XREF: sub_108B0+D9↑j
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, cx
                shl     dx, 1
                mov     cx, seg dseg19
                mov     es, cx
                les     si, es:dword_29DD4
                assume es:nothing
                add     si, dx
                mov     dx, es:[si+50h]
                inc     dx
                mov     es, ax
                assume es:dseg19
                cmp     es:[bx+18FCh], dx
                jz      short loc_109B6
                jmp     loc_10B89
; ---------------------------------------------------------------------------

loc_109B6:                              ; CODE XREF: sub_108B0+101↑j
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                mov     word ptr es:[bx+18FCh], 0Bh
                mov     bx, di
                shl     bx, 2
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:[bx+28h]
                push    word ptr es:[bx+26h]
                push    410h
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8
                mov     bx, di
                shl     bx, 2
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:[bx+28h]
                push    word ptr es:[bx+26h]
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    411h
                call    sub_15C18
                add     sp, 0Ah
                push    0
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                call    sub_15DD6
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+24h]
                mov     es, ax
                assume es:dseg19
                add     dx, es:[bx+18h]
                push    dx
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+22h]
                mov     es, ax
                assume es:dseg19
                add     dx, es:[bx+10h]
                push    dx
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+20h]
                mov     es, ax
                assume es:dseg19
                add     dx, es:[bx+8]
                push    dx
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_15D7B
                add     sp, 4
                mov     bx, di
                add     bx, [bp+var_2]
                mov     [bp+var_4], bx
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                mov     word ptr es:[bx+18FCh], 0Bh
                mov     bx, [bp+var_4]
                shl     bx, 2
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:[bx+28h]
                push    word ptr es:[bx+26h]
                push    40Ch
                call    sub_15C18
                add     sp, 6
                push    0
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+24h]
                mov     es, ax
                assume es:dseg19
                add     dx, es:[bx+18h]
                push    dx
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+22h]
                mov     es, ax
                assume es:dseg19
                add     dx, es:[bx+10h]
                push    dx
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+20h]
                mov     es, ax
                assume es:dseg19
                add     dx, es:[bx+8]
                push    dx
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                call    sub_15DD6
                jmp     short loc_10BDB
; ---------------------------------------------------------------------------

loc_10B89:                              ; CODE XREF: sub_108B0+103↑j
                push    412h
                jmp     short loc_10BC2
; ---------------------------------------------------------------------------

loc_10B8E:                              ; CODE XREF: sub_108B0+C7↑j
                                        ; sub_108B0+DB↑j
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                cmp     word ptr es:[bx+18FCh], 0Ah
                jnz     short loc_10BA4
                push    403h
                jmp     short loc_10BC2
; ---------------------------------------------------------------------------

loc_10BA4:                              ; CODE XREF: sub_108B0+2ED↑j
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                cmp     word ptr es:[bx+18FCh], 0Bh
                jnz     short loc_10BBA
                push    413h
                jmp     short loc_10BC2
; ---------------------------------------------------------------------------

loc_10BBA:                              ; CODE XREF: sub_108B0+303↑j
                push    405h
                jmp     short loc_10BC2
; ---------------------------------------------------------------------------

loc_10BBF:                              ; CODE XREF: sub_108B0+B3↑j
                push    40Fh

loc_10BC2:                              ; CODE XREF: sub_108B0+2DC↑j
                                        ; sub_108B0+2F2↑j ...
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4
                jmp     short loc_10BDB
; ---------------------------------------------------------------------------

loc_10BD6:                              ; CODE XREF: sub_108B0+25↑j
                                        ; sub_108B0+3D↑j
                call    sub_15CFA

loc_10BDB:                              ; CODE XREF: sub_108B0+72↑j
                                        ; sub_108B0+2D7↑j ...
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_108B0       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10BE0       proc far                ; CODE XREF: sub_1FD81+53↓P
                                        ; sub_1FD81+E1↓P ...

var_4           = word ptr -4
var_2           = word ptr -2

                enter   4, 0
                push    si
                push    ds
                mov     ax, seg dseg12
                mov     ds, ax
                assume ds:dseg12
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29778, 4Ch ; 'L'
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AED3, 2
                jge     short loc_10C0C
                call    sub_15CFA
                jmp     loc_10E54
; ---------------------------------------------------------------------------

loc_10C0C:                              ; CODE XREF: sub_10BE0+22↑j
                push    2
                push    seg dseg19
                push    offset byte_29FDB
                call    sub_1609C
                add     sp, 6
                mov     si, ax
                cmp     si, 0FFFFh
                jg      short loc_10C26
                jmp     loc_10E39
; ---------------------------------------------------------------------------

loc_10C26:                              ; CODE XREF: sub_10BE0+41↑j
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                push    word ptr es:[bx+50h]
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                push    word ptr es:[bx+3Ch]
                call    sub_15B72
                add     sp, 4
                push    ax
                push    dx
                xor     dx, dx
                mov     ax, 64h ; 'd'
                pop     cx
                pop     bx
                call    F_LXMUL
                mov     [bp+var_2], dx
                mov     [bp+var_4], ax
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29BDA
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+1Ch], 1
                jnz     short loc_10CAD
                cmp     [bp+var_2], 0
                jl      short loc_10CAD
                jg      short loc_10CA3
                cmp     [bp+var_4], 3A98h
                jbe     short loc_10CAD

loc_10CA3:                              ; CODE XREF: sub_10BE0+BA↑j
                mov     [bp+var_2], 0
                mov     [bp+var_4], 3A98h

loc_10CAD:                              ; CODE XREF: sub_10BE0+B2↑j
                                        ; sub_10BE0+B8↑j ...
                cmp     [bp+var_2], 0
                jg      short loc_10CC5
                jl      short loc_10CBB
                cmp     [bp+var_4], 1
                jnb     short loc_10CC5

loc_10CBB:                              ; CODE XREF: sub_10BE0+D3↑j
                mov     [bp+var_2], 0
                mov     [bp+var_4], 64h ; 'd'

loc_10CC5:                              ; CODE XREF: sub_10BE0+D1↑j
                                        ; sub_10BE0+D9↑j
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                push    415h
                call    sub_15C18
                add     sp, 6
                push    [bp+var_2]
                push    [bp+var_4]
                push    ds
                push    offset aLd_1    ; "%ld"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                push    416h
                call    sub_15C18
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_17567
                pop     cx
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    417h
                call    sub_15C18
                add     sp, 6
                push    0
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29BDA
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+28h]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                sub     es:[bx+0CCh], ax
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     word ptr es:[bx+3Ch], 0FFFFh
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     word ptr es:[bx+50h], 0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, [bp+var_2]
                mov     dx, [bp+var_4]
                add     es:[bx+94h], dx
                adc     es:[bx+96h], ax
                jmp     short loc_10E54
; ---------------------------------------------------------------------------

loc_10E39:                              ; CODE XREF: sub_10BE0+43↑j
                push    seg dseg19
                push    offset byte_29FDB
                push    3C1h
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8

loc_10E54:                              ; CODE XREF: sub_10BE0+29↑j
                                        ; sub_10BE0+257↑j
                pop     ds
                assume ds:dseg21
                pop     si
                leave
                retf
sub_10BE0       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10E58       proc far                ; DATA XREF: dseg19:0836↓o

var_FA          = byte ptr -0FAh
var_C8          = byte ptr -0C8h

                enter   0FAh, 0
                push    si
                push    ds
                mov     ax, seg dseg12
                mov     ds, ax
                assume ds:dseg12
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29778, 4Dh ; 'M'
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29880
                push    es:word_2987E
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    37h ; '7'
                push    0
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jnz     short loc_10ECD
                jmp     loc_10FC4
; ---------------------------------------------------------------------------

loc_10ECD:                              ; CODE XREF: sub_10E58+70↑j
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    seg dseg19
                push    offset byte_29B40
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    seg dseg19
                push    offset unk_29B4A
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jnz     short loc_10F08
                jmp     loc_10FC4
; ---------------------------------------------------------------------------

loc_10F08:                              ; CODE XREF: sub_10E58+AB↑j
                push    0
                push    0C8h
                push    ss
                lea     ax, [bp+var_C8]
                push    ax
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                push    ds
                push    (offset aYouGetThrownBa+15h) ; ""
                push    ss
                lea     ax, [bp+var_C8]
                push    ax
                call    STRCPY          ; char* strcpy(char* destination, const char* source );
                add     sp, 8
                mov     si, 1
                jmp     short loc_10F60
; ---------------------------------------------------------------------------

loc_10F32:                              ; CODE XREF: sub_10E58+112↓j
                mov     ax, si
                imul    ax, 0C8h
                add     ax, 1C23h
                push    seg dseg19
                push    ax
                push    ss
                lea     ax, [bp+var_C8]
                push    ax
                call    STRCAT          ; char *strcat(char *destination, const char *source );
                add     sp, 8
                push    ds
                push    (offset aY+1)   ; " "
                push    ss
                lea     ax, [bp+var_C8]
                push    ax
                call    STRCAT          ; char *strcat(char *destination, const char *source );
                add     sp, 8
                inc     si

loc_10F60:                              ; CODE XREF: sub_10E58+D8↑j
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AED3, si
                jg      short loc_10F32
                push    0
                push    32h ; '2'
                push    ss
                lea     ax, [bp+var_FA]
                push    ax
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                push    31h ; '1'
                push    ss
                lea     ax, [bp+var_C8]
                push    ax
                push    ss
                lea     ax, [bp+var_FA]
                push    ax
                call    STRNCAT         ; char *strncat(char *destination, const char *source, size_t num );
                add     sp, 0Ah
                push    0
                push    32h ; '2'
                push    seg dseg19
                push    offset unk_29C3C
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                push    ss
                lea     ax, [bp+var_FA]
                push    ax
                push    seg dseg19
                push    offset unk_29C3C
                call    STRCAT          ; char *strcat(char *destination, const char *source );
                add     sp, 8
                call    sub_15DD6
                push    418h
                jmp     short loc_10FC7
; ---------------------------------------------------------------------------

loc_10FC4:                              ; CODE XREF: sub_10E58+72↑j
                                        ; sub_10E58+AD↑j
                push    369h

loc_10FC7:                              ; CODE XREF: sub_10E58+16A↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4
                pop     ds
                assume ds:dseg21
                pop     si
                leave
                retf
sub_10E58       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10FDD       proc far                ; CODE XREF: sub_20088+54↓P
                                        ; DATA XREF: dseg19:03FE↓o

var_4           = word ptr -4
var_2           = word ptr -2

                enter   4, 0
                push    ds
                mov     ax, seg dseg12
                mov     ds, ax
                assume ds:dseg12
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29778, 50h ; 'P'
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:word_2AED5
                mov     dx, seg dseg19
                mov     es, dx
                cmp     ax, es:word_2AED1
                jge     short loc_1103A
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     bx, es:[bx+1Eh]
                imul    bx, 34h ; '4'
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:[bx+0B1Ah]
                cwd
                mov     bx, seg dseg19
                mov     es, bx
                les     bx, es:dword_29DD4
                assume es:nothing
                push    ax
                mov     ax, es:[bx+2Ah]
                push    dx
                xor     dx, dx
                pop     cx
                pop     bx
                jmp     short loc_11051
; ---------------------------------------------------------------------------

loc_1103A:                              ; CODE XREF: sub_10FDD+29↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     bx, es:[bx+2Ah]
                shr     bx, 1
                xor     cx, cx
                xor     dx, dx
                mov     ax, 15Eh

loc_11051:                              ; CODE XREF: sub_10FDD+5B↑j
                call    F_LXMUL
                mov     [bp+var_2], dx
                mov     [bp+var_4], ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+96h]
                mov     dx, es:[bx+94h]
                cmp     ax, [bp+var_2]
                jg      short loc_11082
                jl      short loc_1107C
                cmp     dx, [bp+var_4]
                jnb     short loc_11082

loc_1107C:                              ; CODE XREF: sub_10FDD+98↑j
                push    419h
                jmp     loc_111F3
; ---------------------------------------------------------------------------

loc_11082:                              ; CODE XREF: sub_10FDD+96↑j
                                        ; sub_10FDD+9D↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+26h]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     ax, es:[bx+28h]
                jb      short loc_110A3
                jmp     loc_111F0
; ---------------------------------------------------------------------------

loc_110A3:                              ; CODE XREF: sub_10FDD+C1↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+26h], 0
                jg      short loc_110B7
                jmp     loc_111F0
; ---------------------------------------------------------------------------

loc_110B7:                              ; CODE XREF: sub_10FDD+D5↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+2Ah]
                add     ax, 5
                push    ax
                push    ds
                push    offset aD_2     ; "%d"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 6
                push    dx
                push    ax
                push    41Bh
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+2Ah]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     ax, es:[bx+26h]
                add     ax, 5
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     es:[bx+26h], ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, [bp+var_2]
                mov     dx, [bp+var_4]
                sub     es:[bx+94h], dx
                sbb     es:[bx+96h], ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+26h]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     ax, es:[bx+28h]
                jbe     short loc_11189
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+28h]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     es:[bx+26h], ax
                push    ds
                push    offset aYouReHealedToT ; "You're healed to the maximum!\r"
                call    PRF             ; prf(string);
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_17567
                pop     cx

loc_11189:                              ; CODE XREF: sub_10FDD+172↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    ds
                push    offset aSSBodyIsGlowin ; "%s's body is glowing!\r"
                call    PRF             ; prf(string);
                add     sp, 8
                push    0
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                jmp     short loc_11205
; ---------------------------------------------------------------------------

loc_111F0:                              ; CODE XREF: sub_10FDD+C3↑j
                                        ; sub_10FDD+D7↑j
                push    41Ch

loc_111F3:                              ; CODE XREF: sub_10FDD+A2↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4

loc_11205:                              ; CODE XREF: sub_10FDD+211↑j
                pop     ds
                assume ds:dseg21
                leave
                retf
sub_10FDD       endp


; =============== S U B R O U T I N E =======================================


sub_11208       proc far                ; DATA XREF: dseg19:02F0↓o
                push    ds
                mov     ax, seg dseg12
                mov     ds, ax
                assume ds:dseg12
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+0CEh], 0
                jle     short loc_11227
                call    sub_1D92E
                jmp     short loc_1123C
; ---------------------------------------------------------------------------

loc_11227:                              ; CODE XREF: sub_11208+16↑j
                push    41Dh
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4

loc_1123C:                              ; CODE XREF: sub_11208+1D↑j
                pop     ds
                assume ds:dseg21
                retf
sub_11208       endp


; =============== S U B R O U T I N E =======================================


sub_1123E       proc far                ; DATA XREF: dseg19:030E↓o
                push    si
                push    ds
                mov     ax, seg dseg12
                mov     ds, ax
                assume ds:dseg12
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29778, 51h ; 'Q'
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AED3, 2
                jge     short loc_11261
                jmp     loc_11585
; ---------------------------------------------------------------------------

loc_11261:                              ; CODE XREF: sub_1123E+1E↑j
                push    2
                push    seg dseg19
                push    offset byte_29FDB
                call    sub_1609C
                add     sp, 6
                mov     si, ax
                cmp     si, 0FFFFh
                jg      short loc_1127B
                jmp     loc_11585
; ---------------------------------------------------------------------------

loc_1127B:                              ; CODE XREF: sub_1123E+38↑j
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29BDA
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+1Ch], 6
                jz      short loc_112A8
                jmp     loc_11542
; ---------------------------------------------------------------------------

loc_112A8:                              ; CODE XREF: sub_1123E+65↑j
                push    41Eh
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    41Fh
                call    sub_15C18
                add     sp, 6
                push    0
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+50h], 0
                jnz     short loc_11349
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                inc     word ptr es:[bx+32h]
                jmp     loc_114DE
; ---------------------------------------------------------------------------

loc_11349:                              ; CODE XREF: sub_1123E+F8↑j
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+50h], 1
                jnz     short loc_11371
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                inc     word ptr es:[bx+30h]
                jmp     loc_114DE
; ---------------------------------------------------------------------------

loc_11371:                              ; CODE XREF: sub_1123E+120↑j
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+50h], 2
                jnz     short loc_11399
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                inc     word ptr es:[bx+34h]
                jmp     loc_114DE
; ---------------------------------------------------------------------------

loc_11399:                              ; CODE XREF: sub_1123E+148↑j
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+50h], 3
                jnz     short loc_113C1
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                inc     word ptr es:[bx+3Ah]
                jmp     loc_114DE
; ---------------------------------------------------------------------------

loc_113C1:                              ; CODE XREF: sub_1123E+170↑j
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+50h], 4
                jnz     short loc_113E9
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                inc     word ptr es:[bx+38h]
                jmp     loc_114DE
; ---------------------------------------------------------------------------

loc_113E9:                              ; CODE XREF: sub_1123E+198↑j
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+50h], 5
                jnz     short loc_11411
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                inc     word ptr es:[bx+36h]
                jmp     loc_114DE
; ---------------------------------------------------------------------------

loc_11411:                              ; CODE XREF: sub_1123E+1C0↑j
                push    420h
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    421h
                call    sub_15C18
                add     sp, 6
                push    0
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+9Ah]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[bx+2Ah]
                imul    dx, 5
                add     ax, dx
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     es:[bx+9Ah], ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+9Ah], 32h ; '2'
                jbe     short loc_114DE
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     word ptr es:[bx+9Ah], 32h ; '2'

loc_114DE:                              ; CODE XREF: sub_1123E+108↑j
                                        ; sub_1123E+130↑j ...
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29BDA
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+28h]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                sub     es:[bx+0CCh], ax
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     word ptr es:[bx+3Ch], 0FFFFh
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     word ptr es:[bx+50h], 0FFFFh
                jmp     short loc_1158A
; ---------------------------------------------------------------------------

loc_11542:                              ; CODE XREF: sub_1123E+67↑j
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                push    422h
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8
                jmp     short loc_1158A
; ---------------------------------------------------------------------------

loc_11585:                              ; CODE XREF: sub_1123E+20↑j
                                        ; sub_1123E+3A↑j
                call    sub_15CFA

loc_1158A:                              ; CODE XREF: sub_1123E+302↑j
                                        ; sub_1123E+345↑j
                pop     ds
                assume ds:dseg21
                pop     si
                retf
sub_1123E       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1158D       proc far                ; DATA XREF: dseg19:099E↓o

var_6           = word ptr -6
var_4           = word ptr -4
var_2           = word ptr -2

                enter   6, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg12
                mov     ds, ax
                assume ds:dseg12
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AED3, 2
                jge     short loc_115AE
                call    sub_15CFA
                jmp     loc_11A2A
; ---------------------------------------------------------------------------

loc_115AE:                              ; CODE XREF: sub_1158D+17↑j
                mov     ax, seg dseg19
                mov     dx, seg NTERMS
                mov     es, dx
                assume es:nothing
                mov     dx, word ptr es:NTERMS ; int nterms;
                dec     dx
                mov     es, ax
                assume es:dseg19
                cmp     es:word_2AED5, dx
                jle     short loc_115C8
                jmp     loc_11A2A
; ---------------------------------------------------------------------------

loc_115C8:                              ; CODE XREF: sub_1158D+36↑j
                push    seg dseg19
                push    offset byte_29FDB
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                mov     si, ax
                cmp     si, 7D0h
                jl      short loc_115E4
                cmp     si, 26ACh
                jle     short loc_115FA

loc_115E4:                              ; CODE XREF: sub_1158D+4F↑j
                push    26ACh
                push    ds
                push    offset aD_2     ; "%d"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 6
                push    dx
                push    ax
                push    334h
                jmp     short loc_11669
; ---------------------------------------------------------------------------

loc_115FA:                              ; CODE XREF: sub_1158D+55↑j
                add     si, 0F830h
                mov     ax, si
                mov     bx, 64h ; 'd'
                cwd
                idiv    bx
                mov     si, ax
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     di, es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     word ptr es:[bx+20h], 0
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     word ptr es:[bx+22h], 0
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     es:[bx+24h], si
                cmp     si, di
                jnz     short loc_1167E
                mov     ax, di
                inc     ax
                imul    ax, 64h ; 'd'
                add     ax, 7D0h
                mov     bx, 64h ; 'd'
                cwd
                idiv    bx
                push    ax
                push    ds
                push    offset aD_2     ; "%d"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 6
                push    dx
                push    ax
                push    341h

loc_11669:                              ; CODE XREF: sub_1158D+6B↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8
                jmp     loc_11A2A
; ---------------------------------------------------------------------------

loc_1167E:                              ; CODE XREF: sub_1158D+B9↑j
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+96h], 0
                jg      short loc_116C1
                jl      short loc_1169B
                cmp     word ptr es:[bx+94h], 0BB8h
                jnb     short loc_116C1

loc_1169B:                              ; CODE XREF: sub_1158D+103↑j
                push    346h
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     es:[bx+24h], di
                jmp     loc_11A2A
; ---------------------------------------------------------------------------

loc_116C1:                              ; CODE XREF: sub_1158D+101↑j
                                        ; sub_1158D+10C↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     es:[bx+24h], di
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_1A663
                pop     cx
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     es:[bx+24h], si
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    331h
                call    sub_15C18
                add     sp, 6
                push    0
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                push    di
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_15D7B
                add     sp, 4
                or      ax, ax
                jnz     short loc_117BB
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_18EDF
                add     sp, 6
                call    sub_15E3B

loc_117BB:                              ; CODE XREF: sub_1158D+1F5↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, di
                sub     ax, es:[bx+24h]
                cwd
                xor     ax, dx
                sub     ax, dx
                mov     [bp+var_2], ax
                mov     ax, [bp+var_2]
                cwd
                push    ax
                push    dx
                xor     dx, dx
                mov     ax, 0BB8h
                pop     cx
                pop     bx
                call    F_LXMUL
                mov     [bp+var_4], dx
                mov     [bp+var_6], ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+96h]
                mov     dx, es:[bx+94h]
                cmp     ax, [bp+var_4]
                jge     short loc_11807
                jmp     loc_118DE
; ---------------------------------------------------------------------------

loc_11807:                              ; CODE XREF: sub_1158D+275↑j
                jnz     short loc_11811
                cmp     dx, [bp+var_6]
                jnb     short loc_11811
                jmp     loc_118DE
; ---------------------------------------------------------------------------

loc_11811:                              ; CODE XREF: sub_1158D:loc_11807↑j
                                        ; sub_1158D+27F↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+96h]
                mov     dx, es:[bx+94h]
                sub     dx, [bp+var_6]
                sbb     ax, [bp+var_4]
                mov     bx, seg dseg19
                mov     es, bx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     es:[bx+96h], ax
                mov     es:[bx+94h], dx
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    332h
                call    sub_15C18
                add     sp, 6
                push    0
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+24h]
                imul    ax, 64h ; 'd'
                add     ax, 7D0h
                push    ax
                push    ds
                push    offset aD_2     ; "%d"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 6
                push    dx
                push    ax
                push    344h
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8
                jmp     loc_11985
; ---------------------------------------------------------------------------

loc_118DE:                              ; CODE XREF: sub_1158D+277↑j
                                        ; sub_1158D+281↑j
                push    345h
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     word ptr es:[bx+96h], 0
                mov     word ptr es:[bx+94h], 0
                push    0Ch
                call    sub_18A8A
                pop     cx
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     es:[bx+24h], ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    332h
                call    sub_15C18
                add     sp, 6
                push    0
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah

loc_11985:                              ; CODE XREF: sub_1158D+34E↑j
                call    sub_15E3B
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                call    sub_1A633
                pop     cx
                mov     si, ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                call    sub_1A075
                pop     cx
                mov     bx, si
                shl     bx, 1
                add     ax, bx
                mov     bx, seg dseg19
                mov     es, bx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     bx, es:[bx+20h]
                mov     es, dx
                xchg    ax, bx
                mov     es:[bx], ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                call    sub_1A075
                pop     cx
                mov     bx, si
                shl     bx, 1
                add     ax, bx
                mov     bx, seg dseg19
                mov     es, bx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     bx, es:[bx+22h]
                mov     es, dx
                xchg    ax, bx
                mov     es:[bx+190h], ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                call    sub_1A075
                pop     cx
                mov     bx, si
                shl     bx, 1
                add     ax, bx
                mov     bx, seg dseg19
                mov     es, bx
                assume es:dseg19
                mov     bx, es:word_2AED5
                mov     es, dx
                assume es:nothing
                xchg    ax, bx
                mov     es:[bx+320h], ax

loc_11A2A:                              ; CODE XREF: sub_1158D+1E↑j
                                        ; sub_1158D+38↑j ...
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_1158D       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_11A2F       proc far                ; DATA XREF: dseg19:08CC↓o

var_6C          = byte ptr -6Ch
var_8           = word ptr -8
var_6           = word ptr -6
var_4           = dword ptr -4

                enter   6Ch, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg12
                mov     ds, ax
                assume ds:dseg12
                mov     [bp+var_8], 0
                xor     cx, cx
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+26h], 1
                jge     short loc_11A87
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_2AED5
                mov     dx, seg NTERMS
                mov     es, dx
                assume es:nothing
                cmp     ax, word ptr es:NTERMS ; int nterms;
                jge     short loc_11A87
                push    ds
                push    offset aHeyYouReDead_0 ; "Hey! You're dead!\r"

loc_11A6C:                              ; CODE XREF: sub_11A2F+82↓j
                                        ; sub_11A2F+3CF↓j
                call    PRF             ; prf(string);
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    OUTPRF          ; outprf (unum);

loc_11A83:                              ; CODE XREF: sub_11A2F+7AD↓j
                pop     cx
                jmp     loc_1247F
; ---------------------------------------------------------------------------

loc_11A87:                              ; CODE XREF: sub_11A2F+22↑j
                                        ; sub_11A2F+37↑j
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+24h], 0
                jnz     short loc_11AB3
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_2AED5
                mov     dx, seg NTERMS
                mov     es, dx
                assume es:nothing
                cmp     ax, word ptr es:NTERMS ; int nterms;
                jge     short loc_11AB3
                push    ds
                push    offset aHeyThisYearIsA ; "Hey! This year is a 'safe-ground'. You "...
                jmp     short loc_11A6C
; ---------------------------------------------------------------------------

loc_11AB3:                              ; CODE XREF: sub_11A2F+67↑j
                                        ; sub_11A2F+7C↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     bx, es:[bx+1Eh]
                imul    bx, 34h ; '4'
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     word ptr es:[bx+0B1Eh], 0FFFFh
                jnz     short loc_11AE9
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:word_2AED5
                mov     dx, seg NTERMS
                mov     es, dx
                assume es:nothing
                cmp     ax, word ptr es:NTERMS ; int nterms;
                jge     short loc_11AE9
                jmp     loc_11DFA
; ---------------------------------------------------------------------------

loc_11AE9:                              ; CODE XREF: sub_11A2F+A0↑j
                                        ; sub_11A2F+B5↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     bx, es:[bx+1Eh]
                imul    bx, 34h ; '4'
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:[bx+0B1Eh]
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     ax, es:[bx+2Ah]
                jbe     short loc_11B5A
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     bx, es:[bx+1Eh]
                imul    bx, 34h ; '4'
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    word ptr es:[bx+0B1Eh]
                push    ds
                push    offset aD_2     ; "%d"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 6
                push    dx
                push    ax
                push    478h
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8
                mov     cx, 1
                mov     [bp+var_8], 1

loc_11B5A:                              ; CODE XREF: sub_11A2F+E3↑j
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:word_2AED5
                mov     dx, seg NTERMS
                mov     es, dx
                assume es:nothing
                cmp     ax, word ptr es:NTERMS ; int nterms;
                jle     short loc_11B76
                xor     cx, cx
                mov     [bp+var_8], 0

loc_11B76:                              ; CODE XREF: sub_11A2F+13E↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     es:word_2AED3, 1
                jg      short loc_11B86
                jmp     loc_11DBE
; ---------------------------------------------------------------------------

loc_11B86:                              ; CODE XREF: sub_11A2F+152↑j
                or      cx, cx
                jz      short loc_11B8D
                jmp     loc_11DBE
; ---------------------------------------------------------------------------

loc_11B8D:                              ; CODE XREF: sub_11A2F+159↑j
                push    seg dseg19
                push    offset byte_29FDB
                call    sub_15FC6
                add     sp, 4
                mov     di, ax
                cmp     di, 0FFFFh
                jg      short loc_11BA5
                jmp     loc_11DBE
; ---------------------------------------------------------------------------

loc_11BA5:                              ; CODE XREF: sub_11A2F+171↑j
                mov     [bp+var_8], 1
                push    di
                call    sub_1A0E4
                pop     cx
                mov     word ptr [bp+var_4+2], dx
                mov     word ptr [bp+var_4], ax
                mov     [bp+var_6], 0
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+2Ah]
                les     bx, [bp+var_4]
                cmp     ax, es:[bx+2Ah]
                ja      short loc_11BD6
                jmp     loc_11D82
; ---------------------------------------------------------------------------

loc_11BD6:                              ; CODE XREF: sub_11A2F+1A2↑j
                xor     cx, cx

loc_11BD8:                              ; CODE XREF: sub_11A2F+350↓j
                mov     ax, cx
                shl     ax, 1
                les     bx, [bp+var_4]
                add     bx, ax
                cmp     word ptr es:[bx+3Ch], 0FFFFh
                jg      short loc_11BEB
                jmp     loc_11D79
; ---------------------------------------------------------------------------

loc_11BEB:                              ; CODE XREF: sub_11A2F+1B7↑j
                xor     si, si

loc_11BED:                              ; CODE XREF: sub_11A2F+347↓j
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+3Ch], 0FFFFh
                jz      short loc_11C07
                jmp     loc_11D70
; ---------------------------------------------------------------------------

loc_11C07:                              ; CODE XREF: sub_11A2F+1D3↑j
                mov     ax, cx
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29BDA
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+28h]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     es:[bx+0CCh], ax
                mov     ax, cx
                shl     ax, 1
                les     bx, [bp+var_4]
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                mov     dx, si
                shl     dx, 1
                mov     bx, seg dseg19
                mov     es, bx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, dx
                mov     es:[bx+3Ch], ax
                mov     ax, cx
                shl     ax, 1
                les     bx, [bp+var_4]
                add     bx, ax
                mov     ax, es:[bx+50h]
                mov     dx, si
                shl     dx, 1
                mov     bx, seg dseg19
                mov     es, bx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, dx
                mov     es:[bx+50h], ax
                mov     ax, cx
                shl     ax, 1
                les     bx, [bp+var_4]
                add     bx, ax
                mov     word ptr es:[bx+3Ch], 0FFFFh
                mov     ax, cx
                shl     ax, 1
                les     bx, [bp+var_4]
                add     bx, ax
                mov     word ptr es:[bx+50h], 0FFFFh
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29BDA
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+28h]
                les     bx, [bp+var_4]
                sub     es:[bx+0CCh], ax
                push    word ptr [bp+var_4+2]
                push    word ptr [bp+var_4]
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                push    0
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                call    sub_15560
                add     sp, 6
                push    dx
                push    ax
                push    ds
                push    offset aC_0     ; "%c"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                push    324h
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 10h
                push    33Ch
                push    di
                call    sub_15C7E
                add     sp, 4
                mov     [bp+var_6], 1
                mov     si, 0Bh
                mov     cx, 0Bh

loc_11D70:                              ; CODE XREF: sub_11A2F+1D5↑j
                inc     si
                cmp     si, 0Ah
                jge     short loc_11D79
                jmp     loc_11BED
; ---------------------------------------------------------------------------

loc_11D79:                              ; CODE XREF: sub_11A2F+1B9↑j
                                        ; sub_11A2F+345↑j
                inc     cx
                cmp     cx, 0Ah
                jge     short loc_11D82
                jmp     loc_11BD8
; ---------------------------------------------------------------------------

loc_11D82:                              ; CODE XREF: sub_11A2F+1A4↑j
                                        ; sub_11A2F+34E↑j
                cmp     [bp+var_6], 0
                jnz     short loc_11DBE
                push    word ptr [bp+var_4+2]
                push    word ptr [bp+var_4]
                push    319h
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    31Ah
                push    di
                call    sub_15C7E
                add     sp, 8

loc_11DBE:                              ; CODE XREF: sub_11A2F+154↑j
                                        ; sub_11A2F+15B↑j ...
                cmp     [bp+var_8], 0
                jz      short loc_11DC7
                jmp     loc_1247F
; ---------------------------------------------------------------------------

loc_11DC7:                              ; CODE XREF: sub_11A2F+393↑j
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     bx, es:[bx+1Eh]
                imul    bx, 34h ; '4'
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     word ptr es:[bx+0B1Eh], 0FFFFh
                jnz     short loc_11E01
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:word_2AED5
                mov     dx, seg NTERMS
                mov     es, dx
                assume es:nothing
                cmp     ax, word ptr es:NTERMS ; int nterms;
                jge     short loc_11E01

loc_11DFA:                              ; CODE XREF: sub_11A2F+B7↑j
                push    ds
                push    offset aThisClassDoesN ; "This class does not have theiving abili"...
                jmp     loc_11A6C
; ---------------------------------------------------------------------------

loc_11E01:                              ; CODE XREF: sub_11A2F+3B4↑j
                                        ; sub_11A2F+3C9↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_29880
                push    es:word_2987E
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    37h ; '7'
                push    0
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jnz     short loc_11E62
                push    352h
                jmp     loc_1246D
; ---------------------------------------------------------------------------

loc_11E62:                              ; CODE XREF: sub_11A2F+42B↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    seg dseg19
                push    offset unk_29B4A
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_11E89
                push    353h
                jmp     loc_1246D
; ---------------------------------------------------------------------------

loc_11E89:                              ; CODE XREF: sub_11A2F+452↑j
                xor     cx, cx
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     bx, es:[bx+1Eh]
                imul    bx, 34h ; '4'
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:[bx+0B1Eh]
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     ax, es:[bx+2Ah]
                jbe     short loc_11ECE
                push    478h
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4
                mov     cx, 1

loc_11ECE:                              ; CODE XREF: sub_11A2F+485↑j
                or      cx, cx
                jz      short loc_11ED5
                jmp     loc_1247F
; ---------------------------------------------------------------------------

loc_11ED5:                              ; CODE XREF: sub_11A2F+4A1↑j
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    seg dseg19
                push    offset byte_29B40
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_29BCE, 0
                jge     short loc_11EFC
                jmp     loc_121DF
; ---------------------------------------------------------------------------

loc_11EFC:                              ; CODE XREF: sub_11A2F+4C8↑j
                jg      short loc_11F09
                cmp     es:word_29BCC, 0
                ja      short loc_11F09
                jmp     loc_121DF
; ---------------------------------------------------------------------------

loc_11F09:                              ; CODE XREF: sub_11A2F:loc_11EFC↑j
                                        ; sub_11A2F+4D5↑j
                push    326h
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    32Dh
                call    sub_15C18
                add     sp, 6
                push    0
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                push    0
                push    0Ah
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_29BCE
                push    es:word_29BCC
                call    F_LDIV
                mov     bx, seg dseg19
                mov     es, bx
                mov     bx, es:word_29BCE
                mov     cx, es:word_29BCC
                sub     cx, ax
                sbb     bx, dx
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29BCE, bx
                mov     es:word_29BCC, cx
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_29BCE, 0
                jg      short loc_11FE6
                jl      short loc_11FD3
                cmp     es:word_29BCC, 0
                jnb     short loc_11FE6

loc_11FD3:                              ; CODE XREF: sub_11A2F+59A↑j
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29BCE, 0
                mov     es:word_29BCC, 0

loc_11FE6:                              ; CODE XREF: sub_11A2F+598↑j
                                        ; sub_11A2F+5A2↑j
                push    0
                push    3E8h
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29BCE
                push    es:word_29BCC
                call    F_LDIV
                mov     di, ax
                or      di, di
                jl      short loc_1200B
                cmp     di, 3A98h
                jle     short loc_1200E

loc_1200B:                              ; CODE XREF: sub_11A2F+5D4↑j
                mov     di, 3A98h

loc_1200E:                              ; CODE XREF: sub_11A2F+5DA↑j
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+26h]
                sub     ax, di
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     es:[bx+26h], ax
                push    0
                push    64h ; 'd'
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_29BCE
                push    es:word_29BCC
                call    F_LDIV
                mov     bx, seg dseg19
                mov     es, bx
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     cx, es:[bx+96h]
                mov     bx, es:[bx+94h]
                sub     bx, ax
                sbb     cx, dx
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     si, es:dword_29DD4
                assume es:nothing
                mov     es:[si+96h], cx
                mov     es:[si+94h], bx
                push    di
                push    ds
                push    offset aYouSufferDHitP ; "You suffer %d hit points of damage and "...
                call    PRF             ; prf(string);
                add     sp, 6
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     es:word_29BCE, 0
                jg      short loc_120A8
                jl      short loc_12095
                cmp     es:word_29BCC, 3E8h
                jnb     short loc_120A8

loc_12095:                              ; CODE XREF: sub_11A2F+65B↑j
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29BCE, 0
                mov     es:word_29BCC, 0

loc_120A8:                              ; CODE XREF: sub_11A2F+659↑j
                                        ; sub_11A2F+664↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_17567
                pop     cx
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+96h], 0
                jg      short loc_120EC
                jl      short loc_120D4
                cmp     word ptr es:[bx+94h], 0
                jnb     short loc_120EC

loc_120D4:                              ; CODE XREF: sub_11A2F+69B↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     word ptr es:[bx+96h], 0
                mov     word ptr es:[bx+94h], 0

loc_120EC:                              ; CODE XREF: sub_11A2F+699↑j
                                        ; sub_11A2F+6A3↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+26h], 1
                jge     short loc_1210D
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     word ptr es:[bx+26h], 0

loc_1210D:                              ; CODE XREF: sub_11A2F+6CC↑j
                push    ds
                push    offset aVillageShop_2 ; "Village Shop"
                push    seg dseg19
                push    offset unk_29B4A
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jnz     short loc_12131
                push    seg dseg19
                push    offset byte_29B40
                call    UPDBTV          ; void updbtv(char *recptr);
                add     sp, 4

loc_12131:                              ; CODE XREF: sub_11A2F+6F2↑j
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, es:word_2AED1
                dec     dx
                mov     es, ax
                cmp     es:word_2AED5, dx
                jg      short loc_1214B
                jmp     loc_1247F
; ---------------------------------------------------------------------------

loc_1214B:                              ; CODE XREF: sub_11A2F+717↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+0DCh]
                call    sub_1A0E4
                pop     cx
                push    dx
                push    ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    315h
                call    sub_15C18
                add     sp, 0Eh
                push    4
                push    0FFFFh
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_1A1CA
                jmp     loc_11A83
; ---------------------------------------------------------------------------

loc_121DF:                              ; CODE XREF: sub_11A2F+4CA↑j
                                        ; sub_11A2F+4D7↑j
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AED3, 1
                jz      short loc_121EF
                jmp     loc_122CA
; ---------------------------------------------------------------------------

loc_121EF:                              ; CODE XREF: sub_11A2F+7BB↑j
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_29BC2, 0
                ja      short loc_1220C
                jb      short loc_12206
                cmp     es:word_29BC0, 1
                jnb     short loc_1220C

loc_12206:                              ; CODE XREF: sub_11A2F+7CD↑j
                push    32Fh
                jmp     loc_1246D
; ---------------------------------------------------------------------------

loc_1220C:                              ; CODE XREF: sub_11A2F+7CB↑j
                                        ; sub_11A2F+7D5↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29BC2
                push    es:word_29BC0
                push    ds
                push    offset aLd_1    ; "%ld"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                push    335h
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+92h]
                mov     dx, es:[bx+90h]
                mov     bx, seg dseg19
                mov     es, bx
                assume es:dseg19
                add     dx, es:word_29BC0
                adc     ax, es:word_29BC2
                mov     bx, seg dseg19
                mov     es, bx
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     es:[bx+92h], ax
                mov     es:[bx+90h], dx
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:word_29BC2, 0
                mov     es:word_29BC0, 0
                push    seg dseg19
                push    offset byte_29B40
                call    UPDBTV          ; void updbtv(char *recptr);
                add     sp, 4
                push    0
                push    64h ; 'd'
                push    ss
                lea     ax, [bp+var_6C]
                push    ax
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    ss
                lea     ax, [bp+var_6C]
                push    ax
                call    STRCPY          ; char* strcpy(char* destination, const char* source );
                add     sp, 8
                push    ds
                push    offset aHasStolenCashF ; " has stolen cash from one of your store"...
                jmp     loc_12444
; ---------------------------------------------------------------------------

loc_122CA:                              ; CODE XREF: sub_11A2F+7BD↑j
                mov     di, 0FFFFh
                xor     cx, cx

loc_122CF:                              ; CODE XREF: sub_11A2F+8C0↓j
                mov     ax, cx
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+3Ch], 0FFFFh
                jnz     short loc_122EB
                mov     di, cx
                mov     cx, 0Ah

loc_122EB:                              ; CODE XREF: sub_11A2F+8B5↑j
                inc     cx
                cmp     cx, 0Ah
                jl      short loc_122CF
                cmp     di, 0FFFFh
                jnz     short loc_122FC
                push    31Dh
                jmp     loc_1246D
; ---------------------------------------------------------------------------

loc_122FC:                              ; CODE XREF: sub_11A2F+8C5↑j
                push    seg dseg19
                push    offset byte_29FDB
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                mov     si, ax
                or      si, si
                jg      short loc_12313
                jmp     loc_1246A
; ---------------------------------------------------------------------------

loc_12313:                              ; CODE XREF: sub_11A2F+8DF↑j
                cmp     si, 15h
                jl      short loc_1231B
                jmp     loc_1246A
; ---------------------------------------------------------------------------

loc_1231B:                              ; CODE XREF: sub_11A2F+8E7↑j
                dec     si
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     word ptr es:[bx+1878h], 0FFFFh
                jnz     short loc_12330
                jmp     loc_1246A
; ---------------------------------------------------------------------------

loc_12330:                              ; CODE XREF: sub_11A2F+8FC↑j
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:[bx+1878h]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                push    320h
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:[bx+1878h]
                mov     dx, di
                shl     dx, 1
                mov     bx, seg dseg19
                mov     es, bx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, dx
                mov     es:[bx+3Ch], ax
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:[bx+18A0h]
                mov     dx, di
                shl     dx, 1
                mov     bx, seg dseg19
                mov     es, bx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, dx
                mov     es:[bx+50h], ax
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29BDA
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+28h]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     es:[bx+0CCh], ax
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     word ptr es:[bx+1878h], 0FFFFh
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                mov     word ptr es:[bx+18A0h], 0FFFFh
                push    seg dseg19
                push    offset byte_29B40
                call    UPDBTV          ; void updbtv(char *recptr);
                add     sp, 4
                push    0
                push    64h ; 'd'
                push    ss
                lea     ax, [bp+var_6C]
                push    ax
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    ss
                lea     ax, [bp+var_6C]
                push    ax
                call    STRCPY          ; char* strcpy(char* destination, const char* source );
                add     sp, 8
                push    ds
                push    offset aHasStolenAnIte ; " has stolen an item from one of your st"...

loc_12444:                              ; CODE XREF: sub_11A2F+898↑j
                push    ss
                lea     ax, [bp+var_6C]
                push    ax
                call    STRCAT          ; char *strcat(char *destination, const char *source );
                add     sp, 8
                push    0
                push    0
                push    ss
                lea     ax, [bp+var_6C]
                push    ax
                push    seg dseg19
                push    offset unk_29B4A
                call    sub_18770
                add     sp, 0Ch
                jmp     short loc_1247F
; ---------------------------------------------------------------------------

loc_1246A:                              ; CODE XREF: sub_11A2F+8E1↑j
                                        ; sub_11A2F+8E9↑j ...
                push    31Fh

loc_1246D:                              ; CODE XREF: sub_11A2F+430↑j
                                        ; sub_11A2F+457↑j ...
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4

loc_1247F:                              ; CODE XREF: sub_11A2F+55↑j
                                        ; sub_11A2F+395↑j ...
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_11A2F       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_12484       proc far                ; DATA XREF: dseg19:0962↓o

var_100         = byte ptr -100h

                enter   100h, 0
                push    si
                push    ds
                mov     ax, seg dseg12
                mov     ds, ax
                assume ds:dseg12
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AED3, 2
                jge     short loc_124A4
                call    sub_15CFA
                jmp     loc_1259E
; ---------------------------------------------------------------------------

loc_124A4:                              ; CODE XREF: sub_12484+16↑j
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+96h], 0
                jge     short loc_124B9
                jmp     loc_12589
; ---------------------------------------------------------------------------

loc_124B9:                              ; CODE XREF: sub_12484+30↑j
                jg      short loc_124C6
                cmp     word ptr es:[bx+94h], 64h ; 'd'
                ja      short loc_124C6
                jmp     loc_12589
; ---------------------------------------------------------------------------

loc_124C6:                              ; CODE XREF: sub_12484:loc_124B9↑j
                                        ; sub_12484+3D↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                sub     word ptr es:[bx+94h], 64h ; 'd'
                sbb     word ptr es:[bx+96h], 0
                push    0
                push    0FFh
                push    ss
                lea     ax, [bp+var_100]
                push    ax
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    ss
                lea     ax, [bp+var_100]
                push    ax
                call    STRCPY          ; char* strcpy(char* destination, const char* source );
                add     sp, 8
                push    ds
                push    (offset aSs+3)  ; ": "
                push    ss
                lea     ax, [bp+var_100]
                push    ax
                call    STRCAT          ; char *strcat(char *destination, const char *source );
                add     sp, 8
                mov     si, 1
                jmp     short loc_12551
; ---------------------------------------------------------------------------

loc_12523:                              ; CODE XREF: sub_12484+D7↓j
                mov     ax, si
                imul    ax, 0C8h
                add     ax, 1C23h
                push    seg dseg19
                push    ax
                push    ss
                lea     ax, [bp+var_100]
                push    ax
                call    STRCAT          ; char *strcat(char *destination, const char *source );
                add     sp, 8
                push    ds
                push    (offset aY+1)   ; " "
                push    ss
                lea     ax, [bp+var_100]
                push    ax
                call    STRCAT          ; char *strcat(char *destination, const char *source );
                add     sp, 8
                inc     si

loc_12551:                              ; CODE XREF: sub_12484+9D↑j
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AED3, si
                jg      short loc_12523
                push    ss
                lea     ax, [bp+var_100]
                push    ax
                call    sub_19D25
                add     sp, 4
                push    ds
                push    offset aYouTelepathica ; "You telepathically send the message.\r"
                call    PRF             ; prf(string);
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_17567
                pop     cx
                jmp     short loc_1259E
; ---------------------------------------------------------------------------

loc_12589:                              ; CODE XREF: sub_12484+32↑j
                                        ; sub_12484+3F↑j
                push    41Ah
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4

loc_1259E:                              ; CODE XREF: sub_12484+1D↑j
                                        ; sub_12484+103↑j
                pop     ds
                assume ds:dseg21
                pop     si
                leave
                retf
sub_12484       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_125A2       proc far                ; DATA XREF: dseg19:07DC↓o

var_4           = word ptr -4
var_2           = word ptr -2

                enter   4, 0
                push    ds
                mov     ax, seg dseg12
                mov     ds, ax
                assume ds:dseg12
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AED3, 2
                jge     short loc_125C1
                call    sub_15CFA
                jmp     loc_12828
; ---------------------------------------------------------------------------

loc_125C1:                              ; CODE XREF: sub_125A2+15↑j
                push    seg dseg19
                push    offset byte_29FDB
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                mov     [bp+var_2], dx
                mov     [bp+var_4], ax
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+96h]
                mov     dx, es:[bx+94h]
                cmp     ax, [bp+var_2]
                jg      short loc_125FB
                jl      short loc_125F5
                cmp     dx, [bp+var_4]
                jnb     short loc_125FB

loc_125F5:                              ; CODE XREF: sub_125A2+4C↑j
                push    316h
                jmp     loc_12816
; ---------------------------------------------------------------------------

loc_125FB:                              ; CODE XREF: sub_125A2+4A↑j
                                        ; sub_125A2+51↑j
                cmp     [bp+var_2], 1
                jg      short loc_12610
                jl      short loc_1260A
                cmp     [bp+var_4], 86A0h
                jnb     short loc_12610

loc_1260A:                              ; CODE XREF: sub_125A2+5F↑j
                push    4FAh
                jmp     loc_12816
; ---------------------------------------------------------------------------

loc_12610:                              ; CODE XREF: sub_125A2+5D↑j
                                        ; sub_125A2+66↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_29880
                push    es:word_2987E
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    37h ; '7'
                push    0
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jnz     short loc_1266E
                jmp     loc_12813
; ---------------------------------------------------------------------------

loc_1266E:                              ; CODE XREF: sub_125A2+C7↑j
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    seg dseg19
                push    offset byte_29B40
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    UACOFF          ; struct usracc *uaptr=uacoff(unum);
                pop     cx
                push    dx
                push    ax
                push    seg dseg19
                push    offset unk_29B4A
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jnz     short loc_126C7
                push    ds
                push    offset aHeyYouDonTOwnT ; "Hey! You don't own this store!\r"
                call    PRF             ; prf(string);
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    OUTPRF          ; outprf (unum);
                jmp     loc_127FF
; ---------------------------------------------------------------------------

loc_126C7:                              ; CODE XREF: sub_125A2+105↑j
                cmp     [bp+var_2], 0
                jge     short loc_126D0
                jmp     loc_12755
; ---------------------------------------------------------------------------

loc_126D0:                              ; CODE XREF: sub_125A2+129↑j
                jnz     short loc_126D8
                cmp     [bp+var_4], 0
                jb      short loc_12755

loc_126D8:                              ; CODE XREF: sub_125A2:loc_126D0↑j
                mov     ax, seg dseg19
                mov     dx, [bp+var_2]
                mov     bx, [bp+var_4]
                mov     es, ax
                add     es:word_29BCC, bx
                adc     es:word_29BCE, dx
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+96h]
                mov     dx, es:[bx+94h]
                sub     dx, [bp+var_4]
                sbb     ax, [bp+var_2]
                mov     bx, seg dseg19
                mov     es, bx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     es:[bx+96h], ax
                mov     es:[bx+94h], dx
                push    seg dseg19
                push    offset byte_29B40
                call    UPDBTV          ; void updbtv(char *recptr);
                add     sp, 4
                push    [bp+var_2]
                push    [bp+var_4]
                push    ds
                push    offset aLd_1    ; "%ld"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                push    317h
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8
                jmp     loc_12828
; ---------------------------------------------------------------------------

loc_12755:                              ; CODE XREF: sub_125A2+12B↑j
                                        ; sub_125A2+134↑j
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, [bp+var_2]
                mov     dx, [bp+var_4]
                add     es:[bx+94h], dx
                adc     es:[bx+96h], ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+96h], 0
                jg      short loc_127A3
                jl      short loc_1278B
                cmp     word ptr es:[bx+94h], 0
                jnb     short loc_127A3

loc_1278B:                              ; CODE XREF: sub_125A2+1DF↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     word ptr es:[bx+96h], 0
                mov     word ptr es:[bx+94h], 0

loc_127A3:                              ; CODE XREF: sub_125A2+1DD↑j
                                        ; sub_125A2+1E7↑j
                push    31Eh
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+26h]
                add     ax, 0FFF4h
                jge     short loc_12802
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     word ptr es:[bx+26h], 0
                push    339h
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_183D9

loc_127FF:                              ; CODE XREF: sub_125A2+122↑j
                pop     cx
                jmp     short loc_12828
; ---------------------------------------------------------------------------

loc_12802:                              ; CODE XREF: sub_125A2+227↑j
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                sub     word ptr es:[bx+26h], 0Ch
                jmp     short loc_12828
; ---------------------------------------------------------------------------

loc_12813:                              ; CODE XREF: sub_125A2+C9↑j
                push    31Bh

loc_12816:                              ; CODE XREF: sub_125A2+56↑j
                                        ; sub_125A2+6B↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4

loc_12828:                              ; CODE XREF: sub_125A2+1C↑j
                                        ; sub_125A2+1B0↑j ...
                pop     ds
                assume ds:dseg21
                leave
                retf
sub_125A2       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1282B       proc far                ; DATA XREF: dseg19:09DA↓o

var_4           = word ptr -4
var_2           = word ptr -2

                enter   4, 0
                push    ds
                mov     ax, seg dseg12
                mov     ds, ax
                assume ds:dseg12
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AED3, 2
                jge     short loc_1284A
                call    sub_15CFA
                jmp     loc_12B3C
; ---------------------------------------------------------------------------

loc_1284A:                              ; CODE XREF: sub_1282B+15↑j
                push    seg dseg19
                push    offset byte_29FDB
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                mov     [bp+var_2], dx
                mov     [bp+var_4], ax
                cmp     [bp+var_2], 1
                jg      short loc_12873
                jl      short loc_1286D
                cmp     [bp+var_4], 86A0h
                jnb     short loc_12873

loc_1286D:                              ; CODE XREF: sub_1282B+39↑j
                push    4FAh
                jmp     loc_12B2A
; ---------------------------------------------------------------------------

loc_12873:                              ; CODE XREF: sub_1282B+37↑j
                                        ; sub_1282B+40↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29880
                push    es:word_2987E
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    37h ; '7'
                push    0
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jnz     short loc_128D1
                jmp     loc_12B27
; ---------------------------------------------------------------------------

loc_128D1:                              ; CODE XREF: sub_1282B+A1↑j
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    seg dseg19
                push    offset byte_29B40
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    UACOFF          ; struct usracc *uaptr=uacoff(unum);
                pop     cx
                push    dx
                push    ax
                push    seg dseg19
                push    offset unk_29B4A
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jnz     short loc_1292A
                push    ds
                push    offset aHeyYouDonTOwnT ; "Hey! You don't own this store!\r"
                call    PRF             ; prf(string);
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    OUTPRF          ; outprf (unum);
                jmp     loc_12B13
; ---------------------------------------------------------------------------

loc_1292A:                              ; CODE XREF: sub_1282B+DF↑j
                cmp     [bp+var_2], 0
                jge     short loc_12933
                jmp     loc_12A69
; ---------------------------------------------------------------------------

loc_12933:                              ; CODE XREF: sub_1282B+103↑j
                jnz     short loc_1293E
                cmp     [bp+var_4], 0
                jnb     short loc_1293E
                jmp     loc_12A69
; ---------------------------------------------------------------------------

loc_1293E:                              ; CODE XREF: sub_1282B:loc_12933↑j
                                        ; sub_1282B+10E↑j
                cmp     [bp+var_2], 0
                jg      short loc_12993
                jl      short loc_1294D
                cmp     [bp+var_4], 7530h
                jnb     short loc_12993

loc_1294D:                              ; CODE XREF: sub_1282B+119↑j
                push    ds
                push    offset aYouCanTRemoveL ; "You can't remove less then 30,000 ions!"...
                call    PRF             ; prf(string);
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:word_2AED5
                mov     dx, seg NTERMS
                mov     es, dx
                assume es:nothing
                cmp     ax, word ptr es:NTERMS ; int nterms;
                jge     short loc_12993
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     es:word_2AED5, 0FFFFh
                jle     short loc_12993
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    OUTPRF          ; outprf (unum);
                pop     cx
                call    CLRPRF          ; clrprf()
                jmp     loc_12B3C
; ---------------------------------------------------------------------------

loc_12993:                              ; CODE XREF: sub_1282B+117↑j
                                        ; sub_1282B+120↑j ...
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:word_29BCE
                mov     dx, es:word_29BCC
                cmp     ax, [bp+var_2]
                jge     short loc_129A9
                jmp     loc_12A34
; ---------------------------------------------------------------------------

loc_129A9:                              ; CODE XREF: sub_1282B+179↑j
                jnz     short loc_129B3
                cmp     dx, [bp+var_4]
                jnb     short loc_129B3
                jmp     loc_12A34
; ---------------------------------------------------------------------------

loc_129B3:                              ; CODE XREF: sub_1282B:loc_129A9↑j
                                        ; sub_1282B+183↑j
                mov     ax, seg dseg19
                mov     dx, [bp+var_2]
                mov     bx, [bp+var_4]
                mov     es, ax
                sub     es:word_29BCC, bx
                sbb     es:word_29BCE, dx
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+96h]
                mov     dx, es:[bx+94h]
                add     dx, [bp+var_4]
                adc     ax, [bp+var_2]
                mov     bx, seg dseg19
                mov     es, bx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     es:[bx+96h], ax
                mov     es:[bx+94h], dx
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                sub     word ptr es:[bx+94h], 7530h
                sbb     word ptr es:[bx+96h], 0
                push    seg dseg19
                push    offset byte_29B40
                call    UPDBTV          ; void updbtv(char *recptr);
                add     sp, 4
                push    [bp+var_2]
                push    [bp+var_4]
                push    ds
                push    offset aLd_1    ; "%ld"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                push    318h
                jmp     short loc_12A54
; ---------------------------------------------------------------------------

loc_12A34:                              ; CODE XREF: sub_1282B+17B↑j
                                        ; sub_1282B+185↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_29BCE
                push    es:word_29BCC
                push    ds
                push    offset aLd_1    ; "%ld"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                push    4FBh

loc_12A54:                              ; CODE XREF: sub_1282B+207↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8
                jmp     loc_12B3C
; ---------------------------------------------------------------------------

loc_12A69:                              ; CODE XREF: sub_1282B+105↑j
                                        ; sub_1282B+110↑j
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, [bp+var_2]
                mov     dx, [bp+var_4]
                add     es:[bx+94h], dx
                adc     es:[bx+96h], ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+96h], 0
                jg      short loc_12AB7
                jl      short loc_12A9F
                cmp     word ptr es:[bx+94h], 0
                jnb     short loc_12AB7

loc_12A9F:                              ; CODE XREF: sub_1282B+26A↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     word ptr es:[bx+96h], 0
                mov     word ptr es:[bx+94h], 0

loc_12AB7:                              ; CODE XREF: sub_1282B+268↑j
                                        ; sub_1282B+272↑j
                push    31Eh
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+26h]
                add     ax, 0FFF4h
                jge     short loc_12B16
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     word ptr es:[bx+26h], 0
                push    339h
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_183D9

loc_12B13:                              ; CODE XREF: sub_1282B+FC↑j
                pop     cx
                jmp     short loc_12B3C
; ---------------------------------------------------------------------------

loc_12B16:                              ; CODE XREF: sub_1282B+2B2↑j
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                sub     word ptr es:[bx+26h], 0Ch
                jmp     short loc_12B3C
; ---------------------------------------------------------------------------

loc_12B27:                              ; CODE XREF: sub_1282B+A3↑j
                push    31Bh

loc_12B2A:                              ; CODE XREF: sub_1282B+45↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4

loc_12B3C:                              ; CODE XREF: sub_1282B+1C↑j
                                        ; sub_1282B+165↑j ...
                pop     ds
                assume ds:dseg21
                leave
                retf
sub_1282B       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_12B3F       proc far                ; DATA XREF: dseg19:0908↓o

var_4           = word ptr -4
var_2           = word ptr -2

                enter   4, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg12
                mov     ds, ax
                assume ds:dseg12
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29880
                push    es:word_2987E
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    37h ; '7'
                push    1
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jnz     short loc_12B84
                jmp     loc_12D3D
; ---------------------------------------------------------------------------

loc_12B84:                              ; CODE XREF: sub_12B3F+40↑j
                push    ds
                push    offset aYearRelativeWo ; "Year           Relative             Wor"...
                call    PRF             ; prf(string);
                add     sp, 4
                push    1
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    seg dseg19
                push    offset byte_29B40
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                mov     di, 1

loc_12BAA:                              ; CODE XREF: sub_12B3F+1F9↓j
                mov     ax, seg dseg19
                mov     es, ax
                mov     al, es:byte_29B48
                mov     ah, 0
                push    ax
                mov     ax, seg dseg19
                mov     es, ax
                mov     al, es:byte_29B47
                mov     ah, 0
                push    ax
                push    ds
                push    offset aCC      ; "%c%c"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                mov     si, ax
                imul    si, 64h ; 'd'
                add     si, 7D0h
                mov     ax, seg dseg19
                mov     es, ax
                mov     al, es:byte_29B42
                mov     ah, 0
                push    ax
                mov     ax, seg dseg19
                mov     es, ax
                mov     al, es:byte_29B41
                mov     ah, 0
                push    ax
                mov     ax, seg dseg19
                mov     es, ax
                mov     al, es:byte_29B40
                mov     ah, 0
                push    ax
                push    ds
                push    offset aCCC_2   ; "%c%c%c"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 0Ah
                push    dx
                push    ax
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                mov     [bp+var_2], ax
                mov     ax, seg dseg19
                mov     es, ax
                mov     al, es:byte_29B45
                mov     ah, 0
                push    ax
                mov     ax, seg dseg19
                mov     es, ax
                mov     al, es:byte_29B44
                mov     ah, 0
                push    ax
                mov     ax, seg dseg19
                mov     es, ax
                mov     al, es:byte_29B43
                mov     ah, 0
                push    ax
                push    ds
                push    offset aCCC_2   ; "%c%c%c"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 0Ah
                push    dx
                push    ax
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                mov     [bp+var_4], ax
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[bx+24h]
                imul    dx, 64h ; 'd'
                add     dx, 7D0h
                cmp     dx, si
                jnz     short loc_12CC4
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_29BC2
                push    es:word_29BC0
                push    ds
                push    offset aLd_1    ; "%ld"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, [bp+var_4]
                sub     ax, es:[bx+22h]
                push    ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, [bp+var_2]
                sub     ax, es:[bx+20h]
                push    ax
                push    si
                push    ds
                push    offset aDADEast4dNorth ; "%d A.D.    east: %-4d north: %-4d  $ %-"...
                call    PRF             ; prf(string);
                add     sp, 0Eh
                jmp     short loc_12CEE
; ---------------------------------------------------------------------------

loc_12CC4:                              ; CODE XREF: sub_12B3F+133↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_29BC2
                push    es:word_29BC0
                push    ds
                push    offset aLd_1    ; "%ld"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                push    si
                push    ds
                push    offset aDADNotAvailabl ; "%d A.D.    NOT AVAILABLE           $ %-"...
                call    PRF             ; prf(string);
                add     sp, 0Ah

loc_12CEE:                              ; CODE XREF: sub_12B3F+183↑j
                push    38h ; '8'
                call    QNPBTV          ; int qnpbtv (int getopt);
                pop     cx
                or      ax, ax
                jz      short loc_12D32
                push    1
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    seg dseg19
                push    offset byte_29B40
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                push    seg dseg19
                push    offset unk_29B4A
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                call    SAMETO          ; int match=sameto(char *shorts, char *longs);
                add     sp, 8
                or      ax, ax
                jnz     short loc_12D34

loc_12D32:                              ; CODE XREF: sub_12B3F+1B9↑j
                xor     di, di

loc_12D34:                              ; CODE XREF: sub_12B3F+1F1↑j
                or      di, di
                jz      short loc_12D3B
                jmp     loc_12BAA
; ---------------------------------------------------------------------------

loc_12D3B:                              ; CODE XREF: sub_12B3F+1F7↑j
                jmp     short loc_12D49
; ---------------------------------------------------------------------------

loc_12D3D:                              ; CODE XREF: sub_12B3F+42↑j
                push    ds
                push    offset aYouDonTHaveAny ; "You don't have any stores established."...
                call    PRF             ; prf(string);
                add     sp, 4

loc_12D49:                              ; CODE XREF: sub_12B3F:loc_12D3B↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_17567
                pop     cx
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_12B3F       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_12D5E       proc far                ; CODE XREF: sub_2B24:loc_2C3B↑P
                                        ; DATA XREF: dseg19:043A↓o

var_14          = byte ptr -14h

                enter   14h, 0
                push    si
                push    ds
                mov     ax, seg dseg12
                mov     ds, ax
                assume ds:dseg12
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29878
                push    es:word_29876
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    3Fh ; '?'
                push    1
                push    0
                push    0
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jnz     short loc_12D97
                jmp     loc_12E79
; ---------------------------------------------------------------------------

loc_12D97:                              ; CODE XREF: sub_12D5E+34↑j
                xor     si, si
                push    ds
                push    offset a136m    ; "\x1B[1;36m"
                push    ds
                push    offset aSplayerScoreNe ; "%sPLAYER                          SCORE"...
                call    PRF             ; prf(string);
                add     sp, 8
                push    ds
                push    offset a133m_0  ; "\x1B[1;33m"
                push    ds
                push    offset aS_4     ; "%s=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-="...
                call    PRF             ; prf(string);
                add     sp, 8

loc_12DB9:                              ; CODE XREF: sub_12D5E+106↓j
                push    1
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    seg dseg19
                push    offset unk_29A78
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                push    ds
                push    offset aMl_1    ; "ML"
                push    seg dseg19
                push    offset unk_29A78
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jnz     short loc_12E53
                or      si, si
                jnz     short loc_12DF0
                push    ds
                push    offset a137m_1  ; "\x1B[1;37m"
                jmp     short loc_12DF4
; ---------------------------------------------------------------------------

loc_12DF0:                              ; CODE XREF: sub_12D5E+8A↑j
                push    ds
                push    offset a131m_0  ; "\x1B[1;31m"

loc_12DF4:                              ; CODE XREF: sub_12D5E+90↑j
                push    ss
                lea     ax, [bp+var_14]
                push    ax
                call    STRCPY          ; char* strcpy(char* destination, const char* source );
                add     sp, 8
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29A9C
                push    es:word_29A9A
                push    ds
                push    offset aLd_1    ; "%ld"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29A98
                push    es:word_29A96
                push    ds
                push    offset aLd_1    ; "%ld"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                push    seg dseg19
                push    offset unk_29A78
                push    ss
                lea     ax, [bp+var_14]
                push    ax
                push    ds
                push    offset aS30s10s10s ; "%s%-30s   %-10s   $ %-10s\r"
                call    PRF             ; prf(string);
                add     sp, 14h
                inc     si

loc_12E53:                              ; CODE XREF: sub_12D5E+86↑j
                push    39h ; '9'
                call    QNPBTV          ; int qnpbtv (int getopt);
                pop     cx
                or      ax, ax
                jz      short loc_12E67
                cmp     si, 0Fh
                jge     short loc_12E67
                jmp     loc_12DB9
; ---------------------------------------------------------------------------

loc_12E67:                              ; CODE XREF: sub_12D5E+FF↑j
                                        ; sub_12D5E+104↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_17567
                pop     cx
                jmp     short loc_12E8E
; ---------------------------------------------------------------------------

loc_12E79:                              ; CODE XREF: sub_12D5E+36↑j
                push    30Fh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4

loc_12E8E:                              ; CODE XREF: sub_12D5E+119↑j
                pop     ds
                assume ds:dseg21
                pop     si
                leave
                retf
sub_12D5E       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_12E92       proc far                ; CODE XREF: sub_3A3B:loc_3AFD↑P
                                        ; sub_151BF+17↓P
                                        ; DATA XREF: ...

var_2A          = byte ptr -2Ah
var_16          = word ptr -16h
var_14          = dword ptr -14h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_8           = word ptr -8
var_6           = word ptr -6
var_4           = word ptr -4
var_2           = word ptr -2

                enter   2Ah, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg12
                mov     ds, ax
                assume ds:dseg12
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AED3, 2
                jl      short loc_12EAE
                jmp     loc_12F67
; ---------------------------------------------------------------------------

loc_12EAE:                              ; CODE XREF: sub_12E92+17↑j
                xor     di, di
                push    ds
                push    offset a131m_0  ; "\x1B[1;31m"
                push    ds
                push    offset aSkeywords ; "%sKeywords:\r\r"
                call    PRF             ; prf(string);
                add     sp, 8
                xor     si, si
                jmp     short loc_12F08
; ---------------------------------------------------------------------------

loc_12EC4:                              ; CODE XREF: sub_12E92+80↓j
                mov     bx, si
                imul    bx, 1Eh
                mov     [bp+var_16], bx
                mov     ax, seg dseg19
                mov     es, ax
                cmp     word ptr es:[bx+172h], 0FFFFh
                jle     short loc_12F07
                mov     ax, [bp+var_16]
                add     ax, 156h
                push    seg dseg19
                push    ax
                push    ds
                push    offset a133m_0  ; "\x1B[1;33m"
                push    ds
                push    offset aS10s    ; "%s%-10s  "
                call    PRF             ; prf(string);
                add     sp, 0Ch
                inc     di
                cmp     di, 4
                jle     short loc_12F07
                push    ds
                push    (offset aYouGetThrownBa+14h) ; "\r"
                call    PRF             ; prf(string);
                add     sp, 4
                xor     di, di

loc_12F07:                              ; CODE XREF: sub_12E92+45↑j
                                        ; sub_12E92+65↑j
                inc     si

loc_12F08:                              ; CODE XREF: sub_12E92+30↑j
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AEC5, si
                jg      short loc_12EC4
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29864
                push    es:word_29862
                call    SETMBK          ; FILE *setmbk(mbkptr);
                add     sp, 4
                push    ds
                push    offset a136m    ; "\x1B[1;36m"
                push    ds
                push    (offset aSS_5+2) ; "%s"
                call    PRF             ; prf(string);
                add     sp, 8
                push    472h
                call    PRFMSG          ; prfmsg(msgnum,p1,p2, ..• ,pn);
                pop     cx
                push    ds
                push    offset a137m_1  ; "\x1B[1;37m"
                push    ds
                push    (offset aSS_5+2) ; "%s"
                call    PRF             ; prf(string);
                add     sp, 8

loc_12F54:                              ; CODE XREF: sub_12E92:loc_132ED↓j
                                        ; sub_12E92+50C↓j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_17567
                pop     cx
                jmp     loc_13567
; ---------------------------------------------------------------------------

loc_12F67:                              ; CODE XREF: sub_12E92+19↑j
                push    ds
                push    (offset aYouGetThrownBa+14h) ; "\r"
                call    PRF             ; prf(string);
                add     sp, 4
                push    ds
                push    offset aCombat_2 ; "combat"
                push    seg dseg19
                push    offset byte_29FDB
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_12F8E
                push    473h
                jmp     short loc_12FF8
; ---------------------------------------------------------------------------

loc_12F8E:                              ; CODE XREF: sub_12E92+F5↑j
                push    ds
                push    offset aTalking ; "talking"
                push    seg dseg19
                push    offset byte_29FDB
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_12FA9
                push    476h
                jmp     short loc_12FF8
; ---------------------------------------------------------------------------

loc_12FA9:                              ; CODE XREF: sub_12E92+110↑j
                push    ds
                push    offset aItems_0 ; "items"
                push    seg dseg19
                push    offset byte_29FDB
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_12FC4
                push    479h
                jmp     short loc_12FF8
; ---------------------------------------------------------------------------

loc_12FC4:                              ; CODE XREF: sub_12E92+12B↑j
                push    ds
                push    offset aMoving  ; "moving"
                push    seg dseg19
                push    offset byte_29FDB
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_12FDF
                push    47Ah
                jmp     short loc_12FF8
; ---------------------------------------------------------------------------

loc_12FDF:                              ; CODE XREF: sub_12E92+146↑j
                push    ds
                push    offset aStrategy ; "strategy"
                push    seg dseg19
                push    offset byte_29FDB
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_1300A
                push    47Dh

loc_12FF8:                              ; CODE XREF: sub_12E92+FA↑j
                                        ; sub_12E92+115↑j ...
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4

loc_1300A:                              ; CODE XREF: sub_12E92+161↑j
                push    ds
                push    offset aClass   ; "class"
                push    seg dseg19
                push    offset byte_29FDB
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jnz     short loc_13023
                jmp     loc_132F6
; ---------------------------------------------------------------------------

loc_13023:                              ; CODE XREF: sub_12E92+18C↑j
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AED3, 3
                jge     short loc_13072
                push    ds
                push    (offset aYouGetThrownBa+14h) ; "\r"
                call    PRF             ; prf(string);
                add     sp, 4
                xor     si, si

loc_1303E:                              ; CODE XREF: sub_12E92+1CC↓j
                mov     ax, si
                imul    ax, 34h ; '4'
                add     ax, 0AF2h
                push    seg dseg19
                push    ax
                mov     ax, si
                inc     ax
                push    ax
                push    ds
                push    offset aDS      ; "%d. %s\r"
                call    PRF             ; prf(string);
                add     sp, 0Ah
                inc     si
                cmp     si, 5
                jl      short loc_1303E
                push    ds
                push    (offset aYouGetThrownBa+14h) ; "\r"
                call    PRF             ; prf(string);
                add     sp, 4
                push    496h
                jmp     loc_13555
; ---------------------------------------------------------------------------

loc_13072:                              ; CODE XREF: sub_12E92+19C↑j
                push    seg dseg19
                push    offset byte_2A0A3
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                mov     si, ax
                dec     si
                cmp     si, 0FFFFh
                jg      short loc_1308B
                jmp     loc_132F0
; ---------------------------------------------------------------------------

loc_1308B:                              ; CODE XREF: sub_12E92+1F4↑j
                cmp     si, 5
                jl      short loc_13093
                jmp     loc_132F0
; ---------------------------------------------------------------------------

loc_13093:                              ; CODE XREF: sub_12E92+1FC↑j
                mov     ax, si
                imul    ax, 34h ; '4'
                add     ax, 0AF2h
                mov     word ptr [bp+var_14+2], seg dseg19
                mov     word ptr [bp+var_14], ax
                mov     ax, si
                imul    ax, 0C8h
                add     ax, 0BF6h
                mov     word ptr [bp+var_10+2], seg dseg19
                mov     word ptr [bp+var_10], ax
                push    seg dseg19
                push    word ptr [bp+var_14]
                push    ds
                push    offset a131m_0  ; "\x1B[1;31m"
                push    ds
                push    offset a133m_0  ; "\x1B[1;33m"
                push    ds
                push    offset aSclassNameSS ; "\r%sClass Name: %s%s\r\r"
                call    PRF             ; prf(string);
                add     sp, 10h
                les     bx, [bp+var_14]
                assume es:nothing
                push    word ptr es:[bx+1Ah]
                push    ds
                push    offset a131m_0  ; "\x1B[1;31m"
                push    ds
                push    offset a136m    ; "\x1B[1;36m"
                push    ds
                push    offset aSstrengthSD ; "%sStrength:        %s%d\r"
                call    PRF             ; prf(string);
                add     sp, 0Eh
                les     bx, [bp+var_14]
                push    word ptr es:[bx+1Ch]
                push    ds
                push    offset a131m_0  ; "\x1B[1;31m"
                push    ds
                push    offset a136m    ; "\x1B[1;36m"
                push    ds
                push    offset aSintellengence ; "%sIntellengence:   %s%d\r"
                call    PRF             ; prf(string);
                add     sp, 0Eh
                les     bx, [bp+var_14]
                push    word ptr es:[bx+1Eh]
                push    ds
                push    offset a131m_0  ; "\x1B[1;31m"
                push    ds
                push    offset a136m    ; "\x1B[1;36m"
                push    ds
                push    offset aSwisdomSD ; "%sWisdom:          %s%d\r"
                call    PRF             ; prf(string);
                add     sp, 0Eh
                les     bx, [bp+var_14]
                push    word ptr es:[bx+20h]
                push    ds
                push    offset a131m_0  ; "\x1B[1;31m"
                push    ds
                push    offset a136m    ; "\x1B[1;36m"
                push    ds
                push    offset aSdexteritySD ; "%sDexterity:       %s%d\r"
                call    PRF             ; prf(string);
                add     sp, 0Eh
                les     bx, [bp+var_14]
                push    word ptr es:[bx+22h]
                push    ds
                push    offset a131m_0  ; "\x1B[1;31m"
                push    ds
                push    offset a136m    ; "\x1B[1;36m"
                push    ds
                push    offset aSconstitutionS ; "%sConstitution:    %s%d\r"
                call    PRF             ; prf(string);
                add     sp, 0Eh
                les     bx, [bp+var_14]
                push    word ptr es:[bx+24h]
                push    ds
                push    offset a131m_0  ; "\x1B[1;31m"
                push    ds
                push    offset a136m    ; "\x1B[1;36m"
                push    ds
                push    offset aScharismaSD ; "%sCharisma:        %s%d\r"
                call    PRF             ; prf(string);
                add     sp, 0Eh
                les     bx, [bp+var_14]
                push    word ptr es:[bx+2Ah]
                push    ds
                push    offset a131m_0  ; "\x1B[1;31m"
                push    ds
                push    offset a136m    ; "\x1B[1;36m"
                push    ds
                push    offset aSionConsumptio ; "%sIon Consumption: %s%d\r"
                call    PRF             ; prf(string);
                add     sp, 0Eh
                push    ds
                push    (offset aYouGetThrownBa+14h) ; "\r"
                call    PRF             ; prf(string);
                add     sp, 4
                push    ds
                push    offset a133m_0  ; "\x1B[1;33m"
                push    ds
                push    offset aSlevelExpStrIn ; "%sLevel     Exp.   Str+ Int+ Wis+ Dex+ "...
                call    PRF             ; prf(string);
                add     sp, 8
                xor     di, di

loc_131A9:                              ; CODE XREF: sub_12E92+458↓j
                mov     ax, di
                shl     ax, 1
                les     bx, [bp+var_10]
                add     bx, ax
                cmp     word ptr es:[bx+0B4h], 0
                jge     short loc_131C4
                mov     [bp+var_6], ds
                mov     [bp+var_8], 11B3h
                jmp     short loc_131E0
; ---------------------------------------------------------------------------

loc_131C4:                              ; CODE XREF: sub_12E92+326↑j
                mov     ax, di
                shl     ax, 1
                les     bx, [bp+var_10]
                add     bx, ax
                mov     ax, es:[bx+0B4h]
                imul    ax, 36h ; '6'
                add     ax, 0FDEh
                mov     [bp+var_6], seg dseg19
                mov     [bp+var_8], ax

loc_131E0:                              ; CODE XREF: sub_12E92+330↑j
                mov     ax, di
                add     ax, 2
                push    ax
                push    ds
                push    offset a131m_0  ; "\x1B[1;31m"
                push    ds
                push    offset aS5d     ; "%s %-5d   "
                call    PRF             ; prf(string);
                add     sp, 0Ah
                mov     ax, di
                shl     ax, 2
                les     bx, [bp+var_10]
                add     bx, ax
                push    word ptr es:[bx+2]
                push    word ptr es:[bx]
                push    ds
                push    offset aLd_1    ; "%ld"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                push    ds
                push    offset a7s_0    ; "%-7s  "
                call    PRF             ; prf(string);
                add     sp, 8
                mov     ax, di
                shl     ax, 1
                les     bx, [bp+var_10]
                add     bx, ax
                push    word ptr es:[bx+28h]
                push    ds
                push    offset a5d      ; "%-5d"
                call    PRF             ; prf(string);
                add     sp, 6
                mov     ax, di
                shl     ax, 1
                les     bx, [bp+var_10]
                add     bx, ax
                push    word ptr es:[bx+3Ch]
                push    ds
                push    offset a5d      ; "%-5d"
                call    PRF             ; prf(string);
                add     sp, 6
                mov     ax, di
                shl     ax, 1
                les     bx, [bp+var_10]
                add     bx, ax
                push    word ptr es:[bx+50h]
                push    ds
                push    offset a5d      ; "%-5d"
                call    PRF             ; prf(string);
                add     sp, 6
                mov     ax, di
                shl     ax, 1
                les     bx, [bp+var_10]
                add     bx, ax
                push    word ptr es:[bx+64h]
                push    ds
                push    offset a5d      ; "%-5d"
                call    PRF             ; prf(string);
                add     sp, 6
                mov     ax, di
                shl     ax, 1
                les     bx, [bp+var_10]
                add     bx, ax
                push    word ptr es:[bx+78h]
                push    ds
                push    offset a5d      ; "%-5d"
                call    PRF             ; prf(string);
                add     sp, 6
                mov     ax, di
                shl     ax, 1
                les     bx, [bp+var_10]
                add     bx, ax
                push    word ptr es:[bx+8Ch]
                push    ds
                push    offset a5d      ; "%-5d"
                call    PRF             ; prf(string);
                add     sp, 6
                mov     ax, di
                shl     ax, 1
                les     bx, [bp+var_10]
                add     bx, ax
                push    word ptr es:[bx+0A0h]
                push    ds
                push    offset a5d      ; "%-5d"
                call    PRF             ; prf(string);
                add     sp, 6
                push    [bp+var_6]
                push    [bp+var_8]
                push    ds
                push    (offset aSS_6+2) ; "%s\r"
                call    PRF             ; prf(string);
                add     sp, 8
                inc     di
                cmp     di, 0Ah
                jge     short loc_132ED
                jmp     loc_131A9
; ---------------------------------------------------------------------------

loc_132ED:                              ; CODE XREF: sub_12E92+456↑j
                jmp     loc_12F54
; ---------------------------------------------------------------------------

loc_132F0:                              ; CODE XREF: sub_12E92+1F6↑j
                                        ; sub_12E92+1FE↑j
                push    497h
                jmp     loc_13555
; ---------------------------------------------------------------------------

loc_132F6:                              ; CODE XREF: sub_12E92+18E↑j
                push    ds
                push    offset aSpell   ; "spell"
                push    seg dseg19
                push    offset byte_29FDB
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jnz     short loc_1330F
                jmp     loc_13514
; ---------------------------------------------------------------------------

loc_1330F:                              ; CODE XREF: sub_12E92+478↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     es:word_2AED3, 2
                jz      short loc_1331F
                jmp     loc_133A1
; ---------------------------------------------------------------------------

loc_1331F:                              ; CODE XREF: sub_12E92+488↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29864
                push    es:word_29862
                call    SETMBK          ; FILE *setmbk(mbkptr);
                add     sp, 4
                push    ds
                push    offset a133m_0  ; "\x1B[1;33m"
                push    ds
                push    (offset aSS_5+2) ; "%s"
                call    PRF             ; prf(string);
                add     sp, 8
                push    47Fh
                call    PRFMSG          ; prfmsg(msgnum,p1,p2, ..• ,pn);
                pop     cx
                xor     di, di
                xor     si, si
                jmp     short loc_13386
; ---------------------------------------------------------------------------

loc_13355:                              ; CODE XREF: sub_12E92+4FE↓j
                mov     ax, si
                imul    ax, 36h ; '6'
                add     ax, 0FDEh
                push    seg dseg19
                push    ax
                push    ds
                push    offset a136m    ; "\x1B[1;36m"
                push    ds
                push    offset aS18s    ; "%s%-18s "
                call    PRF             ; prf(string);
                add     sp, 0Ch
                inc     di
                cmp     di, 3
                jle     short loc_13385
                push    ds
                push    (offset aYouGetThrownBa+14h) ; "\r"
                call    PRF             ; prf(string);
                add     sp, 4
                xor     di, di

loc_13385:                              ; CODE XREF: sub_12E92+4E3↑j
                inc     si

loc_13386:                              ; CODE XREF: sub_12E92+4C1↑j
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AEC1, si
                jg      short loc_13355
                push    ds
                push    (offset aYouGetThrownBa+14h) ; "\r"
                call    PRF             ; prf(string);
                add     sp, 4
                jmp     loc_12F54
; ---------------------------------------------------------------------------

loc_133A1:                              ; CODE XREF: sub_12E92+48A↑j
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AED3, 3
                jz      short loc_133B1
                jmp     loc_13567
; ---------------------------------------------------------------------------

loc_133B1:                              ; CODE XREF: sub_12E92+51A↑j
                mov     [bp+var_2], 0
                push    seg dseg19
                push    offset byte_2A0A3
                call    STRLEN          ; size_t strlen(const char* str);
                add     sp, 4
                cmp     ax, 2
                ja      short loc_133CC
                jmp     loc_1350C
; ---------------------------------------------------------------------------

loc_133CC:                              ; CODE XREF: sub_12E92+535↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29864
                push    es:word_29862
                call    SETMBK          ; FILE *setmbk(mbkptr);
                add     sp, 4
                xor     si, si
                jmp     loc_134FD
; ---------------------------------------------------------------------------

loc_133E8:                              ; CODE XREF: sub_12E92+677↓j
                push    0
                push    14h
                push    ss
                lea     ax, [bp+var_2A]
                push    ax
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                xor     di, di
                jmp     short loc_1341B
; ---------------------------------------------------------------------------

loc_133FD:                              ; CODE XREF: sub_12E92+59F↓j
                mov     bx, si
                imul    bx, 36h ; '6'
                add     bx, di
                mov     ax, seg dseg19
                mov     es, ax
                mov     al, es:[bx+0FDEh]
                mov     ah, 0
                push    ax
                call    TOLOWER         ; int tolower (int c);
                pop     cx
                mov     [bp+di+var_2A], al
                inc     di

loc_1341B:                              ; CODE XREF: sub_12E92+569↑j
                mov     ax, si
                imul    ax, 36h ; '6'
                add     ax, 0FDEh
                push    seg dseg19
                push    ax
                call    STRLEN          ; size_t strlen(const char* str);
                add     sp, 4
                cmp     ax, di
                ja      short loc_133FD
                push    seg dseg19
                push    offset byte_2A0A3
                call    STRLEN          ; size_t strlen(const char* str);
                add     sp, 4
                push    ax
                push    ss
                lea     ax, [bp+var_2A]
                push    ax
                push    seg dseg19
                push    offset byte_2A0A3
                call    STRNCMP         ; int strncmp(const char *str1, const char *str2, size_t maxlen);
                add     sp, 0Ah
                or      ax, ax
                jz      short loc_1345C
                jmp     loc_134FC
; ---------------------------------------------------------------------------

loc_1345C:                              ; CODE XREF: sub_12E92+5C5↑j
                mov     bx, si
                imul    bx, 36h ; '6'
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:[bx+1012h]
                call    PRFMSG          ; prfmsg(msgnum,p1,p2, ..• ,pn);
                pop     cx
                mov     bx, si
                imul    bx, 36h ; '6'
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:[bx+100Ah]
                push    word ptr es:[bx+1008h]
                push    ds
                push    offset aLd_1    ; "%ld"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                push    ds
                push    offset a131m_0  ; "\x1B[1;31m"
                push    ds
                push    offset a136m    ; "\x1B[1;36m"
                push    ds
                push    offset aScastingCostSS ; "\r%sCasting Cost     : %s%s Ions"
                call    PRF             ; prf(string);
                add     sp, 10h
                mov     bx, si
                imul    bx, 36h ; '6'
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:[bx+100Eh]
                push    word ptr es:[bx+100Ch]
                push    ds
                push    offset aLd_1    ; "%ld"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                push    ds
                push    offset a131m_0  ; "\x1B[1;31m"
                push    ds
                push    offset a136m    ; "\x1B[1;36m"
                push    ds
                push    offset aSmaintenanceCo ; "\r%sMaintenance Cost : %s%s Ions / Seco"...
                call    PRF             ; prf(string);
                add     sp, 10h
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_17567
                pop     cx
                mov     [bp+var_2], 1
                mov     ax, seg dseg19
                mov     es, ax
                mov     si, es:word_2AEC1

loc_134FC:                              ; CODE XREF: sub_12E92+5C7↑j
                inc     si

loc_134FD:                              ; CODE XREF: sub_12E92+553↑j
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AEC1, si
                jle     short loc_1350C
                jmp     loc_133E8
; ---------------------------------------------------------------------------

loc_1350C:                              ; CODE XREF: sub_12E92+537↑j
                                        ; sub_12E92+675↑j
                cmp     [bp+var_2], 0
                jnz     short loc_13567
                jmp     short loc_13552
; ---------------------------------------------------------------------------

loc_13514:                              ; CODE XREF: sub_12E92+47A↑j
                push    seg dseg19
                push    offset byte_29FDB
                call    sub_680
                add     sp, 4
                mov     [bp+var_4], ax
                cmp     ax, 0FFFFh
                jle     short loc_13552
                mov     ax, [bp+var_4]
                imul    ax, 1Eh
                add     ax, 156h
                mov     word ptr [bp+var_C+2], seg dseg19
                mov     word ptr [bp+var_C], ax
                les     bx, [bp+var_C]
                assume es:nothing
                mov     ax, es:[bx+1Ch]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     es:word_2AEC7, ax
                call    sub_15CFA
                jmp     short loc_13567
; ---------------------------------------------------------------------------

loc_13552:                              ; CODE XREF: sub_12E92+680↑j
                                        ; sub_12E92+696↑j
                push    471h

loc_13555:                              ; CODE XREF: sub_12E92+1DD↑j
                                        ; sub_12E92+461↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4

loc_13567:                              ; CODE XREF: sub_12E92+D2↑j
                                        ; sub_12E92+51C↑j ...
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_12E92       endp


; =============== S U B R O U T I N E =======================================


sub_1356C       proc far                ; DATA XREF: dseg19:01C4↓o
                push    ds
                mov     ax, seg dseg12
                mov     ds, ax
                assume ds:dseg12
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+0E0h]
                and     ax, 20h
                or      ax, 0
                jz      short loc_135AB
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                and     word ptr es:[bx+0E0h], 0FFDFh
                mov     ax, es:[bx+0E0h]
                and     word ptr es:[bx+0E2h], 0FFFFh
                mov     dx, es:[bx+0E2h]
                jmp     short loc_135CB
; ---------------------------------------------------------------------------

loc_135AB:                              ; CODE XREF: sub_1356C+1B↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                or      word ptr es:[bx+0E0h], 20h
                mov     ax, es:[bx+0E0h]
                or      word ptr es:[bx+0E2h], 0
                mov     dx, es:[bx+0E2h]

loc_135CB:                              ; CODE XREF: sub_1356C+3D↑j
                or      ax, dx
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+0E0h]
                and     ax, 20h
                or      ax, 0
                jz      short loc_135EB
                mov     dx, ds
                mov     ax, 1D88h
                jmp     short loc_135F0
; ---------------------------------------------------------------------------

loc_135EB:                              ; CODE XREF: sub_1356C+76↑j
                mov     dx, ds
                mov     ax, 1D8Bh

loc_135F0:                              ; CODE XREF: sub_1356C+7D↑j
                push    dx
                push    ax
                push    ds
                push    offset unk_2A063
                call    PRF             ; prf(string);
                add     sp, 8
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_17567
                pop     cx
                pop     ds
                assume ds:dseg21
                retf
sub_1356C       endp


; =============== S U B R O U T I N E =======================================


sub_13610       proc far                ; DATA XREF: dseg19:02B4↓o
                push    ds
                mov     ax, seg dseg12
                mov     ds, ax
                assume ds:dseg12
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+0E0h]
                and     ax, 10h
                or      ax, 0
                jz      short loc_1364F
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                and     word ptr es:[bx+0E0h], 0FFEFh
                mov     ax, es:[bx+0E0h]
                and     word ptr es:[bx+0E2h], 0FFFFh
                mov     dx, es:[bx+0E2h]
                jmp     short loc_1366F
; ---------------------------------------------------------------------------

loc_1364F:                              ; CODE XREF: sub_13610+1B↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                or      word ptr es:[bx+0E0h], 10h
                mov     ax, es:[bx+0E0h]
                or      word ptr es:[bx+0E2h], 0
                mov     dx, es:[bx+0E2h]

loc_1366F:                              ; CODE XREF: sub_13610+3D↑j
                or      ax, dx
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+0E0h]
                and     ax, 10h
                or      ax, 0
                jz      short loc_1368F
                mov     dx, ds
                mov     ax, 1D99h
                jmp     short loc_13694
; ---------------------------------------------------------------------------

loc_1368F:                              ; CODE XREF: sub_13610+76↑j
                mov     dx, ds
                mov     ax, 1DA5h

loc_13694:                              ; CODE XREF: sub_13610+7D↑j
                push    dx
                push    ax
                push    ds
                push    offset unk_2A07F
                call    PRF             ; prf(string);
                add     sp, 8
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_17567
                pop     cx
                pop     ds
                assume ds:dseg21
                retf
sub_13610       endp


; =============== S U B R O U T I N E =======================================


sub_136B4       proc far                ; DATA XREF: dseg19:0782↓o
                push    ds
                mov     ax, seg dseg12
                mov     ds, ax
                assume ds:dseg12
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29878
                push    es:word_29876
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    37h ; '7'
                push    0
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jz      short loc_13724
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    seg dseg19
                push    offset unk_29A78
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29A98
                push    es:word_29A96
                push    ds
                push    offset unk_29790
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                jmp     short loc_13732
; ---------------------------------------------------------------------------

loc_13724:                              ; CODE XREF: sub_136B4+3A↑j
                push    0
                push    ds
                push    (offset off_29578+2)
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 6

loc_13732:                              ; CODE XREF: sub_136B4+6E↑j
                push    dx
                push    ax
                push    327h
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8
                pop     ds
                assume ds:dseg21
                retf
sub_136B4       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1374B       proc far                ; CODE XREF: sub_E3E5+42↑p

var_6C          = byte ptr -6Ch
var_8           = word ptr -8
var_6           = word ptr -6
var_4           = word ptr -4
var_2           = word ptr -2

                enter   6Ch, 0
                push    ds
                mov     ax, seg dseg12
                mov     ds, ax
                assume ds:dseg12
                mov     ax, seg dseg19
                mov     dx, seg NTERMS
                mov     es, dx
                assume es:nothing
                mov     dx, word ptr es:NTERMS ; int nterms;
                dec     dx
                mov     es, ax
                assume es:dseg19
                cmp     es:word_2AED5, dx
                jle     short loc_1376F
                jmp     loc_1398D
; ---------------------------------------------------------------------------

loc_1376F:                              ; CODE XREF: sub_1374B+1F↑j
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AED3, 3
                jge     short loc_13782
                push    4E8h
                jmp     loc_1397B
; ---------------------------------------------------------------------------

loc_13782:                              ; CODE XREF: sub_1374B+2F↑j
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_29BF8, 0
                jg      short loc_13792
                jmp     loc_13978
; ---------------------------------------------------------------------------

loc_13792:                              ; CODE XREF: sub_1374B+42↑j
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_29A54, 0
                jg      short loc_137AF
                jl      short loc_137A9
                cmp     es:word_29A52, 1
                jnb     short loc_137AF

loc_137A9:                              ; CODE XREF: sub_1374B+54↑j
                push    4E4h
                jmp     loc_1397B
; ---------------------------------------------------------------------------

loc_137AF:                              ; CODE XREF: sub_1374B+52↑j
                                        ; sub_1374B+5C↑j
                push    seg dseg19
                push    offset byte_2A0A3
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                mov     [bp+var_2], dx
                mov     [bp+var_4], ax
                cmp     [bp+var_2], 0
                jg      short loc_137ED
                jl      short loc_137D1
                cmp     [bp+var_4], 1
                jnb     short loc_137ED

loc_137D1:                              ; CODE XREF: sub_1374B+7E↑j
                push    ds
                push    offset aCredit  ; "Credit"
                push    4E3h

loc_137D8:                              ; CODE XREF: sub_1374B+22A↓j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8
                jmp     loc_1398D
; ---------------------------------------------------------------------------

loc_137ED:                              ; CODE XREF: sub_1374B+7C↑j
                                        ; sub_1374B+84↑j
                mov     ax, seg dseg19
                mov     es, ax
                mov     cx, es:word_29A54
                mov     bx, es:word_29A52
                mov     dx, [bp+var_2]
                mov     ax, [bp+var_4]
                call    F_LXMUL
                mov     [bp+var_6], dx
                mov     [bp+var_8], ax
                cmp     [bp+var_6], 0
                jl      short loc_1382E
                jnz     short loc_1381B
                cmp     [bp+var_8], 0
                jb      short loc_1382E

loc_1381B:                              ; CODE XREF: sub_1374B+C8↑j
                push    seg dseg19
                push    offset byte_2A0A3
                call    STRLEN          ; size_t strlen(const char* str);
                add     sp, 4
                cmp     ax, 5
                jbe     short loc_1384D

loc_1382E:                              ; CODE XREF: sub_1374B+C6↑j
                                        ; sub_1374B+CE↑j
                push    ds
                push    offset aTheShopKeeperJ ; "The shop keeper just laughs at you.\r"
                call    PRF             ; prf(string);
                add     sp, 4
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    sub_17567
                pop     cx
                jmp     loc_1398D
; ---------------------------------------------------------------------------

loc_1384D:                              ; CODE XREF: sub_1374B+E1↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+92h]
                mov     dx, es:[bx+90h]
                cmp     ax, [bp+var_6]
                jnb     short loc_13869
                jmp     loc_1395E
; ---------------------------------------------------------------------------

loc_13869:                              ; CODE XREF: sub_1374B+119↑j
                ja      short loc_13873
                cmp     dx, [bp+var_8]
                ja      short loc_13873
                jmp     loc_1395E
; ---------------------------------------------------------------------------

loc_13873:                              ; CODE XREF: sub_1374B:loc_13869↑j
                                        ; sub_1374B+123↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+92h]
                mov     dx, es:[bx+90h]
                sub     dx, [bp+var_8]
                sbb     ax, [bp+var_6]
                mov     bx, seg dseg19
                mov     es, bx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     es:[bx+92h], ax
                mov     es:[bx+90h], dx
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    UACOFF          ; struct usracc *uaptr=uacoff(unum);
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                mov     ax, es:[bx+11Ah]
                mov     dx, es:[bx+118h]
                add     dx, [bp+var_4]
                adc     ax, [bp+var_2]
                push    dx
                push    ax
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    UACOFF          ; struct usracc *uaptr=uacoff(unum);
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                pop     ax
                mov     es:[bx+11Ah], ax
                pop     ax
                mov     es:[bx+118h], ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     es:word_29A5C, 1
                jnz     short loc_1392F
                push    [bp+var_2]
                push    [bp+var_4]
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    UACOFF          ; struct usracc *uaptr=uacoff(unum);
                pop     cx
                push    dx
                push    ax
                push    ds
                push    offset aMutantsSBought ; "MUTANTS: %s BOUGHT %ld CREDITS: MUTANTS"
                push    ss
                lea     ax, [bp+var_6C]
                push    ax
                call    SPRINTF         ; int sprintf(char *str, const char *format, ... );
                add     sp, 10h
                push    ss
                lea     ax, [bp+var_6C]
                push    ax
                push    ss
                lea     ax, [bp+var_6C]
                push    ax
                call    SHOCST          ; void shocst(char *summary, char *detail, p1, p1,...,pn);
                add     sp, 8

loc_1392F:                              ; CODE XREF: sub_1374B+1A7↑j
                push    ds
                push    offset aCredits_0 ; "Credits"
                push    [bp+var_2]
                push    [bp+var_4]
                push    ds
                push    offset aLd_1    ; "%ld"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                push    4E5h
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 0Ch
                jmp     short loc_1398D
; ---------------------------------------------------------------------------

loc_1395E:                              ; CODE XREF: sub_1374B+11B↑j
                                        ; sub_1374B+125↑j
                push    [bp+var_6]
                push    [bp+var_8]
                push    ds
                push    offset aLd_1    ; "%ld"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                push    4E6h
                jmp     loc_137D8
; ---------------------------------------------------------------------------

loc_13978:                              ; CODE XREF: sub_1374B+44↑j
                push    352h

loc_1397B:                              ; CODE XREF: sub_1374B+34↑j
                                        ; sub_1374B+61↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4

loc_1398D:                              ; CODE XREF: sub_1374B+21↑j
                                        ; sub_1374B+9F↑j ...
                xor     ax, ax
                pop     ds
                assume ds:dseg21
                leave
                retf
sub_1374B       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_13992       proc far                ; CODE XREF: sub_E3E5+63↑p

var_8           = word ptr -8
var_6           = word ptr -6
var_4           = word ptr -4
var_2           = word ptr -2

                enter   8, 0
                push    ds
                mov     ax, seg dseg12
                mov     ds, ax
                assume ds:dseg12
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AED3, 3
                jge     short loc_139AF
                push    4E7h
                jmp     loc_13B4A
; ---------------------------------------------------------------------------

loc_139AF:                              ; CODE XREF: sub_13992+15↑j
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_29BF8, 0
                jg      short loc_139BF
                jmp     loc_13B47
; ---------------------------------------------------------------------------

loc_139BF:                              ; CODE XREF: sub_13992+28↑j
                push    seg dseg19
                push    offset byte_2A0A3
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                mov     [bp+var_2], dx
                mov     [bp+var_4], ax
                cmp     [bp+var_2], 0
                jg      short loc_139FD
                jl      short loc_139E1
                cmp     [bp+var_4], 1
                jnb     short loc_139FD

loc_139E1:                              ; CODE XREF: sub_13992+47↑j
                push    ds
                push    offset aIon     ; "Ion"
                push    4E3h

loc_139E8:                              ; CODE XREF: sub_13992+1B2↓j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8
                jmp     loc_13B5C
; ---------------------------------------------------------------------------

loc_139FD:                              ; CODE XREF: sub_13992+45↑j
                                        ; sub_13992+4D↑j
                push    seg dseg19
                push    offset byte_2A0A3
                call    STRLEN          ; size_t strlen(const char* str);
                add     sp, 4
                cmp     ax, 6
                jbe     short loc_13A2F
                push    ds
                push    offset aYouCanTBuyThat ; "You can't buy that many ions at once! Y"...
                call    PRF             ; prf(string);
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_17567
                pop     cx
                jmp     loc_13B5C
; ---------------------------------------------------------------------------

loc_13A2F:                              ; CODE XREF: sub_13992+7C↑j
                mov     ax, seg dseg19
                mov     es, ax
                mov     cx, es:word_29A58
                mov     bx, es:word_29A56
                mov     dx, [bp+var_2]
                mov     ax, [bp+var_4]
                call    F_LXMUL
                mov     [bp+var_6], dx
                mov     [bp+var_8], ax
                cmp     [bp+var_6], 0
                jg      short loc_13A7C
                jl      short loc_13A5D
                cmp     [bp+var_8], 0
                jnb     short loc_13A7C

loc_13A5D:                              ; CODE XREF: sub_13992+C3↑j
                push    ds
                push    offset aSorryThatWould ; "Sorry,that would cost you a ridiculous "...
                call    PRF             ; prf(string);
                add     sp, 4
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    sub_17567
                pop     cx
                jmp     loc_13B5C
; ---------------------------------------------------------------------------

loc_13A7C:                              ; CODE XREF: sub_13992+C1↑j
                                        ; sub_13992+C9↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+92h]
                mov     dx, es:[bx+90h]
                cmp     ax, [bp+var_6]
                jnb     short loc_13A98
                jmp     loc_13B2D
; ---------------------------------------------------------------------------

loc_13A98:                              ; CODE XREF: sub_13992+101↑j
                ja      short loc_13AA2
                cmp     dx, [bp+var_8]
                ja      short loc_13AA2
                jmp     loc_13B2D
; ---------------------------------------------------------------------------

loc_13AA2:                              ; CODE XREF: sub_13992:loc_13A98↑j
                                        ; sub_13992+10B↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+92h]
                mov     dx, es:[bx+90h]
                sub     dx, [bp+var_8]
                sbb     ax, [bp+var_6]
                mov     bx, seg dseg19
                mov     es, bx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     es:[bx+92h], ax
                mov     es:[bx+90h], dx
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+96h]
                mov     dx, es:[bx+94h]
                add     dx, [bp+var_4]
                adc     ax, [bp+var_2]
                mov     bx, seg dseg19
                mov     es, bx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     es:[bx+96h], ax
                mov     es:[bx+94h], dx
                push    ds
                push    (offset aScastingCostSS+1Bh) ; "Ions"
                push    [bp+var_2]
                push    [bp+var_4]
                push    ds
                push    offset aLd_1    ; "%ld"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                push    4E5h
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 0Ch
                jmp     short loc_13B5C
; ---------------------------------------------------------------------------

loc_13B2D:                              ; CODE XREF: sub_13992+103↑j
                                        ; sub_13992+10D↑j
                push    [bp+var_6]
                push    [bp+var_8]
                push    ds
                push    offset aLd_1    ; "%ld"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                push    4E6h
                jmp     loc_139E8
; ---------------------------------------------------------------------------

loc_13B47:                              ; CODE XREF: sub_13992+2A↑j
                push    352h

loc_13B4A:                              ; CODE XREF: sub_13992+1A↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4

loc_13B5C:                              ; CODE XREF: sub_13992+68↑j
                                        ; sub_13992+9A↑j ...
                xor     ax, ax
                pop     ds
                assume ds:dseg21
                leave
                retf
sub_13992       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_13B61       proc far                ; DATA XREF: dseg19:0296↓o

var_4           = word ptr -4
var_2           = word ptr -2

                enter   4, 0
                push    ds
                mov     ax, seg dseg12
                mov     ds, ax
                assume ds:dseg12
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_29BF8, 0
                jg      short loc_13B7B
                jmp     loc_13C5B
; ---------------------------------------------------------------------------

loc_13B7B:                              ; CODE XREF: sub_13B61+15↑j
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+9Ah]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                imul    word ptr es:[bx+2Ah]
                xor     cx, cx
                xor     dx, dx
                push    ax
                mov     ax, 64h ; 'd'
                pop     bx
                call    F_LXMUL
                mov     [bp+var_2], dx
                mov     [bp+var_4], ax
                mov     ax, [bp+var_4]
                or      ax, [bp+var_2]
                jnz     short loc_13BBA
                push    503h
                jmp     loc_13C5E
; ---------------------------------------------------------------------------

loc_13BBA:                              ; CODE XREF: sub_13B61+51↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     es:word_2AED3, 1
                jnz     short loc_13BF2
                push    [bp+var_2]
                push    [bp+var_4]
                push    ds
                push    offset aLd_1    ; "%ld"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                push    501h

loc_13BDE:                              ; CODE XREF: sub_13B61+C8↓j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8
                jmp     short loc_13C70
; ---------------------------------------------------------------------------

loc_13BF2:                              ; CODE XREF: sub_13B61+64↑j
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+92h]
                mov     dx, es:[bx+90h]
                cmp     ax, [bp+var_2]
                ja      short loc_13C2B
                jb      short loc_13C12
                cmp     dx, [bp+var_4]
                jnb     short loc_13C2B

loc_13C12:                              ; CODE XREF: sub_13B61+AA↑j
                push    [bp+var_2]
                push    [bp+var_4]
                push    ds
                push    offset aLd_1    ; "%ld"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                push    502h
                jmp     short loc_13BDE
; ---------------------------------------------------------------------------

loc_13C2B:                              ; CODE XREF: sub_13B61+A8↑j
                                        ; sub_13B61+AF↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, [bp+var_2]
                mov     dx, [bp+var_4]
                sub     es:[bx+90h], dx
                sbb     es:[bx+92h], ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     word ptr es:[bx+9Ah], 0
                push    504h
                jmp     short loc_13C5E
; ---------------------------------------------------------------------------

loc_13C5B:                              ; CODE XREF: sub_13B61+17↑j
                push    352h

loc_13C5E:                              ; CODE XREF: sub_13B61+56↑j
                                        ; sub_13B61+F8↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4

loc_13C70:                              ; CODE XREF: sub_13B61+8F↑j
                pop     ds
                assume ds:dseg21
                leave
                retf
sub_13B61       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_13C73       proc far                ; DATA XREF: dseg19:0764↓o

var_2           = word ptr -2

                enter   2, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg12
                mov     ds, ax
                assume ds:dseg12
                xor     di, di

loc_13C81:                              ; CODE XREF: sub_13C73+6E↓j
                push    di
                call    sub_1A075
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                mov     ax, es:[bx+4B0h]
                mov     [bp+var_2], ax
                xor     si, si
                cmp     si, [bp+var_2]
                jge     short loc_13CDD

loc_13C9B:                              ; CODE XREF: sub_13C73+68↓j
                push    di
                call    sub_1A075
                pop     cx
                mov     bx, si
                shl     bx, 1
                add     ax, bx
                mov     bx, ax
                mov     es, dx
                cmp     word ptr es:[bx+320h], 0
                jge     short loc_13CD7
                push    di
                call    sub_1A075
                pop     cx
                mov     bx, si
                shl     bx, 1
                add     ax, bx
                mov     bx, ax
                mov     es, dx
                push    word ptr es:[bx+320h]
                push    si
                push    ds
                push    offset aDD      ; "%d %d\r"
                call    PRF             ; prf(string);
                add     sp, 8

loc_13CD7:                              ; CODE XREF: sub_13C73+3F↑j
                inc     si
                cmp     si, [bp+var_2]
                jl      short loc_13C9B

loc_13CDD:                              ; CODE XREF: sub_13C73+26↑j
                inc     di
                cmp     di, 4Fh ; 'O'
                jl      short loc_13C81
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    OUTPRF          ; outprf (unum);
                pop     cx
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_13C73       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_13CF8       proc far                ; CODE XREF: sub_E3E5+367↑p
                                        ; sub_E3E5+6FB↑p

var_10          = dword ptr -10h
var_C           = qword ptr -0Ch
var_4           = word ptr -4
var_2           = word ptr -2
arg_0           = word ptr  6
arg_2           = word ptr  8

                enter   10h, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg12
                mov     ds, ax
                assume ds:dseg12
                mov     si, [bp+arg_0]
                mov     di, [bp+arg_2]
                push    di
                push    si
                call    sub_15850
                add     sp, 4
                mov     [bp+var_2], dx
                mov     [bp+var_4], ax
                push    0
                push    64h ; 'd'
                push    1
                call    sub_158D5
                pop     cx
                cwd
                push    ax
                push    dx
                mov     dx, [bp+var_2]
                mov     ax, [bp+var_4]
                pop     cx
                pop     bx
                call    F_LXMUL
                push    dx
                push    ax
                call    F_LDIV
                shl     ax, 1
                rcl     dx, 1
                mov     bx, [bp+var_2]
                mov     cx, [bp+var_4]
                add     cx, ax
                adc     bx, dx
                mov     [bp+var_2], bx
                mov     [bp+var_4], cx
                push    di
                push    si
                call    sub_15850
                add     sp, 4
                mov     word ptr [bp+var_10], ax
                mov     word ptr [bp+var_10+2], dx
                wait
                fild    [bp+var_10]
                wait
                fstp    [bp+var_C]
                push    1
                nop
                wait
                call    sub_158D5
                pop     cx
                mov     word ptr [bp+var_10], ax
                wait
                fild    word ptr [bp+var_10]
                wait
                fmul    [bp+var_C]
                wait
                fdiv    flt_25534
                wait
                fmul    flt_25538
                wait
                fadd    [bp+var_C]
                wait
                fstp    [bp+var_C]
                wait
                fld     [bp+var_C]
                wait
                fcomp   flt_2553C
                fstsw   word ptr [bp+var_10]
                nop
                wait
                mov     ax, word ptr [bp+var_10]
                sahf
                jbe     short loc_13DAF
                mov     [bp+var_2], 2FAh
                mov     [bp+var_4], 0F080h

loc_13DAF:                              ; CODE XREF: sub_13CF8+AB↑j
                cmp     [bp+var_2], 0
                jg      short loc_13DC7
                jl      short loc_13DBD
                cmp     [bp+var_4], 0
                jnb     short loc_13DC7

loc_13DBD:                              ; CODE XREF: sub_13CF8+BD↑j
                mov     [bp+var_2], 0
                mov     [bp+var_4], 0

loc_13DC7:                              ; CODE XREF: sub_13CF8+BB↑j
                                        ; sub_13CF8+C3↑j
                mov     dx, [bp+var_2]
                mov     ax, [bp+var_4]
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_13CF8       endp

; ---------------------------------------------------------------------------
                align 10h
cseg04          ends

; Segment Number    : 5
; Alloc Size        : 1779h
; Offset in the file: 1F200h  Length: 1779h
; Attributes  (0D00): CODE Relocations DPL: 3
; ===========================================================================

; Segment type: Pure code
cseg05          segment para public 'CODE' use16
                assume cs:cseg05
                assume es:nothing, ss:nothing, ds:dseg21, fs:nothing, gs:nothing

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_13DE0       proc far                ; DATA XREF: dseg19:0926↓o

var_8           = word ptr -8
var_6           = dword ptr -6

                enter   8, 0
                push    si
                push    ds
                mov     ax, seg dseg13
                mov     ds, ax
                assume ds:dseg13
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_29864
                push    es:word_29862
                call    SETMBK          ; FILE *setmbk(mbkptr);
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AED3, 2
                jge     short loc_13E33
                nop
                push    cs
                call    near ptr sub_13F68
                or      ax, ax
                jz      short loc_13E1B
                jmp     loc_13F64
; ---------------------------------------------------------------------------

loc_13E1B:                              ; CODE XREF: sub_13DE0+36↑j
                                        ; sub_13DE0:loc_13E4C↓j
                push    34Dh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4
                jmp     loc_13F64
; ---------------------------------------------------------------------------

loc_13E33:                              ; CODE XREF: sub_13DE0+2D↑j
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:byte_29FDB, 3Fh ; '?'
                jnz     short loc_13E4E
                nop
                push    cs
                call    near ptr sub_13F68
                or      ax, ax
                jz      short loc_13E4C
                jmp     loc_13F64
; ---------------------------------------------------------------------------

loc_13E4C:                              ; CODE XREF: sub_13DE0+67↑j
                jmp     short loc_13E1B
; ---------------------------------------------------------------------------

loc_13E4E:                              ; CODE XREF: sub_13DE0+5E↑j
                xor     si, si
                jmp     loc_13F2D
; ---------------------------------------------------------------------------

loc_13E53:                              ; CODE XREF: sub_13DE0+15D↓j
                push    seg dseg19
                push    offset byte_29FDB
                call    STRLEN          ; size_t strlen(const char* str);
                add     sp, 4
                push    seg dseg19
                push    offset byte_29FDB
                mov     ax, si
                imul    ax, 12h
                add     ax, 38h ; '8'
                push    seg dseg19
                push    ax
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jnz     short loc_13E82
                jmp     loc_13F2C
; ---------------------------------------------------------------------------

loc_13E82:                              ; CODE XREF: sub_13DE0+9D↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29864
                push    es:word_29862
                call    SETMBK          ; FILE *setmbk(mbkptr);
                add     sp, 4
                mov     bx, si
                imul    bx, 12h
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:[bx+36h]
                call    HASMKEY         ; int ok=hasmkey(int msgnum);
                pop     cx
                or      ax, ax
                jz      short loc_13F17
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AED3, 2
                jle     short loc_13EF3
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:byte_2A0A3, 3Fh ; '?'
                jnz     short loc_13EF3
                mov     bx, si
                imul    bx, 12h
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:[bx+46h]
                call    PRFMSG          ; prfmsg(msgnum,p1,p2, ..• ,pn);
                pop     cx
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    OUTPRF          ; outprf (unum);
                pop     cx
                jmp     short loc_13F2C
; ---------------------------------------------------------------------------

loc_13EF3:                              ; CODE XREF: sub_13DE0+DD↑j
                                        ; sub_13DE0+EA↑j
                mov     ax, si
                imul    ax, 12h
                add     ax, 36h ; '6'
                mov     word ptr [bp+var_6+2], seg dseg19
                mov     word ptr [bp+var_6], ax
                les     bx, [bp+var_6]
                assume es:nothing
                call    dword ptr es:[bx+0Ch]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     si, es:word_2AEC3
                inc     si
                jmp     short loc_13F2C
; ---------------------------------------------------------------------------

loc_13F17:                              ; CODE XREF: sub_13DE0+D0↑j
                push    34Dh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4

loc_13F2C:                              ; CODE XREF: sub_13DE0+9F↑j
                                        ; sub_13DE0+111↑j ...
                inc     si

loc_13F2D:                              ; CODE XREF: sub_13DE0+70↑j
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:word_2AEC3
                mov     [bp+var_8], ax
                cmp     ax, si
                jle     short loc_13F40
                jmp     loc_13E53
; ---------------------------------------------------------------------------

loc_13F40:                              ; CODE XREF: sub_13DE0+15B↑j
                mov     ax, [bp+var_8]
                inc     ax
                cmp     ax, si
                jnz     short loc_13F64
                push    ds
                push    offset aTypeSysForALis ; "Type SYS for a list of SYSOP commands."...
                call    PRF             ; prf(string);
                add     sp, 4
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    OUTPRF          ; outprf (unum);
                pop     cx

loc_13F64:                              ; CODE XREF: sub_13DE0+38↑j
                                        ; sub_13DE0+50↑j ...
                pop     ds
                assume ds:dseg21
                pop     si
                leave
                retf
sub_13DE0       endp


; =============== S U B R O U T I N E =======================================


sub_13F68       proc far                ; CODE XREF: sub_13DE0+31↑p
                                        ; sub_13DE0+62↑p
                push    si
                push    di
                push    ds
                mov     ax, seg dseg13
                mov     ds, ax
                assume ds:dseg13
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_29864
                push    es:word_29862
                call    SETMBK          ; FILE *setmbk(mbkptr);
                add     sp, 4
                xor     di, di
                xor     si, si
                jmp     short loc_13FAC
; ---------------------------------------------------------------------------

loc_13F8D:                              ; CODE XREF: sub_13F68+4E↓j
                mov     bx, si
                imul    bx, 12h
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:[bx+36h]
                call    HASMKEY         ; int ok=hasmkey(int msgnum);
                pop     cx
                or      ax, ax
                jz      short loc_13FAB
                mov     di, 1
                jmp     short loc_13FB8
; ---------------------------------------------------------------------------

loc_13FAB:                              ; CODE XREF: sub_13F68+3C↑j
                inc     si

loc_13FAC:                              ; CODE XREF: sub_13F68+23↑j
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AEC3, si
                jg      short loc_13F8D

loc_13FB8:                              ; CODE XREF: sub_13F68+41↑j
                cmp     di, 1
                jz      short loc_13FC0
                jmp     loc_14075
; ---------------------------------------------------------------------------

loc_13FC0:                              ; CODE XREF: sub_13F68+53↑j
                push    0
                push    200h
                push    ds
                push    offset byte_25540
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                push    ds
                push    offset aTypeSysCommand ; "\rType SYS [COMMAND] ? for help on any "...
                call    PRF             ; prf(string);
                add     sp, 4
                xor     si, si
                jmp     short loc_14023
; ---------------------------------------------------------------------------

loc_13FE1:                              ; CODE XREF: sub_13F68+C5↓j
                mov     bx, si
                imul    bx, 12h
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:[bx+36h]
                call    HASMKEY         ; int ok=hasmkey(int msgnum);
                pop     cx
                or      ax, ax
                jz      short loc_14022
                mov     ax, si
                imul    ax, 12h
                add     ax, 38h ; '8'
                push    seg dseg19
                push    ax
                push    ds
                push    offset byte_25540
                call    STRCAT          ; char *strcat(char *destination, const char *source );
                add     sp, 8
                push    ds
                push    offset asc_257A1 ; ","
                push    ds
                push    offset byte_25540
                call    STRCAT          ; char *strcat(char *destination, const char *source );
                add     sp, 8

loc_14022:                              ; CODE XREF: sub_13F68+90↑j
                inc     si

loc_14023:                              ; CODE XREF: sub_13F68+77↑j
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AEC3, si
                jg      short loc_13FE1
                cmp     byte_25540, 0
                jz      short loc_1404C
                push    ds
                push    offset byte_25540
                call    STRLEN          ; size_t strlen(const char* str);
                add     sp, 4
                sub     ax, 2
                mov     bx, ax
                mov     byte ptr [bx+0], 0

loc_1404C:                              ; CODE XREF: sub_13F68+CC↑j
                push    ds
                push    offset byte_25540
                push    ds
                push    offset a133m_2  ; "\x1B[1;33m"
                push    ds
                push    offset aSS_7    ; "%s%s\r\r"
                call    PRF             ; prf(string);
                add     sp, 0Ch
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    OUTPRF          ; outprf (unum);
                pop     cx
                mov     ax, 1
                jmp     short loc_14077
; ---------------------------------------------------------------------------

loc_14075:                              ; CODE XREF: sub_13F68+55↑j
                xor     ax, ax

loc_14077:                              ; CODE XREF: sub_13F68+10B↑j
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                retf
sub_13F68       endp


; =============== S U B R O U T I N E =======================================


sub_1407B       proc far                ; DATA XREF: dseg19:0108↓o
                push    ds
                mov     ax, seg dseg13
                mov     ds, ax
                assume ds:dseg13
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_1968E
                add     sp, 4
                push    ds
                push    272h
                call    PRF             ; prf(string);
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_17567
                pop     cx
                pop     ds
                assume ds:dseg21
                retf
sub_1407B       endp


; =============== S U B R O U T I N E =======================================


sub_140DB       proc far                ; DATA XREF: dseg19:00D2↓o
                push    ds
                mov     ax, seg dseg13
                mov     ds, ax
                assume ds:dseg13
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29880
                push    es:word_2987E
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    37h ; '7'
                push    0
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jnz     short loc_1413F
                jmp     loc_1425F
; ---------------------------------------------------------------------------

loc_1413F:                              ; CODE XREF: sub_140DB+5F↑j
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    seg dseg19
                push    offset byte_29B40
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                push    seg dseg19
                push    offset unk_29B4A
                push    ds
                push    291h
                call    PRF             ; prf(string);
                add     sp, 8
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_29864
                push    es:word_29862
                call    SETMBK          ; FILE *setmbk(mbkptr);
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29BC6
                push    es:word_29BC4
                push    ds
                push    2A1h
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29BC2
                push    es:word_29BC0
                push    ds
                push    2A1h
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29BBE
                push    es:word_29BBC
                push    ds
                push    2A1h
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29BBA
                push    es:word_29BB8
                push    ds
                push    2A1h
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                push    367h
                call    PRFMSG          ; prfmsg(msgnum,p1,p2, ..• ,pn);
                add     sp, 12h
                mov     ax, seg dseg19
                mov     es, ax
                mov     cx, es:word_29BC6
                mov     bx, es:word_29BC4
                xor     dx, dx
                mov     ax, 32h ; '2'
                call    F_LXMUL
                push    dx
                push    ax
                push    ds
                push    2A1h
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29BCE
                push    es:word_29BCC
                push    ds
                push    2A1h
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                push    368h
                call    PRFMSG          ; prfmsg(msgnum,p1,p2, ..• ,pn);
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    OUTPRF          ; outprf (unum);
                pop     cx

loc_1425F:                              ; CODE XREF: sub_140DB+61↑j
                pop     ds
                assume ds:dseg21
                retf
sub_140DB       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_14261       proc far                ; DATA XREF: dseg19:00E4↓o

var_1E          = byte ptr -1Eh

                enter   1Eh, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg13
                mov     ds, ax
                assume ds:dseg13
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AED3, 3
                jl      short loc_1428D
                push    seg dseg19
                push    offset byte_2A0A3
                call    STRLEN          ; size_t strlen(const char* str);
                add     sp, 4
                cmp     ax, 9
                jbe     short loc_14295

loc_1428D:                              ; CODE XREF: sub_14261+17↑j
                call    sub_15CFA
                jmp     loc_143AE
; ---------------------------------------------------------------------------

loc_14295:                              ; CODE XREF: sub_14261+2A↑j
                push    0
                push    1Eh
                push    ss
                lea     ax, [bp+var_1E]
                push    ax
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                xor     si, si
                jmp     short loc_142D1
; ---------------------------------------------------------------------------

loc_142AA:                              ; CODE XREF: sub_14261+80↓j
                or      si, si
                jnz     short loc_142C3
                mov     ax, seg dseg19
                mov     es, ax
                mov     al, es:[si+1DB3h]
                mov     ah, 0
                push    ax
                call    TOUPPER         ; int toupper (int c);
                pop     cx
                jmp     short loc_142CD
; ---------------------------------------------------------------------------

loc_142C3:                              ; CODE XREF: sub_14261+4B↑j
                mov     ax, seg dseg19
                mov     es, ax
                mov     al, es:[si+1DB3h]

loc_142CD:                              ; CODE XREF: sub_14261+60↑j
                mov     [bp+si+var_1E], al
                inc     si

loc_142D1:                              ; CODE XREF: sub_14261+47↑j
                push    seg dseg19
                push    offset byte_2A0A3
                call    STRLEN          ; size_t strlen(const char* str);
                add     sp, 4
                cmp     ax, si
                ja      short loc_142AA
                xor     di, di
                xor     si, si
                jmp     loc_14386
; ---------------------------------------------------------------------------

loc_142EA:                              ; CODE XREF: sub_14261+131↓j
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                cmp     word ptr es:[bx+0D6h], 2
                jz      short loc_14300
                jmp     loc_14385
; ---------------------------------------------------------------------------

loc_14300:                              ; CODE XREF: sub_14261+9A↑j
                push    seg dseg19
                push    offset byte_2A0A3
                call    STRLEN          ; size_t strlen(const char* str);
                add     sp, 4
                push    ax
                push    si
                call    sub_1A0E4
                pop     cx
                push    dx
                push    ax
                push    ss
                lea     ax, [bp+var_1E]
                push    ax
                call    STRNCMP         ; int strncmp(const char *str1, const char *str2, size_t maxlen);
                add     sp, 0Ah
                or      ax, ax
                jnz     short loc_14385
                mov     di, 1
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                mov     word ptr es:[bx+26h], 0
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                mov     word ptr es:[bx+96h], 0
                mov     word ptr es:[bx+94h], 0
                push    si
                call    sub_1A0E4
                pop     cx
                push    dx
                push    ax
                push    ds
                push    offset aConsiderSDead ; "Consider %s dead.\r"
                call    PRF             ; prf(string);
                add     sp, 8
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_17567
                pop     cx
                mov     ax, seg NTERMS
                mov     es, ax
                assume es:nothing
                mov     si, word ptr es:NTERMS ; int nterms;

loc_14385:                              ; CODE XREF: sub_14261+9C↑j
                                        ; sub_14261+C6↑j
                inc     si

loc_14386:                              ; CODE XREF: sub_14261+86↑j
                mov     ax, seg NTERMS
                mov     es, ax
                cmp     word ptr es:NTERMS, si ; int nterms;
                jle     short loc_14395
                jmp     loc_142EA
; ---------------------------------------------------------------------------

loc_14395:                              ; CODE XREF: sub_14261+12F↑j
                or      di, di
                jnz     short loc_143AE
                push    38Eh
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4

loc_143AE:                              ; CODE XREF: sub_14261+31↑j
                                        ; sub_14261+136↑j
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_14261       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_143B3       proc far                ; DATA XREF: dseg19:00AE↓o

var_1E          = byte ptr -1Eh

                enter   1Eh, 0
                push    si
                push    ds
                mov     ax, seg dseg13
                mov     ds, ax
                assume ds:dseg13
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AED3, 3
                jl      short loc_143DE
                push    seg dseg19
                push    offset byte_2A0A3
                call    STRLEN          ; size_t strlen(const char* str);
                add     sp, 4
                cmp     ax, 9
                jbe     short loc_143E6

loc_143DE:                              ; CODE XREF: sub_143B3+16↑j
                call    sub_15CFA
                jmp     loc_144A4
; ---------------------------------------------------------------------------

loc_143E6:                              ; CODE XREF: sub_143B3+29↑j
                push    0
                push    1Eh
                push    ss
                lea     ax, [bp+var_1E]
                push    ax
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                xor     si, si
                jmp     short loc_14422
; ---------------------------------------------------------------------------

loc_143FB:                              ; CODE XREF: sub_143B3+7F↓j
                or      si, si
                jnz     short loc_14414
                mov     ax, seg dseg19
                mov     es, ax
                mov     al, es:[si+1DB3h]
                mov     ah, 0
                push    ax
                call    TOUPPER         ; int toupper (int c);
                pop     cx
                jmp     short loc_1441E
; ---------------------------------------------------------------------------

loc_14414:                              ; CODE XREF: sub_143B3+4A↑j
                mov     ax, seg dseg19
                mov     es, ax
                mov     al, es:[si+1DB3h]

loc_1441E:                              ; CODE XREF: sub_143B3+5F↑j
                mov     [bp+si+var_1E], al
                inc     si

loc_14422:                              ; CODE XREF: sub_143B3+46↑j
                push    seg dseg19
                push    offset byte_2A0A3
                call    STRLEN          ; size_t strlen(const char* str);
                add     sp, 4
                cmp     ax, si
                ja      short loc_143FB
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_15D7B
                add     sp, 4
                push    1Eh
                push    ss
                lea     ax, [bp+var_1E]
                push    ax
                push    seg dseg19
                push    offset unk_29C1E
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                call    sub_15DD6
                push    ss
                lea     ax, [bp+var_1E]
                push    ax
                push    38Fh
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8

loc_144A4:                              ; CODE XREF: sub_143B3+30↑j
                pop     ds
                assume ds:dseg21
                pop     si
                leave
                retf
sub_143B3       endp


; =============== S U B R O U T I N E =======================================


sub_144A8       proc far                ; DATA XREF: dseg19:009C↓o
                push    si
                push    di
                push    ds
                mov     ax, seg dseg13
                mov     ds, ax
                assume ds:dseg13
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AED3, 2
                jge     short loc_144C5
                call    sub_15CFA
                jmp     loc_145A0
; ---------------------------------------------------------------------------

loc_144C5:                              ; CODE XREF: sub_144A8+13↑j
                push    seg dseg19
                push    offset byte_2A0A3
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                or      ax, ax
                jl      short loc_144EA
                push    seg dseg19
                push    offset byte_2A0A3
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                cmp     ax, 15h
                jle     short loc_14502

loc_144EA:                              ; CODE XREF: sub_144A8+2D↑j
                push    31Ch
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4
                jmp     loc_145A0
; ---------------------------------------------------------------------------

loc_14502:                              ; CODE XREF: sub_144A8+40↑j
                xor     di, di
                xor     si, si

loc_14506:                              ; CODE XREF: sub_144A8+B3↓j
                push    seg dseg19
                push    offset byte_2A0A3
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                mov     dx, si
                shl     dx, 1
                mov     bx, seg dseg19
                mov     es, bx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, dx
                cmp     ax, es:[bx+64h]
                jnz     short loc_1453E
                push    ds
                push    offset aYouAlreadyHave ; "You already have that spell!\r"
                call    PRF             ; prf(string);
                add     sp, 4
                mov     di, 0FFFFh
                mov     si, 14h
                jmp     short loc_14557
; ---------------------------------------------------------------------------

loc_1453E:                              ; CODE XREF: sub_144A8+80↑j
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+64h], 0FFFFh
                jnz     short loc_14557
                mov     di, si

loc_14557:                              ; CODE XREF: sub_144A8+94↑j
                                        ; sub_144A8+AB↑j
                inc     si
                cmp     si, 14h
                jl      short loc_14506
                cmp     di, 0FFFFh
                jle     short loc_14590
                push    seg dseg19
                push    offset byte_2A0A3
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                mov     dx, di
                shl     dx, 1
                mov     bx, seg dseg19
                mov     es, bx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, dx
                mov     es:[bx+64h], ax
                push    ds
                push    offset aSpellAdded ; "Spell added.\r"
                call    PRF             ; prf(string);
                add     sp, 4

loc_14590:                              ; CODE XREF: sub_144A8+B8↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    OUTPRF          ; outprf (unum);
                pop     cx

loc_145A0:                              ; CODE XREF: sub_144A8+1A↑j
                                        ; sub_144A8+57↑j
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                retf
sub_144A8       endp


; =============== S U B R O U T I N E =======================================


sub_145A4       proc far                ; DATA XREF: dseg19:0042↓o
                push    ds
                mov     ax, seg dseg13
                mov     ds, ax
                assume ds:dseg13
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_15D7B
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     es:word_29BF6, 1
                jnz     short loc_145F6
                jmp     loc_1478B
; ---------------------------------------------------------------------------

loc_145F6:                              ; CODE XREF: sub_145A4+4D↑j
                push    0Ah
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                push    seg dseg19
                push    offset byte_29B40
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                push    1Eh
                push    ds
                push    2E4h
                push    seg dseg19
                push    offset unk_29B4A
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                xor     dx, dx

loc_14650:                              ; CODE XREF: sub_145A4+D0↓j
                mov     bx, dx
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     word ptr es:[bx+1878h], 0FFFFh
                mov     bx, dx
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                mov     word ptr es:[bx+18A0h], 0FFFFh
                inc     dx
                cmp     dx, 14h
                jl      short loc_14650
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29BBA, 0
                mov     es:word_29BB8, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29BBE, 0FFFFh
                mov     es:word_29BBC, 0FFF6h
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29BC2, 5F5h
                mov     es:word_29BC0, 0E0FFh
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29BCA, 0
                mov     es:word_29BC8, 2710h
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29BCE, 5F5h
                mov     es:word_29BCC, 0E0FFh
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29BC6, 0
                mov     es:word_29BC4, 0
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29880
                push    es:word_2987E
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    37h ; '7'
                push    0
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jz      short loc_14765
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    0
                push    0
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                push    seg dseg19
                push    offset byte_29B40
                call    UPDBTV          ; void updbtv(char *recptr);
                jmp     short loc_14770
; ---------------------------------------------------------------------------

loc_14765:                              ; CODE XREF: sub_145A4+19D↑j
                push    seg dseg19
                push    offset byte_29B40
                call    INSBTV          ; void insbtv(char *recptr);

loc_14770:                              ; CODE XREF: sub_145A4+1BF↑j
                add     sp, 4
                push    391h
                call    sub_15C18
                pop     cx
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:word_29BF6, 1
                jmp     loc_14824
; ---------------------------------------------------------------------------

loc_1478B:                              ; CODE XREF: sub_145A4+4F↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29880
                push    es:word_2987E
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    37h ; '7'
                push    0
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                cmp     ax, 1
                jnz     short loc_14818
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    0
                push    0
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                call    DELBTV          ; void delbtv();
                push    392h
                call    sub_15C18
                pop     cx
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:word_29BF6, 0
                jmp     short loc_14824
; ---------------------------------------------------------------------------

loc_14818:                              ; CODE XREF: sub_145A4+241↑j
                push    ds
                push    2F1h
                call    CATASTRO        ; catastro(char * ctlstg, TYPE pl, TYPE p2,...,pn)
                add     sp, 4

loc_14824:                              ; CODE XREF: sub_145A4+1E4↑j
                                        ; sub_145A4+272↑j
                push    32h ; '2'
                push    ds
                push    311h
                push    seg dseg19
                push    offset unk_29C3C
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                call    sub_15DD6
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_17567
                pop     cx
                pop     ds
                assume ds:dseg21
                retf
sub_145A4       endp


; =============== S U B R O U T I N E =======================================


sub_1484F       proc far                ; DATA XREF: dseg19:0054↓o
                push    ds
                mov     ax, seg dseg13
                mov     ds, ax
                assume ds:dseg13
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_15D7B
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     es:word_29BF8, 0
                jnz     short loc_148BB
                push    393h
                call    sub_15C18
                pop     cx
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29BF8, 1
                push    32h ; '2'
                push    ds
                push    325h
                jmp     short loc_148D6
; ---------------------------------------------------------------------------

loc_148BB:                              ; CODE XREF: sub_1484F+4D↑j
                push    394h
                call    sub_15C18
                pop     cx
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29BF8, 0
                push    32h ; '2'
                push    ds
                push    343h

loc_148D6:                              ; CODE XREF: sub_1484F+6A↑j
                push    seg dseg19
                push    offset unk_29C3C
                call    STZCPY          ; stzcpy(char *dest, char *source, int nbytes);
                add     sp, 0Ah
                call    sub_15DD6
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_17567
                pop     cx
                pop     ds
                assume ds:dseg21
                retf
sub_1484F       endp


; =============== S U B R O U T I N E =======================================


sub_148FB       proc far                ; DATA XREF: dseg19:0066↓o
                push    ds
                mov     ax, seg dseg13
                mov     ds, ax
                assume ds:dseg13
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_15D7B
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     es:word_29BFA, 1
                jnz     short loc_1495B
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29BFA, 0
                push    396h
                jmp     short loc_1496A
; ---------------------------------------------------------------------------

loc_1495B:                              ; CODE XREF: sub_148FB+4D↑j
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29BFA, 1
                push    397h

loc_1496A:                              ; CODE XREF: sub_148FB+5E↑j
                call    sub_15C18
                pop     cx
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_17567
                pop     cx
                call    sub_15DD6
                pop     ds
                assume ds:dseg21
                retf
sub_148FB       endp


; =============== S U B R O U T I N E =======================================


sub_14987       proc far                ; DATA XREF: dseg19:008A↓o
                push    ds
                mov     ax, seg dseg13
                mov     ds, ax
                assume ds:dseg13
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AED3, 2
                jge     short loc_149A2
                call    sub_15CFA
                jmp     loc_14AEF
; ---------------------------------------------------------------------------

loc_149A2:                              ; CODE XREF: sub_14987+11↑j
                push    seg dseg19
                push    offset byte_2A0A3
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                dec     ax
                mov     dx, seg dseg19
                mov     es, dx
                mov     dx, es:word_2AEBB
                dec     dx
                cmp     ax, dx
                jg      short loc_149D3
                push    seg dseg19
                push    offset byte_2A0A3
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                cmp     ax, 1
                jge     short loc_14A03

loc_149D3:                              ; CODE XREF: sub_14987+37↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AEBB
                push    ds
                push    363h
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 6
                push    dx
                push    ax
                push    454h
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8
                jmp     loc_14AEF
; ---------------------------------------------------------------------------

loc_14A03:                              ; CODE XREF: sub_14987+4A↑j
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_15D7B
                add     sp, 4
                push    seg dseg19
                push    offset byte_2A0A3
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                dec     ax
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     es:word_29BFC, ax
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:word_29BFC
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29BDA
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+1Eh]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     es:word_29C08, ax
                call    sub_15DD6
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:word_29BFC
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                push    398h
                call    sub_15C18
                add     sp, 6
                push    0
                push    0FFFFh
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah

loc_14AEF:                              ; CODE XREF: sub_14987+18↑j
                                        ; sub_14987+79↑j
                pop     ds
                assume ds:dseg21
                retf
sub_14987       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_14AF1       proc far

var_6           = word ptr -6
var_4           = word ptr -4
var_2           = word ptr -2

                enter   6, 0
                push    ds
                mov     ax, seg dseg13
                mov     ds, ax
                assume ds:dseg13
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     es:word_2AED3, 5
                jge     short loc_14B10
                call    sub_15CFA
                jmp     loc_14BBC
; ---------------------------------------------------------------------------

loc_14B10:                              ; CODE XREF: sub_14AF1+15↑j
                push    seg dseg19
                push    offset byte_2A0A3
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                mov     [bp+var_2], ax
                push    seg dseg19
                push    offset unk_2A16B
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                mov     [bp+var_4], ax
                push    seg dseg19
                push    offset unk_2A233
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                mov     [bp+var_6], ax
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_15D7B
                add     sp, 4
                push    0Ah
                push    [bp+var_6]
                push    [bp+var_4]
                push    [bp+var_2]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                push    seg dseg19
                push    offset unk_29C14
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                call    sub_15DD6
                push    399h
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4

loc_14BBC:                              ; CODE XREF: sub_14AF1+1C↑j
                pop     ds
                assume ds:dseg21
                leave
                retf
sub_14AF1       endp


; =============== S U B R O U T I N E =======================================


sub_14BBF       proc far                ; DATA XREF: dseg19:00F6↓o
                push    ds
                mov     ax, seg dseg13
                mov     ds, ax
                assume ds:dseg13
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+0E0h]
                and     ax, 1
                or      ax, 0
                jz      short loc_14BFE
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                and     word ptr es:[bx+0E0h], 0FFFEh
                mov     ax, es:[bx+0E0h]
                and     word ptr es:[bx+0E2h], 0FFFFh
                mov     dx, es:[bx+0E2h]
                jmp     short loc_14C1E
; ---------------------------------------------------------------------------

loc_14BFE:                              ; CODE XREF: sub_14BBF+1B↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                or      word ptr es:[bx+0E0h], 1
                mov     ax, es:[bx+0E0h]
                or      word ptr es:[bx+0E2h], 0
                mov     dx, es:[bx+0E2h]

loc_14C1E:                              ; CODE XREF: sub_14BBF+3D↑j
                or      ax, dx
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+0E0h]
                and     ax, 1
                or      ax, 0
                jz      short loc_14C3E
                mov     dx, ds
                mov     ax, 381h
                jmp     short loc_14C43
; ---------------------------------------------------------------------------

loc_14C3E:                              ; CODE XREF: sub_14BBF+76↑j
                mov     dx, ds
                mov     ax, 384h

loc_14C43:                              ; CODE XREF: sub_14BBF+7D↑j
                push    dx
                push    ax
                push    ds
                push    366h
                call    PRF             ; prf(string);
                add     sp, 8
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    OUTPRF          ; outprf (unum);
                pop     cx
                pop     ds
                assume ds:dseg21
                retf
sub_14BBF       endp


; =============== S U B R O U T I N E =======================================


sub_14C63       proc far                ; DATA XREF: dseg19:011A↓o
                push    si
                push    di
                push    ds
                mov     ax, seg dseg13
                mov     ds, ax
                assume ds:dseg13
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AED3, 3
                jge     short loc_14C7B
                jmp     loc_14D9F
; ---------------------------------------------------------------------------

loc_14C7B:                              ; CODE XREF: sub_14C63+13↑j
                push    seg dseg19
                push    offset byte_2A0A3
                call    sub_1872A
                add     sp, 4
                mov     di, ax
                cmp     di, 0FFFFh
                jg      short loc_14C93
                jmp     loc_14D9F
; ---------------------------------------------------------------------------

loc_14C93:                              ; CODE XREF: sub_14C63+2B↑j
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_15D7B
                add     sp, 4
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     word ptr es:[bx+18FCh], 0
                call    sub_15DD6
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+24h]
                mov     es, ax
                assume es:dseg19
                add     dx, es:[bx+18h]
                push    dx
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+22h]
                mov     es, ax
                assume es:dseg19
                add     dx, es:[bx+10h]
                push    dx
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+20h]
                mov     es, ax
                assume es:dseg19
                add     dx, es:[bx+8]
                push    dx
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_15D7B
                add     sp, 4
                mov     ax, 1
                cmp     di, 1
                jz      short loc_14D5A
                cmp     di, 3
                jnz     short loc_14D5D

loc_14D5A:                              ; CODE XREF: sub_14C63+F0↑j
                mov     ax, 0FFFFh

loc_14D5D:                              ; CODE XREF: sub_14C63+F5↑j
                mov     bx, di
                add     bx, ax
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                mov     word ptr es:[bx+18FCh], 0
                call    sub_15DD6
                mov     bx, di
                shl     bx, 2
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:[bx+28h]
                push    word ptr es:[bx+26h]
                push    39Eh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8
                jmp     short loc_14DA4
; ---------------------------------------------------------------------------

loc_14D9F:                              ; CODE XREF: sub_14C63+15↑j
                                        ; sub_14C63+2D↑j
                call    sub_15CFA

loc_14DA4:                              ; CODE XREF: sub_14C63+13A↑j
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                retf
sub_14C63       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_14DA8       proc far                ; DATA XREF: dseg19:00C0↓o

var_24          = byte ptr -24h
var_6           = word ptr -6
var_4           = word ptr -4
var_2           = word ptr -2

                enter   24h, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg13
                mov     ds, ax
                assume ds:dseg13
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AED3, 5
                jge     short loc_14DC7
                push    4DDh
                jmp     loc_151A8
; ---------------------------------------------------------------------------

loc_14DC7:                              ; CODE XREF: sub_14DA8+17↑j
                push    0
                push    1Eh
                push    ss
                lea     ax, [bp+var_24]
                push    ax
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                mov     si, 4
                jmp     short loc_14E18
; ---------------------------------------------------------------------------

loc_14DDD:                              ; CODE XREF: sub_14DA8+7A↓j
                mov     ax, si
                imul    ax, 0C8h
                add     ax, 1C23h
                push    seg dseg19
                push    ax
                push    ss
                lea     ax, [bp+var_24]
                push    ax
                call    STRCAT          ; char *strcat(char *destination, const char *source );
                add     sp, 8
                mov     ax, si
                inc     ax
                mov     dx, seg dseg19
                mov     es, dx
                cmp     ax, es:word_2AED3
                jge     short loc_14E17
                push    ds
                push    offset asc_258C8 ; " "
                push    ss
                lea     ax, [bp+var_24]
                push    ax
                call    STRCAT          ; char *strcat(char *destination, const char *source );
                add     sp, 8

loc_14E17:                              ; CODE XREF: sub_14DA8+5C↑j
                inc     si

loc_14E18:                              ; CODE XREF: sub_14DA8+33↑j
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AED3, si
                jg      short loc_14DDD
                xor     si, si
                jmp     loc_1518A
; ---------------------------------------------------------------------------

loc_14E29:                              ; CODE XREF: sub_14DA8+3F2↓j
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                cmp     word ptr es:[bx+0D6h], 2
                jz      short loc_14E3F
                jmp     loc_15189
; ---------------------------------------------------------------------------

loc_14E3F:                              ; CODE XREF: sub_14DA8+92↑j
                push    ss
                lea     ax, [bp+var_24]
                push    ax
                push    si
                call    sub_1A0E4
                pop     cx
                push    dx
                push    ax
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jnz     short loc_14E5C
                jmp     loc_15189
; ---------------------------------------------------------------------------

loc_14E5C:                              ; CODE XREF: sub_14DA8+AF↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                test    es:word_2AEB3, 2
                jnz     short loc_14E6D
                jmp     loc_14F39
; ---------------------------------------------------------------------------

loc_14E6D:                              ; CODE XREF: sub_14DA8+C0↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29878
                push    es:word_29876
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    37h ; '7'
                push    0
                push    si
                call    UACOFF          ; struct usracc *uaptr=uacoff(unum);
                pop     cx
                push    dx
                push    ax
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jz      short loc_14ECD
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    seg dseg19
                push    offset unk_29A78
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29A9E, 1
                push    seg dseg19
                push    offset unk_29A78
                call    UPDBTV          ; void updbtv(char *recptr);
                jmp     short loc_14F23
; ---------------------------------------------------------------------------

loc_14ECD:                              ; CODE XREF: sub_14DA8+F3↑j
                push    1Eh
                push    si
                call    UACOFF          ; struct usracc *uaptr=uacoff(unum);
                pop     cx
                push    dx
                push    ax
                push    seg dseg19
                push    offset unk_29A78
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29A98, 0
                mov     es:word_29A96, 0
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29A9C, 0
                mov     es:word_29A9A, 0
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29A9E, 1
                push    seg dseg19
                push    offset unk_29A78
                call    INSBTV          ; void insbtv(char *recptr);

loc_14F23:                              ; CODE XREF: sub_14DA8+123↑j
                add     sp, 4
                push    ds
                push    offset aSinceYourChara ; "Since your character was edited,you are"...
                call    PRF             ; prf(string);
                add     sp, 4
                push    si
                call    OUTPRF          ; outprf (unum);
                pop     cx

loc_14F39:                              ; CODE XREF: sub_14DA8+C2↑j
                push    seg dseg19
                push    offset unk_2A16B
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                mov     [bp+var_2], dx
                mov     [bp+var_4], ax
                xor     di, di
                push    ds
                push    offset aStr     ; "STR"
                push    seg dseg19
                push    offset byte_2A0A3
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_14F79
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, [bp+var_4]
                mov     es, dx
                assume es:nothing
                xchg    ax, bx
                mov     es:[bx+32h], ax
                jmp     loc_15160
; ---------------------------------------------------------------------------

loc_14F79:                              ; CODE XREF: sub_14DA8+1BB↑j
                push    ds
                push    offset aInt     ; "INT"
                push    seg dseg19
                push    offset byte_2A0A3
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_14FA3
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, [bp+var_4]
                mov     es, dx
                xchg    ax, bx
                mov     es:[bx+30h], ax
                jmp     loc_15160
; ---------------------------------------------------------------------------

loc_14FA3:                              ; CODE XREF: sub_14DA8+1E5↑j
                push    ds
                push    offset aWis     ; "WIS"
                push    seg dseg19
                push    offset byte_2A0A3
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_14FCD
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, [bp+var_4]
                mov     es, dx
                xchg    ax, bx
                mov     es:[bx+34h], ax
                jmp     loc_15160
; ---------------------------------------------------------------------------

loc_14FCD:                              ; CODE XREF: sub_14DA8+20F↑j
                push    ds
                push    offset aDex     ; "DEX"
                push    seg dseg19
                push    offset byte_2A0A3
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_14FF7
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, [bp+var_4]
                mov     es, dx
                xchg    ax, bx
                mov     es:[bx+3Ah], ax
                jmp     loc_15160
; ---------------------------------------------------------------------------

loc_14FF7:                              ; CODE XREF: sub_14DA8+239↑j
                push    ds
                push    offset aCon     ; "CON"
                push    seg dseg19
                push    offset byte_2A0A3
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_15021
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, [bp+var_4]
                mov     es, dx
                xchg    ax, bx
                mov     es:[bx+38h], ax
                jmp     loc_15160
; ---------------------------------------------------------------------------

loc_15021:                              ; CODE XREF: sub_14DA8+263↑j
                push    ds
                push    offset aCha     ; "CHA"
                push    seg dseg19
                push    offset byte_2A0A3
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_1504B
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, [bp+var_4]
                mov     es, dx
                xchg    ax, bx
                mov     es:[bx+36h], ax
                jmp     loc_15160
; ---------------------------------------------------------------------------

loc_1504B:                              ; CODE XREF: sub_14DA8+28D↑j
                push    ds
                push    offset aHit     ; "HIT"
                push    seg dseg19
                push    offset byte_2A0A3
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_15075
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, [bp+var_4]
                mov     es, dx
                xchg    ax, bx
                mov     es:[bx+26h], ax
                jmp     loc_15160
; ---------------------------------------------------------------------------

loc_15075:                              ; CODE XREF: sub_14DA8+2B7↑j
                push    ds
                push    offset aMhp     ; "MHP"
                push    seg dseg19
                push    offset byte_2A0A3
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_1509F
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, [bp+var_4]
                mov     es, dx
                xchg    ax, bx
                mov     es:[bx+28h], ax
                jmp     loc_15160
; ---------------------------------------------------------------------------

loc_1509F:                              ; CODE XREF: sub_14DA8+2E1↑j
                push    ds
                push    offset aLev     ; "LEV"
                push    seg dseg19
                push    offset byte_2A0A3
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_150C9
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, [bp+var_4]
                mov     es, dx
                xchg    ax, bx
                mov     es:[bx+2Ah], ax
                jmp     loc_15160
; ---------------------------------------------------------------------------

loc_150C9:                              ; CODE XREF: sub_14DA8+30B↑j
                push    ds
                push    offset aExp     ; "EXP"
                push    seg dseg19
                push    offset byte_2A0A3
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_150F9
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, [bp+var_2]
                mov     cx, [bp+var_4]
                mov     es, dx
                xchg    ax, bx
                mov     es:[bx+2Eh], ax
                mov     es:[bx+2Ch], cx
                jmp     short loc_15160
; ---------------------------------------------------------------------------

loc_150F9:                              ; CODE XREF: sub_14DA8+335↑j
                push    ds
                push    offset aRib     ; "RIB"
                push    seg dseg19
                push    offset byte_2A0A3
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_1512B
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, [bp+var_2]
                mov     cx, [bp+var_4]
                mov     es, dx
                xchg    ax, bx
                mov     es:[bx+92h], ax
                mov     es:[bx+90h], cx
                jmp     short loc_15160
; ---------------------------------------------------------------------------

loc_1512B:                              ; CODE XREF: sub_14DA8+365↑j
                push    ds
                push    offset aIon_0   ; "ION"
                push    seg dseg19
                push    offset byte_2A0A3
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_1515D
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, [bp+var_2]
                mov     cx, [bp+var_4]
                mov     es, dx
                xchg    ax, bx
                mov     es:[bx+96h], ax
                mov     es:[bx+94h], cx
                jmp     short loc_15160
; ---------------------------------------------------------------------------

loc_1515D:                              ; CODE XREF: sub_14DA8+397↑j
                mov     di, 1

loc_15160:                              ; CODE XREF: sub_14DA8+1CE↑j
                                        ; sub_14DA8+1F8↑j ...
                or      di, di
                jnz     short loc_15169
                push    4E9h
                jmp     short loc_1516C
; ---------------------------------------------------------------------------

loc_15169:                              ; CODE XREF: sub_14DA8+3BA↑j
                push    4DDh

loc_1516C:                              ; CODE XREF: sub_14DA8+3BF↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4
                mov     ax, seg NTERMS
                mov     es, ax
                assume es:nothing
                mov     si, word ptr es:NTERMS ; int nterms;
                inc     si

loc_15189:                              ; CODE XREF: sub_14DA8+94↑j
                                        ; sub_14DA8+B1↑j
                inc     si

loc_1518A:                              ; CODE XREF: sub_14DA8+7E↑j
                mov     ax, seg NTERMS
                mov     es, ax
                mov     ax, word ptr es:NTERMS ; int nterms;
                mov     [bp+var_6], ax
                cmp     ax, si
                jle     short loc_1519D
                jmp     loc_14E29
; ---------------------------------------------------------------------------

loc_1519D:                              ; CODE XREF: sub_14DA8+3F0↑j
                mov     ax, [bp+var_6]
                inc     ax
                cmp     ax, si
                jle     short loc_151BA
                push    38Eh

loc_151A8:                              ; CODE XREF: sub_14DA8+1C↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4

loc_151BA:                              ; CODE XREF: sub_14DA8+3FB↑j
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_14DA8       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_151BF       proc far                ; DATA XREF: dseg19:012C↓o

var_4           = word ptr -4
var_2           = word ptr -2

                enter   4, 0
                push    ds
                mov     ax, seg dseg13
                mov     ds, ax
                assume ds:dseg13
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AED3, 3
                jge     short loc_151DE
                call    sub_12E92
                jmp     loc_15269
; ---------------------------------------------------------------------------

loc_151DE:                              ; CODE XREF: sub_151BF+15↑j
                call    RSTRIN          ; void rstrin();
                push    ds
                push    offset asc_258C8 ; " "
                push    seg INPUT
                push    offset INPUT    ; char input[];
                call    STRSTR          ; char * strstr(char *str1, const char *str2 );
                add     sp, 8
                mov     [bp+var_2], dx
                mov     [bp+var_4], ax
                inc     [bp+var_4]
                push    ds
                push    offset asc_258C8 ; " "
                push    [bp+var_2]
                push    [bp+var_4]
                call    STRSTR          ; char * strstr(char *str1, const char *str2 );
                add     sp, 8
                mov     [bp+var_2], dx
                mov     [bp+var_4], ax
                inc     [bp+var_4]
                push    32h ; '2'
                push    [bp+var_2]
                push    [bp+var_4]
                push    seg dseg19
                push    offset unk_29C3C
                call    STZCPY          ; stzcpy(char *dest, char *source, int nbytes);
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29884
                push    es:word_29882
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    seg dseg19
                push    offset byte_29BDE
                call    UPDBTV          ; void updbtv(char *recptr);
                add     sp, 4
                push    50Ch
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4

loc_15269:                              ; CODE XREF: sub_151BF+1C↑j
                pop     ds
                assume ds:dseg21
                leave
                retf
sub_151BF       endp


; =============== S U B R O U T I N E =======================================


sub_1526C       proc far                ; DATA XREF: dseg19:013E↓o
                push    ds
                mov     ax, seg dseg13
                mov     ds, ax
                assume ds:dseg13
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29BF6, 0
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29BF8, 0
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29BFA, 0
                push    0
                push    1Eh
                push    seg dseg19
                push    offset unk_29C1E
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                push    32h ; '2'
                push    ds
                push    343h
                push    seg dseg19
                push    offset unk_29C3C
                call    STZCPY          ; stzcpy(char *dest, char *source, int nbytes);
                add     sp, 0Ah
                call    sub_15DD6
                push    50Dh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4
                pop     ds
                assume ds:dseg21
                retf
sub_1526C       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_152D8       proc far                ; DATA XREF: dseg19:0078↓o

var_2           = word ptr -2

                enter   2, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg13
                mov     ds, ax
                assume ds:dseg13
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AED3, 3
                jge     short loc_152F4
                jmp     loc_154C2
; ---------------------------------------------------------------------------

loc_152F4:                              ; CODE XREF: sub_152D8+17↑j
                push    seg dseg19
                push    offset byte_2A0A3
                call    sub_1872A
                add     sp, 4
                mov     di, ax
                mov     [bp+var_2], 1
                cmp     di, 1
                jz      short loc_15313
                cmp     di, 3
                jnz     short loc_15318

loc_15313:                              ; CODE XREF: sub_152D8+34↑j
                mov     [bp+var_2], 0FFFFh

loc_15318:                              ; CODE XREF: sub_152D8+39↑j
                cmp     di, 0FFFFh
                jg      short loc_15320
                jmp     loc_154C2
; ---------------------------------------------------------------------------

loc_15320:                              ; CODE XREF: sub_152D8+43↑j
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+22h]
                mov     es, ax
                assume es:dseg19
                add     dx, es:[bx+10h]
                push    dx
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+20h]
                mov     es, ax
                assume es:dseg19
                add     dx, es:[bx+8]
                push    dx
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_15D7B
                add     sp, 4
                or      ax, ax
                jnz     short loc_15381
                jmp     loc_154A4
; ---------------------------------------------------------------------------

loc_15381:                              ; CODE XREF: sub_152D8+A4↑j
                mov     bx, di
                add     bx, [bp+var_2]
                shl     bx, 1
                mov     si, bx
                mov     ax, seg dseg19
                mov     es, ax
                cmp     word ptr es:[bx+18FCh], 0Ah
                jl      short loc_1539A
                jmp     loc_15428
; ---------------------------------------------------------------------------

loc_1539A:                              ; CODE XREF: sub_152D8+BD↑j
                mov     ax, seg dseg19
                mov     es, ax
                mov     word ptr es:[si+18FCh], 0Ah
                call    sub_15DD6
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_15D7B
                add     sp, 4
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     word ptr es:[bx+18FCh], 0Ah
                call    sub_15DD6
                mov     bx, di
                shl     bx, 2
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:[bx+28h]
                push    word ptr es:[bx+26h]
                push    39Ch

loc_15413:                              ; CODE XREF: sub_152D8+1C9↓j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8
                jmp     loc_154C7
; ---------------------------------------------------------------------------

loc_15428:                              ; CODE XREF: sub_152D8+BF↑j
                mov     ax, seg dseg19
                mov     es, ax
                mov     word ptr es:[si+18FCh], 1
                call    sub_15DD6
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_15D7B
                add     sp, 4
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     word ptr es:[bx+18FCh], 1
                call    sub_15DD6
                mov     bx, di
                shl     bx, 2
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:[bx+28h]
                push    word ptr es:[bx+26h]
                push    39Dh
                jmp     loc_15413
; ---------------------------------------------------------------------------

loc_154A4:                              ; CODE XREF: sub_152D8+A6↑j
                push    ds
                push    offset aThereIsNoRoomO ; "There is no room on the other side!\r"
                call    PRF             ; prf(string);
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_17567
                pop     cx
                jmp     short loc_154C7
; ---------------------------------------------------------------------------

loc_154C2:                              ; CODE XREF: sub_152D8+19↑j
                                        ; sub_152D8+45↑j
                call    sub_15CFA

loc_154C7:                              ; CODE XREF: sub_152D8+14D↑j
                                        ; sub_152D8+1E8↑j
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_152D8       endp


; =============== S U B R O U T I N E =======================================


sub_154CC       proc far                ; DATA XREF: dseg19:0150↓o
                push    ds
                mov     ax, seg dseg13
                mov     ds, ax
                assume ds:dseg13
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AED3, 3
                jge     short loc_15502
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29A6E
                push    es:word_29A6C
                push    ds
                push    2A1h
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                push    ds
                push    426h
                jmp     short loc_1553F
; ---------------------------------------------------------------------------

loc_15502:                              ; CODE XREF: sub_154CC+11↑j
                push    seg dseg19
                push    offset byte_2A0A3
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                mov     bx, seg dseg19
                mov     es, bx
                mov     es:word_29A6E, dx
                mov     es:word_29A6C, ax
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29A6E
                push    es:word_29A6C
                push    ds
                push    2A1h
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                push    ds
                push    43Ch

loc_1553F:                              ; CODE XREF: sub_154CC+34↑j
                call    PRF             ; prf(string);
                add     sp, 8
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    OUTPRF          ; outprf (unum);
                pop     cx
                pop     ds
                assume ds:dseg21
                retf
sub_154CC       endp

; ---------------------------------------------------------------------------
                align 8
cseg05          ends

; Segment Number    : 6
; Alloc Size        : 5941h
; Offset in the file: 21A00h  Length: 5941h
; Attributes  (0D00): CODE Relocations DPL: 3
; ===========================================================================

; Segment type: Pure code
cseg06          segment para public 'CODE' use16
                assume cs:cseg06
                assume es:nothing, ss:nothing, ds:dseg21, fs:nothing, gs:nothing

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_15560       proc far                ; CODE XREF: sub_955B+714↑P
                                        ; sub_955B+7A1↑P ...

var_6           = byte ptr -6
arg_0           = dword ptr  6
arg_4           = word ptr  0Ah

                enter   6, 0
                push    si
                push    ds
                mov     ax, seg dseg14
                mov     ds, ax
                assume ds:dseg14
                push    ds
                push    offset aAeiou   ; "AEIOU"
                push    ss
                lea     ax, [bp+var_6]
                push    ax
                call    STRCPY          ; char* strcpy(char* destination, const char* source );
                add     sp, 8
                push    0
                push    4
                push    ds
                push    offset byte_259A0
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                mov     byte_259A1, 20h ; ' '
                cmp     [bp+arg_4], 0
                jnz     short loc_1559E
                mov     byte_259A0, 41h ; 'A'
                jmp     short loc_155A3
; ---------------------------------------------------------------------------

loc_1559E:                              ; CODE XREF: sub_15560+35↑j
                mov     byte_259A0, 61h ; 'a'

loc_155A3:                              ; CODE XREF: sub_15560+3C↑j
                xor     si, si

loc_155A5:                              ; CODE XREF: sub_15560+6E↓j
                les     bx, [bp+arg_0]
                mov     al, es:[bx]
                mov     ah, 0
                push    ax
                call    TOUPPER         ; int toupper (int c);
                pop     cx
                mov     dl, [bp+si+var_6]
                mov     dh, 0
                cmp     ax, dx
                jnz     short loc_155CA
                mov     byte_259A1, 6Eh ; 'n'
                mov     byte_259A2, 20h ; ' '
                mov     si, 6

loc_155CA:                              ; CODE XREF: sub_15560+5B↑j
                inc     si
                cmp     si, 5
                jl      short loc_155A5
                mov     dx, ds
                mov     ax, 0
                pop     ds
                assume ds:dseg21
                pop     si
                leave
                retf
sub_15560       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_155D9       proc far                ; CODE XREF: sub_15677+1D↓p
                                        ; sub_15677+33↓p ...

var_4           = byte ptr -4
var_3           = byte ptr -3
var_2           = byte ptr -2
arg_0           = word ptr  6

                enter   4, 0
                push    si
                push    ds
                mov     ax, seg dseg14
                mov     ds, ax
                assume ds:dseg14
                mov     si, [bp+arg_0]
                push    0
                push    4
                push    ds
                push    offset byte_259A4
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                push    0
                push    4
                push    ss
                lea     ax, [bp+var_4]
                push    ax
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                push    3
                push    si
                push    ds
                push    offset aD       ; "%d"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 6
                push    dx
                push    ax
                push    ss
                lea     ax, [bp+var_4]
                push    ax
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                or      si, si
                jl      short loc_15631
                mov     byte_259A4, 2Bh ; '+'
                jmp     short loc_15636
; ---------------------------------------------------------------------------

loc_15631:                              ; CODE XREF: sub_155D9+4F↑j
                mov     byte_259A4, 2Dh ; '-'

loc_15636:                              ; CODE XREF: sub_155D9+56↑j
                cmp     si, 0Ah
                jge     short loc_1564E
                cmp     si, 0FFF6h
                jle     short loc_1564E
                mov     byte_259A5, 30h ; '0'
                or      si, si
                jl      short loc_15663
                mov     al, [bp+var_4]
                jmp     short loc_15666
; ---------------------------------------------------------------------------

loc_1564E:                              ; CODE XREF: sub_155D9+60↑j
                                        ; sub_155D9+65↑j
                or      si, si
                jge     short loc_1565D
                mov     al, [bp+var_3]
                mov     byte_259A5, al
                mov     al, [bp+var_2]
                jmp     short loc_15666
; ---------------------------------------------------------------------------

loc_1565D:                              ; CODE XREF: sub_155D9+77↑j
                mov     al, [bp+var_4]
                mov     byte_259A5, al

loc_15663:                              ; CODE XREF: sub_155D9+6E↑j
                mov     al, [bp+var_3]

loc_15666:                              ; CODE XREF: sub_155D9+73↑j
                                        ; sub_155D9+82↑j
                mov     byte_259A6, al
                mov     byte_259A7, 0
                mov     dx, ds
                mov     ax, 4
                pop     ds
                assume ds:dseg21
                pop     si
                leave
                retf
sub_155D9       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_15677       proc far                ; CODE XREF: _INIT__MUTANTS+C9C↑P
                                        ; sttrou+587↑P ...

arg_0           = word ptr  6
arg_2           = word ptr  8
arg_4           = word ptr  0Ah

                push    bp
                mov     bp, sp
                push    ds
                mov     ax, seg dseg14
                mov     ds, ax
                assume ds:dseg14
                push    0
                push    0Ah
                push    ds
                push    offset unk_259A8
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                push    [bp+arg_0]
                push    cs
                call    near ptr sub_155D9
                pop     cx
                push    dx
                push    ax
                push    ds
                push    offset unk_259A8
                call    STRCPY          ; char* strcpy(char* destination, const char* source );
                add     sp, 8
                push    [bp+arg_2]
                push    cs
                call    near ptr sub_155D9
                pop     cx
                push    dx
                push    ax
                push    ds
                push    offset unk_259A8
                call    STRCAT          ; char *strcat(char *destination, const char *source );
                add     sp, 8
                push    [bp+arg_4]
                push    cs
                call    near ptr sub_155D9
                pop     cx
                push    dx
                push    ax
                push    ds
                push    offset unk_259A8
                call    STRCAT          ; char *strcat(char *destination, const char *source );
                add     sp, 8
                push    ds
                push    offset unk_25C46
                push    ds
                push    offset unk_259A8
                call    STRCAT          ; char *strcat(char *destination, const char *source );
                add     sp, 8
                mov     dx, ds
                mov     ax, 8
                pop     ds
                assume ds:dseg21
                pop     bp
                retf
sub_15677       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_156EA       proc far                ; CODE XREF: sub_2D88+233↑P
                                        ; sub_2D88+258↑P ...

var_20          = byte ptr -20h
var_6           = byte ptr -6
arg_0           = word ptr  6
arg_2           = word ptr  8

                enter   20h, 0
                push    si
                push    ds
                mov     ax, seg dseg14
                mov     ds, ax
                assume ds:dseg14
                push    6
                push    ds
                push    offset aAeiou_0 ; "aeiou"
                push    ss
                lea     ax, [bp+var_6]
                push    ax
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                push    0
                push    0FFh
                push    ds
                push    offset unk_259B2
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                push    [bp+arg_2]
                push    [bp+arg_0]
                push    ds
                push    offset unk_259B2
                call    STRCPY          ; char* strcpy(char* destination, const char* source );
                add     sp, 8
                xor     si, si

loc_1572D:                              ; CODE XREF: sub_156EA+83↓j
                push    ds
                push    offset unk_259B2
                call    STRLEN          ; size_t strlen(const char* str);
                add     sp, 4
                dec     ax
                mov     bx, ax
                mov     al, [bx+12h]
                mov     ah, 0
                push    ax
                call    TOLOWER         ; int tolower (int c);
                pop     cx
                mov     dl, [bp+si+var_6]
                mov     dh, 0
                cmp     ax, dx
                jnz     short loc_15769
                push    ds
                push    offset unk_259B2
                call    STRLEN          ; size_t strlen(const char* str);
                add     sp, 4
                dec     ax
                mov     bx, ax
                mov     byte ptr [bx+12h], 0
                mov     si, 5

loc_15769:                              ; CODE XREF: sub_156EA+66↑j
                inc     si
                cmp     si, 5
                jl      short loc_1572D
                push    ds
                push    offset unk_259B2
                call    STRLEN          ; size_t strlen(const char* str);
                add     sp, 4
                cmp     ax, 1
                ja      short loc_15783
                jmp     loc_15837
; ---------------------------------------------------------------------------

loc_15783:                              ; CODE XREF: sub_156EA+94↑j
                push    ds
                push    offset unk_259B2
                call    STRLEN          ; size_t strlen(const char* str);
                add     sp, 4
                dec     ax
                mov     bx, ax
                mov     al, [bx+12h]
                mov     ah, 0
                push    ax
                call    TOLOWER         ; int tolower (int c);
                pop     cx
                push    ax
                push    ds
                push    offset unk_259B2
                call    STRLEN          ; size_t strlen(const char* str);
                add     sp, 4
                sub     ax, 2
                mov     bx, ax
                mov     al, [bx+12h]
                mov     ah, 0
                push    ax
                call    TOLOWER         ; int tolower (int c);
                pop     cx
                pop     dx
                cmp     dx, ax
                jz      short loc_15837
                push    19h
                push    ds
                push    offset aBcdmnprstz ; "bcdmnprstz"
                push    ss
                lea     ax, [bp+var_20]
                push    ax
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                xor     si, si
                jmp     short loc_15826
; ---------------------------------------------------------------------------

loc_157DA:                              ; CODE XREF: sub_156EA+14B↓j
                mov     al, [bp+si+var_20]
                mov     ah, 0
                push    ax
                push    ds
                push    offset unk_259B2
                call    STRLEN          ; size_t strlen(const char* str);
                add     sp, 4
                dec     ax
                mov     bx, ax
                mov     al, [bx+12h]
                mov     ah, 0
                push    ax
                call    TOLOWER         ; int tolower (int c);
                pop     cx
                pop     dx
                cmp     dx, ax
                jnz     short loc_15825
                push    ds
                push    offset unk_259B2
                call    STRLEN          ; size_t strlen(const char* str);
                add     sp, 4
                mov     dl, [bp+si+var_20]
                mov     bx, ax
                mov     [bx+12h], dl
                push    ss
                lea     ax, [bp+var_20]
                push    ax
                call    STRLEN          ; size_t strlen(const char* str);
                add     sp, 4
                mov     si, ax

loc_15825:                              ; CODE XREF: sub_156EA+115↑j
                inc     si

loc_15826:                              ; CODE XREF: sub_156EA+EE↑j
                push    ss
                lea     ax, [bp+var_20]
                push    ax
                call    STRLEN          ; size_t strlen(const char* str);
                add     sp, 4
                cmp     ax, si
                ja      short loc_157DA

loc_15837:                              ; CODE XREF: sub_156EA+96↑j
                                        ; sub_156EA+D7↑j
                push    ds
                push    offset aIng     ; "ing"
                push    ds
                push    offset unk_259B2
                call    STRCAT          ; char *strcat(char *destination, const char *source );
                add     sp, 8
                mov     dx, ds
                mov     ax, 12h
                pop     ds
                assume ds:dseg21
                pop     si
                leave
                retf
sub_156EA       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_15850       proc far                ; CODE XREF: sub_D871+33C↑P
                                        ; sub_DE45+96↑P ...

var_4           = word ptr -4
var_2           = word ptr -2
arg_0           = word ptr  6
arg_2           = word ptr  8

                enter   4, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg14
                mov     ds, ax
                assume ds:dseg14
                mov     di, [bp+arg_0]
                mov     [bp+var_2], 0
                mov     [bp+var_4], 0
                mov     ax, di
                cwd
                mov     bx, [bp+arg_2]
                imul    bx, 32h ; '2'
                mov     cx, seg dseg19
                mov     es, cx
                assume es:dseg19
                les     si, es:dword_29BDA
                assume es:nothing
                add     si, bx
                push    ax
                push    dx
                mov     dx, es:[si+26h]
                mov     ax, es:[si+24h]
                pop     cx
                pop     bx
                call    F_LXMUL
                add     [bp+var_4], ax
                adc     [bp+var_2], dx
                mov     ax, [bp+arg_2]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29BDA
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+22h]
                mov     dx, es:[bx+20h]
                add     [bp+var_4], dx
                adc     [bp+var_2], ax
                cmp     di, 64h ; 'd'
                jle     short loc_158CA
                mov     ax, di
                add     ax, 0FF9Ch
                imul    ax, 3E8h
                cwd
                add     [bp+var_4], ax
                adc     [bp+var_2], dx

loc_158CA:                              ; CODE XREF: sub_15850+68↑j
                mov     dx, [bp+var_2]
                mov     ax, [bp+var_4]
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_15850       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_158D5       proc far                ; CODE XREF: sub_D871+350↑P
                                        ; sub_DE45+AA↑P ...

arg_0           = word ptr  6

                push    bp
                mov     bp, sp
                push    si
                push    di
                push    ds
                mov     ax, seg dseg14
                mov     ds, ax
                assume ds:dseg14
                mov     di, [bp+arg_0]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_29880
                push    es:word_2987E
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    37h ; '7'
                push    0
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                push    cs
                call    near ptr sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jz      short loc_15971
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    seg dseg19
                push    offset byte_29B40
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                cmp     di, 1
                jnz     short loc_15965
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     si, es:word_29BB8
                jmp     short loc_15973
; ---------------------------------------------------------------------------

loc_15965:                              ; CODE XREF: sub_158D5+82↑j
                mov     ax, seg dseg19
                mov     es, ax
                mov     si, es:word_29BBC
                jmp     short loc_15973
; ---------------------------------------------------------------------------

loc_15971:                              ; CODE XREF: sub_158D5+66↑j
                xor     si, si

loc_15973:                              ; CODE XREF: sub_158D5+8E↑j
                                        ; sub_158D5+9A↑j
                push    ds
                push    offset aVillageShop ; "Village Shop"
                push    seg dseg19
                push    offset unk_29B4A
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_159A4
                cmp     di, 1
                jnz     short loc_1599A
                mov     ax, seg dseg19
                mov     es, ax
                mov     si, es:word_29A2C
                jmp     short loc_159A4
; ---------------------------------------------------------------------------

loc_1599A:                              ; CODE XREF: sub_158D5+B7↑j
                mov     ax, seg dseg19
                mov     es, ax
                mov     si, es:word_29A2E

loc_159A4:                              ; CODE XREF: sub_158D5+B2↑j
                                        ; sub_158D5+C3↑j
                mov     ax, si
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                pop     bp
                retf
sub_158D5       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_159AB       proc far                ; CODE XREF: sttrou+292↑P
                                        ; sttrou+3A6↑P ...

var_1E          = byte ptr -1Eh

                enter   1Eh, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg14
                mov     ds, ax
                assume ds:dseg14
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29888
                push    es:word_29886
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    ds
                push    offset asc_25C6A ; "\r"
                call    PRF             ; prf(string);
                add     sp, 4
                xor     si, si
                push    0
                push    1Eh
                push    ss
                lea     ax, [bp+var_1E]
                push    ax
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    UACOFF          ; struct usracc *uaptr=uacoff(unum);
                pop     cx
                push    dx
                push    ax
                push    ss
                lea     ax, [bp+var_1E]
                push    ax
                call    STRCPY          ; char* strcpy(char* destination, const char* source );
                add     sp, 8
                push    37h ; '7'
                push    0
                push    ss
                lea     ax, [bp+var_1E]
                push    ax
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jnz     short loc_15A24
                jmp     loc_15B4C
; ---------------------------------------------------------------------------

loc_15A24:                              ; CODE XREF: sub_159AB+74↑j
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah

loc_15A44:                              ; CODE XREF: sub_159AB+19E↓j
                inc     si
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+24h]
                imul    ax, 64h ; 'd'
                add     ax, 7D0h
                push    ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+2Ah]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+1Eh]
                imul    ax, 34h ; '4'
                add     ax, 0AF2h
                push    seg dseg19
                push    ax
                push    si
                push    ds
                push    offset aD18sLevel3dYea ; "%d. %-18s Level: %-3d Year: %-4d  (%-3d"...
                call    PRF             ; prf(string);
                add     sp, 12h
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+98h], 0FFFFh
                jle     short loc_15AD6
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+98h]
                push    ds
                push    offset aDeadDDaySLeft ; " DEAD: %d day(s) left."
                call    PRF             ; prf(string);
                add     sp, 6

loc_15AD6:                              ; CODE XREF: sub_159AB+10E↑j
                push    ds
                push    offset asc_25C6A ; "\r"
                call    PRF             ; prf(string);
                add     sp, 4
                push    6
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                call    ANPBTV          ; int anpbtv (void *recptr, int anpopt);
                add     sp, 6
                mov     di, ax
                cmp     di, 1
                jnz     short loc_15B44
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    ss
                lea     ax, [bp+var_1E]
                push    ax
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jnz     short loc_15B44
                xor     di, di

loc_15B44:                              ; CODE XREF: sub_159AB+155↑j
                                        ; sub_159AB+195↑j
                cmp     di, 1
                jnz     short loc_15B4C
                jmp     loc_15A44
; ---------------------------------------------------------------------------

loc_15B4C:                              ; CODE XREF: sub_159AB+76↑j
                                        ; sub_159AB+19C↑j
                push    ds
                push    offset aTypeBuryClassN ; "\rType BURY [class number] to reset a p"...
                call    PRF             ; prf(string);
                add     sp, 4
                push    423h
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                nop
                push    cs
                call    near ptr sub_15C7E
                add     sp, 4
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_159AB       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_15B72       proc far                ; CODE XREF: sub_10BE0+6E↑P
                                        ; sub_1B463+DA↓P ...

var_6           = word ptr -6
var_4           = word ptr -4
var_2           = word ptr -2
arg_0           = word ptr  6
arg_2           = word ptr  8

                enter   6, 0
                push    ds
                mov     ax, seg dseg14
                mov     ds, ax
                assume ds:dseg14
                mov     bx, [bp+arg_0]
                mov     cx, [bp+arg_2]
                mov     [bp+var_2], 0FFFFh
                mov     [bp+var_4], 0FFFFh
                cmp     bx, 1
                jle     short loc_15C0F
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AEBB, bx
                jle     short loc_15C0F
                mov     ax, cx
                cwd
                mov     [bp+var_2], dx
                mov     [bp+var_4], ax
                mov     ax, bx
                imul    ax, 32h ; '2'
                mov     [bp+var_6], ax
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29BDA
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+1Ah]
                imul    ax, 0Ah
                cwd
                add     [bp+var_4], ax
                adc     [bp+var_2], dx
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29BDA
                assume es:nothing
                add     bx, [bp+var_6]
                mov     ax, es:[bx+18h]
                imul    ax, 0Ah
                cwd
                add     [bp+var_4], ax
                adc     [bp+var_2], dx
                cmp     cx, 64h ; 'd'
                jle     short loc_15C0F
                mov     ax, cx
                cwd
                add     ax, 0FF9Ch
                adc     dx, 0FFFFh
                push    ax
                push    dx
                xor     dx, dx
                mov     ax, 64h ; 'd'
                pop     cx
                pop     bx
                call    F_LXMUL
                mov     bx, [bp+var_2]
                mov     cx, [bp+var_4]
                add     cx, ax
                adc     bx, dx
                mov     [bp+var_2], bx
                mov     [bp+var_4], cx

loc_15C0F:                              ; CODE XREF: sub_15B72+1D↑j
                                        ; sub_15B72+29↑j ...
                mov     dx, [bp+var_2]
                mov     ax, [bp+var_4]
                pop     ds
                assume ds:dseg21
                leave
                retf
sub_15B72       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_15C18       proc far                ; CODE XREF: sttrou+547↑P
                                        ; sub_2D88+274↑P ...

arg_0           = word ptr  6
arg_2           = word ptr  8
arg_4           = word ptr  0Ah
arg_6           = word ptr  0Ch
arg_8           = word ptr  0Eh
arg_A           = word ptr  10h
arg_C           = word ptr  12h
arg_E           = word ptr  14h
arg_10          = word ptr  16h

                push    bp
                mov     bp, sp
                push    ds
                mov     ax, seg dseg14
                mov     ds, ax
                assume ds:dseg14
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_29864
                push    es:word_29862
                call    SETMBK          ; FILE *setmbk(mbkptr);
                add     sp, 4
                push    ds
                push    offset a131m    ; "\x1B[1;31m"
                push    ds
                push    offset aS_14    ; "%s"
                call    PRF             ; prf(string);
                add     sp, 8
                push    [bp+arg_10]
                push    [bp+arg_E]
                push    [bp+arg_C]
                push    [bp+arg_A]
                push    [bp+arg_8]
                push    [bp+arg_6]
                push    [bp+arg_4]
                push    [bp+arg_2]
                push    [bp+arg_0]
                call    PRFMSG          ; prfmsg(msgnum,p1,p2, ..• ,pn);
                add     sp, 12h
                push    ds
                push    offset a137m    ; "\x1B[1;37m"
                push    ds
                push    offset aS_14    ; "%s"
                call    PRF             ; prf(string);
                add     sp, 8
                pop     ds
                assume ds:dseg21
                pop     bp
                retf
sub_15C18       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_15C7E       proc far                ; CODE XREF: sttrou+1A6↑P
                                        ; sttrou+31B↑P ...

arg_0           = word ptr  6
arg_2           = word ptr  8
arg_4           = word ptr  0Ah
arg_6           = word ptr  0Ch
arg_8           = word ptr  0Eh
arg_A           = word ptr  10h
arg_C           = word ptr  12h
arg_E           = word ptr  14h
arg_10          = word ptr  16h
arg_12          = word ptr  18h

                push    bp
                mov     bp, sp
                push    si
                push    ds
                mov     ax, seg dseg14
                mov     ds, ax
                assume ds:dseg14
                mov     si, [bp+arg_0]
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AED1, si
                jle     short loc_15CF1
                cmp     si, 0FFFFh
                jle     short loc_15CF1
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29864
                push    es:word_29862
                call    SETMBK          ; FILE *setmbk(mbkptr);
                add     sp, 4
                push    ds
                push    offset a133m    ; "\x1B[1;33m"
                push    ds
                push    offset a137m    ; "\x1B[1;37m"
                push    ds
                push    offset aSS_2    ; "%s***\r%s"
                call    PRF             ; prf(string);
                add     sp, 0Ch
                push    [bp+arg_12]
                push    [bp+arg_10]
                push    [bp+arg_E]
                push    [bp+arg_C]
                push    [bp+arg_A]
                push    [bp+arg_8]
                push    [bp+arg_6]
                push    [bp+arg_4]
                push    [bp+arg_2]
                call    PRFMSG          ; prfmsg(msgnum,p1,p2, ..• ,pn);
                add     sp, 12h
                push    si
                call    OUTPRF          ; outprf (unum);
                pop     cx

loc_15CF1:                              ; CODE XREF: sub_15C7E+17↑j
                                        ; sub_15C7E+1C↑j
                call    CLRPRF          ; clrprf()
                pop     ds
                assume ds:dseg21
                pop     si
                pop     bp
                retf
sub_15C7E       endp


; =============== S U B R O U T I N E =======================================


sub_15CFA       proc far                ; CODE XREF: sub_B378+19↑P
                                        ; sub_B7E3+19↑P ...
                push    ds
                mov     ax, seg dseg14
                mov     ds, ax
                assume ds:dseg14
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:word_2AED5
                mov     dx, seg dseg19
                mov     es, dx
                cmp     ax, es:word_2AED1
                jg      short loc_15D79
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AED5, 0
                jl      short loc_15D79
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AEC7, 0FFFFh
                jle     short loc_15D58
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29864
                push    es:word_29862
                call    SETMBK          ; FILE *setmbk(mbkptr);
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AEC7
                call    PRFMSG          ; prfmsg(msgnum,p1,p2, ..• ,pn);
                pop     cx
                jmp     short loc_15D64
; ---------------------------------------------------------------------------

loc_15D58:                              ; CODE XREF: sub_15CFA+33↑j
                push    ds
                push    offset aWhat    ; "WHAT?\r"
                call    PRF             ; prf(string);
                add     sp, 4

loc_15D64:                              ; CODE XREF: sub_15CFA+5C↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    OUTPRF          ; outprf (unum);
                pop     cx
                call    CLRPRF          ; clrprf()

loc_15D79:                              ; CODE XREF: sub_15CFA+19↑j
                                        ; sub_15CFA+26↑j
                pop     ds
                assume ds:dseg21
                retf
sub_15CFA       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_15D7B       proc far                ; CODE XREF: mcurou+211↑P
                                        ; sub_2D88+20B↑P ...

var_A           = byte ptr -0Ah
arg_0           = word ptr  6
arg_2           = word ptr  8

                enter   0Ah, 0
                push    ds
                mov     ax, seg dseg14
                mov     ds, ax
                assume ds:dseg14
                push    0Ah
                push    [bp+arg_2]
                push    [bp+arg_0]
                push    ss
                lea     ax, [bp+var_A]
                push    ax
                call    STZCPY          ; stzcpy(char *dest, char *source, int nbytes);
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29884
                push    es:word_29882
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    5
                push    0
                push    ss
                lea     ax, [bp+var_A]
                push    ax
                push    seg dseg19
                push    offset byte_29BDE
                call    OBTBTV          ; int obtbtv(char *recptr, char* key, int keynum, int obtopt);
                add     sp, 0Ch
                or      ax, ax
                jz      short loc_15DD1
                mov     ax, 1
                jmp     short loc_15DD3
; ---------------------------------------------------------------------------

loc_15DD1:                              ; CODE XREF: sub_15D7B+4F↑j
                xor     ax, ax

loc_15DD3:                              ; CODE XREF: sub_15D7B+54↑j
                pop     ds
                assume ds:dseg21
                leave
                retf
sub_15D7B       endp


; =============== S U B R O U T I N E =======================================


sub_15DD6       proc far                ; CODE XREF: mcurou+27C↑P
                                        ; sub_B378+37F↑P ...
                push    ds
                mov     ax, seg dseg14
                mov     ds, ax
                assume ds:dseg14
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29884
                push    es:word_29882
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    37h ; '7'
                push    0
                push    seg dseg19
                push    offset byte_29BDE
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jz      short loc_15E2B
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    0
                push    0
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                push    seg dseg19
                push    offset byte_29BDE
                call    UPDBTV          ; void updbtv(char *recptr);
                jmp     short loc_15E36
; ---------------------------------------------------------------------------

loc_15E2B:                              ; CODE XREF: sub_15DD6+31↑j
                push    seg dseg19
                push    offset byte_29BDE
                call    INSBTV          ; void insbtv(char *recptr);

loc_15E36:                              ; CODE XREF: sub_15DD6+53↑j
                add     sp, 4
                pop     ds
                assume ds:dseg21
                retf
sub_15DD6       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_15E3B       proc far                ; CODE XREF: sttrou+4B1↑P
                                        ; sub_1158D+229↑P ...

var_2           = word ptr -2

                enter   2, 0
                push    si
                push    ds
                mov     ax, seg dseg14
                mov     ds, ax
                assume ds:dseg14
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:word_2AED5
                mov     dx, seg dseg19
                mov     es, dx
                cmp     ax, es:word_2AED1
                jl      short loc_15E5E
                jmp     loc_15F59
; ---------------------------------------------------------------------------

loc_15E5E:                              ; CODE XREF: sub_15E3B+1E↑j
                xor     si, si

loc_15E60:                              ; CODE XREF: sub_15E3B+5A↓j
                push    ds
                push    offset asc_25D08 ; "........."
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:word_2AED5
                imul    ax, 64h ; 'd'
                mov     dx, seg dseg19
                mov     es, dx
                mov     dx, word ptr es:dword_29C74
                add     dx, ax
                mov     ax, si
                imul    ax, 0Ah
                add     dx, ax
                push    word ptr es:dword_29C74+2
                push    dx
                call    STRCPY          ; char* strcpy(char* destination, const char* source );
                add     sp, 8
                inc     si
                cmp     si, 9
                jl      short loc_15E60
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                push    cs
                call    near ptr sub_15677
                add     sp, 6
                push    dx
                push    ax
                push    cs
                call    near ptr sub_15D7B
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     es:word_29BF8, 1
                jnz     short loc_15EFB
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:word_2AED5
                imul    ax, 64h ; 'd'
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29C74
                assume es:nothing
                add     bx, ax
                mov     byte ptr es:[bx+2Ch], 6Dh ; 'm'

loc_15EFB:                              ; CODE XREF: sub_15E3B+A1↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     es:word_29BF6, 1
                jnz     short loc_15F25
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:word_2AED5
                imul    ax, 64h ; 'd'
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29C74
                assume es:nothing
                add     bx, ax
                mov     byte ptr es:[bx+2Ch], 74h ; 't'

loc_15F25:                              ; CODE XREF: sub_15E3B+CB↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_2AED5
                imul    ax, 64h ; 'd'
                mov     [bp+var_2], ax
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29C74
                assume es:nothing
                add     bx, ax
                cmp     byte ptr es:[bx+2Ch], 2Eh ; '.'
                jnz     short loc_15F59
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29C74
                assume es:nothing
                add     bx, [bp+var_2]
                mov     byte ptr es:[bx+2Ch], 23h ; '#'

loc_15F59:                              ; CODE XREF: sub_15E3B+20↑j
                                        ; sub_15E3B+10A↑j
                pop     ds
                assume ds:dseg21
                pop     si
                leave
                retf
sub_15E3B       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_15F5D       proc far                ; CODE XREF: sub_1AEB0+22↓P

arg_0           = word ptr  6
arg_2           = word ptr  8

                push    bp
                mov     bp, sp
                push    si
                push    di
                push    ds
                mov     ax, seg dseg14
                mov     ds, ax
                assume ds:dseg14
                mov     di, 0FFFFh
                xor     si, si

loc_15F6D:                              ; CODE XREF: sub_15F5D+60↓j
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+64h], 0FFFFh
                jle     short loc_15FB9
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+64h]
                imul    ax, 36h ; '6'
                add     ax, 0FDEh
                push    seg dseg19
                push    ax
                push    [bp+arg_2]
                push    [bp+arg_0]
                call    SAMETO          ; int match=sameto(char *shorts, char *longs);
                add     sp, 8
                or      ax, ax
                jz      short loc_15FB9
                mov     di, si
                mov     si, 15h

loc_15FB9:                              ; CODE XREF: sub_15F5D+25↑j
                                        ; sub_15F5D+55↑j
                inc     si
                cmp     si, 14h
                jl      short loc_15F6D
                mov     ax, di
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                pop     bp
                retf
sub_15F5D       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_15FC6       proc far                ; CODE XREF: sub_955B+88↑P
                                        ; sub_C376+41↑P ...

var_8           = word ptr -8
var_6           = word ptr -6
var_4           = dword ptr -4
arg_0           = word ptr  6
arg_2           = word ptr  8

                enter   8, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg14
                mov     ds, ax
                assume ds:dseg14
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     di, es:[bx+24h]
                push    di
                nop
                push    cs
                call    near ptr sub_1A075
                pop     cx
                mov     bx, ax
                mov     es, dx
                mov     ax, es:[bx+4B0h]
                mov     [bp+var_6], ax
                xor     si, si
                cmp     si, [bp+var_6]
                jl      short loc_15FFD
                jmp     loc_16094
; ---------------------------------------------------------------------------

loc_15FFD:                              ; CODE XREF: sub_15FC6+32↑j
                                        ; sub_15FC6+CB↓j
                push    di
                nop
                push    cs
                call    near ptr sub_1A075
                pop     cx
                mov     bx, si
                shl     bx, 1
                add     ax, bx
                mov     bx, ax
                mov     es, dx
                mov     ax, es:[bx+320h]
                mov     [bp+var_8], ax
                push    [bp+var_8]
                nop
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                mov     word ptr [bp+var_4+2], dx
                mov     word ptr [bp+var_4], ax
                push    word ptr [bp+var_4+2]
                push    word ptr [bp+var_4]
                push    [bp+arg_2]
                push    [bp+arg_0]
                call    SAMETO          ; int match=sameto(char *shorts, char *longs);
                add     sp, 8
                or      ax, ax
                jz      short loc_1608B
                les     bx, [bp+var_4]
                cmp     word ptr es:[bx+0D6h], 2
                jnz     short loc_1608B
                les     bx, [bp+var_4]
                mov     ax, es:[bx+20h]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     ax, es:[bx+20h]
                jnz     short loc_1608B
                les     bx, [bp+var_4]
                mov     ax, es:[bx+22h]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     ax, es:[bx+22h]
                jnz     short loc_1608B
                les     bx, [bp+var_4]
                mov     ax, es:[bx+0E0h]
                and     ax, 4
                or      ax, 0
                jnz     short loc_1608B
                mov     ax, [bp+var_8]
                jmp     short loc_16097
; ---------------------------------------------------------------------------

loc_1608B:                              ; CODE XREF: sub_15FC6+75↑j
                                        ; sub_15FC6+80↑j ...
                inc     si
                cmp     si, [bp+var_6]
                jge     short loc_16094
                jmp     loc_15FFD
; ---------------------------------------------------------------------------

loc_16094:                              ; CODE XREF: sub_15FC6+34↑j
                                        ; sub_15FC6+C9↑j
                mov     ax, 0FFFFh

loc_16097:                              ; CODE XREF: sub_15FC6+C3↑j
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_15FC6       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1609C       proc far                ; CODE XREF: sub_955B+326↑P
                                        ; sub_955B+33E↑P ...

var_104         = byte ptr -104h
var_4           = word ptr -4
var_2           = word ptr -2
arg_0           = word ptr  6
arg_2           = word ptr  8
arg_4           = word ptr  0Ah

                enter   104h, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg14
                mov     ds, ax
                assume ds:dseg14
                mov     dx, [bp+arg_4]
                mov     [bp+var_2], 0
                mov     di, 0FFFFh
                mov     [bp+var_4], 0
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     es:word_2AED3, dx
                jle     short loc_160DC
                mov     ax, dx
                imul    ax, 0C8h
                add     ax, 1C23h
                push    seg dseg19
                push    ax
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                mov     [bp+var_4], ax

loc_160DC:                              ; CODE XREF: sub_1609C+26↑j
                xor     si, si

loc_160DE:                              ; CODE XREF: sub_1609C+107↓j
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+3Ch], 0FFFFh
                jg      short loc_160F8
                jmp     loc_1619D
; ---------------------------------------------------------------------------

loc_160F8:                              ; CODE XREF: sub_1609C+57↑j
                push    [bp+arg_2]
                push    [bp+arg_0]
                call    STRLEN          ; size_t strlen(const char* str);
                add     sp, 4
                push    ax
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                push    ss
                lea     ax, [bp+var_104]
                push    ax
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                push    [bp+arg_2]
                push    [bp+arg_0]
                call    STRLEN          ; size_t strlen(const char* str);
                add     sp, 4
                lea     dx, [bp+var_104]
                add     ax, dx
                mov     bx, ax
                mov     byte ptr ss:[bx], 0
                push    [bp+arg_2]
                push    [bp+arg_0]
                push    ss
                lea     ax, [bp+var_104]
                push    ax
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_16182
                mov     ax, [bp+var_2]
                cmp     ax, [bp+var_4]
                jnz     short loc_16182
                mov     di, si
                mov     si, 0Bh
                jmp     short loc_1619D
; ---------------------------------------------------------------------------

loc_16182:                              ; CODE XREF: sub_1609C+D5↑j
                                        ; sub_1609C+DD↑j
                push    [bp+arg_2]
                push    [bp+arg_0]
                push    ss
                lea     ax, [bp+var_104]
                push    ax
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_1619D
                inc     [bp+var_2]

loc_1619D:                              ; CODE XREF: sub_1609C+59↑j
                                        ; sub_1609C+E4↑j ...
                inc     si
                cmp     si, 0Ah
                jge     short loc_161A6
                jmp     loc_160DE
; ---------------------------------------------------------------------------

loc_161A6:                              ; CODE XREF: sub_1609C+105↑j
                cmp     di, 0FFFFh
                jz      short loc_161AE
                jmp     loc_16253
; ---------------------------------------------------------------------------

loc_161AE:                              ; CODE XREF: sub_1609C+10D↑j
                xor     si, si

loc_161B0:                              ; CODE XREF: sub_1609C+1B4↓j
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+3Ch], 0FFFFh
                jg      short loc_161CA
                jmp     loc_1624A
; ---------------------------------------------------------------------------

loc_161CA:                              ; CODE XREF: sub_1609C+129↑j
                push    [bp+arg_2]
                push    [bp+arg_0]
                call    STRLEN          ; size_t strlen(const char* str);
                add     sp, 4
                push    ax
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                push    ss
                lea     ax, [bp+var_104]
                push    ax
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                push    [bp+arg_2]
                push    [bp+arg_0]
                call    STRLEN          ; size_t strlen(const char* str);
                add     sp, 4
                lea     dx, [bp+var_104]
                add     ax, dx
                mov     bx, ax
                mov     byte ptr ss:[bx], 0
                push    [bp+arg_2]
                push    [bp+arg_0]
                push    ss
                lea     ax, [bp+var_104]
                push    ax
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_1624A
                mov     di, si
                mov     si, 0Bh

loc_1624A:                              ; CODE XREF: sub_1609C+12B↑j
                                        ; sub_1609C+1A7↑j
                inc     si
                cmp     si, 0Ah
                jge     short loc_16253
                jmp     loc_161B0
; ---------------------------------------------------------------------------

loc_16253:                              ; CODE XREF: sub_1609C+10F↑j
                                        ; sub_1609C+1B2↑j
                mov     ax, di
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_1609C       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1625A       proc far                ; CODE XREF: sub_B7E3+B0↑P

var_104         = byte ptr -104h
var_4           = word ptr -4
var_2           = word ptr -2
arg_0           = word ptr  6
arg_2           = word ptr  8
arg_4           = word ptr  0Ah

                enter   104h, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg14
                mov     ds, ax
                assume ds:dseg14
                mov     di, [bp+arg_4]
                mov     [bp+var_4], 0
                mov     [bp+var_2], 0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AED3, di
                jle     short loc_16298
                mov     ax, di
                imul    ax, 0C8h
                add     ax, 1C23h
                push    seg dseg19
                push    ax
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                mov     di, ax
                jmp     short loc_1629A
; ---------------------------------------------------------------------------

loc_16298:                              ; CODE XREF: sub_1625A+23↑j
                xor     di, di

loc_1629A:                              ; CODE XREF: sub_1625A+3C↑j
                xor     si, si

loc_1629C:                              ; CODE XREF: sub_1625A+F9↓j
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                cmp     word ptr es:[bx+190Ch], 0FFFFh
                jg      short loc_162B0
                jmp     loc_1634D
; ---------------------------------------------------------------------------

loc_162B0:                              ; CODE XREF: sub_1625A+51↑j
                push    [bp+arg_2]
                push    [bp+arg_0]
                call    STRLEN          ; size_t strlen(const char* str);
                add     sp, 4
                push    ax
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:[bx+190Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                push    ss
                lea     ax, [bp+var_104]
                push    ax
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                push    [bp+arg_2]
                push    [bp+arg_0]
                call    STRLEN          ; size_t strlen(const char* str);
                add     sp, 4
                lea     dx, [bp+var_104]
                add     ax, dx
                mov     bx, ax
                mov     byte ptr ss:[bx], 0
                push    [bp+arg_2]
                push    [bp+arg_0]
                push    ss
                lea     ax, [bp+var_104]
                push    ax
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_16332
                cmp     [bp+var_4], di
                jnz     short loc_16332
                mov     [bp+var_2], si
                mov     si, 6
                jmp     short loc_1634D
; ---------------------------------------------------------------------------

loc_16332:                              ; CODE XREF: sub_1625A+C9↑j
                                        ; sub_1625A+CE↑j
                push    [bp+arg_2]
                push    [bp+arg_0]
                push    ss
                lea     ax, [bp+var_104]
                push    ax
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_1634D
                inc     [bp+var_4]

loc_1634D:                              ; CODE XREF: sub_1625A+53↑j
                                        ; sub_1625A+D6↑j ...
                inc     si
                cmp     si, 6
                jge     short loc_16356
                jmp     loc_1629C
; ---------------------------------------------------------------------------

loc_16356:                              ; CODE XREF: sub_1625A+F7↑j
                cmp     [bp+var_2], 0FFFFh
                jz      short loc_1635F
                jmp     loc_163F6
; ---------------------------------------------------------------------------

loc_1635F:                              ; CODE XREF: sub_1625A+100↑j
                xor     si, si

loc_16361:                              ; CODE XREF: sub_1625A+199↓j
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                cmp     word ptr es:[bx+190Ch], 0FFFFh
                jle     short loc_163ED
                push    [bp+arg_2]
                push    [bp+arg_0]
                call    STRLEN          ; size_t strlen(const char* str);
                add     sp, 4
                push    ax
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:[bx+190Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                push    ss
                lea     ax, [bp+var_104]
                push    ax
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                push    [bp+arg_2]
                push    [bp+arg_0]
                call    STRLEN          ; size_t strlen(const char* str);
                add     sp, 4
                lea     dx, [bp+var_104]
                add     ax, dx
                mov     bx, ax
                mov     byte ptr ss:[bx], 0
                push    [bp+arg_2]
                push    [bp+arg_0]
                push    ss
                lea     ax, [bp+var_104]
                push    ax
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_163ED
                mov     [bp+var_2], si
                mov     si, 0Bh

loc_163ED:                              ; CODE XREF: sub_1625A+116↑j
                                        ; sub_1625A+18B↑j
                inc     si
                cmp     si, 6
                jge     short loc_163F6
                jmp     loc_16361
; ---------------------------------------------------------------------------

loc_163F6:                              ; CODE XREF: sub_1625A+102↑j
                                        ; sub_1625A+197↑j
                mov     ax, [bp+var_2]
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_1625A       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_163FE       proc far                ; CODE XREF: sub_C6BB+300↑P
                                        ; sub_CBFE+37E↑P

var_6           = dword ptr -6
var_2           = word ptr -2
arg_0           = word ptr  6
arg_2           = word ptr  8
arg_4           = word ptr  0Ah

                enter   6, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg14
                mov     ds, ax
                assume ds:dseg14
                mov     di, [bp+arg_4]
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:word_2AED5
                mov     [bp+var_2], ax
                push    [bp+arg_2]
                nop
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                mov     word ptr [bp+var_6+2], dx
                mov     word ptr [bp+var_6], ax
                les     bx, [bp+var_6]
                assume es:nothing
                mov     ax, seg dseg19
                push    es
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_29A36
                pop     es
                assume es:nothing
                mov     es:[bx+0D8h], ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, seg dseg19
                push    es
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_29A36
                pop     es
                assume es:nothing
                mov     es:[bx+0D8h], ax
                les     bx, [bp+var_6]
                cmp     word ptr es:[bx+26h], 0
                jg      short loc_16462
                jmp     loc_16AC7
; ---------------------------------------------------------------------------

loc_16462:                              ; CODE XREF: sub_163FE+5F↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+32h]
                mov     bx, 0Ah
                cwd
                idiv    bx
                mov     si, ax
                cmp     di, 0FFFFh
                jg      short loc_16480
                jmp     loc_167B1
; ---------------------------------------------------------------------------

loc_16480:                              ; CODE XREF: sub_163FE+7D↑j
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29BDA
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+1Ch], 2
                jnz     short loc_164AD
                jmp     loc_16546
; ---------------------------------------------------------------------------

loc_164AD:                              ; CODE XREF: sub_163FE+AA↑j
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29BDA
                assume es:nothing
                add     bx, ax
                mov     ax, si
                add     ax, es:[bx+18h]
                mov     si, ax
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29BDA
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+1Ch], 0
                jnz     short loc_16549
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+3Ch], 0
                jnz     short loc_16549
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29BDA
                assume es:nothing
                add     bx, ax
                mov     ax, si
                sub     ax, es:[bx+18h]
                mov     si, ax
                jmp     short loc_16549
; ---------------------------------------------------------------------------

loc_16546:                              ; CODE XREF: sub_163FE+AC↑j
                add     si, 4

loc_16549:                              ; CODE XREF: sub_163FE+102↑j
                                        ; sub_163FE+119↑j ...
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29BDA
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+1Ch], 0
                jz      short loc_16576
                jmp     loc_167B1
; ---------------------------------------------------------------------------

loc_16576:                              ; CODE XREF: sub_163FE+173↑j
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+50h], 64h ; 'd'
                jge     short loc_165AC
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, 64h ; 'd'
                sub     ax, es:[bx+50h]
                mov     bx, 0Ah
                cwd
                idiv    bx
                sub     si, ax

loc_165AC:                              ; CODE XREF: sub_163FE+18D↑j
                or      si, si
                jge     short loc_165B2
                xor     si, si

loc_165B2:                              ; CODE XREF: sub_163FE+1B0↑j
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+50h], 65h ; 'e'
                jge     short loc_165FD
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+50h], 0
                jle     short loc_165FD
                push    [bp+arg_2]
                nop
                push    cs
                call    near ptr sub_18275
                pop     cx
                mov     dx, di
                shl     dx, 1
                mov     bx, seg dseg19
                mov     es, bx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, dx
                sub     es:[bx+50h], ax

loc_165FD:                              ; CODE XREF: sub_163FE+1C9↑j
                                        ; sub_163FE+1E0↑j
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+50h], 0
                jl      short loc_16617
                jmp     loc_1672B
; ---------------------------------------------------------------------------

loc_16617:                              ; CODE XREF: sub_163FE+214↑j
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+3Ch], 0
                jnz     short loc_16631
                jmp     loc_1672B
; ---------------------------------------------------------------------------

loc_16631:                              ; CODE XREF: sub_163FE+22E↑j
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                push    424h
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                push    cs
                call    near ptr sub_15C7E
                add     sp, 8
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    425h
                push    cs
                call    near ptr sub_15C18
                add     sp, 0Ah
                push    0
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                push    cs
                call    near ptr sub_15677
                add     sp, 6
                push    dx
                push    ax
                nop
                push    cs
                call    near ptr sub_175B0
                add     sp, 0Ah
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     word ptr es:[bx+3Ch], 0
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     word ptr es:[bx+50h], 0

loc_1672B:                              ; CODE XREF: sub_163FE+216↑j
                                        ; sub_163FE+230↑j
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+50h], 64h ; 'd'
                jle     short loc_16759
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+50h], 6Fh ; 'o'
                jl      short loc_16798

loc_16759:                              ; CODE XREF: sub_163FE+342↑j
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+50h], 6Eh ; 'n'
                jle     short loc_167B1
                les     bx, [bp+var_6]
                mov     ax, es:[bx+9Ah]
                add     ax, 0Ah
                les     bx, [bp+var_6]
                mov     es:[bx+9Ah], ax
                les     bx, [bp+var_6]
                cmp     word ptr es:[bx+9Ah], 32h ; '2'
                jbe     short loc_16798
                les     bx, [bp+var_6]
                mov     word ptr es:[bx+9Ah], 32h ; '2'

loc_16798:                              ; CODE XREF: sub_163FE+359↑j
                                        ; sub_163FE+38E↑j
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+50h]
                add     ax, 0FF9Ch
                add     si, ax

loc_167B1:                              ; CODE XREF: sub_163FE+7F↑j
                                        ; sub_163FE+175↑j ...
                push    [bp+arg_2]
                nop
                push    cs
                call    near ptr sub_18275
                pop     cx
                mov     bx, 3
                cwd
                idiv    bx
                sub     si, ax
                les     bx, [bp+var_6]
                cmp     word ptr es:[bx+8Eh], 64h ; 'd'
                jle     short loc_167DF
                les     bx, [bp+var_6]
                mov     ax, es:[bx+8Eh]
                add     ax, 0FF9Ch
                cwd
                sub     ax, dx
                sar     ax, 1
                sub     si, ax

loc_167DF:                              ; CODE XREF: sub_163FE+3CD↑j
                cmp     di, 0FFFFh
                jle     short loc_16843
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29BDA
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+1Ch], 0
                jnz     short loc_1684C
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+50h], 64h ; 'd'
                jle     short loc_1684C
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+50h]
                add     ax, 0FF9Ch
                imul    ax, 3
                add     si, ax
                jmp     short loc_1684C
; ---------------------------------------------------------------------------

loc_16843:                              ; CODE XREF: sub_163FE+3E4↑j
                mov     ax, si
                cwd
                sub     ax, dx
                mov     si, ax
                sar     si, 1

loc_1684C:                              ; CODE XREF: sub_163FE+40E↑j
                                        ; sub_163FE+425↑j ...
                or      si, si
                jge     short loc_16852
                xor     si, si

loc_16852:                              ; CODE XREF: sub_163FE+450↑j
                or      si, si
                jle     short loc_16872
                push    si
                push    ds
                push    offset aD       ; "%d"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 6
                push    dx
                push    ax
                push    34Eh
                push    [bp+arg_2]
                push    cs
                call    near ptr sub_15C7E
                add     sp, 8

loc_16872:                              ; CODE XREF: sub_163FE+456↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_2AED1
                dec     ax
                cmp     ax, [bp+arg_2]
                jge     short loc_168A6
                les     bx, [bp+var_6]
                assume es:nothing
                cmp     word ptr es:[bx+26h], 0Ah
                jle     short loc_168A6
                les     bx, [bp+var_6]
                mov     ax, es:[bx+26h]
                sub     ax, si
                cmp     ax, 0Bh
                jge     short loc_168A6
                les     bx, [bp+var_6]
                mov     word ptr es:[bx+26h], 9
                jmp     short loc_168AD
; ---------------------------------------------------------------------------
                jmp     short $+2
; ---------------------------------------------------------------------------

loc_168A6:                              ; CODE XREF: sub_163FE+481↑j
                                        ; sub_163FE+48B↑j ...
                les     bx, [bp+var_6]
                sub     es:[bx+26h], si

loc_168AD:                              ; CODE XREF: sub_163FE+4A4↑j
                les     bx, [bp+var_6]
                cmp     word ptr es:[bx+8Ch], 1
                jg      short loc_168BB
                jmp     loc_16952
; ---------------------------------------------------------------------------

loc_168BB:                              ; CODE XREF: sub_163FE+4B8↑j
                les     bx, [bp+var_6]
                cmp     word ptr es:[bx+8Eh], 65h ; 'e'
                jge     short loc_168E9
                les     bx, [bp+var_6]
                cmp     word ptr es:[bx+8Eh], 0
                jle     short loc_168E9
                cmp     si, 1
                jle     short loc_168E0
                les     bx, [bp+var_6]
                sub     es:[bx+8Eh], si
                jmp     short loc_168E9
; ---------------------------------------------------------------------------

loc_168E0:                              ; CODE XREF: sub_163FE+4D6↑j
                les     bx, [bp+var_6]
                sub     word ptr es:[bx+8Eh], 2

loc_168E9:                              ; CODE XREF: sub_163FE+4C6↑j
                                        ; sub_163FE+4D1↑j ...
                les     bx, [bp+var_6]
                cmp     word ptr es:[bx+8Eh], 0
                jge     short loc_16952
                les     bx, [bp+var_6]
                mov     word ptr es:[bx+8Eh], 0
                les     bx, [bp+var_6]
                mov     word ptr es:[bx+8Ch], 1
                push    426h
                push    [bp+arg_2]
                push    cs
                call    near ptr sub_15C7E
                add     sp, 4
                push    word ptr [bp+var_6+2]
                push    word ptr [bp+var_6]
                push    427h
                push    cs
                call    near ptr sub_15C18
                add     sp, 6
                push    0
                push    [bp+arg_2]
                push    0FFFFh
                les     bx, [bp+var_6]
                push    word ptr es:[bx+24h]
                les     bx, [bp+var_6]
                push    word ptr es:[bx+22h]
                les     bx, [bp+var_6]
                push    word ptr es:[bx+20h]
                push    cs
                call    near ptr sub_15677
                add     sp, 6
                push    dx
                push    ax
                nop
                push    cs
                call    near ptr sub_175B0
                add     sp, 0Ah

loc_16952:                              ; CODE XREF: sub_163FE+4BA↑j
                                        ; sub_163FE+4F4↑j
                les     bx, [bp+var_6]
                cmp     word ptr es:[bx+26h], 0
                jg      short loc_1696D
                push    [bp+arg_0]
                push    [bp+arg_2]
                nop
                push    cs
                call    near ptr sub_16D39
                add     sp, 4
                jmp     loc_16AC7
; ---------------------------------------------------------------------------

loc_1696D:                              ; CODE XREF: sub_163FE+55C↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_2AED1
                dec     ax
                cmp     ax, [bp+arg_2]
                jl      short loc_1697F
                jmp     loc_16AC7
; ---------------------------------------------------------------------------

loc_1697F:                              ; CODE XREF: sub_163FE+57C↑j
                mov     ax, seg NTERMS
                mov     es, ax
                assume es:nothing
                mov     ax, word ptr es:NTERMS ; int nterms;
                cmp     ax, [bp+arg_0]
                jg      short loc_16990
                jmp     loc_16AC7
; ---------------------------------------------------------------------------

loc_16990:                              ; CODE XREF: sub_163FE+58D↑j
                les     bx, [bp+var_6]
                assume es:nothing
                mov     ax, es:[bx+0DCh]
                cmp     ax, [bp+arg_0]
                jnz     short loc_169A0
                jmp     loc_16AC7
; ---------------------------------------------------------------------------

loc_169A0:                              ; CODE XREF: sub_163FE+59D↑j
                les     bx, [bp+var_6]
                cmp     word ptr es:[bx+0DCh], 0FFFFh
                jnz     short loc_169AE
                jmp     loc_16A3A
; ---------------------------------------------------------------------------

loc_169AE:                              ; CODE XREF: sub_163FE+5AB↑j
                push    0
                push    8000h
                call    RAND            ; int rand (void);
                cwd
                push    ax
                push    dx
                xor     dx, dx
                mov     ax, 3
                pop     cx
                pop     bx
                call    F_LXMUL
                push    dx
                push    ax
                call    F_LDIV
                or      ax, ax
                jz      short loc_169DA
                cmp     ax, 1
                jz      short loc_16A3A
                jmp     loc_16AC7
; ---------------------------------------------------------------------------

loc_169DA:                              ; CODE XREF: sub_163FE+5D2↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     si, es:word_2AED5
                mov     ax, seg dseg19
                mov     dx, [bp+arg_2]
                mov     es, ax
                mov     es:word_2AED5, dx
                push    [bp+arg_2]
                nop
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                mov     bx, seg dseg19
                mov     es, bx
                mov     word ptr es:dword_29DD4+2, dx
                mov     word ptr es:dword_29DD4, ax
                push    si
                call    sub_1F53F
                pop     cx
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_2AED5, si
                push    si
                nop
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                mov     bx, seg dseg19
                mov     es, bx
                mov     word ptr es:dword_29DD4+2, dx
                mov     word ptr es:dword_29DD4, ax
                push    [bp+arg_2]
                nop
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                jmp     loc_16AC7
; ---------------------------------------------------------------------------

loc_16A3A:                              ; CODE XREF: sub_163FE+5AD↑j
                                        ; sub_163FE+5D7↑j
                mov     ax, seg dseg19
                mov     es, ax
                mov     si, es:word_2AED5
                mov     ax, seg dseg19
                mov     dx, [bp+arg_2]
                mov     es, ax
                mov     es:word_2AED5, dx
                push    0Ah
                push    ds
                push    offset aCombat_1 ; "combat"
                push    seg dseg19
                push    offset byte_29F13
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                push    1Eh
                push    [bp+arg_0]
                nop
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                push    dx
                push    ax
                push    seg dseg19
                push    offset byte_29FDB
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_2AED3, 2
                push    [bp+arg_2]
                nop
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                mov     bx, seg dseg19
                mov     es, bx
                mov     word ptr es:dword_29DD4+2, dx
                mov     word ptr es:dword_29DD4, ax
                call    sub_C376
                push    si
                nop
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                mov     bx, seg dseg19
                mov     es, bx
                mov     word ptr es:dword_29DD4+2, dx
                mov     word ptr es:dword_29DD4, ax
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_2AED5, si

loc_16AC7:                              ; CODE XREF: sub_163FE+61↑j
                                        ; sub_163FE+56C↑j ...
                mov     ax, seg dseg19
                mov     dx, [bp+var_2]
                mov     es, ax
                mov     es:word_2AED5, dx
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_163FE       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_16AD9       proc far                ; CODE XREF: sub_1C9D9+218↓P
                                        ; sub_1CE52+32F↓P ...

var_4           = dword ptr -4
arg_0           = word ptr  6
arg_2           = word ptr  8
arg_4           = word ptr  0Ah
arg_6           = word ptr  0Ch

                enter   4, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg14
                mov     ds, ax
                assume ds:dseg14
                mov     di, [bp+arg_2]
                push    di
                nop
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                mov     word ptr [bp+var_4+2], dx
                mov     word ptr [bp+var_4], ax
                les     bx, [bp+var_4]
                assume es:nothing
                mov     ax, seg dseg19
                push    es
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_29A36
                pop     es
                assume es:nothing
                mov     es:[bx+0D8h], ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, seg dseg19
                push    es
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_29A36
                pop     es
                assume es:nothing
                mov     es:[bx+0D8h], ax
                mov     si, [bp+arg_4]
                add     si, [bp+arg_6]
                push    di
                nop
                push    cs
                call    near ptr sub_18275
                pop     cx
                mov     bx, 4
                cwd
                idiv    bx
                sub     si, ax
                cmp     si, 6
                jge     short loc_16B3F
                mov     si, 6

loc_16B3F:                              ; CODE XREF: sub_16AD9+61↑j
                push    si
                push    ds
                push    offset aD       ; "%d"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 6
                push    dx
                push    ax
                push    34Eh
                push    di
                push    cs
                call    near ptr sub_15C7E
                add     sp, 8
                les     bx, [bp+var_4]
                mov     ax, es:[bx+26h]
                sub     ax, si
                les     bx, [bp+var_4]
                mov     es:[bx+26h], ax
                les     bx, [bp+var_4]
                cmp     word ptr es:[bx+26h], 0
                jg      short loc_16B82
                push    [bp+arg_0]
                push    di
                nop
                push    cs
                call    near ptr sub_16D39
                add     sp, 4
                jmp     loc_16D34
; ---------------------------------------------------------------------------

loc_16B82:                              ; CODE XREF: sub_16AD9+98↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_2AED1
                dec     ax
                cmp     ax, di
                jl      short loc_16B93
                jmp     loc_16D34
; ---------------------------------------------------------------------------

loc_16B93:                              ; CODE XREF: sub_16AD9+B5↑j
                les     bx, [bp+var_4]
                assume es:nothing
                mov     ax, es:[bx+0DCh]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                cmp     ax, es:word_2AED5
                jnz     short loc_16BAA
                jmp     loc_16CC4
; ---------------------------------------------------------------------------

loc_16BAA:                              ; CODE XREF: sub_16AD9+CC↑j
                mov     ax, seg dseg19
                mov     es, ax
                mov     si, es:word_2AED5
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_2AED5, di
                push    di
                nop
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                mov     bx, seg dseg19
                mov     es, bx
                mov     word ptr es:dword_29DD4+2, dx
                mov     word ptr es:dword_29DD4, ax
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     es:[bx+0DCh], si
                push    si
                nop
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                push    dx
                push    ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+1Eh]
                imul    ax, 82h
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BD6
                add     dx, ax
                add     dx, 2Ch ; ','
                push    word ptr es:dword_29BD6+2
                push    dx
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+1Eh]
                imul    ax, 82h
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BD6
                add     dx, ax
                add     dx, 18h
                push    word ptr es:dword_29BD6+2
                push    dx
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    ds
                push    offset aSSsSS   ; "%s %ss %s, %s!\r"
                call    PRF             ; prf(string);
                add     sp, 14h
                push    4
                push    0FFFFh
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                push    cs
                call    near ptr sub_15677
                add     sp, 6
                push    dx
                push    ax
                nop
                push    cs
                call    near ptr sub_175B0
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_1FF54
                pop     cx
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_2AED5, si
                push    si
                nop
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                mov     bx, seg dseg19
                mov     es, bx
                mov     word ptr es:dword_29DD4+2, dx
                mov     word ptr es:dword_29DD4, ax

loc_16CC4:                              ; CODE XREF: sub_16AD9+CE↑j
                les     bx, [bp+var_4]
                assume es:nothing
                cmp     word ptr es:[bx+2Ah], 0Ah
                jbe     short loc_16D34
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     es:word_29BFA, 0
                jle     short loc_16D34
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29BFA, 0
                push    cs
                call    near ptr sub_15DD6
                push    447h
                push    cs
                call    near ptr sub_15C18
                pop     cx
                push    0
                push    0FFFFh
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                push    cs
                call    near ptr sub_15677
                add     sp, 6
                push    dx
                push    ax
                nop
                push    cs
                call    near ptr sub_175B0
                add     sp, 0Ah

loc_16D34:                              ; CODE XREF: sub_16AD9+A6↑j
                                        ; sub_16AD9+B7↑j ...
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_16AD9       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_16D39       proc far                ; CODE XREF: sub_163FE+566↑p
                                        ; sub_16AD9+A0↑p

var_112         = byte ptr -112h
var_12          = word ptr -12h
var_10          = word ptr -10h
var_E           = word ptr -0Eh
var_C           = dword ptr -0Ch
var_8           = word ptr -8
var_6           = word ptr -6
var_4           = word ptr -4
var_2           = word ptr -2
arg_0           = word ptr  6
arg_2           = word ptr  8

                enter   112h, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg14
                mov     ds, ax
                assume ds:dseg14
                mov     di, [bp+arg_0]
                push    0
                push    0FFh
                push    ss
                lea     ax, [bp+var_112]
                push    ax
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                push    di
                nop
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                mov     word ptr [bp+var_C+2], dx
                mov     word ptr [bp+var_C], ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_2AED1
                cmp     ax, [bp+arg_2]
                jle     short loc_16D9C
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+1Eh]
                imul    ax, 34h ; '4'
                add     ax, 0AF2h
                push    seg dseg19
                push    ax
                push    ss
                lea     ax, [bp+var_112]
                push    ax
                call    STRCAT          ; char *strcat(char *destination, const char *source );
                add     sp, 8

loc_16D9C:                              ; CODE XREF: sub_16D39+3B↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    ds
                push    offset aSHasSlain ; " %s has slain "
                push    ss
                lea     ax, [bp+var_112]
                push    ax
                call    SPRINTF         ; int sprintf(char *str, const char *format, ... );
                add     sp, 0Ch
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AED1, di
                jle     short loc_16DF6
                les     bx, [bp+var_C]
                assume es:nothing
                mov     ax, es:[bx+1Eh]
                imul    ax, 34h ; '4'
                add     ax, 0AF2h
                push    seg dseg19
                push    ax
                push    ds
                push    offset aS_5     ; "%s "
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                push    ss
                lea     ax, [bp+var_112]
                push    ax
                call    STRCAT          ; char *strcat(char *destination, const char *source );
                add     sp, 8

loc_16DF6:                              ; CODE XREF: sub_16D39+8E↑j
                push    word ptr [bp+var_C+2]
                push    word ptr [bp+var_C]
                push    ds
                push    offset aS_6     ; "%s!"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                push    ss
                lea     ax, [bp+var_112]
                push    ax
                call    STRCAT          ; char *strcat(char *destination, const char *source );
                add     sp, 8
                push    ss
                lea     ax, [bp+var_112]
                push    ax
                nop
                push    cs
                call    near ptr sub_19D25
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    428h
                push    di
                push    cs
                call    near ptr sub_15C7E
                add     sp, 8
                push    339h
                push    di
                push    cs
                call    near ptr sub_15C7E
                add     sp, 4
                push    [bp+arg_2]
                nop
                push    cs
                call    near ptr sub_1A870
                pop     cx
                cmp     di, [bp+arg_2]
                jnz     short loc_16E5C
                jmp     loc_17276
; ---------------------------------------------------------------------------

loc_16E5C:                              ; CODE XREF: sub_16D39+11E↑j
                mov     [bp+var_2], 0
                mov     [bp+var_4], 0
                les     bx, [bp+var_C]
                assume es:nothing
                cmp     word ptr es:[bx+96h], 0
                jl      short loc_16E97
                jg      short loc_16E7B
                cmp     word ptr es:[bx+94h], 0
                jbe     short loc_16E97

loc_16E7B:                              ; CODE XREF: sub_16D39+138↑j
                push    0
                push    2
                les     bx, [bp+var_C]
                push    word ptr es:[bx+96h]
                push    word ptr es:[bx+94h]
                call    F_LDIV
                mov     [bp+var_2], dx
                mov     [bp+var_4], ax

loc_16E97:                              ; CODE XREF: sub_16D39+136↑j
                                        ; sub_16D39+140↑j
                cmp     [bp+var_2], 0
                jg      short loc_16EAF
                jl      short loc_16EA5
                cmp     [bp+var_4], 0
                jnb     short loc_16EAF

loc_16EA5:                              ; CODE XREF: sub_16D39+164↑j
                mov     [bp+var_2], 0
                mov     [bp+var_4], 0

loc_16EAF:                              ; CODE XREF: sub_16D39+162↑j
                                        ; sub_16D39+16A↑j
                les     bx, [bp+var_C]
                cmp     word ptr es:[bx+24h], 4Fh ; 'O'
                jz      short loc_16EBC
                jmp     loc_17047
; ---------------------------------------------------------------------------

loc_16EBC:                              ; CODE XREF: sub_16D39+17E↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     es:word_2AED1, di
                jl      short loc_16ECB
                jmp     loc_17047
; ---------------------------------------------------------------------------

loc_16ECB:                              ; CODE XREF: sub_16D39+18D↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED1
                nop
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                cmp     word ptr es:[bx+0D6h], 2
                jz      short loc_16EEA
                jmp     loc_17047
; ---------------------------------------------------------------------------

loc_16EEA:                              ; CODE XREF: sub_16D39+1AC↑j
                push    0
                push    0FFh
                push    ss
                lea     ax, [bp+var_112]
                push    ax
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED1
                nop
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                mov     ax, es:[bx+22h]
                les     bx, [bp+var_C]
                cmp     ax, es:[bx+22h]
                jge     short loc_16F24
                push    ds
                push    offset aSouth_2 ; "south-"
                jmp     short loc_16F49
; ---------------------------------------------------------------------------

loc_16F24:                              ; CODE XREF: sub_16D39+1E3↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED1
                nop
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                mov     ax, es:[bx+22h]
                les     bx, [bp+var_C]
                cmp     ax, es:[bx+22h]
                jle     short loc_16F57
                push    ds
                push    offset aNorth_2 ; "north-"

loc_16F49:                              ; CODE XREF: sub_16D39+1E9↑j
                push    ss
                lea     ax, [bp+var_112]
                push    ax
                call    STRCAT          ; char *strcat(char *destination, const char *source );
                add     sp, 8

loc_16F57:                              ; CODE XREF: sub_16D39+20A↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED1
                nop
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                mov     ax, es:[bx+20h]
                les     bx, [bp+var_C]
                cmp     ax, es:[bx+20h]
                jge     short loc_16F7E
                push    ds
                push    offset aWest_2  ; "west-"
                jmp     short loc_16FA3
; ---------------------------------------------------------------------------

loc_16F7E:                              ; CODE XREF: sub_16D39+23D↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED1
                nop
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                mov     ax, es:[bx+20h]
                les     bx, [bp+var_C]
                cmp     ax, es:[bx+20h]
                jle     short loc_16FB1
                push    ds
                push    offset aEast_2  ; "east-"

loc_16FA3:                              ; CODE XREF: sub_16D39+243↑j
                push    ss
                lea     ax, [bp+var_112]
                push    ax
                call    STRCAT          ; char *strcat(char *destination, const char *source );
                add     sp, 8

loc_16FB1:                              ; CODE XREF: sub_16D39+264↑j
                push    ss
                lea     ax, [bp+var_112]
                push    ax
                call    STRLEN          ; size_t strlen(const char* str);
                add     sp, 4
                or      ax, ax
                ja      short loc_16FC6
                jmp     loc_17047
; ---------------------------------------------------------------------------

loc_16FC6:                              ; CODE XREF: sub_16D39+288↑j
                push    ss
                lea     ax, [bp+var_112]
                push    ax
                call    STRLEN          ; size_t strlen(const char* str);
                add     sp, 4
                dec     ax
                lea     dx, [bp+var_112]
                add     ax, dx
                mov     bx, ax
                mov     byte ptr ss:[bx], 0
                push    ss
                lea     ax, [bp+var_112]
                push    ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    word ptr [bp+var_C+2]
                push    word ptr [bp+var_C]
                push    322h
                push    cs
                call    near ptr sub_15C18
                add     sp, 0Eh
                push    0
                push    0FFFFh
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                push    cs
                call    near ptr sub_15677
                add     sp, 6
                push    dx
                push    ax
                nop
                push    cs
                call    near ptr sub_175B0
                add     sp, 0Ah

loc_17047:                              ; CODE XREF: sub_16D39+180↑j
                                        ; sub_16D39+18F↑j ...
                push    word ptr [bp+var_C+2]
                push    word ptr [bp+var_C]
                push    429h
                push    cs
                call    near ptr sub_15C18
                add     sp, 6
                push    0
                push    0Fh
                les     bx, [bp+var_C]
                push    word ptr es:[bx+2Eh]
                push    word ptr es:[bx+2Ch]
                call    F_LUDIV
                mov     [bp+var_6], dx
                mov     [bp+var_8], ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_29A64
                mov     [bp+var_10], ax
                mov     dx, es:word_29A62
                mov     [bp+var_12], dx
                cmp     ax, [bp+var_6]
                jg      short loc_170A9
                jl      short loc_17091
                cmp     dx, [bp+var_8]
                jnb     short loc_170A9

loc_17091:                              ; CODE XREF: sub_16D39+351↑j
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AED1, di
                jle     short loc_170A9
                mov     ax, [bp+var_10]
                mov     dx, [bp+var_12]
                mov     [bp+var_6], ax
                mov     [bp+var_8], dx

loc_170A9:                              ; CODE XREF: sub_16D39+34F↑j
                                        ; sub_16D39+356↑j ...
                push    [bp+var_6]
                push    [bp+var_8]
                push    ds
                push    offset aLd      ; "%ld"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                push    42Ah
                push    cs
                call    near ptr sub_15C18
                add     sp, 6
                push    [bp+var_2]
                push    [bp+var_4]
                push    ds
                push    offset aLd      ; "%ld"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                les     bx, [bp+var_C]
                assume es:nothing
                push    word ptr es:[bx+92h]
                push    word ptr es:[bx+90h]
                push    ds
                push    offset aLd      ; "%ld"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                push    42Bh
                push    cs
                call    near ptr sub_15C18
                add     sp, 0Ah
                push    [bp+arg_2]
                nop
                push    cs
                call    near ptr sub_17567
                pop     cx
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, [bp+var_6]
                mov     dx, [bp+var_8]
                add     es:[bx+2Ch], dx
                adc     es:[bx+2Eh], ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_2AED1
                mov     [bp+var_E], ax
                cmp     ax, di
                jg      short loc_17139
                mov     ax, [bp+var_E]
                cmp     ax, [bp+arg_2]
                jle     short loc_1715A

loc_17139:                              ; CODE XREF: sub_16D39+3F6↑j
                les     bx, [bp+var_C]
                assume es:nothing
                mov     ax, es:[bx+92h]
                mov     dx, es:[bx+90h]
                mov     bx, seg dseg19
                mov     es, bx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     es:[bx+90h], dx
                adc     es:[bx+92h], ax

loc_1715A:                              ; CODE XREF: sub_16D39+3FE↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, [bp+var_2]
                mov     dx, [bp+var_4]
                add     es:[bx+94h], dx
                adc     es:[bx+96h], ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_2AED1
                dec     ax
                cmp     ax, [bp+arg_2]
                jge     short loc_171BB
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+2Ah]
                imul    ax, 2710h
                xor     dx, dx
                mov     bx, seg dseg19
                mov     es, bx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     dx, es:[bx+2Eh]
                jbe     short loc_171AA
                jmp     loc_17276
; ---------------------------------------------------------------------------

loc_171AA:                              ; CODE XREF: sub_16D39+46C↑j
                jnb     short loc_171AF
                jmp     loc_1726D
; ---------------------------------------------------------------------------

loc_171AF:                              ; CODE XREF: sub_16D39:loc_171AA↑j
                cmp     ax, es:[bx+2Ch]
                jb      short loc_171B8
                jmp     loc_17276
; ---------------------------------------------------------------------------

loc_171B8:                              ; CODE XREF: sub_16D39+47A↑j
                jmp     loc_1726D
; ---------------------------------------------------------------------------

loc_171BB:                              ; CODE XREF: sub_16D39+448↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+2Ah], 0Ah
                jnb     short loc_1721B
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+2Ah]
                dec     ax
                shl     ax, 2
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     bx, es:[bx+1Eh]
                imul    bx, 0C8h
                add     bx, ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:[bx+0BF8h]
                mov     dx, es:[bx+0BF6h]
                mov     bx, seg dseg19
                mov     es, bx
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     ax, es:[bx+2Eh]
                ja      short loc_17276
                jnz     short loc_1726D
                cmp     dx, es:[bx+2Ch]
                ja      short loc_17276
                jmp     short loc_1726D
; ---------------------------------------------------------------------------

loc_1721B:                              ; CODE XREF: sub_16D39+491↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     bx, es:[bx+2Ah]
                sub     bx, 0Ah
                inc     bx
                xor     cx, cx
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     si, es:dword_29DD4
                assume es:nothing
                mov     si, es:[si+1Eh]
                imul    si, 0C8h
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     dx, es:[si+0C1Ch]
                mov     ax, es:[si+0C1Ah]
                call    F_LXMUL
                mov     bx, seg dseg19
                mov     es, bx
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     dx, es:[bx+2Eh]
                ja      short loc_17276
                jnz     short loc_1726D
                cmp     ax, es:[bx+2Ch]
                ja      short loc_17276

loc_1726D:                              ; CODE XREF: sub_16D39+473↑j
                                        ; sub_16D39:loc_171B8↑j ...
                push    [bp+arg_2]
                nop
                push    cs
                call    near ptr sub_172E2
                pop     cx

loc_17276:                              ; CODE XREF: sub_16D39+120↑j
                                        ; sub_16D39+46E↑j ...
                les     bx, [bp+var_C]
                mov     word ptr es:[bx+26h], 0
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     si, es:word_2AED5
                push    di
                nop
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                mov     bx, seg dseg19
                mov     es, bx
                mov     word ptr es:dword_29DD4+2, dx
                mov     word ptr es:dword_29DD4, ax
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_2AED5, di
                call    sub_1D92E
                push    si
                nop
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                mov     bx, seg dseg19
                mov     es, bx
                mov     word ptr es:dword_29DD4+2, dx
                mov     word ptr es:dword_29DD4, ax
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_2AED5, si
                les     bx, [bp+var_C]
                assume es:nothing
                mov     word ptr es:[bx+0D8h], 0FFFFh
                push    di
                nop
                push    cs
                call    near ptr sub_183D9
                pop     cx
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_16D39       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_172E2       proc far                ; CODE XREF: sub_16D39+539↑p

var_4           = dword ptr -4
arg_0           = word ptr  6

                enter   4, 0
                push    si
                push    ds
                mov     ax, seg dseg14
                mov     ds, ax
                assume ds:dseg14
                mov     dx, [bp+arg_0]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     es:word_2AED1, dx
                jg      short loc_172FF
                jmp     loc_174BC
; ---------------------------------------------------------------------------

loc_172FF:                              ; CODE XREF: sub_172E2+18↑j
                push    42Ch
                push    dx
                push    cs
                call    near ptr sub_15C7E
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     cx, es:[bx+2Ah]
                dec     cx
                xor     si, si
                cmp     cx, 9
                jle     short loc_17326
                mov     cx, 9
                mov     si, 1

loc_17326:                              ; CODE XREF: sub_172E2+3C↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+1Eh]
                imul    ax, 0C8h
                add     ax, 0BF6h
                mov     word ptr [bp+var_4+2], seg dseg19
                mov     word ptr [bp+var_4], ax
                mov     ax, cx
                shl     ax, 1
                les     bx, [bp+var_4]
                add     bx, ax
                mov     ax, es:[bx+28h]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     es:[bx+32h], ax
                mov     ax, cx
                shl     ax, 1
                les     bx, [bp+var_4]
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     es:[bx+30h], ax
                mov     ax, cx
                shl     ax, 1
                les     bx, [bp+var_4]
                add     bx, ax
                mov     ax, es:[bx+50h]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     es:[bx+34h], ax
                mov     ax, cx
                shl     ax, 1
                les     bx, [bp+var_4]
                add     bx, ax
                mov     ax, es:[bx+64h]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     es:[bx+3Ah], ax
                mov     ax, cx
                shl     ax, 1
                les     bx, [bp+var_4]
                add     bx, ax
                mov     ax, es:[bx+78h]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     es:[bx+38h], ax
                mov     ax, cx
                shl     ax, 1
                les     bx, [bp+var_4]
                add     bx, ax
                mov     ax, es:[bx+8Ch]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     es:[bx+36h], ax
                mov     ax, cx
                shl     ax, 1
                les     bx, [bp+var_4]
                add     bx, ax
                mov     ax, es:[bx+0A0h]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     es:[bx+28h], ax
                mov     ax, cx
                shl     ax, 1
                les     bx, [bp+var_4]
                add     bx, ax
                mov     ax, es:[bx+0A0h]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     es:[bx+26h], ax
                mov     ax, cx
                shl     ax, 1
                les     bx, [bp+var_4]
                add     bx, ax
                cmp     word ptr es:[bx+0B4h], 0FFFFh
                jle     short loc_174AB
                or      si, si
                jnz     short loc_174AB
                xor     si, si
                jmp     short loc_1749F
; ---------------------------------------------------------------------------

loc_17437:                              ; CODE XREF: sub_172E2+1C7↓j
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+64h], 0FFFFh
                jnz     short loc_1749E
                mov     ax, cx
                shl     ax, 1
                les     bx, [bp+var_4]
                add     bx, ax
                mov     ax, es:[bx+0B4h]
                mov     dx, si
                shl     dx, 1
                mov     bx, seg dseg19
                mov     es, bx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, dx
                mov     es:[bx+64h], ax
                mov     ax, cx
                shl     ax, 1
                les     bx, [bp+var_4]
                add     bx, ax
                mov     ax, es:[bx+0B4h]
                imul    ax, 36h ; '6'
                add     ax, 0FDEh
                push    seg dseg19
                push    ax
                push    42Dh
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                push    cs
                call    near ptr sub_15C7E
                add     sp, 8
                jmp     short loc_174AB
; ---------------------------------------------------------------------------

loc_1749E:                              ; CODE XREF: sub_172E2+16A↑j
                inc     si

loc_1749F:                              ; CODE XREF: sub_172E2+153↑j
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AEC1, si
                jg      short loc_17437

loc_174AB:                              ; CODE XREF: sub_172E2+14B↑j
                                        ; sub_172E2+14F↑j ...
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                inc     word ptr es:[bx+2Ah]
                jmp     loc_17563
; ---------------------------------------------------------------------------

loc_174BC:                              ; CODE XREF: sub_172E2+1A↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+2Ah], 3
                ja      short loc_174D0
                jmp     loc_17563
; ---------------------------------------------------------------------------

loc_174D0:                              ; CODE XREF: sub_172E2+1E9↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                inc     word ptr es:[bx+2Ah]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     word ptr es:[bx+32h], 2
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     word ptr es:[bx+30h], 2
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     word ptr es:[bx+34h], 2
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     word ptr es:[bx+3Ah], 2
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     word ptr es:[bx+38h], 2
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     word ptr es:[bx+36h], 2
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     word ptr es:[bx+28h], 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+28h]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     es:[bx+26h], ax

loc_17563:                              ; CODE XREF: sub_172E2+1D7↑j
                                        ; sub_172E2+1EB↑j
                pop     ds
                assume ds:dseg21
                pop     si
                leave
                retf
sub_172E2       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_17567       proc far                ; CODE XREF: sub_8B00+115↑P
                                        ; sub_8B00+395↑P ...

arg_0           = word ptr  6

                push    bp
                mov     bp, sp
                push    si
                push    ds
                mov     ax, seg dseg14
                mov     ds, ax
                assume ds:dseg14
                mov     si, [bp+arg_0]
                mov     ax, seg NTERMS
                mov     es, ax
                assume es:nothing
                cmp     word ptr es:NTERMS, si ; int nterms;
                jle     short loc_175A7
                cmp     si, 0FFFFh
                jle     short loc_175A7
                push    ds
                push    offset a137m    ; "\x1B[1;37m"
                push    ds
                push    offset aS       ; "%s***\r"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                push    si
                call    _BTUXMT         ; int btuxmt(int chan,char *datstg);
                add     sp, 6
                push    si
                call    OUTPRF          ; outprf (unum);
                pop     cx

loc_175A7:                              ; CODE XREF: sub_17567+17↑j
                                        ; sub_17567+1C↑j
                call    CLRPRF          ; clrprf()
                pop     ds
                assume ds:dseg21
                pop     si
                pop     bp
                retf
sub_17567       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_175B0       proc far                ; CODE XREF: sttrou+591↑P
                                        ; sub_2D88+2BE↑P ...

var_E           = dword ptr -0Eh
var_A           = byte ptr -0Ah
arg_0           = word ptr  6
arg_2           = word ptr  8
arg_4           = word ptr  0Ah
arg_6           = word ptr  0Ch
arg_8           = word ptr  0Eh

                enter   0Eh, 0
                push    si
                push    ds
                mov     ax, seg dseg14
                mov     ds, ax
                assume ds:dseg14
                push    0Ah
                push    [bp+arg_2]
                push    [bp+arg_0]
                push    ss
                lea     ax, [bp+var_A]
                push    ax
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                xor     si, si
                jmp     short loc_17642
; ---------------------------------------------------------------------------

loc_175D4:                              ; CODE XREF: sub_175B0+9C↓j
                push    si
                nop
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                cmp     word ptr es:[bx+0D6h], 2
                jnz     short loc_17641
                cmp     si, [bp+arg_4]
                jz      short loc_17641
                cmp     si, [bp+arg_6]
                jz      short loc_17641
                push    si
                nop
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                mov     word ptr [bp+var_E+2], dx
                mov     word ptr [bp+var_E], ax
                les     bx, [bp+var_E]
                push    word ptr es:[bx+24h]
                les     bx, [bp+var_E]
                push    word ptr es:[bx+22h]
                les     bx, [bp+var_E]
                push    word ptr es:[bx+20h]
                push    cs
                call    near ptr sub_15677
                add     sp, 6
                push    dx
                push    ax
                push    ss
                lea     ax, [bp+var_A]
                push    ax
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_17641
                push    ds
                push    (offset aS+2)   ; "***\r"
                push    si
                call    _BTUXMT         ; int btuxmt(int chan,char *datstg);
                add     sp, 6
                push    si
                call    OUTPRF          ; outprf (unum);
                pop     cx

loc_17641:                              ; CODE XREF: sub_175B0+35↑j
                                        ; sub_175B0+3A↑j ...
                inc     si

loc_17642:                              ; CODE XREF: sub_175B0+22↑j
                mov     ax, seg NTERMS
                mov     es, ax
                assume es:nothing
                cmp     word ptr es:NTERMS, si ; int nterms;
                jg      short loc_175D4
                call    CLRPRF          ; clrprf()
                push    [bp+arg_8]
                push    ss
                lea     ax, [bp+var_A]
                push    ax
                nop
                push    cs
                call    near ptr sub_17667
                add     sp, 6
                pop     ds
                assume ds:dseg21
                pop     si
                leave
                retf
sub_175B0       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_17667       proc far                ; CODE XREF: sub_175B0+AD↑p

var_64          = byte ptr -64h
var_50          = byte ptr -50h
var_4B          = byte ptr -4Bh
var_28          = dword ptr -28h
var_24          = word ptr -24h
var_22          = word ptr -22h
var_20          = word ptr -20h
var_1E          = byte ptr -1Eh
var_1D          = byte ptr -1Dh
var_1C          = byte ptr -1Ch
var_1B          = byte ptr -1Bh
var_1A          = byte ptr -1Ah
var_19          = byte ptr -19h
var_18          = byte ptr -18h
var_17          = byte ptr -17h
var_16          = byte ptr -16h
var_14          = byte ptr -14h
var_A           = byte ptr -0Ah
arg_0           = word ptr  6
arg_2           = word ptr  8
arg_4           = word ptr  0Ah

                enter   64h, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg14
                mov     ds, ax
                assume ds:dseg14
                lea     ax, [bp+var_64]
                push    ss
                push    ax
                push    ds
                push    offset unk_25AB1
                mov     cx, 14h
                call    F_SCOPY
                cmp     [bp+arg_4], 0
                jg      short loc_1768D
                jmp     loc_17909
; ---------------------------------------------------------------------------

loc_1768D:                              ; CODE XREF: sub_17667+21↑j
                push    0Ah
                push    [bp+arg_2]
                push    [bp+arg_0]
                push    ss
                lea     ax, [bp+var_1E]
                push    ax
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                mov     al, [bp+var_1C]
                mov     ah, 0
                push    ax
                mov     al, [bp+var_1D]
                mov     ah, 0
                push    ax
                mov     al, [bp+var_1E]
                mov     ah, 0
                push    ax
                push    ds
                push    offset aCCC_0   ; "%c%c%c"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 0Ah
                push    dx
                push    ax
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                mov     [bp+var_20], ax
                mov     al, [bp+var_19]
                mov     ah, 0
                push    ax
                mov     al, [bp+var_1A]
                mov     ah, 0
                push    ax
                mov     al, [bp+var_1B]
                mov     ah, 0
                push    ax
                push    ds
                push    offset aCCC_0   ; "%c%c%c"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 0Ah
                push    dx
                push    ax
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                mov     [bp+var_22], ax
                mov     al, [bp+var_16]
                mov     ah, 0
                push    ax
                mov     al, [bp+var_17]
                mov     ah, 0
                push    ax
                mov     al, [bp+var_18]
                mov     ah, 0
                push    ax
                push    ds
                push    offset aCCC_0   ; "%c%c%c"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 0Ah
                push    dx
                push    ax
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                mov     [bp+var_24], ax
                xor     si, si
                jmp     loc_178FA
; ---------------------------------------------------------------------------

loc_17728:                              ; CODE XREF: sub_17667+29F↓j
                push    si
                nop
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                cmp     word ptr es:[bx+0D6h], 2
                jz      short loc_1773E
                jmp     loc_178F9
; ---------------------------------------------------------------------------

loc_1773E:                              ; CODE XREF: sub_17667+D2↑j
                push    si
                nop
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                mov     word ptr [bp+var_28+2], dx
                mov     word ptr [bp+var_28], ax
                les     bx, [bp+var_28]
                push    word ptr es:[bx+24h]
                les     bx, [bp+var_28]
                push    word ptr es:[bx+22h]
                les     bx, [bp+var_28]
                push    word ptr es:[bx+20h]
                push    cs
                call    near ptr sub_15677
                add     sp, 6
                push    dx
                push    ax
                push    ss
                lea     ax, [bp+var_1E]
                push    ax
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_1777D
                jmp     loc_178F9
; ---------------------------------------------------------------------------

loc_1777D:                              ; CODE XREF: sub_17667+111↑j
                les     bx, [bp+var_28]
                mov     ax, [bp+var_20]
                sub     ax, es:[bx+20h]
                cwd
                xor     ax, dx
                sub     ax, dx
                mov     di, ax
                les     bx, [bp+var_28]
                mov     ax, [bp+var_22]
                sub     ax, es:[bx+22h]
                cwd
                xor     ax, dx
                sub     ax, dx
                add     di, ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     es:word_29A32, di
                jge     short loc_177AE
                jmp     loc_178F9
; ---------------------------------------------------------------------------

loc_177AE:                              ; CODE XREF: sub_17667+142↑j
                les     bx, [bp+var_28]
                assume es:nothing
                mov     ax, es:[bx+24h]
                cmp     ax, [bp+var_24]
                jz      short loc_177BD
                jmp     loc_178F9
; ---------------------------------------------------------------------------

loc_177BD:                              ; CODE XREF: sub_17667+151↑j
                push    0
                push    28h ; '('
                push    ss
                lea     ax, [bp+var_50]
                push    ax
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                les     bx, [bp+var_28]
                mov     ax, [bp+var_22]
                sub     ax, es:[bx+22h]
                jge     short loc_177E0
                push    ds
                push    offset aSouth   ; "south"
                jmp     short loc_177E8
; ---------------------------------------------------------------------------

loc_177E0:                              ; CODE XREF: sub_17667+171↑j
                or      ax, ax
                jle     short loc_177F5
                push    ds
                push    offset aNorth   ; "north"

loc_177E8:                              ; CODE XREF: sub_17667+177↑j
                push    ss
                lea     ax, [bp+var_50]
                push    ax
                call    STRCAT          ; char *strcat(char *destination, const char *source );
                add     sp, 8

loc_177F5:                              ; CODE XREF: sub_17667+17B↑j
                push    ds
                push    (offset aAeiou+5) ; ""
                push    ss
                lea     ax, [bp+var_50]
                push    ax
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jnz     short loc_1781B
                push    ds
                push    (offset aSouth_2+5) ; "-"
                push    ss
                lea     ax, [bp+var_50]
                push    ax
                call    STRCAT          ; char *strcat(char *destination, const char *source );
                add     sp, 8

loc_1781B:                              ; CODE XREF: sub_17667+1A1↑j
                les     bx, [bp+var_28]
                mov     ax, [bp+var_20]
                sub     ax, es:[bx+20h]
                jge     short loc_1782D
                push    ds
                push    offset aWest    ; "west"
                jmp     short loc_17835
; ---------------------------------------------------------------------------

loc_1782D:                              ; CODE XREF: sub_17667+1BE↑j
                or      ax, ax
                jle     short loc_17842
                push    ds
                push    offset aEast    ; "east"

loc_17835:                              ; CODE XREF: sub_17667+1C4↑j
                push    ss
                lea     ax, [bp+var_50]
                push    ax
                call    STRCAT          ; char *strcat(char *destination, const char *source );
                add     sp, 8

loc_17842:                              ; CODE XREF: sub_17667+1C8↑j
                push    ss
                lea     ax, [bp+var_50]
                push    ax
                call    STRLEN          ; size_t strlen(const char* str);
                add     sp, 4
                cmp     ax, 7
                jnb     short loc_17858
                mov     [bp+var_4B], 0

loc_17858:                              ; CODE XREF: sub_17667+1EB↑j
                push    0
                push    0Ah
                push    ss
                lea     ax, [bp+var_A]
                push    ax
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                push    0
                push    0Ah
                push    ss
                lea     ax, [bp+var_14]
                push    ax
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_29A32
                cwd
                sub     ax, dx
                sar     ax, 1
                cmp     ax, di
                jle     short loc_178A3
                push    ds
                push    (offset aAeiou+5) ; ""
                push    ss
                lea     ax, [bp+var_A]
                push    ax
                call    STRCPY          ; char* strcpy(char* destination, const char* source );
                add     sp, 8
                push    ds
                push    offset aLoud    ; "loud"
                jmp     short loc_178B8
; ---------------------------------------------------------------------------

loc_178A3:                              ; CODE XREF: sub_17667+223↑j
                push    ds
                push    offset aFar     ; " far"
                push    ss
                lea     ax, [bp+var_A]
                push    ax
                call    STRCPY          ; char* strcpy(char* destination, const char* source );
                add     sp, 8
                push    ds
                push    offset aFaint   ; "faint"

loc_178B8:                              ; CODE XREF: sub_17667+23A↑j
                push    ss
                lea     ax, [bp+var_14]
                push    ax
                call    STRCPY          ; char* strcpy(char* destination, const char* source );
                add     sp, 8
                les     bx, [bp+var_28]
                assume es:nothing
                mov     ax, es:[bx+0E0h]
                and     ax, 10h
                or      ax, 0
                jnz     short loc_178F9
                push    ss
                lea     ax, [bp+var_50]
                push    ax
                push    ss
                lea     ax, [bp+var_A]
                push    ax
                push    ss
                lea     ax, [bp+var_14]
                push    ax
                mov     bx, [bp+arg_4]
                shl     bx, 1
                lea     ax, [bp+var_64]
                add     bx, ax
                push    word ptr ss:[bx]
                push    si
                push    cs
                call    near ptr sub_15C7E
                add     sp, 10h

loc_178F9:                              ; CODE XREF: sub_17667+D4↑j
                                        ; sub_17667+113↑j ...
                inc     si

loc_178FA:                              ; CODE XREF: sub_17667+BE↑j
                mov     ax, seg NTERMS
                mov     es, ax
                assume es:nothing
                cmp     word ptr es:NTERMS, si ; int nterms;
                jle     short loc_17909
                jmp     loc_17728
; ---------------------------------------------------------------------------

loc_17909:                              ; CODE XREF: sub_17667+23↑j
                                        ; sub_17667+29D↑j
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_17667       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1790E       proc far                ; CODE XREF: _INIT__MUTANTS+D22↑P
                                        ; DATA XREF: sub_1790E+35F↓o

var_8           = dword ptr -8
var_4           = dword ptr -4

                enter   8, 0
                push    si
                push    ds
                mov     ax, seg dseg14
                mov     ds, ax
                assume ds:dseg14
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     es:word_29A30, 0
                jz      short loc_17929
                jmp     loc_17C6A
; ---------------------------------------------------------------------------

loc_17929:                              ; CODE XREF: sub_1790E+16↑j
                xor     si, si
                jmp     loc_17C5B
; ---------------------------------------------------------------------------

loc_1792E:                              ; CODE XREF: sub_1790E+359↓j
                push    si
                nop
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                cmp     word ptr es:[bx+0D6h], 2
                jz      short loc_17944
                jmp     loc_17C5A
; ---------------------------------------------------------------------------

loc_17944:                              ; CODE XREF: sub_1790E+31↑j
                push    si
                nop
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                mov     word ptr [bp+var_8+2], dx
                mov     word ptr [bp+var_8], ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_29A3C
                cwd
                les     bx, [bp+var_8]
                assume es:nothing
                push    ax
                mov     ax, es:[bx+32h]
                push    dx
                cwd
                pop     cx
                pop     bx
                call    F_LXMUL
                les     bx, [bp+var_8]
                push    ax
                mov     ax, es:[bx+0CCh]
                push    dx
                cwd
                pop     bx
                cmp     bx, dx
                pop     dx
                jg      short loc_179B9
                jl      short loc_17983
                cmp     dx, ax
                jnb     short loc_179B9

loc_17983:                              ; CODE XREF: sub_1790E+6F↑j
                les     bx, [bp+var_8]
                cmp     word ptr es:[bx+32h], 3Ch ; '<'
                jge     short loc_179B9
                les     bx, [bp+var_8]
                mov     ax, es:[bx+0E0h]
                and     ax, 40h
                or      ax, 0
                jnz     short loc_179EA
                les     bx, [bp+var_8]
                or      word ptr es:[bx+0E0h], 40h
                or      word ptr es:[bx+0E2h], 0
                push    36Fh
                push    si
                push    cs
                call    near ptr sub_15C7E
                add     sp, 4
                jmp     short loc_179EA
; ---------------------------------------------------------------------------

loc_179B9:                              ; CODE XREF: sub_1790E+6D↑j
                                        ; sub_1790E+73↑j ...
                les     bx, [bp+var_8]
                mov     ax, es:[bx+0E0h]
                and     ax, 40h
                or      ax, 0
                jz      short loc_179EA
                les     bx, [bp+var_8]
                and     word ptr es:[bx+0E0h], 0FFBFh
                and     word ptr es:[bx+0E2h], 0FFFFh
                push    ds
                push    offset aYouRegainYourS ; "***\rYou regain your strength.\r"
                call    PRF             ; prf(string);
                add     sp, 4
                push    si
                push    cs
                call    near ptr sub_17567
                pop     cx

loc_179EA:                              ; CODE XREF: sub_1790E+8D↑j
                                        ; sub_1790E+A9↑j ...
                les     bx, [bp+var_8]
                cmp     word ptr es:[bx+0D0h], 0FFFFh
                jle     short loc_17A45
                les     bx, [bp+var_8]
                cmp     word ptr es:[bx+0D2h], 0
                jle     short loc_17A45
                les     bx, [bp+var_8]
                mov     ax, es:[bx+0D2h]
                add     ax, 0FFFBh
                les     bx, [bp+var_8]
                mov     es:[bx+0D2h], ax
                les     bx, [bp+var_8]
                cmp     word ptr es:[bx+0D2h], 1
                jge     short loc_17A45
                les     bx, [bp+var_8]
                mov     word ptr es:[bx+0D2h], 0
                les     bx, [bp+var_8]
                mov     ax, es:[bx+0D0h]
                imul    ax, 36h ; '6'
                add     ax, 0FDEh
                push    seg dseg19
                push    ax
                push    42Eh
                push    si
                push    cs
                call    near ptr sub_15C7E
                add     sp, 8

loc_17A45:                              ; CODE XREF: sub_1790E+E5↑j
                                        ; sub_1790E+F0↑j ...
                les     bx, [bp+var_8]
                cmp     word ptr es:[bx+0CEh], 0
                jg      short loc_17A53
                jmp     loc_17B72
; ---------------------------------------------------------------------------

loc_17A53:                              ; CODE XREF: sub_1790E+140↑j
                les     bx, [bp+var_8]
                sub     word ptr es:[bx+0CEh], 5
                les     bx, [bp+var_8]
                cmp     word ptr es:[bx+0CEh], 0
                jg      short loc_17AC1
                les     bx, [bp+var_8]
                mov     word ptr es:[bx+0CEh], 0
                les     bx, [bp+var_8]
                mov     ax, es:[bx+0D0h]
                imul    ax, 36h ; '6'
                add     ax, 0FDEh
                mov     word ptr [bp+var_4+2], seg dseg19
                mov     word ptr [bp+var_4], ax
                push    seg dseg19
                push    word ptr [bp+var_4]
                push    375h
                push    si
                push    cs
                call    near ptr sub_15C7E
                add     sp, 8
                push    si
                nop
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                mov     bx, seg dseg19
                mov     es, bx
                assume es:dseg19
                mov     word ptr es:dword_29DD4+2, dx
                mov     word ptr es:dword_29DD4, ax
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_2AED5, si
                les     bx, [bp+var_4]
                assume es:nothing
                call    dword ptr es:[bx+26h]
                jmp     loc_17B72
; ---------------------------------------------------------------------------

loc_17AC1:                              ; CODE XREF: sub_1790E+157↑j
                les     bx, [bp+var_8]
                mov     ax, es:[bx+0D0h]
                imul    ax, 36h ; '6'
                add     ax, 0FDEh
                mov     word ptr [bp+var_4+2], seg dseg19
                mov     word ptr [bp+var_4], ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     es:word_2AED1, si
                jle     short loc_17B05
                les     bx, [bp+var_4]
                assume es:nothing
                mov     cx, es:[bx+30h]
                mov     bx, es:[bx+2Eh]
                xor     dx, dx
                mov     ax, 5
                call    F_LXMUL
                les     bx, [bp+var_8]
                sub     es:[bx+94h], ax
                sbb     es:[bx+96h], dx

loc_17B05:                              ; CODE XREF: sub_1790E+1D3↑j
                les     bx, [bp+var_8]
                cmp     word ptr es:[bx+96h], 0
                jg      short loc_17B72
                jl      short loc_17B1A
                cmp     word ptr es:[bx+94h], 1
                jnb     short loc_17B72

loc_17B1A:                              ; CODE XREF: sub_1790E+202↑j
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                mov     word ptr es:USRNUM, 0FFFFh ; int usrnum;
                les     bx, [bp+var_8]
                assume es:nothing
                mov     word ptr es:[bx+96h], 0
                mov     word ptr es:[bx+94h], 0
                push    439h
                push    si
                push    cs
                call    near ptr sub_15C7E
                add     sp, 4
                push    si
                nop
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                mov     bx, seg dseg19
                mov     es, bx
                assume es:dseg19
                mov     word ptr es:dword_29DD4+2, dx
                mov     word ptr es:dword_29DD4, ax
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_2AED5, si
                les     bx, [bp+var_4]
                assume es:nothing
                call    dword ptr es:[bx+26h]
                les     bx, [bp+var_8]
                mov     word ptr es:[bx+0CEh], 0

loc_17B72:                              ; CODE XREF: sub_1790E+142↑j
                                        ; sub_1790E+1B0↑j ...
                les     bx, [bp+var_8]
                cmp     word ptr es:[bx+0D8h], 0
                jle     short loc_17B86
                les     bx, [bp+var_8]
                sub     word ptr es:[bx+0D8h], 5

loc_17B86:                              ; CODE XREF: sub_1790E+26D↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     es:word_2AED1, si
                jg      short loc_17B95
                jmp     loc_17C5A
; ---------------------------------------------------------------------------

loc_17B95:                              ; CODE XREF: sub_1790E+282↑j
                les     bx, [bp+var_8]
                assume es:nothing
                cmp     word ptr es:[bx+9Ah], 0
                ja      short loc_17BA3
                jmp     loc_17C39
; ---------------------------------------------------------------------------

loc_17BA3:                              ; CODE XREF: sub_1790E+290↑j
                push    337h
                push    si
                push    cs
                call    near ptr sub_15C7E
                add     sp, 4
                les     bx, [bp+var_8]
                mov     cx, es:[bx+9Ah]
                les     bx, [bp+var_8]
                mov     ax, es:[bx+38h]
                mov     bx, 64h ; 'd'
                cwd
                idiv    bx
                sub     cx, ax
                cmp     cx, 2
                jge     short loc_17BCD
                mov     cx, 2

loc_17BCD:                              ; CODE XREF: sub_1790E+2BA↑j
                les     bx, [bp+var_8]
                sub     es:[bx+26h], cx
                les     bx, [bp+var_8]
                cmp     word ptr es:[bx+26h], 1
                jge     short loc_17BE7
                les     bx, [bp+var_8]
                mov     word ptr es:[bx+26h], 1

loc_17BE7:                              ; CODE XREF: sub_1790E+2CE↑j
                les     bx, [bp+var_8]
                dec     word ptr es:[bx+9Ah]
                les     bx, [bp+var_8]
                cmp     word ptr es:[bx+26h], 0Fh
                jge     short loc_17C19
                push    43Ah
                push    si
                push    cs
                call    near ptr sub_15C7E
                add     sp, 4
                les     bx, [bp+var_8]
                cmp     word ptr es:[bx+26h], 1
                jge     short loc_17C19
                push    43Bh
                push    si
                push    cs
                call    near ptr sub_15C7E
                add     sp, 4

loc_17C19:                              ; CODE XREF: sub_1790E+2E9↑j
                                        ; sub_1790E+2FE↑j
                les     bx, [bp+var_8]
                cmp     word ptr es:[bx+9Ah], 0
                ja      short loc_17C39
                les     bx, [bp+var_8]
                mov     word ptr es:[bx+9Ah], 0
                push    43Ch
                push    si
                push    cs
                call    near ptr sub_15C7E
                add     sp, 4

loc_17C39:                              ; CODE XREF: sub_1790E+292↑j
                                        ; sub_1790E+314↑j
                les     bx, [bp+var_8]
                cmp     word ptr es:[bx+26h], 1
                jge     short loc_17C5A
                call    sub_1D92E
                push    339h
                push    si
                push    cs
                call    near ptr sub_15C7E
                add     sp, 4
                push    si
                nop
                push    cs
                call    near ptr sub_183D9
                pop     cx

loc_17C5A:                              ; CODE XREF: sub_1790E+33↑j
                                        ; sub_1790E+284↑j ...
                inc     si

loc_17C5B:                              ; CODE XREF: sub_1790E+1D↑j
                mov     ax, seg NTERMS
                mov     es, ax
                assume es:nothing
                cmp     word ptr es:NTERMS, si ; int nterms;
                jle     short loc_17C6A
                jmp     loc_1792E
; ---------------------------------------------------------------------------

loc_17C6A:                              ; CODE XREF: sub_1790E+18↑j
                                        ; sub_1790E+357↑j
                push    seg cseg06
                push    offset sub_1790E
                push    5
                call    RTKICK          ; rtkick(int time, void *rouptr());
                add     sp, 6
                pop     ds
                assume ds:dseg21
                pop     si
                leave
                retf
sub_1790E       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_17C7E       proc far                ; CODE XREF: _INIT__MUTANTS+D1D↑P
                                        ; DATA XREF: sub_17C7E+1EC↓o

var_4           = word ptr -4
var_2           = word ptr -2

                enter   4, 0
                push    si
                push    ds
                mov     ax, seg dseg14
                mov     ds, ax
                assume ds:dseg14
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     es:word_29A30, 0
                jz      short loc_17C99
                jmp     loc_17E67
; ---------------------------------------------------------------------------

loc_17C99:                              ; CODE XREF: sub_17C7E+16↑j
                xor     si, si
                jmp     loc_17E58
; ---------------------------------------------------------------------------

loc_17C9E:                              ; CODE XREF: sub_17C7E+1E6↓j
                push    si
                nop
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                cmp     word ptr es:[bx+0D6h], 2
                jz      short loc_17CB4
                jmp     loc_17E57
; ---------------------------------------------------------------------------

loc_17CB4:                              ; CODE XREF: sub_17C7E+31↑j
                push    si
                nop
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                mov     bx, seg dseg19
                mov     es, bx
                assume es:dseg19
                mov     word ptr es:dword_29DD4+2, dx
                mov     word ptr es:dword_29DD4, ax
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_2AED5, si
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+0CAh], 0
                jle     short loc_17D34
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+0CAh]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                sub     ax, es:[bx+38h]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     es:[bx+0CAh], ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+0CAh], 0
                jge     short loc_17D34
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     word ptr es:[bx+0CAh], 0

loc_17D34:                              ; CODE XREF: sub_17C7E+65↑j
                                        ; sub_17C7E+A3↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     bx, es:[bx+1Eh]
                imul    bx, 34h ; '4'
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:[bx+0B1Ch]
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[bx+2Ah]
                shr     dx, 1
                imul    dx
                mov     [bp+var_2], 0
                mov     [bp+var_4], ax
                cmp     [bp+var_2], 0
                jl      short loc_17D82
                jg      short loc_17D78
                cmp     [bp+var_4], 2710h
                jbe     short loc_17D82

loc_17D78:                              ; CODE XREF: sub_17C7E+F1↑j
                mov     [bp+var_2], 0
                mov     [bp+var_4], 2710h

loc_17D82:                              ; CODE XREF: sub_17C7E+EF↑j
                                        ; sub_17C7E+F8↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, [bp+var_2]
                mov     dx, [bp+var_4]
                sub     es:[bx+94h], dx
                sbb     es:[bx+96h], ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+96h], 0
                jle     short loc_17DB1
                jmp     loc_17E36
; ---------------------------------------------------------------------------

loc_17DB1:                              ; CODE XREF: sub_17C7E+12E↑j
                jl      short loc_17DBB
                cmp     word ptr es:[bx+94h], 1
                jnb     short loc_17E36

loc_17DBB:                              ; CODE XREF: sub_17C7E:loc_17DB1↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     word ptr es:[bx+96h], 0
                mov     word ptr es:[bx+94h], 0
                push    43Dh
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                push    cs
                call    near ptr sub_15C7E
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+26h]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                sub     ax, es:[bx+2Ah]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     es:[bx+26h], ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+26h], 1
                jge     short loc_17E36
                push    43Eh
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                push    cs
                call    near ptr sub_15C7E
                add     sp, 4

loc_17E36:                              ; CODE XREF: sub_17C7E+130↑j
                                        ; sub_17C7E+13B↑j ...
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+26h], 1
                jge     short loc_17E57
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                nop
                push    cs
                call    near ptr sub_183D9
                pop     cx

loc_17E57:                              ; CODE XREF: sub_17C7E+33↑j
                                        ; sub_17C7E+1C7↑j
                inc     si

loc_17E58:                              ; CODE XREF: sub_17C7E+1D↑j
                mov     ax, seg NTERMS
                mov     es, ax
                assume es:nothing
                cmp     word ptr es:NTERMS, si ; int nterms;
                jle     short loc_17E67
                jmp     loc_17C9E
; ---------------------------------------------------------------------------

loc_17E67:                              ; CODE XREF: sub_17C7E+18↑j
                                        ; sub_17C7E+1E4↑j
                push    seg cseg06
                push    offset sub_17C7E
                push    0Ah
                call    RTKICK          ; rtkick(int time, void *rouptr());
                add     sp, 6
                pop     ds
                assume ds:dseg21
                pop     si
                leave
                retf
sub_17C7E       endp


; =============== S U B R O U T I N E =======================================


sub_17E7B       proc far                ; CODE XREF: _INIT__MUTANTS+D27↑P
                                        ; DATA XREF: sub_17E7B+10A↓o
                push    ds
                mov     ax, seg dseg14
                mov     ds, ax
                assume ds:dseg14
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_29884
                push    es:word_29882
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    4Fh ; 'O'
                nop
                push    cs
                call    near ptr sub_18A8A
                pop     cx
                mov     dx, seg dseg19
                mov     es, dx
                mov     es:word_29788, ax
                mov     ax, seg dseg19
                mov     es, ax
                mov     bx, es:word_29788
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:[bx+149Ch]
                nop
                push    cs
                call    near ptr sub_18A8A
                pop     cx
                mov     dx, seg dseg19
                mov     es, dx
                mov     es:word_2978A, ax
                push    5
                push    3
                push    seg dseg19
                push    offset word_29788
                push    seg dseg19
                push    offset byte_29BDE
                call    OBTBTV          ; int obtbtv(char *recptr, char* key, int keynum, int obtopt);
                add     sp, 0Ch
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_29BFC, 0FFFFh
                jz      short loc_17EF6
                jmp     loc_17F82
; ---------------------------------------------------------------------------

loc_17EF6:                              ; CODE XREF: sub_17E7B+76↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29A1E
                nop
                push    cs
                call    near ptr sub_18A8A
                pop     cx
                mov     cx, ax
                mov     bx, cx
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:[bx+159Eh]
                mov     dx, seg dseg19
                mov     es, dx
                mov     es:word_29BFC, ax
                mov     bx, cx
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:[bx+1666h]
                mov     dx, seg dseg19
                mov     es, dx
                mov     es:word_29C08, ax
                push    seg dseg19
                push    offset byte_29BDE
                call    UPDBTV          ; void updbtv(char *recptr);
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:word_29BFC
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                push    398h
                push    cs
                call    near ptr sub_15C18
                add     sp, 6
                push    0
                push    0FFFFh
                push    0FFFFh
                push    seg dseg19
                push    offset byte_29BDE
                push    cs
                call    near ptr sub_175B0
                add     sp, 0Ah

loc_17F82:                              ; CODE XREF: sub_17E7B+78↑j
                push    seg cseg06
                push    offset sub_17E7B
                push    5
                call    RTKICK          ; rtkick(int time, void *rouptr());
                add     sp, 6
                pop     ds
                assume ds:dseg21
                retf
sub_17E7B       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_17F94       proc far                ; CODE XREF: _INIT__MUTANTS+D2C↑P
                                        ; DATA XREF: sub_17F94+2CF↓o

var_8           = dword ptr -8
var_4           = word ptr -4
var_2           = word ptr -2

                enter   8, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg14
                mov     ds, ax
                assume ds:dseg14
                xor     si, si
                xor     di, di
                jmp     short loc_17FCE
; ---------------------------------------------------------------------------

loc_17FA6:                              ; CODE XREF: sub_17F94+44↓j
                push    di
                nop
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                cmp     word ptr es:[bx+0D6h], 2
                jnz     short loc_17FCD
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_2988A
                assume es:nothing
                add     bx, ax
                mov     es:[bx], di
                inc     si

loc_17FCD:                              ; CODE XREF: sub_17F94+23↑j
                inc     di

loc_17FCE:                              ; CODE XREF: sub_17F94+10↑j
                mov     ax, seg NTERMS
                mov     es, ax
                assume es:nothing
                cmp     word ptr es:NTERMS, di ; int nterms;
                jg      short loc_17FA6
                or      si, si
                jg      short loc_17FE1
                jmp     loc_18260
; ---------------------------------------------------------------------------

loc_17FE1:                              ; CODE XREF: sub_17F94+48↑j
                push    si
                nop
                push    cs
                call    near ptr sub_18A8A
                pop     cx
                mov     [bp+var_2], ax
                mov     ax, [bp+var_2]
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_2988A
                assume es:nothing
                add     bx, ax
                push    word ptr es:[bx]
                nop
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                mov     word ptr [bp+var_8+2], dx
                mov     word ptr [bp+var_8], ax
                xor     dx, dx
                xor     di, di

loc_1800F:                              ; CODE XREF: sub_17F94+96↓j
                mov     ax, di
                shl     ax, 1
                les     bx, [bp+var_8]
                add     bx, ax
                cmp     word ptr es:[bx+3Ch], 109h
                jnz     short loc_18026
                mov     dx, 1
                mov     di, 0Ah

loc_18026:                              ; CODE XREF: sub_17F94+8A↑j
                inc     di
                cmp     di, 0Ah
                jl      short loc_1800F
                cmp     dx, 1
                jz      short loc_18034
                jmp     loc_18260
; ---------------------------------------------------------------------------

loc_18034:                              ; CODE XREF: sub_17F94+9B↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     di, es:word_2AED1
                inc     di
                jmp     loc_18251
; ---------------------------------------------------------------------------

loc_18042:                              ; CODE XREF: sub_17F94+2C9↓j
                push    di
                nop
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                cmp     word ptr es:[bx+0D6h], 2
                jz      short loc_18058
                jmp     loc_18250
; ---------------------------------------------------------------------------

loc_18058:                              ; CODE XREF: sub_17F94+BF↑j
                push    di
                nop
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                mov     ax, es:[bx+24h]
                les     bx, [bp+var_8]
                cmp     ax, es:[bx+24h]
                jz      short loc_18073
                jmp     loc_18250
; ---------------------------------------------------------------------------

loc_18073:                              ; CODE XREF: sub_17F94+DA↑j
                push    di
                nop
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                cmp     word ptr es:[bx+0DCh], 0FFFFh
                jz      short loc_18089
                jmp     loc_18250
; ---------------------------------------------------------------------------

loc_18089:                              ; CODE XREF: sub_17F94+F0↑j
                push    di
                nop
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                push    dx
                push    ax
                push    331h
                push    cs
                call    near ptr sub_15C18
                add     sp, 6
                push    0
                push    0FFFFh
                push    0FFFFh
                push    di
                nop
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                push    word ptr es:[bx+24h]
                push    di
                nop
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                push    word ptr es:[bx+22h]
                push    di
                nop
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                push    word ptr es:[bx+20h]
                push    cs
                call    near ptr sub_15677
                add     sp, 6
                push    dx
                push    ax
                push    cs
                call    near ptr sub_175B0
                add     sp, 0Ah
                push    di
                nop
                push    cs
                call    near ptr sub_1A663
                pop     cx
                push    di
                nop
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                les     bx, [bp+var_8]
                mov     bx, es:[bx+20h]
                mov     es, dx
                xchg    ax, bx
                mov     es:[bx+20h], ax
                push    di
                nop
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                les     bx, [bp+var_8]
                mov     bx, es:[bx+22h]
                mov     es, dx
                xchg    ax, bx
                mov     es:[bx+22h], ax
                push    di
                nop
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                mov     si, es:[bx+24h]
                push    si
                nop
                push    cs
                call    near ptr sub_1A633
                pop     cx
                mov     [bp+var_4], ax
                push    si
                nop
                push    cs
                call    near ptr sub_1A075
                pop     cx
                mov     bx, [bp+var_4]
                shl     bx, 1
                add     ax, bx
                push    dx
                push    ax
                push    di
                nop
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                mov     ax, es:[bx+20h]
                pop     bx
                pop     es
                mov     es:[bx], ax
                push    si
                nop
                push    cs
                call    near ptr sub_1A075
                pop     cx
                mov     bx, [bp+var_4]
                shl     bx, 1
                add     ax, bx
                push    dx
                push    ax
                push    di
                nop
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                mov     ax, es:[bx+22h]
                pop     bx
                pop     es
                mov     es:[bx+190h], ax
                push    si
                nop
                push    cs
                call    near ptr sub_1A075
                pop     cx
                mov     bx, [bp+var_4]
                shl     bx, 1
                add     ax, bx
                mov     bx, ax
                mov     es, dx
                mov     es:[bx+320h], di
                push    di
                nop
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                push    dx
                push    ax
                push    332h
                push    cs
                call    near ptr sub_15C18
                add     sp, 6
                push    0
                push    0FFFFh
                push    0FFFFh
                les     bx, [bp+var_8]
                push    word ptr es:[bx+24h]
                les     bx, [bp+var_8]
                push    word ptr es:[bx+22h]
                les     bx, [bp+var_8]
                push    word ptr es:[bx+20h]
                push    cs
                call    near ptr sub_15677
                add     sp, 6
                push    dx
                push    ax
                push    cs
                call    near ptr sub_175B0
                add     sp, 0Ah
                les     bx, [bp+var_8]
                mov     ax, es:[bx+0E0h]
                and     ax, 4
                or      ax, 0
                jnz     short loc_18246
                push    word ptr [bp+var_8+2]
                push    word ptr [bp+var_8]
                push    di
                nop
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                push    dx
                push    ax
                push    342h
                push    cs
                call    near ptr sub_15C18
                add     sp, 0Ah
                push    0
                push    0FFFFh
                push    0FFFFh
                les     bx, [bp+var_8]
                push    word ptr es:[bx+24h]
                les     bx, [bp+var_8]
                push    word ptr es:[bx+22h]
                les     bx, [bp+var_8]
                push    word ptr es:[bx+20h]
                push    cs
                call    near ptr sub_15677
                add     sp, 6
                push    dx
                push    ax
                push    cs
                call    near ptr sub_175B0
                add     sp, 0Ah
                push    di
                nop
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                mov     bx, [bp+var_2]
                shl     bx, 1
                mov     cx, seg dseg19
                mov     es, cx
                assume es:dseg19
                les     si, es:dword_2988A
                assume es:nothing
                add     si, bx
                mov     bx, es:[si]
                mov     es, dx
                xchg    ax, bx
                mov     es:[bx+0DCh], ax
                push    di
                nop
                push    cs
                call    near ptr sub_1A77E
                pop     cx

loc_18246:                              ; CODE XREF: sub_17F94+242↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     di, es:word_2AECF

loc_18250:                              ; CODE XREF: sub_17F94+C1↑j
                                        ; sub_17F94+DC↑j ...
                inc     di

loc_18251:                              ; CODE XREF: sub_17F94+AB↑j
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AECF, di
                jle     short loc_18260
                jmp     loc_18042
; ---------------------------------------------------------------------------

loc_18260:                              ; CODE XREF: sub_17F94+4A↑j
                                        ; sub_17F94+9D↑j ...
                push    seg cseg06
                push    offset sub_17F94
                push    0Ah
                call    RTKICK          ; rtkick(int time, void *rouptr());
                add     sp, 6
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_17F94       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_18275       proc far                ; CODE XREF: sub_A9AF+2A1↑P
                                        ; sub_163FE+1E7↑p ...

var_6           = word ptr -6
var_4           = dword ptr -4
arg_0           = word ptr  6

                enter   6, 0
                push    ds
                mov     ax, seg dseg14
                mov     ds, ax
                assume ds:dseg14
                push    [bp+arg_0]
                nop
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                mov     word ptr [bp+var_4+2], dx
                mov     word ptr [bp+var_4], ax
                xor     cx, cx
                les     bx, [bp+var_4]
                assume es:nothing
                cmp     word ptr es:[bx+8Ch], 0FFFFh
                jle     short loc_182FB
                les     bx, [bp+var_4]
                mov     ax, es:[bx+8Ch]
                imul    ax, 32h ; '2'
                mov     [bp+var_6], ax
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29BDA
                assume es:nothing
                add     bx, ax
                xor     cx, cx
                add     cx, es:[bx+18h]
                les     bx, [bp+var_4]
                mov     ax, 64h ; 'd'
                sub     ax, es:[bx+8Eh]
                mov     bx, 0Ah
                cwd
                idiv    bx
                sub     cx, ax
                or      cx, cx
                jge     short loc_182D4
                xor     cx, cx

loc_182D4:                              ; CODE XREF: sub_18275+5B↑j
                les     bx, [bp+var_4]
                cmp     word ptr es:[bx+8Eh], 64h ; 'd'
                jle     short loc_182FB
                les     bx, [bp+var_4]
                add     cx, es:[bx+8Eh]
                add     cx, 0FF9Ch
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29BDA
                assume es:nothing
                add     bx, [bp+var_6]
                add     cx, es:[bx+1Ah]

loc_182FB:                              ; CODE XREF: sub_18275+24↑j
                                        ; sub_18275+68↑j
                les     bx, [bp+var_4]
                mov     ax, es:[bx+3Ah]
                mov     bx, 0Ah
                cwd
                idiv    bx
                add     cx, ax
                mov     ax, cx
                pop     ds
                assume ds:dseg21
                leave
                retf
sub_18275       endp


; =============== S U B R O U T I N E =======================================


sub_1830F       proc far                ; CODE XREF: sub_A9AF+369↑P
                push    ds
                mov     ax, seg dseg14
                mov     ds, ax
                assume ds:dseg14
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+0D0h], 0FFFFh
                jnz     short loc_18336
                push    ds
                push    offset aNoSpellMemoriz ; "No spell memorized."

loc_1832B:                              ; CODE XREF: sub_1830F+74↓j
                                        ; sub_1830F+9E↓j
                call    PRF             ; prf(string);
                add     sp, 4
                jmp     loc_183CB
; ---------------------------------------------------------------------------

loc_18336:                              ; CODE XREF: sub_1830F+16↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+0D0h]
                imul    ax, 36h ; '6'
                add     ax, 0FDEh
                push    seg dseg19
                push    ax
                push    ds
                push    offset aS_12    ; "%s: "
                call    PRF             ; prf(string);
                add     sp, 8
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+0D2h], 1
                jge     short loc_18385
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+0CEh], 0
                jle     short loc_18385
                push    ds
                push    offset aCasted  ; "CASTED."
                jmp     short loc_1832B
; ---------------------------------------------------------------------------

loc_18385:                              ; CODE XREF: sub_1830F+5C↑j
                                        ; sub_1830F+6E↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+0D2h], 1
                jge     short loc_183B0
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+0CEh], 0
                jnz     short loc_183B0
                push    ds
                push    offset aReady   ; "READY."
                jmp     loc_1832B
; ---------------------------------------------------------------------------

loc_183B0:                              ; CODE XREF: sub_1830F+86↑j
                                        ; sub_1830F+98↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+0D2h]
                push    ds
                push    offset aMemorizingD ; "(memorizing %d)"
                call    PRF             ; prf(string);
                add     sp, 6

loc_183CB:                              ; CODE XREF: sub_1830F+24↑j
                push    ds
                push    offset asc_25C6A ; "\r"
                call    PRF             ; prf(string);
                add     sp, 4
                pop     ds
                assume ds:dseg21
                retf
sub_1830F       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_183D9       proc far                ; CODE XREF: sub_125A2+258↑P
                                        ; sub_1282B+2E3↑P ...

var_6           = dword ptr -6
var_2           = word ptr -2
arg_0           = word ptr  6

                enter   6, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg14
                mov     ds, ax
                assume ds:dseg14
                push    [bp+arg_0]
                nop
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                mov     word ptr [bp+var_6+2], dx
                mov     word ptr [bp+var_6], ax
                les     bx, [bp+var_6]
                push    word ptr es:[bx+24h]
                les     bx, [bp+var_6]
                push    word ptr es:[bx+22h]
                les     bx, [bp+var_6]
                push    word ptr es:[bx+20h]
                push    cs
                call    near ptr sub_15677
                add     sp, 6
                push    dx
                push    ax
                push    cs
                call    near ptr sub_15D7B
                add     sp, 4
                les     bx, [bp+var_6]
                mov     ax, es:[bx+8Ch]
                les     bx, [bp+var_6]
                mov     es:[bx+4Eh], ax
                les     bx, [bp+var_6]
                mov     ax, es:[bx+8Eh]
                les     bx, [bp+var_6]
                mov     es:[bx+62h], ax
                les     bx, [bp+var_6]
                mov     word ptr es:[bx+4Ch], 2
                les     bx, [bp+var_6]
                mov     ax, es:[bx+1Eh]
                les     bx, [bp+var_6]
                mov     es:[bx+60h], ax
                les     bx, [bp+var_6]
                mov     word ptr es:[bx+0D4h], 0
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_2AED1
                cmp     ax, [bp+arg_0]
                jle     short loc_184C1
                mov     ax, seg dseg19
                mov     es, ax
                mov     di, es:word_2AED5
                mov     ax, seg dseg19
                mov     dx, [bp+arg_0]
                mov     es, ax
                mov     es:word_2AED5, dx
                push    [bp+arg_0]
                nop
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                mov     bx, seg dseg19
                mov     es, bx
                mov     word ptr es:dword_29DD4+2, dx
                mov     word ptr es:dword_29DD4, ax
                call    sub_1D92E
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_2AED5, di
                push    di
                nop
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                mov     bx, seg dseg19
                mov     es, bx
                mov     word ptr es:dword_29DD4+2, dx
                mov     word ptr es:dword_29DD4, ax
                les     bx, [bp+var_6]
                assume es:nothing
                mov     word ptr es:[bx+60h], 6Fh ; 'o'

loc_184C1:                              ; CODE XREF: sub_183D9+8B↑j
                mov     [bp+var_2], 0

loc_184C6:                              ; CODE XREF: sub_183D9+1CD↓j
                mov     ax, [bp+var_2]
                shl     ax, 1
                les     bx, [bp+var_6]
                add     bx, ax
                cmp     word ptr es:[bx+3Ch], 1
                jg      short loc_184DA
                jmp     loc_1859D
; ---------------------------------------------------------------------------

loc_184DA:                              ; CODE XREF: sub_183D9+FC↑j
                xor     di, di

loc_184DC:                              ; CODE XREF: sub_183D9+1C1↓j
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     word ptr es:[bx+190Ch], 0FFFFh
                jz      short loc_184F0
                jmp     loc_18594
; ---------------------------------------------------------------------------

loc_184F0:                              ; CODE XREF: sub_183D9+112↑j
                push    word ptr [bp+var_6+2]
                push    word ptr [bp+var_6]
                mov     ax, [bp+var_2]
                shl     ax, 1
                les     bx, [bp+var_6]
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                push    0
                mov     ax, [bp+var_2]
                shl     ax, 1
                les     bx, [bp+var_6]
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                push    cs
                call    near ptr sub_15560
                add     sp, 6
                push    dx
                push    ax
                push    ds
                push    offset aSSIsFallingFro ; "\r%s%s is falling from %s's body!\r***"
                call    PRF             ; prf(string);
                add     sp, 10h
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, [bp+var_2]
                shl     dx, 1
                les     si, [bp+var_6]
                assume es:nothing
                add     si, dx
                mov     dx, es:[si+3Ch]
                mov     es, ax
                assume es:dseg19
                mov     es:[bx+190Ch], dx
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, [bp+var_2]
                shl     dx, 1
                les     si, [bp+var_6]
                assume es:nothing
                add     si, dx
                mov     dx, es:[si+50h]
                mov     es, ax
                assume es:dseg19
                mov     es:[bx+1918h], dx
                mov     di, 6

loc_18594:                              ; CODE XREF: sub_183D9+114↑j
                inc     di
                cmp     di, 6
                jge     short loc_1859D
                jmp     loc_184DC
; ---------------------------------------------------------------------------

loc_1859D:                              ; CODE XREF: sub_183D9+FE↑j
                                        ; sub_183D9+1BF↑j
                inc     [bp+var_2]
                cmp     [bp+var_2], 0Ah
                jge     short loc_185A9
                jmp     loc_184C6
; ---------------------------------------------------------------------------

loc_185A9:                              ; CODE XREF: sub_183D9+1CB↑j
                push    word ptr [bp+var_6+2]
                push    word ptr [bp+var_6]
                push    43Fh
                push    cs
                call    near ptr sub_15C18
                add     sp, 6
                push    0
                push    0FFFFh
                push    0FFFFh
                les     bx, [bp+var_6]
                assume es:nothing
                push    word ptr es:[bx+24h]
                les     bx, [bp+var_6]
                push    word ptr es:[bx+22h]
                les     bx, [bp+var_6]
                push    word ptr es:[bx+20h]
                push    cs
                call    near ptr sub_15677
                add     sp, 6
                push    dx
                push    ax
                push    cs
                call    near ptr sub_175B0
                add     sp, 0Ah
                push    cs
                call    near ptr sub_15DD6
                mov     [bp+var_2], 0
                jmp     short loc_1864A
; ---------------------------------------------------------------------------

loc_185EF:                              ; CODE XREF: sub_183D9+27D↓j
                push    [bp+var_2]
                nop
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                cmp     word ptr es:[bx+0D6h], 2
                jnz     short loc_18647
                push    [bp+var_2]
                nop
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                mov     ax, es:[bx+0DCh]
                cmp     ax, [bp+arg_0]
                jnz     short loc_18647
                push    [bp+var_2]
                nop
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                mov     word ptr es:[bx+0DCh], 0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_2AED1
                dec     ax
                cmp     ax, [bp+var_2]
                jge     short loc_18647
                push    [bp+var_2]
                call    sub_1FF54
                pop     cx

loc_18647:                              ; CODE XREF: sub_183D9+229↑j
                                        ; sub_183D9+240↑j ...
                inc     [bp+var_2]

loc_1864A:                              ; CODE XREF: sub_183D9+214↑j
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:word_2AECF
                cmp     ax, [bp+var_2]
                jg      short loc_185EF
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:word_2AED1
                dec     ax
                cmp     ax, [bp+arg_0]
                jge     short loc_18697
                push    [bp+arg_0]
                nop
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                mov     word ptr es:[bx+0D6h], 0
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_2AED1
                cmp     ax, [bp+arg_0]
                jl      short loc_1868C
                jmp     loc_18725
; ---------------------------------------------------------------------------

loc_1868C:                              ; CODE XREF: sub_183D9+2AE↑j
                push    [bp+arg_0]
                nop
                push    cs
                call    near ptr sub_1A1CA
                jmp     loc_18724
; ---------------------------------------------------------------------------

loc_18697:                              ; CODE XREF: sub_183D9+28C↑j
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:word_2AEB9
                cmp     ax, [bp+arg_0]
                jnz     short loc_1871C
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AEB9
                call    STOP_POLLING    ; void stop_polling(int unum);
                pop     cx
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_2AEB9, 0FFFFh
                push    [bp+arg_0]
                nop
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                mov     word ptr es:[bx+0D6h], 3
                xor     di, di
                jmp     short loc_18710
; ---------------------------------------------------------------------------

loc_186D9:                              ; CODE XREF: sub_183D9+341↓j
                push    di
                nop
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                cmp     word ptr es:[bx+0D6h], 2
                jnz     short loc_1870F
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:word_2AEB9, di
                push    seg cseg08
                push    offset sub_1EA0C
                push    di
                call    BEGIN_POLLING   ; void begin_polling(int unum,void (*rouptr)());
                add     sp, 6
                mov     ax, seg NTERMS
                mov     es, ax
                assume es:nothing
                mov     di, word ptr es:NTERMS ; int nterms;

loc_1870F:                              ; CODE XREF: sub_183D9+311↑j
                inc     di

loc_18710:                              ; CODE XREF: sub_183D9+2FE↑j
                mov     ax, seg NTERMS
                mov     es, ax
                cmp     word ptr es:NTERMS, di ; int nterms;
                jg      short loc_186D9

loc_1871C:                              ; CODE XREF: sub_183D9+2CA↑j
                push    [bp+arg_0]
                nop
                push    cs
                call    near ptr sub_19A05

loc_18724:                              ; CODE XREF: sub_183D9+2BB↑j
                pop     cx

loc_18725:                              ; CODE XREF: sub_183D9+2B0↑j
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_183D9       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1872A       proc far                ; CODE XREF: sub_8B00+2F↑P
                                        ; sub_955B+7FB↑P ...

arg_0           = dword ptr  6

                push    bp
                mov     bp, sp
                push    ds
                mov     ax, seg dseg14
                mov     ds, ax
                assume ds:dseg14
                mov     dx, 0FFFFh
                les     bx, [bp+arg_0]
                assume es:nothing
                cmp     byte ptr es:[bx], 6Eh ; 'n'
                jnz     short loc_18743
                xor     dx, dx
                jmp     short loc_1876B
; ---------------------------------------------------------------------------

loc_18743:                              ; CODE XREF: sub_1872A+13↑j
                les     bx, [bp+arg_0]
                cmp     byte ptr es:[bx], 73h ; 's'
                jnz     short loc_18751
                mov     dx, 1
                jmp     short loc_1876B
; ---------------------------------------------------------------------------

loc_18751:                              ; CODE XREF: sub_1872A+20↑j
                les     bx, [bp+arg_0]
                cmp     byte ptr es:[bx], 65h ; 'e'
                jnz     short loc_1875F
                mov     dx, 2
                jmp     short loc_1876B
; ---------------------------------------------------------------------------

loc_1875F:                              ; CODE XREF: sub_1872A+2E↑j
                les     bx, [bp+arg_0]
                cmp     byte ptr es:[bx], 77h ; 'w'
                jnz     short loc_1876B
                mov     dx, 3

loc_1876B:                              ; CODE XREF: sub_1872A+17↑j
                                        ; sub_1872A+25↑j ...
                mov     ax, dx
                pop     ds
                assume ds:dseg21
                pop     bp
                retf
sub_1872A       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_18770       proc far                ; CODE XREF: mcurou+28F↑P
                                        ; mcurou+394↑P ...

var_68          = byte ptr -68h
var_4           = dword ptr -4
arg_0           = word ptr  6
arg_2           = word ptr  8
arg_4           = word ptr  0Ah
arg_6           = word ptr  0Ch
arg_8           = word ptr  0Eh
arg_A           = word ptr  10h

                enter   68h, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg14
                mov     ds, ax
                assume ds:dseg14
                push    ds
                push    offset aVillageShop ; "Village Shop"
                push    [bp+arg_2]
                push    [bp+arg_0]
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_18795
                jmp     loc_18936
; ---------------------------------------------------------------------------

loc_18795:                              ; CODE XREF: sub_18770+20↑j
                push    64h ; 'd'
                push    [bp+arg_6]
                push    [bp+arg_4]
                push    ss
                lea     ax, [bp+var_68]
                push    ax
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                push    ds
                push    offset aPost    ; "POST"
                push    [bp+arg_6]
                push    [bp+arg_4]
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_187D7
                push    [bp+arg_A]
                push    [bp+arg_8]
                push    ds
                push    offset aLdRibletsHaveB ; "%ld Riblets have been added to your ban"...
                push    ss
                lea     ax, [bp+var_68]
                push    ax
                call    SPRINTF         ; int sprintf(char *str, const char *format, ... );
                add     sp, 0Ch

loc_187D7:                              ; CODE XREF: sub_18770+4E↑j
                xor     di, di
                xor     si, si
                jmp     loc_18874
; ---------------------------------------------------------------------------

loc_187DE:                              ; CODE XREF: sub_18770+110↓j
                push    si
                nop
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                cmp     word ptr es:[bx+0D6h], 2
                jz      short loc_187F4
                jmp     loc_18873
; ---------------------------------------------------------------------------

loc_187F4:                              ; CODE XREF: sub_18770+7F↑j
                push    si
                nop
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                mov     word ptr [bp+var_4+2], dx
                mov     word ptr [bp+var_4], ax
                push    [bp+arg_2]
                push    [bp+arg_0]
                push    word ptr [bp+var_4+2]
                push    word ptr [bp+var_4]
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_18873
                push    ds
                push    offset aPost    ; "POST"
                push    [bp+arg_6]
                push    [bp+arg_4]
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_1884F
                les     bx, [bp+var_4]
                mov     ax, es:[bx+92h]
                mov     dx, es:[bx+90h]
                add     dx, [bp+arg_8]
                adc     ax, [bp+arg_A]
                les     bx, [bp+var_4]
                mov     es:[bx+92h], ax
                mov     es:[bx+90h], dx

loc_1884F:                              ; CODE XREF: sub_18770+BD↑j
                push    ss
                lea     ax, [bp+var_68]
                push    ax
                push    ds
                push    offset aS_0     ; "%s\r"
                call    PRF             ; prf(string);
                add     sp, 8
                push    si
                push    cs
                call    near ptr sub_17567
                pop     cx
                mov     di, 1
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     si, es:word_2AED1

loc_18873:                              ; CODE XREF: sub_18770+81↑j
                                        ; sub_18770+A7↑j
                inc     si

loc_18874:                              ; CODE XREF: sub_18770+6B↑j
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AED1, si
                jle     short loc_18883
                jmp     loc_187DE
; ---------------------------------------------------------------------------

loc_18883:                              ; CODE XREF: sub_18770+10E↑j
                or      di, di
                jz      short loc_1888A
                jmp     loc_18936
; ---------------------------------------------------------------------------

loc_1888A:                              ; CODE XREF: sub_18770+115↑j
                cmp     [bp+arg_A], 0FFFFh
                jnz     short loc_18899
                cmp     [bp+arg_8], 0FFF6h
                jnz     short loc_18899
                jmp     loc_18936
; ---------------------------------------------------------------------------

loc_18899:                              ; CODE XREF: sub_18770+11E↑j
                                        ; sub_18770+124↑j
                push    1Eh
                push    [bp+arg_2]
                push    [bp+arg_0]
                push    seg dseg19
                push    offset unk_29AAA
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                push    64h ; 'd'
                push    ss
                lea     ax, [bp+var_68]
                push    ax
                push    seg dseg19
                push    offset unk_29AC8
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     dx, [bp+arg_A]
                mov     bx, [bp+arg_8]
                mov     es, ax
                mov     es:word_29B2E, dx
                mov     es:word_29B2C, bx
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2987C
                push    es:word_2987A
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    seg dseg19
                push    offset unk_29AAA
                call    INSBTV          ; void insbtv(char *recptr);
                add     sp, 4
                push    ds
                push    offset aPost    ; "POST"
                push    [bp+arg_6]
                push    [bp+arg_4]
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_18936
                push    64h ; 'd'
                push    ds
                push    offset aPost    ; "POST"
                push    seg dseg19
                push    offset unk_29AC8
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                push    seg dseg19
                push    offset unk_29AAA
                call    INSBTV          ; void insbtv(char *recptr);
                add     sp, 4

loc_18936:                              ; CODE XREF: sub_18770+22↑j
                                        ; sub_18770+117↑j ...
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_18770       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1893B       proc far                ; CODE XREF: sttrou+4CF↑P

var_1E          = byte ptr -1Eh

                enter   1Eh, 0
                push    ds
                mov     ax, seg dseg14
                mov     ds, ax
                assume ds:dseg14
                push    0
                push    1Eh
                push    ss
                lea     ax, [bp+var_1E]
                push    ax
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    UACOFF          ; struct usracc *uaptr=uacoff(unum);
                pop     cx
                push    dx
                push    ax
                push    ss
                lea     ax, [bp+var_1E]
                push    ax
                call    STRCPY          ; char* strcpy(char* destination, const char* source );
                add     sp, 8
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2987C
                push    es:word_2987A
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    37h ; '7'
                push    0
                push    ss
                lea     ax, [bp+var_1E]
                push    ax
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jnz     short loc_189A4
                jmp     loc_18A87
; ---------------------------------------------------------------------------

loc_189A4:                              ; CODE XREF: sub_1893B+64↑j
                push    36Dh
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                push    cs
                call    near ptr sub_15C7E
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2987C
                push    es:word_2987A
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4

loc_189CF:                              ; CODE XREF: sub_1893B+134↓j
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    seg dseg19
                push    offset unk_29AAA
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                push    ss
                lea     ax, [bp+var_1E]
                push    ax
                push    seg dseg19
                push    offset unk_29AAA
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_18A72
                push    ds
                push    offset aPost    ; "POST"
                push    seg dseg19
                push    offset unk_29AC8
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_18A4C
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+92h]
                mov     dx, es:[bx+90h]
                mov     bx, seg dseg19
                mov     es, bx
                assume es:dseg19
                add     dx, es:word_29B2C
                adc     ax, es:word_29B2E
                mov     bx, seg dseg19
                mov     es, bx
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     es:[bx+92h], ax
                mov     es:[bx+90h], dx
                jmp     short loc_18A5E
; ---------------------------------------------------------------------------

loc_18A4C:                              ; CODE XREF: sub_1893B+D6↑j
                push    seg dseg19
                push    offset unk_29AC8
                push    ds
                push    offset aS_0     ; "%s\r"
                call    PRF             ; prf(string);
                add     sp, 8

loc_18A5E:                              ; CODE XREF: sub_1893B+10F↑j
                call    DELBTV          ; void delbtv();
                push    38h ; '8'
                call    QNPBTV          ; int qnpbtv (int getopt);
                pop     cx
                or      ax, ax
                jz      short loc_18A72
                jmp     loc_189CF
; ---------------------------------------------------------------------------

loc_18A72:                              ; CODE XREF: sub_1893B+C0↑j
                                        ; sub_1893B+132↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    OUTPRF          ; outprf (unum);
                pop     cx
                call    CLRPRF          ; clrprf()

loc_18A87:                              ; CODE XREF: sub_1893B+66↑j
                pop     ds
                assume ds:dseg21
                leave
                retf
sub_1893B       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_18A8A       proc far                ; CODE XREF: sub_A259+587↑P
                                        ; sub_B378+199↑P ...

arg_0           = word ptr  6

                push    bp
                mov     bp, sp
                push    si
                push    ds
                mov     ax, seg dseg14
                mov     ds, ax
                assume ds:dseg14
                mov     si, [bp+arg_0]
                xor     dx, dx
                or      si, si
                jle     short loc_18ABD
                push    0
                push    8000h
                call    RAND            ; int rand (void);
                cwd
                push    ax
                mov     ax, si
                push    dx
                cwd
                pop     cx
                pop     bx
                call    F_LXMUL
                push    dx
                push    ax
                call    F_LDIV
                mov     dx, ax

loc_18ABD:                              ; CODE XREF: sub_18A8A+11↑j
                mov     ax, dx
                pop     ds
                assume ds:dseg21
                pop     si
                pop     bp
                retf
sub_18A8A       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_18AC3       proc far                ; CODE XREF: sub_C6BB+1F9↑P
                                        ; sub_CBFE+173↑P

var_4           = dword ptr -4
arg_0           = word ptr  6
arg_2           = word ptr  8

                enter   4, 0
                push    ds
                mov     ax, seg dseg14
                mov     ds, ax
                assume ds:dseg14
                push    [bp+arg_0]
                nop
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                mov     word ptr [bp+var_4+2], dx
                mov     word ptr [bp+var_4], ax
                les     bx, [bp+var_4]
                assume es:nothing
                mov     dx, es:[bx+3Ah]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                sub     dx, es:[bx+3Ah]
                cmp     dx, 0Ah
                jge     short loc_18B05
                or      dx, dx
                jle     short loc_18B05
                push    6
                push    cs
                call    near ptr sub_18A8A
                pop     cx
                mov     cx, ax
                jmp     short loc_18B08
; ---------------------------------------------------------------------------

loc_18B05:                              ; CODE XREF: sub_18AC3+31↑j
                                        ; sub_18AC3+35↑j
                mov     cx, 1

loc_18B08:                              ; CODE XREF: sub_18AC3+40↑j
                cmp     cx, 2
                jle     short loc_18B10
                mov     cx, 1

loc_18B10:                              ; CODE XREF: sub_18AC3+48↑j
                mov     ax, [bp+arg_2]
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+50h], 64h ; 'd'
                jle     short loc_18B2B
                mov     cx, 1

loc_18B2B:                              ; CODE XREF: sub_18AC3+63↑j
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, es:word_2AED1
                dec     dx
                mov     es, ax
                cmp     es:word_2AED5, dx
                jle     short loc_18B45
                mov     cx, 1

loc_18B45:                              ; CODE XREF: sub_18AC3+7D↑j
                mov     ax, cx
                pop     ds
                assume ds:dseg21
                leave
                retf
sub_18AC3       endp


; =============== S U B R O U T I N E =======================================


sub_18B4A       proc far                ; CODE XREF: sub_2B24+CE↑P
                push    si
                push    ds
                mov     ax, seg dseg14
                mov     ds, ax
                assume ds:dseg14
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29888
                push    es:word_29886
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                xor     si, si

loc_18B6A:                              ; CODE XREF: sub_18B4A+5B↓j
                push    si
                nop
                push    cs
                call    near ptr sub_18BAA
                pop     cx
                push    1Eh
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    UACOFF          ; struct usracc *uaptr=uacoff(unum);
                pop     cx
                push    dx
                push    ax
                push    seg dseg19
                push    offset unk_29C78
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                push    seg dseg19
                push    offset unk_29C78
                call    INSBTV          ; void insbtv(char *recptr);
                add     sp, 4
                inc     si
                cmp     si, 5
                jl      short loc_18B6A
                pop     ds
                assume ds:dseg21
                pop     si
                retf
sub_18B4A       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_18BAA       proc far                ; CODE XREF: mcurou+33C↑P
                                        ; sub_FABA+15A↑P ...

arg_0           = word ptr  6

                push    bp
                mov     bp, sp
                push    di
                push    ds
                mov     ax, seg dseg14
                mov     ds, ax
                assume ds:dseg14
                mov     cx, [bp+arg_0]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:word_29C96, cx
                mov     bx, cx
                imul    bx, 34h ; '4'
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:[bx+0B0Ch]
                mov     dx, seg dseg19
                mov     es, dx
                mov     es:word_29CAA, ax
                mov     ax, seg dseg19
                mov     es, ax
                mov     bx, es:word_29C96
                imul    bx, 34h ; '4'
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:[bx+0B0Eh]
                mov     dx, seg dseg19
                mov     es, dx
                mov     es:word_29CA8, ax
                mov     ax, seg dseg19
                mov     es, ax
                mov     bx, es:word_29C96
                imul    bx, 34h ; '4'
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:[bx+0B10h]
                mov     dx, seg dseg19
                mov     es, dx
                mov     es:word_29CAC, ax
                mov     ax, seg dseg19
                mov     es, ax
                mov     bx, es:word_29C96
                imul    bx, 34h ; '4'
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:[bx+0B12h]
                mov     dx, seg dseg19
                mov     es, dx
                mov     es:word_29CB2, ax
                mov     ax, seg dseg19
                mov     es, ax
                mov     bx, es:word_29C96
                imul    bx, 34h ; '4'
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:[bx+0B14h]
                mov     dx, seg dseg19
                mov     es, dx
                mov     es:word_29CB0, ax
                mov     ax, seg dseg19
                mov     es, ax
                mov     bx, es:word_29C96
                imul    bx, 34h ; '4'
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:[bx+0B16h]
                mov     dx, seg dseg19
                mov     es, dx
                mov     es:word_29CAE, ax
                mov     ax, seg dseg19
                mov     es, ax
                mov     bx, es:word_29C96
                imul    bx, 34h ; '4'
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:[bx+0B18h]
                mov     dx, seg dseg19
                mov     es, dx
                mov     es:word_29C9E, ax
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29C98, 0
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29C9A, 0
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29C9C, 0
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29CA2, 1
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29CA6, 0
                mov     es:word_29CA4, 0
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:word_29C9E
                mov     dx, seg dseg19
                mov     es, dx
                mov     es:word_29CA0, ax
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29D04, 0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29D06, 0FFFFh
                xor     dx, dx

loc_18D08:                              ; CODE XREF: sub_18BAA+182↓j
                mov     bx, dx
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                mov     word ptr es:[bx+19C4h], 0FFFFh
                mov     bx, dx
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                mov     word ptr es:[bx+19D8h], 0FFFFh
                inc     dx
                cmp     dx, 0Ah
                jl      short loc_18D08
                mov     cx, 14h
                mov     di, 19ECh
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, 0FFFFh
                rep stosw
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29D0A, 0
                mov     es:word_29D08, 0
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29D0E, 0
                mov     es:word_29D0C, 7530h
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29D10, 0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29D12, 0
                pop     ds
                assume ds:dseg21
                pop     di
                pop     bp
                retf
sub_18BAA       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_18D80       proc far                ; CODE XREF: sub_18EAF+1F↓p

var_4           = dword ptr -4
arg_0           = word ptr  6

                enter   4, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg14
                mov     ds, ax
                assume ds:dseg14
                mov     di, [bp+arg_0]
                xor     di, di
                xor     si, si
                jmp     loc_18E19
; ---------------------------------------------------------------------------

loc_18D96:                              ; CODE XREF: sub_18D80+A5↓j
                push    si
                nop
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                cmp     word ptr es:[bx+0D6h], 2
                jnz     short loc_18E18
                push    si
                nop
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                mov     word ptr [bp+var_4+2], dx
                mov     word ptr [bp+var_4], ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+20h]
                les     bx, [bp+var_4]
                cmp     ax, es:[bx+20h]
                jnz     short loc_18E18
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+22h]
                les     bx, [bp+var_4]
                cmp     ax, es:[bx+22h]
                jnz     short loc_18E18
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+24h]
                les     bx, [bp+var_4]
                cmp     ax, es:[bx+24h]
                jnz     short loc_18E18
                les     bx, [bp+var_4]
                mov     ax, es:[bx+0E0h]
                and     ax, 2
                or      ax, 0
                jz      short loc_18E18
                mov     di, 1
                mov     ax, seg NTERMS
                mov     es, ax
                assume es:nothing
                mov     si, word ptr es:NTERMS ; int nterms;

loc_18E18:                              ; CODE XREF: sub_18D80+27↑j
                                        ; sub_18D80+4B↑j ...
                inc     si

loc_18E19:                              ; CODE XREF: sub_18D80+13↑j
                mov     ax, seg NTERMS
                mov     es, ax
                cmp     word ptr es:NTERMS, si ; int nterms;
                jle     short loc_18E28
                jmp     loc_18D96
; ---------------------------------------------------------------------------

loc_18E28:                              ; CODE XREF: sub_18D80+A3↑j
                mov     ax, di
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_18D80       endp


; =============== S U B R O U T I N E =======================================


sub_18E2F       proc far                ; CODE XREF: sub_8B00+53B↑P
                push    ds
                mov     ax, seg dseg14
                mov     ds, ax
                assume ds:dseg14
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+0E0h]
                and     ax, 2
                or      ax, 0
                jz      short loc_18EAD
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    440h
                push    cs
                call    near ptr sub_15C18
                add     sp, 6
                push    0
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                push    cs
                call    near ptr sub_15677
                add     sp, 6
                push    dx
                push    ax
                push    cs
                call    near ptr sub_175B0
                add     sp, 0Ah

loc_18EAD:                              ; CODE XREF: sub_18E2F+1B↑j
                pop     ds
                assume ds:dseg21
                retf
sub_18E2F       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_18EAF       proc far                ; CODE XREF: sub_8B00+21E↑P
                                        ; sub_8B00+531↑P ...

arg_0           = word ptr  6

                push    bp
                mov     bp, sp
                push    si
                push    ds
                mov     ax, seg dseg14
                mov     ds, ax
                assume ds:dseg14
                mov     si, [bp+arg_0]
                xor     si, si
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     es:word_29BFA, 0
                jle     short loc_18ED9
                push    0
                push    cs
                call    near ptr sub_18D80
                pop     cx
                or      ax, ax
                jnz     short loc_18ED9
                mov     si, 1

loc_18ED9:                              ; CODE XREF: sub_18EAF+1A↑j
                                        ; sub_18EAF+25↑j
                mov     ax, si
                pop     ds
                assume ds:dseg21
                pop     si
                pop     bp
                retf
sub_18EAF       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_18EDF       proc far                ; CODE XREF: sub_8B00+175↑P
                                        ; sub_1158D+221↑P ...

var_46          = byte ptr -46h
var_A           = word ptr -0Ah
var_8           = byte ptr -8
arg_0           = word ptr  6
arg_2           = word ptr  8
arg_4           = word ptr  0Ah

                enter   46h, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg14
                mov     ds, ax
                assume ds:dseg14
                lea     ax, [bp+var_8]
                push    ss
                push    ax
                push    ds
                push    offset unk_25AC5
                mov     cx, 8
                call    F_SCOPY
                lea     ax, [bp+var_46]
                push    ss
                push    ax
                push    ds
                push    offset off_25ACD
                mov     cx, 3Ch ; '<'
                call    F_SCOPY
                xor     si, si

loc_18F0F:                              ; CODE XREF: sub_18EDF+148↓j
                mov     di, 1
                cmp     si, 1
                jz      short loc_18F1C
                cmp     si, 3
                jnz     short loc_18F1F

loc_18F1C:                              ; CODE XREF: sub_18EDF+36↑j
                mov     di, 0FFFFh

loc_18F1F:                              ; CODE XREF: sub_18EDF+3B↑j
                mov     bx, si
                shl     bx, 1
                lea     ax, [bp+var_8]
                add     bx, ax
                mov     word ptr ss:[bx], 0
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, [bp+arg_4]
                mov     es, ax
                add     dx, es:[bx+18h]
                push    dx
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, [bp+arg_2]
                mov     es, ax
                add     dx, es:[bx+10h]
                push    dx
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, [bp+arg_0]
                mov     es, ax
                add     dx, es:[bx+8]
                push    dx
                push    cs
                call    near ptr sub_15677
                add     sp, 6
                push    dx
                push    ax
                push    cs
                call    near ptr sub_15D7B
                add     sp, 4
                cmp     ax, 1
                jz      short loc_18F7B
                jmp     loc_19021
; ---------------------------------------------------------------------------

loc_18F7B:                              ; CODE XREF: sub_18EDF+97↑j
                mov     bx, si
                add     bx, di
                shl     bx, 1
                mov     [bp+var_A], bx
                mov     ax, seg dseg19
                mov     es, ax
                cmp     word ptr es:[bx+18FCh], 0
                jz      short loc_18F94
                jmp     loc_19021
; ---------------------------------------------------------------------------

loc_18F94:                              ; CODE XREF: sub_18EDF+B0↑j
                mov     bx, [bp+var_A]
                mov     ax, seg dseg19
                mov     es, ax
                mov     word ptr es:[bx+18FCh], 1
                push    cs
                call    near ptr sub_15DD6
                mov     bx, si
                shl     bx, 1
                lea     ax, [bp+var_8]
                add     bx, ax
                mov     word ptr ss:[bx], 1
                mov     bx, si
                add     bx, di
                shl     bx, 2
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:[bx+28h]
                push    word ptr es:[bx+26h]
                push    441h
                push    cs
                call    near ptr sub_15C18
                add     sp, 6
                push    0
                push    0FFFFh
                push    0FFFFh
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, [bp+arg_4]
                mov     es, ax
                add     dx, es:[bx+18h]
                push    dx
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, [bp+arg_2]
                mov     es, ax
                add     dx, es:[bx+10h]
                push    dx
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, [bp+arg_0]
                mov     es, ax
                add     dx, es:[bx+8]
                push    dx
                push    cs
                call    near ptr sub_15677
                add     sp, 6
                push    dx
                push    ax
                push    cs
                call    near ptr sub_175B0
                add     sp, 0Ah

loc_19021:                              ; CODE XREF: sub_18EDF+99↑j
                                        ; sub_18EDF+B2↑j
                inc     si
                cmp     si, 4
                jge     short loc_1902A
                jmp     loc_18F0F
; ---------------------------------------------------------------------------

loc_1902A:                              ; CODE XREF: sub_18EDF+146↑j
                xor     di, di
                push    [bp+arg_4]
                push    [bp+arg_2]
                push    [bp+arg_0]
                push    cs
                call    near ptr sub_15677
                add     sp, 6
                push    dx
                push    ax
                push    cs
                call    near ptr sub_15D7B
                add     sp, 4
                or      ax, ax
                jz      short loc_1904C
                jmp     loc_1914B
; ---------------------------------------------------------------------------

loc_1904C:                              ; CODE XREF: sub_18EDF+168↑j
                push    0Ah
                push    [bp+arg_4]
                push    [bp+arg_2]
                push    [bp+arg_0]
                push    cs
                call    near ptr sub_15677
                add     sp, 6
                push    dx
                push    ax
                push    seg dseg19
                push    offset byte_29BDE
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29BF4, 0
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29BF6, 0
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29BF8, 0
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29BFA, 0
                push    0
                push    0Ah
                push    seg dseg19
                push    offset unk_29C14
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                xor     si, si

loc_190B2:                              ; CODE XREF: sub_18EDF+1F1↓j
                mov     bx, si
                shl     bx, 1
                lea     ax, [bp+var_8]
                add     bx, ax
                mov     ax, ss:[bx]
                mov     bx, si
                shl     bx, 1
                mov     dx, seg dseg19
                mov     es, dx
                mov     es:[bx+18FCh], ax
                inc     si
                cmp     si, 4
                jl      short loc_190B2
                xor     si, si

loc_190D4:                              ; CODE XREF: sub_18EDF+219↓j
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                mov     word ptr es:[bx+190Ch], 0FFFFh
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                mov     word ptr es:[bx+1918h], 0FFFFh
                inc     si
                cmp     si, 6
                jl      short loc_190D4
                push    1Eh
                push    ds
                push    (offset aAeiou+5) ; ""
                push    seg dseg19
                push    offset unk_29C1E
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                push    0
                push    32h ; '2'
                push    seg dseg19
                push    offset unk_29C3C
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                push    0Fh
                push    cs
                call    near ptr sub_18A8A
                pop     cx
                shl     ax, 2
                lea     dx, [bp+var_46]
                add     ax, dx
                mov     bx, ax
                push    word ptr ss:[bx+2]
                push    word ptr ss:[bx]
                push    seg dseg19
                push    offset unk_29C3C
                call    STRCAT          ; char *strcat(char *destination, const char *source );
                add     sp, 8
                mov     di, 1
                jmp     short loc_19172
; ---------------------------------------------------------------------------

loc_1914B:                              ; CODE XREF: sub_18EDF+16A↑j
                xor     si, si

loc_1914D:                              ; CODE XREF: sub_18EDF+291↓j
                mov     bx, si
                shl     bx, 1
                lea     ax, [bp+var_8]
                add     bx, ax
                cmp     word ptr ss:[bx], 1
                jnz     short loc_1916C
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                mov     word ptr es:[bx+18FCh], 1

loc_1916C:                              ; CODE XREF: sub_18EDF+27B↑j
                inc     si
                cmp     si, 4
                jl      short loc_1914D

loc_19172:                              ; CODE XREF: sub_18EDF+26A↑j
                push    cs
                call    near ptr sub_15DD6
                or      di, di
                jg      short loc_1917D
                jmp     loc_192E3
; ---------------------------------------------------------------------------

loc_1917D:                              ; CODE XREF: sub_18EDF+299↑j
                push    6
                push    cs
                call    near ptr sub_18A8A
                pop     cx
                or      ax, ax
                jz      short loc_1918B
                jmp     loc_192A4
; ---------------------------------------------------------------------------

loc_1918B:                              ; CODE XREF: sub_18EDF+2A7↑j
                push    seg dseg19
                push    offset byte_29BDE
                nop
                push    cs
                call    near ptr sub_1968E
                add     sp, 4
                push    6
                push    cs
                call    near ptr sub_18A8A
                pop     cx
                or      ax, ax
                jz      short loc_191A7
                jmp     loc_192E3
; ---------------------------------------------------------------------------

loc_191A7:                              ; CODE XREF: sub_18EDF+2C3↑j
                push    0
                push    32h ; '2'
                push    seg dseg19
                push    offset unk_29C3C
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                push    ds
                push    offset aCityTradingCen ; "City Trading Centre"
                push    seg dseg19
                push    offset unk_29C3C
                call    STRCAT          ; char *strcat(char *destination, const char *source );
                add     sp, 8
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29BF6, 1
                push    cs
                call    near ptr sub_15DD6
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29880
                push    es:word_2987E
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    37h ; '7'
                push    0
                push    seg dseg19
                push    offset byte_29BDE
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jnz     short loc_1920B
                jmp     loc_192E3
; ---------------------------------------------------------------------------

loc_1920B:                              ; CODE XREF: sub_18EDF+327↑j
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    seg dseg19
                push    offset byte_29B40
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29BC2, 3B9Ah
                mov     es:word_29BC0, 0C9FFh
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:word_29A2A
                mov     dx, es:word_29A28
                mov     bx, seg dseg19
                mov     es, bx
                mov     es:word_29BC6, ax
                mov     es:word_29BC4, dx
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:word_29A26
                mov     dx, es:word_29A24
                mov     bx, seg dseg19
                mov     es, bx
                mov     es:word_29BCA, ax
                mov     es:word_29BC8, dx
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29BCE, 5F5h
                mov     es:word_29BCC, 0E0FFh
                push    1Eh
                push    ds
                push    offset aVillageShop ; "Village Shop"
                push    seg dseg19
                push    offset unk_29B4A
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                push    seg dseg19
                push    offset byte_29B40
                call    UPDBTV          ; void updbtv(char *recptr);
                add     sp, 4
                jmp     short loc_192E3
; ---------------------------------------------------------------------------

loc_192A4:                              ; CODE XREF: sub_18EDF+2A9↑j
                push    6
                push    cs
                call    near ptr sub_18A8A
                pop     cx
                or      ax, ax
                jnz     short loc_192E3
                push    0
                push    32h ; '2'
                push    seg dseg19
                push    offset unk_29C3C
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                push    ds
                push    offset aYouReInAMainte ; "You're in a maintenance shop."
                push    seg dseg19
                push    offset unk_29C3C
                call    STRCAT          ; char *strcat(char *destination, const char *source );
                add     sp, 8
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29BF8, 1
                push    cs
                call    near ptr sub_15DD6

loc_192E3:                              ; CODE XREF: sub_18EDF+29B↑j
                                        ; sub_18EDF+2C5↑j ...
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_18EDF       endp


; =============== S U B R O U T I N E =======================================


sub_192E8       proc far                ; CODE XREF: sttrou+4AC↑P
                push    si
                push    ds
                mov     ax, seg dseg14
                mov     ds, ax
                assume ds:dseg14
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    UACOFF          ; struct usracc *uaptr=uacoff(unum);
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                cmp     byte ptr es:[bx+0D5h], 4Dh ; 'M'
                jnz     short loc_1931E
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     word ptr es:[bx+0C8h], 0
                jmp     short loc_1932F
; ---------------------------------------------------------------------------

loc_1931E:                              ; CODE XREF: sub_192E8+21↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     word ptr es:[bx+0C8h], 1

loc_1932F:                              ; CODE XREF: sub_192E8+34↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_29864
                push    es:word_29862
                call    SETMBK          ; FILE *setmbk(mbkptr);
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     word ptr es:[bx+0CAh], 0
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     word ptr es:[bx+0DCh], 0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     word ptr es:[bx+0CCh], 0
                xor     si, si

loc_1937B:                              ; CODE XREF: sub_192E8+F3↓j
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+3Ch], 0FFFFh
                jle     short loc_193D7
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+0CCh]
                mov     dx, si
                shl     dx, 1
                mov     bx, seg dseg19
                mov     es, bx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, dx
                mov     dx, es:[bx+3Ch]
                imul    dx, 32h ; '2'
                mov     bx, seg dseg19
                mov     es, bx
                assume es:dseg19
                les     bx, es:dword_29BDA
                assume es:nothing
                add     bx, dx
                add     ax, es:[bx+28h]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     es:[bx+0CCh], ax

loc_193D7:                              ; CODE XREF: sub_192E8+A8↑j
                inc     si
                cmp     si, 0Ah
                jl      short loc_1937B
                xor     si, si

loc_193DF:                              ; CODE XREF: sub_192E8+122↓j
                push    0
                push    14h
                mov     ax, si
                imul    ax, 14h
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29DD4
                add     dx, ax
                add     dx, 0E8h
                push    word ptr es:dword_29DD4+2
                push    dx
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                inc     si
                cmp     si, 3
                jl      short loc_193DF
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     word ptr es:[bx+0E2h], 0
                mov     word ptr es:[bx+0E0h], 20h ; ' '
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     word ptr es:[bx+0CEh], 0
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     word ptr es:[bx+0D0h], 0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     word ptr es:[bx+0D2h], 0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     word ptr es:[bx+0D4h], 0
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     word ptr es:[bx+0D8h], 0
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                nop
                push    cs
                call    near ptr sub_1A633
                pop     cx
                mov     si, ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                nop
                push    cs
                call    near ptr sub_1A075
                pop     cx
                mov     bx, si
                shl     bx, 1
                add     ax, bx
                mov     bx, seg dseg19
                mov     es, bx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     bx, es:[bx+20h]
                mov     es, dx
                xchg    ax, bx
                mov     es:[bx], ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                nop
                push    cs
                call    near ptr sub_1A075
                pop     cx
                mov     bx, si
                shl     bx, 1
                add     ax, bx
                mov     bx, seg dseg19
                mov     es, bx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     bx, es:[bx+22h]
                mov     es, dx
                xchg    ax, bx
                mov     es:[bx+190h], ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                nop
                push    cs
                call    near ptr sub_1A075
                pop     cx
                mov     bx, si
                shl     bx, 1
                add     ax, bx
                mov     bx, seg dseg19
                mov     es, bx
                assume es:dseg19
                mov     bx, es:word_2AED5
                mov     es, dx
                assume es:nothing
                xchg    ax, bx
                mov     es:[bx+320h], ax
                pop     ds
                assume ds:dseg21
                pop     si
                retf
sub_192E8       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1951C       proc far                ; CODE XREF: huprou:loc_1A88↑P
                                        ; sub_93D8+112↑P

var_15C         = byte ptr -15Ch
var_13E         = word ptr -13Eh

                enter   15Ch, 0
                push    si
                push    ds
                mov     ax, seg dseg14
                mov     ds, ax
                assume ds:dseg14
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                nop
                push    cs
                call    near ptr sub_1A852
                pop     cx
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+0CEh], 0
                jle     short loc_1954E
                call    sub_1D92E

loc_1954E:                              ; CODE XREF: sub_1951C+2B↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_29888
                push    es:word_29886
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    37h ; '7'
                push    0
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jz      short loc_195FE
                xor     si, si

loc_19586:                              ; CODE XREF: sub_1951C+C7↓j
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    ss
                lea     ax, [bp+var_15C]
                push    ax
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+1Eh]
                cmp     ax, [bp+var_13E]
                jnz     short loc_195B6

loc_195B1:                              ; CODE XREF: sub_1951C+AC↓j
                mov     si, 1
                jmp     short loc_195E1
; ---------------------------------------------------------------------------

loc_195B6:                              ; CODE XREF: sub_1951C+93↑j
                push    6
                push    ss
                lea     ax, [bp+var_15C]
                push    ax
                call    ANPBTV          ; int anpbtv (void *recptr, int anpopt);
                add     sp, 6
                or      ax, ax
                jz      short loc_195B1
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    ss
                lea     ax, [bp+var_15C]
                push    ax
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah

loc_195E1:                              ; CODE XREF: sub_1951C+98↑j
                or      si, si
                jz      short loc_19586
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                call    UPDBTV          ; void updbtv(char *recptr);
                add     sp, 4
                jmp     short loc_1960E
; ---------------------------------------------------------------------------

loc_195FE:                              ; CODE XREF: sub_1951C+66↑j
                push    ds
                push    offset aMutantsCantSav ; "MUTANTS->CANT SAVE PLAYER"
                push    ds
                push    offset aMutantError ; "MUTANT ERROR"
                call    SHOCST          ; void shocst(char *summary, char *detail, p1, p1,...,pn);
                add     sp, 8

loc_1960E:                              ; CODE XREF: sub_1951C+E0↑j
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     word ptr es:[bx+0DCh], 0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_29888
                push    es:word_29886
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                xor     si, si
                jmp     short loc_1967E
; ---------------------------------------------------------------------------

loc_1963A:                              ; CODE XREF: sub_1951C+16C↓j
                push    si
                nop
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                mov     ax, es:[bx+0DCh]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                cmp     ax, es:word_2AED5
                jnz     short loc_1967D
                push    si
                nop
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                mov     word ptr es:[bx+0DCh], 0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_2AED1
                dec     ax
                cmp     ax, si
                jge     short loc_1967D
                push    si
                call    sub_1FF54
                pop     cx

loc_1967D:                              ; CODE XREF: sub_1951C+138↑j
                                        ; sub_1951C+158↑j
                inc     si

loc_1967E:                              ; CODE XREF: sub_1951C+11C↑j
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AECF, si
                jg      short loc_1963A
                pop     ds
                assume ds:dseg21
                pop     si
                leave
                retf
sub_1951C       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1968E       proc far                ; CODE XREF: sub_1407B+3A↑P
                                        ; sub_18EDF+2B4↑p

var_4           = word ptr -4
var_2           = word ptr -2
arg_0           = dword ptr  6

                enter   4, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg14
                mov     ds, ax
                assume ds:dseg14
                push    word ptr [bp+arg_0+2]
                push    word ptr [bp+arg_0]
                push    cs
                call    near ptr sub_15D7B
                add     sp, 4
                cmp     ax, 1
                jz      short loc_196AF
                jmp     loc_19A00
; ---------------------------------------------------------------------------

loc_196AF:                              ; CODE XREF: sub_1968E+1C↑j
                push    0Ah
                push    word ptr [bp+arg_0+2]
                push    word ptr [bp+arg_0]
                push    seg dseg19
                push    offset byte_29B40
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                push    1Eh
                push    ds
                push    offset aForSale_0 ; "FOR SALE"
                push    seg dseg19
                push    offset unk_29B4A
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                xor     si, si

loc_196DB:                              ; CODE XREF: sub_1968E+71↓j
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                mov     word ptr es:[bx+1878h], 0FFFFh
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                mov     word ptr es:[bx+18A0h], 0FFFFh
                inc     si
                cmp     si, 14h
                jl      short loc_196DB
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:word_29A2C
                cwd
                mov     bx, seg dseg19
                mov     es, bx
                mov     es:word_29BBA, dx
                mov     es:word_29BB8, ax
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:word_29A2E
                cwd
                mov     bx, seg dseg19
                mov     es, bx
                mov     es:word_29BBE, dx
                mov     es:word_29BBC, ax
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29BC2, 0
                mov     es:word_29BC0, 0
                les     bx, [bp+arg_0]
                assume es:nothing
                mov     al, es:[bx+8]
                mov     ah, 0
                push    ax
                les     bx, [bp+arg_0]
                mov     al, es:[bx+7]
                mov     ah, 0
                push    ax
                push    ds
                push    (offset aCCC_0+2) ; "%c%c"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                mov     di, ax
                inc     di
                mov     ax, di
                cwd
                mov     bx, seg dseg19
                mov     es, bx
                assume es:dseg19
                push    ax
                push    dx
                mov     dx, es:word_29A2A
                mov     ax, es:word_29A28
                pop     cx
                pop     bx
                call    F_LXMUL
                mov     bx, seg dseg19
                mov     es, bx
                mov     es:word_29BC6, dx
                mov     es:word_29BC4, ax
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29BCE, 0
                mov     es:word_29BCC, 0
                les     bx, [bp+arg_0]
                assume es:nothing
                mov     al, es:[bx+8]
                mov     ah, 0
                push    ax
                les     bx, [bp+arg_0]
                mov     al, es:[bx+7]
                mov     ah, 0
                push    ax
                push    ds
                push    (offset aCCC_0+2) ; "%c%c"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                inc     ax
                cwd
                mov     bx, seg dseg19
                mov     es, bx
                assume es:dseg19
                push    ax
                push    dx
                mov     dx, es:word_29A26
                mov     ax, es:word_29A24
                pop     cx
                pop     bx
                call    F_LXMUL
                mov     bx, seg dseg19
                mov     es, bx
                mov     es:word_29BCA, dx
                mov     es:word_29BC8, ax
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29880
                push    es:word_2987E
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    37h ; '7'
                push    0
                push    word ptr [bp+arg_0+2]
                push    word ptr [bp+arg_0]
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jz      short loc_1982D
                jmp     loc_19A00
; ---------------------------------------------------------------------------

loc_1982D:                              ; CODE XREF: sub_1968E+19A↑j
                push    seg dseg19
                push    offset byte_29B40
                call    INSBTV          ; void insbtv(char *recptr);
                add     sp, 4
                push    word ptr [bp+arg_0+2]
                push    word ptr [bp+arg_0]
                push    cs
                call    near ptr sub_15D7B
                add     sp, 4
                push    0
                push    32h ; '2'
                push    seg dseg19
                push    offset unk_29C3C
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29BCA
                push    es:word_29BC8
                push    ds
                push    offset aASignReadsForS ; "A sign reads: FOR SALE $ %ld"
                push    seg dseg19
                push    offset unk_29C3C
                call    SPRINTF         ; int sprintf(char *str, const char *format, ... );
                add     sp, 0Ch
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29BF6, 2
                xor     si, si

loc_19889:                              ; CODE XREF: sub_1968E+36B↓j
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                cmp     word ptr es:[bx+18FCh], 1
                jz      short loc_1989D
                jmp     loc_199F3
; ---------------------------------------------------------------------------

loc_1989D:                              ; CODE XREF: sub_1968E+20A↑j
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                mov     word ptr es:[bx+18FCh], 0Ah
                push    cs
                call    near ptr sub_15DD6
                mov     ax, seg dseg19
                mov     es, ax
                mov     al, es:byte_29BE0
                mov     ah, 0
                push    ax
                mov     ax, seg dseg19
                mov     es, ax
                mov     al, es:byte_29BDF
                mov     ah, 0
                push    ax
                mov     ax, seg dseg19
                mov     es, ax
                mov     al, es:byte_29BDE
                mov     ah, 0
                push    ax
                push    ds
                push    offset aCCC_0   ; "%c%c%c"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 0Ah
                push    dx
                push    ax
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                mov     [bp+var_2], ax
                mov     ax, seg dseg19
                mov     es, ax
                mov     al, es:byte_29BE3
                mov     ah, 0
                push    ax
                mov     ax, seg dseg19
                mov     es, ax
                mov     al, es:byte_29BE2
                mov     ah, 0
                push    ax
                mov     ax, seg dseg19
                mov     es, ax
                mov     al, es:byte_29BE1
                mov     ah, 0
                push    ax
                push    ds
                push    offset aCCC_0   ; "%c%c%c"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 0Ah
                push    dx
                push    ax
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                mov     [bp+var_4], ax
                mov     ax, seg dseg19
                mov     es, ax
                mov     al, es:byte_29BE6
                mov     ah, 0
                push    ax
                mov     ax, seg dseg19
                mov     es, ax
                mov     al, es:byte_29BE5
                mov     ah, 0
                push    ax
                mov     ax, seg dseg19
                mov     es, ax
                mov     al, es:byte_29BE4
                mov     ah, 0
                push    ax
                push    ds
                push    offset aCCC_0   ; "%c%c%c"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 0Ah
                push    dx
                push    ax
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                mov     di, ax
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, di
                mov     es, ax
                add     dx, es:[bx+18h]
                push    dx
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, [bp+var_4]
                mov     es, ax
                add     dx, es:[bx+10h]
                push    dx
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, [bp+var_2]
                mov     es, ax
                add     dx, es:[bx+8]
                push    dx
                push    cs
                call    near ptr sub_15677
                add     sp, 6
                push    dx
                push    ax
                push    cs
                call    near ptr sub_15D7B
                add     sp, 4
                cmp     si, 1
                jz      short loc_199B6
                cmp     si, 3
                jnz     short loc_199C8

loc_199B6:                              ; CODE XREF: sub_1968E+321↑j
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                mov     word ptr es:[bx+18FAh], 0Ah
                jmp     short loc_199D8
; ---------------------------------------------------------------------------

loc_199C8:                              ; CODE XREF: sub_1968E+326↑j
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                mov     word ptr es:[bx+18FEh], 0Ah

loc_199D8:                              ; CODE XREF: sub_1968E+338↑j
                push    cs
                call    near ptr sub_15DD6
                push    di
                push    [bp+var_4]
                push    [bp+var_2]
                push    cs
                call    near ptr sub_15677
                add     sp, 6
                push    dx
                push    ax
                push    cs
                call    near ptr sub_15D7B
                add     sp, 4

loc_199F3:                              ; CODE XREF: sub_1968E+20C↑j
                inc     si
                cmp     si, 4
                jge     short loc_199FC
                jmp     loc_19889
; ---------------------------------------------------------------------------

loc_199FC:                              ; CODE XREF: sub_1968E+369↑j
                push    cs
                call    near ptr sub_15DD6

loc_19A00:                              ; CODE XREF: sub_1968E+1E↑j
                                        ; sub_1968E+19C↑j
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_1968E       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_19A05       proc far                ; CODE XREF: sub_183D9+348↑p

var_162         = byte ptr -162h
var_144         = word ptr -144h
var_6           = dword ptr -6
var_2           = word ptr -2
arg_0           = word ptr  6

                enter   162h, 0
                push    si
                push    ds
                mov     ax, seg dseg14
                mov     ds, ax
                assume ds:dseg14
                mov     si, [bp+arg_0]
                push    si
                nop
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                mov     word ptr [bp+var_6+2], dx
                mov     word ptr [bp+var_6], ax
                push    si
                nop
                push    cs
                call    near ptr sub_1A852
                pop     cx
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29888
                push    es:word_29886
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    37h ; '7'
                push    0
                push    word ptr [bp+var_6+2]
                push    word ptr [bp+var_6]
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jz      short loc_19AAE
                mov     [bp+var_2], 0

loc_19A59:                              ; CODE XREF: sub_19A05+A7↓j
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    ss
                lea     ax, [bp+var_162]
                push    ax
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                les     bx, [bp+var_6]
                assume es:nothing
                mov     ax, es:[bx+1Eh]
                cmp     ax, [bp+var_144]
                jz      short loc_19AAE
                push    6
                push    ss
                lea     ax, [bp+var_162]
                push    ax
                call    ANPBTV          ; int anpbtv (void *recptr, int anpopt);
                add     sp, 6
                or      ax, ax
                jz      short loc_19AAE
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    ss
                lea     ax, [bp+var_162]
                push    ax
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                cmp     [bp+var_2], 0
                jz      short loc_19A59

loc_19AAE:                              ; CODE XREF: sub_19A05+4D↑j
                                        ; sub_19A05+76↑j ...
                les     bx, [bp+var_6]
                mov     word ptr es:[bx+92h], 0
                mov     word ptr es:[bx+90h], 0
                les     bx, [bp+var_6]
                mov     word ptr es:[bx+96h], 0
                mov     word ptr es:[bx+94h], 0
                les     bx, [bp+var_6]
                mov     word ptr es:[bx+9Ah], 0
                les     bx, [bp+var_6]
                mov     ax, es:[bx+2Ah]
                les     bx, [bp+var_6]
                mov     es:[bx+98h], ax
                xor     dx, dx

loc_19AEB:                              ; CODE XREF: sub_19A05+108↓j
                mov     ax, dx
                shl     ax, 1
                les     bx, [bp+var_6]
                add     bx, ax
                mov     word ptr es:[bx+3Ch], 0FFFFh
                mov     ax, dx
                shl     ax, 1
                les     bx, [bp+var_6]
                add     bx, ax
                mov     word ptr es:[bx+50h], 0FFFFh
                inc     dx
                cmp     dx, 0Ah
                jl      short loc_19AEB
                les     bx, [bp+var_6]
                mov     word ptr es:[bx+8Ch], 0FFFFh
                les     bx, [bp+var_6]
                mov     word ptr es:[bx+8Eh], 0FFFFh
                les     bx, [bp+var_6]
                mov     ax, es:[bx+28h]
                les     bx, [bp+var_6]
                mov     es:[bx+26h], ax
                push    word ptr [bp+var_6+2]
                push    word ptr [bp+var_6]
                call    UPDBTV          ; void updbtv(char *recptr);
                add     sp, 4
                push    si
                nop
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                mov     word ptr es:[bx+0D6h], 3
                pop     ds
                assume ds:dseg21
                pop     si
                leave
                retf
sub_19A05       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_19B55       proc far                ; CODE XREF: huprou+88↑P

var_C8          = byte ptr -0C8h

                enter   0C8h, 0
                push    ds
                mov     ax, seg dseg14
                mov     ds, ax
                assume ds:dseg14
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, seg dseg19
                push    es
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_29A60
                pop     es
                assume es:nothing
                sub     es:[bx+32h], ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, seg dseg19
                push    es
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_29A60
                pop     es
                assume es:nothing
                sub     es:[bx+3Ah], ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, seg dseg19
                push    es
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_29A60
                pop     es
                assume es:nothing
                sub     es:[bx+38h], ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, seg dseg19
                push    es
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_29A60
                pop     es
                assume es:nothing
                sub     es:[bx+30h], ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, seg dseg19
                push    es
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_29A60
                pop     es
                assume es:nothing
                sub     es:[bx+34h], ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, seg dseg19
                push    es
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_29A60
                pop     es
                assume es:nothing
                sub     es:[bx+36h], ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+32h], 0
                jge     short loc_19C16
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     word ptr es:[bx+32h], 0

loc_19C16:                              ; CODE XREF: sub_19B55+AF↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+30h], 0
                jge     short loc_19C37
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     word ptr es:[bx+30h], 0

loc_19C37:                              ; CODE XREF: sub_19B55+D0↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+34h], 0
                jge     short loc_19C58
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     word ptr es:[bx+34h], 0

loc_19C58:                              ; CODE XREF: sub_19B55+F1↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+3Ah], 0
                jge     short loc_19C79
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     word ptr es:[bx+3Ah], 0

loc_19C79:                              ; CODE XREF: sub_19B55+112↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+38h], 0
                jge     short loc_19C9A
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     word ptr es:[bx+38h], 0

loc_19C9A:                              ; CODE XREF: sub_19B55+133↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+36h], 0
                jge     short loc_19CBB
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     word ptr es:[bx+36h], 0

loc_19CBB:                              ; CODE XREF: sub_19B55+154↑j
                push    0
                push    0C8h
                push    ss
                lea     ax, [bp+var_C8]
                push    ax
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_29A60
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+1Eh]
                imul    ax, 34h ; '4'
                add     ax, 0AF2h
                push    seg dseg19
                push    ax
                push    ds
                push    offset aYourSHasBeenPu ; "Your %s has been punished for exiting t"...
                push    ss
                lea     ax, [bp+var_C8]
                push    ax
                call    SPRINTF         ; int sprintf(char *str, const char *format, ... );
                add     sp, 0Eh
                push    0
                push    0
                push    ss
                lea     ax, [bp+var_C8]
                push    ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    cs
                call    near ptr sub_18770
                add     sp, 0Ch
                pop     ds
                assume ds:dseg21
                leave
                retf
sub_19B55       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_19D25       proc far                ; CODE XREF: sttrou+5FC↑P
                                        ; sub_93D8+177↑P ...

arg_0           = word ptr  6
arg_2           = word ptr  8

                push    bp
                mov     bp, sp
                push    si
                push    ds
                mov     ax, seg dseg14
                mov     ds, ax
                assume ds:dseg14
                push    [bp+arg_2]
                push    [bp+arg_0]
                push    ds
                push    offset aTelepathicBlur ; "***\rTelepathic Blurb: %s\r"
                call    PRF             ; prf(string);
                add     sp, 8
                xor     si, si
                jmp     short loc_19D84
; ---------------------------------------------------------------------------

loc_19D45:                              ; CODE XREF: sub_19D25+69↓j
                push    si
                nop
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                cmp     word ptr es:[bx+0D6h], 2
                jnz     short loc_19D83
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     es:word_2AED5, si
                jz      short loc_19D83
                push    si
                nop
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                mov     ax, es:[bx+0E0h]
                and     ax, 20h
                or      ax, 0
                jz      short loc_19D83
                push    si
                call    OUTPRF          ; outprf (unum);
                pop     cx

loc_19D83:                              ; CODE XREF: sub_19D25+31↑j
                                        ; sub_19D25+3D↑j ...
                inc     si

loc_19D84:                              ; CODE XREF: sub_19D25+1E↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     es:word_2AED1, si
                jg      short loc_19D45
                call    CLRPRF          ; clrprf()
                pop     ds
                assume ds:dseg21
                pop     si
                pop     bp
                retf
sub_19D25       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_19D99       proc far                ; CODE XREF: sub_8B00+55C↑P
                                        ; sub_8B00+670↑P

var_2           = word ptr -2
arg_0           = word ptr  6
arg_2           = word ptr  8

                enter   2, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg14
                mov     ds, ax
                assume ds:dseg14
                mov     bx, [bp+arg_0]
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:word_2AED5
                mov     dx, seg dseg19
                mov     es, dx
                cmp     ax, es:word_2AED1
                jl      short loc_19DC0
                jmp     loc_1A02C
; ---------------------------------------------------------------------------

loc_19DC0:                              ; CODE XREF: sub_19D99+22↑j
                cmp     bx, 1
                jnz     short loc_19E39
                xor     si, si

loc_19DC7:                              ; CODE XREF: sub_19D99+9C↓j
                xor     cx, cx

loc_19DC9:                              ; CODE XREF: sub_19D99+96↓j
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:word_2AED5
                imul    ax, 64h ; 'd'
                mov     di, ax
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29C74
                assume es:nothing
                add     bx, ax
                mov     ax, si
                inc     ax
                imul    ax, 0Ah
                add     bx, ax
                add     bx, cx
                mov     al, es:[bx]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29C74
                assume es:nothing
                add     bx, di
                mov     dx, si
                imul    dx, 0Ah
                add     bx, dx
                add     bx, cx
                mov     es:[bx], al
                or      si, si
                jnz     short loc_19E2B
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_2AED5
                imul    ax, 64h ; 'd'
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29C74
                assume es:nothing
                add     bx, ax
                add     bx, cx
                mov     byte ptr es:[bx+50h], 2Eh ; '.'

loc_19E2B:                              ; CODE XREF: sub_19D99+71↑j
                inc     cx
                cmp     cx, 9
                jl      short loc_19DC9
                inc     si
                cmp     si, 8
                jl      short loc_19DC7
                jmp     short loc_19EB2
; ---------------------------------------------------------------------------

loc_19E39:                              ; CODE XREF: sub_19D99+2A↑j
                cmp     bx, 0FFFFh
                jnz     short loc_19EB2
                mov     si, 8
                jmp     short loc_19EAE
; ---------------------------------------------------------------------------

loc_19E43:                              ; CODE XREF: sub_19D99+117↓j
                xor     cx, cx

loc_19E45:                              ; CODE XREF: sub_19D99+112↓j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_2AED5
                imul    ax, 64h ; 'd'
                mov     di, ax
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29C74
                assume es:nothing
                add     bx, ax
                mov     ax, si
                dec     ax
                imul    ax, 0Ah
                add     bx, ax
                add     bx, cx
                mov     al, es:[bx]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29C74
                assume es:nothing
                add     bx, di
                mov     dx, si
                imul    dx, 0Ah
                add     bx, dx
                add     bx, cx
                mov     es:[bx], al
                cmp     si, 8
                jnz     short loc_19EA7
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_2AED5
                imul    ax, 64h ; 'd'
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29C74
                assume es:nothing
                add     bx, ax
                add     bx, cx
                mov     byte ptr es:[bx], 2Eh ; '.'

loc_19EA7:                              ; CODE XREF: sub_19D99+EE↑j
                inc     cx
                cmp     cx, 9
                jl      short loc_19E45
                dec     si

loc_19EAE:                              ; CODE XREF: sub_19D99+A8↑j
                or      si, si
                jg      short loc_19E43

loc_19EB2:                              ; CODE XREF: sub_19D99+9E↑j
                                        ; sub_19D99+A3↑j
                cmp     [bp+arg_2], 1
                jnz     short loc_19F2E
                mov     cx, 8
                jmp     short loc_19F28
; ---------------------------------------------------------------------------

loc_19EBD:                              ; CODE XREF: sub_19D99+191↓j
                xor     si, si

loc_19EBF:                              ; CODE XREF: sub_19D99+18C↓j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_2AED5
                imul    ax, 64h ; 'd'
                mov     di, ax
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29C74
                assume es:nothing
                add     bx, ax
                mov     ax, si
                imul    ax, 0Ah
                mov     [bp+var_2], ax
                add     bx, ax
                add     bx, cx
                mov     al, es:[bx-1]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29C74
                assume es:nothing
                add     bx, di
                add     bx, [bp+var_2]
                add     bx, cx
                mov     es:[bx], al
                cmp     cx, 8
                jnz     short loc_19F21
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_2AED5
                imul    ax, 64h ; 'd'
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29C74
                assume es:nothing
                add     bx, ax
                add     bx, [bp+var_2]
                mov     byte ptr es:[bx], 2Eh ; '.'

loc_19F21:                              ; CODE XREF: sub_19D99+167↑j
                inc     si
                cmp     si, 9
                jl      short loc_19EBF
                dec     cx

loc_19F28:                              ; CODE XREF: sub_19D99+122↑j
                or      cx, cx
                jg      short loc_19EBD
                jmp     short loc_19FA6
; ---------------------------------------------------------------------------

loc_19F2E:                              ; CODE XREF: sub_19D99+11D↑j
                cmp     [bp+arg_2], 0FFFFh
                jnz     short loc_19FA6
                xor     cx, cx

loc_19F36:                              ; CODE XREF: sub_19D99+20B↓j
                xor     si, si

loc_19F38:                              ; CODE XREF: sub_19D99+205↓j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_2AED5
                imul    ax, 64h ; 'd'
                mov     di, ax
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29C74
                assume es:nothing
                add     bx, ax
                mov     ax, si
                imul    ax, 0Ah
                mov     [bp+var_2], ax
                add     bx, ax
                add     bx, cx
                mov     al, es:[bx+1]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29C74
                assume es:nothing
                add     bx, di
                add     bx, [bp+var_2]
                add     bx, cx
                mov     es:[bx], al
                or      cx, cx
                jnz     short loc_19F9A
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_2AED5
                imul    ax, 64h ; 'd'
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29C74
                assume es:nothing
                add     bx, ax
                add     bx, [bp+var_2]
                mov     byte ptr es:[bx+8], 2Eh ; '.'

loc_19F9A:                              ; CODE XREF: sub_19D99+1DF↑j
                inc     si
                cmp     si, 9
                jl      short loc_19F38
                inc     cx
                cmp     cx, 8
                jl      short loc_19F36

loc_19FA6:                              ; CODE XREF: sub_19D99+193↑j
                                        ; sub_19D99+199↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     es:word_29BF8, 1
                jnz     short loc_19FD0
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:word_2AED5
                imul    ax, 64h ; 'd'
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29C74
                assume es:nothing
                add     bx, ax
                mov     byte ptr es:[bx+2Ch], 6Dh ; 'm'

loc_19FD0:                              ; CODE XREF: sub_19D99+218↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     es:word_29BF6, 1
                jnz     short loc_19FFA
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:word_2AED5
                imul    ax, 64h ; 'd'
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29C74
                assume es:nothing
                add     bx, ax
                mov     byte ptr es:[bx+2Ch], 74h ; 't'

loc_19FFA:                              ; CODE XREF: sub_19D99+242↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_2AED5
                imul    ax, 64h ; 'd'
                mov     di, ax
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29C74
                assume es:nothing
                add     bx, ax
                cmp     byte ptr es:[bx+2Ch], 2Eh ; '.'
                jnz     short loc_1A02C
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29C74
                assume es:nothing
                add     bx, di
                mov     byte ptr es:[bx+2Ch], 23h ; '#'

loc_1A02C:                              ; CODE XREF: sub_19D99+24↑j
                                        ; sub_19D99+280↑j
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_19D99       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1A031       proc far                ; CODE XREF: sub_1BB1E+3E↓P
                                        ; sub_1BD2D+5B↓P ...

arg_0           = word ptr  6

                push    bp
                mov     bp, sp
                push    ds
                mov     ax, seg dseg14
                mov     ds, ax
                assume ds:dseg14
                mov     cx, [bp+arg_0]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+20h]
                cwd
                xor     ax, dx
                sub     ax, dx
                cmp     ax, 5
                jg      short loc_1A06D
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+22h]
                cwd
                xor     ax, dx
                sub     ax, dx
                cmp     ax, 5
                jle     short loc_1A070

loc_1A06D:                              ; CODE XREF: sub_1A031+22↑j
                mov     cx, 1

loc_1A070:                              ; CODE XREF: sub_1A031+3A↑j
                mov     ax, cx
                pop     ds
                assume ds:dseg21
                pop     bp
                retf
sub_1A031       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1A075       proc far                ; CODE XREF: _INIT__MUTANTS+5CC↑P
                                        ; _INIT__MUTANTS+5ED↑P ...

var_4           = word ptr -4
var_2           = word ptr -2
arg_0           = word ptr  6

                enter   4, 0
                push    si
                push    ds
                mov     ax, seg dseg14
                mov     ds, ax
                assume ds:dseg14
                mov     si, [bp+arg_0]
                or      si, si
                jl      short loc_1A08C
                cmp     si, 4Fh ; 'O'
                jle     short loc_1A098

loc_1A08C:                              ; CODE XREF: sub_1A075+10↑j
                push    ds
                push    offset aHashingErrorIl ; "Hashing Error: Illegal member to hash a"...
                call    CATASTRO        ; catastro(char * ctlstg, TYPE pl, TYPE p2,...,pn)
                add     sp, 4

loc_1A098:                              ; CODE XREF: sub_1A075+15↑j
                mov     ax, seg dseg19
                push    ax
                mov     ax, si
                xor     dx, dx
                pop     es
                div     word ptr es:1568h
                shl     ax, 2
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29854
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+2]
                mov     dx, es:[bx]
                mov     bx, seg dseg19
                push    ax
                mov     ax, si
                push    dx
                xor     dx, dx
                mov     es, bx
                assume es:dseg19
                div     es:word_29858
                imul    dx, 4B2h
                pop     ax
                add     ax, dx
                pop     dx
                mov     [bp+var_2], dx
                mov     [bp+var_4], ax
                mov     dx, [bp+var_2]
                mov     ax, [bp+var_4]
                pop     ds
                assume ds:dseg21
                pop     si
                leave
                retf
sub_1A075       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1A0E4       proc far                ; CODE XREF: _INIT__MUTANTS+680↑P
                                        ; _INIT__MUTANTS+694↑P ...

var_4           = word ptr -4
var_2           = word ptr -2
arg_0           = word ptr  6

                enter   4, 0
                push    ds
                mov     ax, seg dseg14
                mov     ds, ax
                assume ds:dseg14
                mov     cx, [bp+arg_0]
                or      cx, cx
                jl      short loc_1A103
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:word_2AECF
                inc     ax
                cmp     ax, cx
                jg      short loc_1A12F

loc_1A103:                              ; CODE XREF: sub_1A0E4+F↑j
                mov     ax, seg dseg19
                push    ax
                xor     ax, ax
                xor     dx, dx
                pop     es
                assume es:nothing
                div     word ptr es:156Eh
                shl     ax, 2
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_2985A
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+2]
                mov     dx, es:[bx]
                mov     bx, seg dseg19
                push    ax
                xor     ax, ax
                jmp     short loc_1A159
; ---------------------------------------------------------------------------

loc_1A12F:                              ; CODE XREF: sub_1A0E4+1D↑j
                mov     ax, seg dseg19
                push    ax
                mov     ax, cx
                xor     dx, dx
                pop     es
                div     word ptr es:156Eh
                shl     ax, 2
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_2985A
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+2]
                mov     dx, es:[bx]
                mov     bx, seg dseg19
                push    ax
                mov     ax, cx

loc_1A159:                              ; CODE XREF: sub_1A0E4+49↑j
                push    dx
                xor     dx, dx
                mov     es, bx
                assume es:dseg19
                div     es:word_2985E
                imul    dx, 15Ch
                pop     ax
                add     ax, dx
                pop     dx
                mov     [bp+var_2], dx
                mov     [bp+var_4], ax
                mov     dx, [bp+var_2]
                mov     ax, [bp+var_4]
                pop     ds
                assume ds:dseg21
                leave
                retf
sub_1A0E4       endp


; =============== S U B R O U T I N E =======================================


sub_1A17A       proc far                ; CODE XREF: _INIT__MUTANTS+D31↑P
                push    si
                push    ds
                mov     ax, seg dseg14
                mov     ds, ax
                assume ds:dseg14
                xor     si, si
                jmp     short loc_1A1BB
; ---------------------------------------------------------------------------

loc_1A185:                              ; CODE XREF: sub_1A17A+4B↓j
                push    si
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                cmp     word ptr es:[bx+0D6h], 2
                jnz     short loc_1A1BA
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_29A66
                cwd
                push    ax
                push    dx
                push    si
                call    UACOFF          ; struct usracc *uaptr=uacoff(unum);
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                pop     ax
                pop     dx
                add     es:[bx+118h], dx
                adc     es:[bx+11Ah], ax

loc_1A1BA:                              ; CODE XREF: sub_1A17A+1B↑j
                inc     si

loc_1A1BB:                              ; CODE XREF: sub_1A17A+9↑j
                mov     ax, seg NTERMS
                mov     es, ax
                assume es:nothing
                cmp     word ptr es:NTERMS, si ; int nterms;
                jg      short loc_1A185
                pop     ds
                assume ds:dseg21
                pop     si
                retf
sub_1A17A       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1A1CA       proc far                ; CODE XREF: sub_11A2F+7A8↑P
                                        ; sub_183D9+2B8↑p

var_2E          = byte ptr -2Eh
var_1A          = dword ptr -1Ah
var_16          = word ptr -16h
var_14          = word ptr -14h
var_12          = word ptr -12h
var_10          = byte ptr -10h
var_F           = byte ptr -0Fh
var_E           = byte ptr -0Eh
var_D           = byte ptr -0Dh
var_C           = byte ptr -0Ch
var_B           = byte ptr -0Bh
var_A           = byte ptr -0Ah
var_9           = byte ptr -9
var_8           = dword ptr -8
var_4           = dword ptr -4
arg_0           = word ptr  6

                enter   2Eh, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg14
                mov     ds, ax
                assume ds:dseg14
                mov     di, [bp+arg_0]
                push    di
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                mov     word ptr [bp+var_1A+2], dx
                mov     word ptr [bp+var_1A], ax
                push    di
                nop
                push    cs
                call    near ptr sub_1A7E4
                pop     cx
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_29874
                push    es:word_29872
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                les     bx, [bp+var_1A]
                assume es:nothing
                cmp     word ptr es:[bx+2Ah], 4Eh ; 'N'
                ja      short loc_1A210
                jmp     loc_1A304
; ---------------------------------------------------------------------------

loc_1A210:                              ; CODE XREF: sub_1A1CA+41↑j
                push    82h
                call    ALCMEM          ; char *alcmem(unsigned size);
                pop     cx
                mov     word ptr [bp+var_4+2], dx
                mov     word ptr [bp+var_4], ax
                push    word ptr [bp+var_1A+2]
                push    word ptr [bp+var_1A]
                call    STRLEN          ; size_t strlen(const char* str);
                add     sp, 4
                mov     dx, word ptr [bp+var_1A+2]
                mov     bx, word ptr [bp+var_1A]
                add     bx, ax
                dec     bx
                mov     word ptr [bp+var_8+2], dx
                mov     word ptr [bp+var_8], bx
                jmp     loc_1A2F8
; ---------------------------------------------------------------------------

loc_1A23F:                              ; CODE XREF: sub_1A1CA+137↓j
                les     bx, [bp+var_8]
                cmp     byte ptr es:[bx], 2Dh ; '-'
                jz      short loc_1A24B
                jmp     loc_1A2F5
; ---------------------------------------------------------------------------

loc_1A24B:                              ; CODE XREF: sub_1A1CA+7C↑j
                les     bx, [bp+var_8]
                mov     byte ptr es:[bx], 0
                push    14h
                push    word ptr [bp+var_1A+2]
                push    word ptr [bp+var_1A]
                push    ss
                lea     ax, [bp+var_2E]
                push    ax
                call    STZCPY          ; stzcpy(char *dest, char *source, int nbytes);
                add     sp, 0Ah
                push    5
                push    1
                push    ss
                lea     ax, [bp+var_2E]
                push    ax
                push    word ptr [bp+var_4+2]
                push    word ptr [bp+var_4]
                call    OBTBTV          ; int obtbtv(char *recptr, char* key, int keynum, int obtopt);
                add     sp, 0Ch
                or      ax, ax
                jz      short loc_1A2F5
                push    ds
                push    offset aSatan   ; "Satan"
                push    ss
                lea     ax, [bp+var_2E]
                push    ax
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_1A29F
                les     bx, [bp+var_4]
                add     word ptr es:[bx+52h], 4

loc_1A29F:                              ; CODE XREF: sub_1A1CA+CB↑j
                les     bx, [bp+var_4]
                inc     word ptr es:[bx+7Ah]
                les     bx, [bp+var_4]
                cmp     word ptr es:[bx+7Ah], 3
                jg      short loc_1A2C5
                push    ds
                push    offset aSatan   ; "Satan"
                push    ss
                lea     ax, [bp+var_2E]
                push    ax
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_1A2D5

loc_1A2C5:                              ; CODE XREF: sub_1A1CA+E4↑j
                les     bx, [bp+var_4]
                mov     word ptr es:[bx+7Ah], 0
                les     bx, [bp+var_4]
                inc     word ptr es:[bx+52h]

loc_1A2D5:                              ; CODE XREF: sub_1A1CA+F9↑j
                                        ; sub_1A1CA+129↓j
                push    word ptr [bp+var_4+2]
                push    word ptr [bp+var_4]
                call    UPDBTV          ; void updbtv(char *recptr);
                add     sp, 4
                push    word ptr [bp+var_4+2]
                push    word ptr [bp+var_4]
                call    GALFREE         ; void galfree(void *block);
                add     sp, 4
                jmp     short loc_1A304
; ---------------------------------------------------------------------------
                jmp     short loc_1A2D5
; ---------------------------------------------------------------------------

loc_1A2F5:                              ; CODE XREF: sub_1A1CA+7E↑j
                                        ; sub_1A1CA+B6↑j
                dec     word ptr [bp+var_8]

loc_1A2F8:                              ; CODE XREF: sub_1A1CA+72↑j
                les     bx, [bp+var_8]
                cmp     byte ptr es:[bx], 0
                jz      short loc_1A304
                jmp     loc_1A23F
; ---------------------------------------------------------------------------

loc_1A304:                              ; CODE XREF: sub_1A1CA+43↑j
                                        ; sub_1A1CA+127↑j ...
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_29884
                push    es:word_29882
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    0
                push    0
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                call    ABSBTV          ; long absbtv (void);
                mov     [bp+var_12], dx
                mov     [bp+var_14], ax
                les     bx, [bp+var_1A]
                assume es:nothing
                mov     ax, es:[bx+24h]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     es:word_29788, ax
                mov     ax, seg dseg19
                mov     es, ax
                mov     bx, es:word_29788
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:[bx+149Ch]
                push    cs
                call    near ptr sub_18A8A
                pop     cx
                mov     dx, seg dseg19
                mov     es, dx
                mov     es:word_2978A, ax
                push    5
                push    3
                push    seg dseg19
                push    offset word_29788
                push    seg dseg19
                push    offset byte_29BDE
                call    OBTBTV          ; int obtbtv(char *recptr, char* key, int keynum, int obtopt);
                add     sp, 0Ch
                mov     ax, seg dseg19
                mov     es, ax
                mov     al, es:byte_29BDE
                mov     [bp+var_C], al
                mov     ax, seg dseg19
                mov     es, ax
                mov     al, es:byte_29BDF
                mov     [bp+var_B], al
                mov     ax, seg dseg19
                mov     es, ax
                mov     al, es:byte_29BE0
                mov     [bp+var_A], al
                mov     [bp+var_9], 0
                mov     ax, seg dseg19
                mov     es, ax
                mov     al, es:byte_29BE1
                mov     [bp+var_10], al
                mov     ax, seg dseg19
                mov     es, ax
                mov     al, es:byte_29BE2
                mov     [bp+var_F], al
                mov     ax, seg dseg19
                mov     es, ax
                mov     al, es:byte_29BE3
                mov     [bp+var_E], al
                mov     [bp+var_D], 0
                push    ss
                lea     ax, [bp+var_C]
                push    ax
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                les     bx, [bp+var_1A]
                assume es:nothing
                mov     es:[bx+20h], ax
                push    ss
                lea     ax, [bp+var_10]
                push    ax
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                les     bx, [bp+var_1A]
                mov     es:[bx+22h], ax
                les     bx, [bp+var_1A]
                push    word ptr es:[bx+24h]
                push    cs
                call    near ptr sub_1A075
                pop     cx
                mov     bx, ax
                mov     es, dx
                mov     ax, es:[bx+4B0h]
                mov     [bp+var_16], ax
                xor     si, si
                cmp     si, [bp+var_16]
                jge     short loc_1A441

loc_1A41E:                              ; CODE XREF: sub_1A1CA+275↓j
                les     bx, [bp+var_1A]
                push    word ptr es:[bx+24h]
                push    cs
                call    near ptr sub_1A075
                pop     cx
                mov     bx, si
                shl     bx, 1
                add     ax, bx
                mov     bx, ax
                mov     es, dx
                cmp     es:[bx+320h], di
                jz      short loc_1A441
                inc     si
                cmp     si, [bp+var_16]
                jl      short loc_1A41E

loc_1A441:                              ; CODE XREF: sub_1A1CA+252↑j
                                        ; sub_1A1CA+26F↑j
                les     bx, [bp+var_1A]
                push    word ptr es:[bx+24h]
                push    cs
                call    near ptr sub_1A075
                pop     cx
                mov     bx, si
                shl     bx, 1
                add     ax, bx
                les     bx, [bp+var_1A]
                mov     bx, es:[bx+20h]
                mov     es, dx
                xchg    ax, bx
                mov     es:[bx], ax
                les     bx, [bp+var_1A]
                push    word ptr es:[bx+24h]
                push    cs
                call    near ptr sub_1A075
                pop     cx
                mov     bx, si
                shl     bx, 1
                add     ax, bx
                les     bx, [bp+var_1A]
                mov     bx, es:[bx+22h]
                mov     es, dx
                xchg    ax, bx
                mov     es:[bx+190h], ax
                push    0
                push    [bp+var_12]
                push    [bp+var_14]
                push    seg dseg19
                push    offset byte_29BDE
                call    AABBTV          ; int aabbtv (void *recptr, long abspos, int keynum);
                add     sp, 0Ah
                les     bx, [bp+var_1A]
                mov     word ptr es:[bx+0D6h], 0FFFBh
                les     bx, [bp+var_1A]
                mov     word ptr es:[bx+9Ah], 2
                push    4F6h
                push    cs
                call    near ptr sub_15C18
                pop     cx
                push    0
                push    0FFFFh
                push    0FFFFh
                les     bx, [bp+var_1A]
                push    word ptr es:[bx+24h]
                les     bx, [bp+var_1A]
                push    word ptr es:[bx+22h]
                les     bx, [bp+var_1A]
                push    word ptr es:[bx+20h]
                push    cs
                call    near ptr sub_15677
                add     sp, 6
                push    dx
                push    ax
                push    cs
                call    near ptr sub_175B0
                add     sp, 0Ah
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_1A1CA       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1A4E3       proc far                ; DATA XREF: _INIT__MUTANTS+D74↑o
                                        ; sub_1A4E3+13E↓o

var_A           = word ptr -0Ah
var_8           = word ptr -8
var_6           = word ptr -6
var_4           = dword ptr -4

                enter   0Ah, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg14
                mov     ds, ax
                assume ds:dseg14
                mov     [bp+var_6], 0
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     bx, es:word_29780
                mov     [bp+var_8], bx
                dec     bx
                imul    bx, 64h ; 'd'
                mov     si, [bp+var_8]
                imul    si, 64h ; 'd'
                mov     ax, seg NTERMS
                mov     dx, bx
                mov     es, ax
                assume es:nothing
                add     dx, word ptr es:NTERMS ; int nterms;
                mov     bx, dx
                mov     ax, seg NTERMS
                mov     dx, si
                mov     es, ax
                add     dx, word ptr es:NTERMS ; int nterms;
                mov     si, dx
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_2AECF
                mov     [bp+var_A], ax
                cmp     ax, si
                jge     short loc_1A55A
                mov     si, [bp+var_A]
                mov     bx, si
                add     bx, 0FF9Ch
                mov     ax, seg NTERMS
                mov     es, ax
                assume es:nothing
                cmp     word ptr es:NTERMS, bx ; int nterms;
                jle     short loc_1A555
                mov     ax, seg NTERMS
                mov     es, ax
                mov     bx, word ptr es:NTERMS ; int nterms;

loc_1A555:                              ; CODE XREF: sub_1A4E3+66↑j
                mov     [bp+var_6], 1

loc_1A55A:                              ; CODE XREF: sub_1A4E3+52↑j
                mov     di, bx
                jmp     loc_1A5FB
; ---------------------------------------------------------------------------

loc_1A55F:                              ; CODE XREF: sub_1A4E3+11C↓j
                push    di
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                mov     word ptr [bp+var_4+2], dx
                mov     word ptr [bp+var_4], ax
                les     bx, [bp+var_4]
                assume es:nothing
                cmp     word ptr es:[bx+0D6h], 0FFFBh
                jnz     short loc_1A5C8
                les     bx, [bp+var_4]
                dec     word ptr es:[bx+9Ah]
                les     bx, [bp+var_4]
                cmp     word ptr es:[bx+9Ah], 0
                jnz     short loc_1A5FA
                les     bx, [bp+var_4]
                mov     word ptr es:[bx+0D6h], 0FFFCh
                push    4F7h
                push    cs
                call    near ptr sub_15C18
                pop     cx
                push    0
                push    0FFFFh
                push    0FFFFh
                les     bx, [bp+var_4]
                push    word ptr es:[bx+24h]
                les     bx, [bp+var_4]
                push    word ptr es:[bx+22h]
                les     bx, [bp+var_4]
                push    word ptr es:[bx+20h]
                push    cs
                call    near ptr sub_15677
                add     sp, 6
                push    dx
                push    ax
                push    cs
                call    near ptr sub_175B0
                add     sp, 0Ah
                jmp     short loc_1A5FA
; ---------------------------------------------------------------------------

loc_1A5C8:                              ; CODE XREF: sub_1A4E3+91↑j
                les     bx, [bp+var_4]
                cmp     word ptr es:[bx+0D6h], 0FFFCh
                jnz     short loc_1A5FA
                push    di
                les     bx, [bp+var_4]
                push    word ptr es:[bx+24h]
                les     bx, [bp+var_4]
                push    word ptr es:[bx+22h]
                les     bx, [bp+var_4]
                push    word ptr es:[bx+20h]
                push    cs
                call    near ptr sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_1E0E0
                add     sp, 6

loc_1A5FA:                              ; CODE XREF: sub_1A4E3+A4↑j
                                        ; sub_1A4E3+E3↑j ...
                inc     di

loc_1A5FB:                              ; CODE XREF: sub_1A4E3+79↑j
                cmp     di, si
                jge     short loc_1A602
                jmp     loc_1A55F
; ---------------------------------------------------------------------------

loc_1A602:                              ; CODE XREF: sub_1A4E3+11A↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                inc     es:word_29780
                cmp     [bp+var_6], 0
                jz      short loc_1A61E
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29780, 1

loc_1A61E:                              ; CODE XREF: sub_1A4E3+12D↑j
                push    seg cseg06
                push    offset sub_1A4E3
                push    1
                call    RTKICK          ; rtkick(int time, void *rouptr());
                add     sp, 6
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_1A4E3       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1A633       proc far                ; CODE XREF: _INIT__MUTANTS+C44↑P
                                        ; sub_1158D+40B↑P ...

arg_0           = word ptr  6

                push    bp
                mov     bp, sp
                push    si
                push    ds
                mov     ax, seg dseg14
                mov     ds, ax
                assume ds:dseg14
                mov     si, [bp+arg_0]
                push    si
                push    cs
                call    near ptr sub_1A075
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                inc     word ptr es:[bx+4B0h]
                push    si
                push    cs
                call    near ptr sub_1A075
                pop     cx
                mov     bx, ax
                mov     es, dx
                mov     ax, es:[bx+4B0h]
                dec     ax
                pop     ds
                assume ds:dseg21
                pop     si
                pop     bp
                retf
sub_1A633       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1A663       proc far                ; CODE XREF: sub_1158D+14C↑P
                                        ; sub_17F94+14E↑p ...

var_2           = word ptr -2
arg_0           = word ptr  6

                enter   2, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg14
                mov     ds, ax
                assume ds:dseg14
                push    [bp+arg_0]
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                mov     si, es:[bx+24h]
                push    si
                push    cs
                call    near ptr sub_1A075
                pop     cx
                mov     bx, ax
                mov     es, dx
                mov     ax, es:[bx+4B0h]
                mov     [bp+var_2], ax
                xor     di, di
                cmp     di, [bp+var_2]
                jge     short loc_1A6B8

loc_1A698:                              ; CODE XREF: sub_1A663+53↓j
                push    si
                push    cs
                call    near ptr sub_1A075
                pop     cx
                mov     bx, di
                shl     bx, 1
                add     ax, bx
                mov     bx, ax
                mov     es, dx
                mov     ax, es:[bx+320h]
                cmp     ax, [bp+arg_0]
                jz      short loc_1A6B8
                inc     di
                cmp     di, [bp+var_2]
                jl      short loc_1A698

loc_1A6B8:                              ; CODE XREF: sub_1A663+33↑j
                                        ; sub_1A663+4D↑j
                cmp     di, [bp+var_2]
                jnz     short loc_1A6C0
                jmp     loc_1A779
; ---------------------------------------------------------------------------

loc_1A6C0:                              ; CODE XREF: sub_1A663+58↑j
                push    si
                push    cs
                call    near ptr sub_1A075
                pop     cx
                push    ax
                push    dx
                push    si
                push    cs
                call    near ptr sub_1A075
                pop     cx
                mov     bx, ax
                mov     es, dx
                mov     ax, es:[bx+4B0h]
                dec     ax
                shl     ax, 1
                pop     es
                pop     bx
                add     bx, ax
                mov     ax, es:[bx]
                push    ax
                push    si
                push    cs
                call    near ptr sub_1A075
                pop     cx
                mov     bx, di
                shl     bx, 1
                add     ax, bx
                mov     bx, ax
                mov     es, dx
                pop     ax
                mov     es:[bx], ax
                push    si
                push    cs
                call    near ptr sub_1A075
                pop     cx
                push    ax
                push    dx
                push    si
                push    cs
                call    near ptr sub_1A075
                pop     cx
                mov     bx, ax
                mov     es, dx
                mov     ax, es:[bx+4B0h]
                dec     ax
                shl     ax, 1
                pop     es
                pop     bx
                add     bx, ax
                mov     ax, es:[bx+190h]
                push    ax
                push    si
                push    cs
                call    near ptr sub_1A075
                pop     cx
                mov     bx, di
                shl     bx, 1
                add     ax, bx
                mov     bx, ax
                mov     es, dx
                pop     ax
                mov     es:[bx+190h], ax
                push    si
                push    cs
                call    near ptr sub_1A075
                pop     cx
                push    ax
                push    dx
                push    si
                push    cs
                call    near ptr sub_1A075
                pop     cx
                mov     bx, ax
                mov     es, dx
                mov     ax, es:[bx+4B0h]
                dec     ax
                shl     ax, 1
                pop     es
                pop     bx
                add     bx, ax
                mov     ax, es:[bx+320h]
                push    ax
                push    si
                push    cs
                call    near ptr sub_1A075
                pop     cx
                mov     bx, di
                shl     bx, 1
                add     ax, bx
                mov     bx, ax
                mov     es, dx
                pop     ax
                mov     es:[bx+320h], ax
                push    si
                push    cs
                call    near ptr sub_1A075
                pop     cx
                mov     bx, ax
                mov     es, dx
                dec     word ptr es:[bx+4B0h]

loc_1A779:                              ; CODE XREF: sub_1A663+5A↑j
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_1A663       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1A77E       proc far                ; CODE XREF: sub_A259+60A↑P
                                        ; sub_C376+185↑P ...

var_2           = word ptr -2
arg_0           = word ptr  6

                enter   2, 0
                push    si
                push    ds
                mov     ax, seg dseg14
                mov     ds, ax
                assume ds:dseg14
                mov     si, [bp+arg_0]
                mov     ax, seg NTERMS
                mov     es, ax
                assume es:nothing
                cmp     word ptr es:NTERMS, si ; int nterms;
                jg      short loc_1A7E0
                xor     cx, cx
                jmp     short loc_1A7B2
; ---------------------------------------------------------------------------

loc_1A79C:                              ; CODE XREF: sub_1A77E+42↓j
                mov     ax, cx
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_2B234
                assume es:nothing
                add     bx, ax
                cmp     es:[bx], si
                jz      short loc_1A7E0
                inc     cx

loc_1A7B2:                              ; CODE XREF: sub_1A77E+1C↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_2B232
                mov     [bp+var_2], ax
                cmp     ax, cx
                jg      short loc_1A79C
                mov     ax, [bp+var_2]
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_2B234
                assume es:nothing
                add     bx, ax
                mov     es:[bx], si
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                inc     es:word_2B232

loc_1A7E0:                              ; CODE XREF: sub_1A77E+18↑j
                                        ; sub_1A77E+31↑j
                pop     ds
                assume ds:dseg21
                pop     si
                leave
                retf
sub_1A77E       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1A7E4       proc far                ; CODE XREF: sub_1A1CA+1E↑p

var_2           = word ptr -2
arg_0           = word ptr  6

                enter   2, 0
                push    ds
                mov     ax, seg dseg14
                mov     ds, ax
                assume ds:dseg14
                xor     cx, cx
                jmp     short loc_1A83F
; ---------------------------------------------------------------------------

loc_1A7F2:                              ; CODE XREF: sub_1A7E4+69↓j
                mov     ax, cx
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_2B234
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx]
                cmp     ax, [bp+arg_0]
                jnz     short loc_1A83E
                mov     ax, [bp+var_2]
                dec     ax
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_2B234
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx]
                mov     dx, cx
                shl     dx, 1
                mov     bx, seg dseg19
                mov     es, bx
                assume es:dseg19
                les     bx, es:dword_2B234
                assume es:nothing
                add     bx, dx
                mov     es:[bx], ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                dec     es:word_2B232
                jmp     short loc_1A84F
; ---------------------------------------------------------------------------

loc_1A83E:                              ; CODE XREF: sub_1A7E4+24↑j
                inc     cx

loc_1A83F:                              ; CODE XREF: sub_1A7E4+C↑j
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:word_2B232
                mov     [bp+var_2], ax
                cmp     ax, cx
                jg      short loc_1A7F2

loc_1A84F:                              ; CODE XREF: sub_1A7E4+58↑j
                pop     ds
                assume ds:dseg21
                leave
                retf
sub_1A7E4       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1A852       proc far                ; CODE XREF: sub_1951C+17↑p
                                        ; sub_19A05+1E↑p

arg_0           = word ptr  6

                push    bp
                mov     bp, sp
                push    si
                push    ds
                mov     ax, seg dseg14
                mov     ds, ax
                assume ds:dseg14
                mov     si, [bp+arg_0]
                push    si
                push    cs
                call    near ptr sub_1A663
                pop     cx
                push    si
                nop
                push    cs
                call    near ptr sub_1A870
                pop     cx
                pop     ds
                assume ds:dseg21
                pop     si
                pop     bp
                retf
sub_1A852       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1A870       proc far                ; CODE XREF: sub_16D39+117↑p
                                        ; sub_1A852+16↑p ...

arg_0           = word ptr  6

                push    bp
                mov     bp, sp
                push    si
                push    ds
                mov     ax, seg dseg14
                mov     ds, ax
                assume ds:dseg14
                xor     si, si
                jmp     short loc_1A8F0
; ---------------------------------------------------------------------------

loc_1A87E:                              ; CODE XREF: sub_1A870+8A↓j
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_2B234
                assume es:nothing
                add     bx, ax
                push    word ptr es:[bx]
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                mov     dx, es:[bx+0DCh]
                cmp     dx, [bp+arg_0]
                jz      short loc_1A8A9
                cmp     dx, 0FFFFh
                jnz     short loc_1A8EF

loc_1A8A9:                              ; CODE XREF: sub_1A870+32↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_2B232
                dec     ax
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_2B234
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx]
                mov     dx, si
                shl     dx, 1
                mov     bx, seg dseg19
                mov     es, bx
                assume es:dseg19
                les     bx, es:dword_2B234
                assume es:nothing
                add     bx, dx
                mov     es:[bx], ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                dec     es:word_2B232
                dec     si
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2B232, 0
                jz      short loc_1A8FC

loc_1A8EF:                              ; CODE XREF: sub_1A870+37↑j
                inc     si

loc_1A8F0:                              ; CODE XREF: sub_1A870+C↑j
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2B232, si
                jg      short loc_1A87E

loc_1A8FC:                              ; CODE XREF: sub_1A870+7D↑j
                pop     ds
                assume ds:dseg21
                pop     si
                pop     bp
                retf
sub_1A870       endp


; =============== S U B R O U T I N E =======================================


sub_1A900       proc far                ; CODE XREF: _INIT__MUTANTS+D6C↑P
                                        ; DATA XREF: sub_1A900+34↓o
                push    si
                push    ds
                mov     ax, seg dseg14
                mov     ds, ax
                assume ds:dseg14
                xor     si, si
                jmp     short loc_1A925
; ---------------------------------------------------------------------------

loc_1A90B:                              ; CODE XREF: sub_1A900+2F↓j
                push    si
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                cmp     word ptr es:[bx+0D6h], 2
                jnz     short loc_1A924
                push    si
                nop
                push    cs
                call    near ptr sub_1A972
                pop     cx

loc_1A924:                              ; CODE XREF: sub_1A900+1B↑j
                inc     si

loc_1A925:                              ; CODE XREF: sub_1A900+9↑j
                mov     ax, seg NTERMS
                mov     es, ax
                assume es:nothing
                cmp     word ptr es:NTERMS, si ; int nterms;
                jg      short loc_1A90B
                push    seg cseg06
                push    offset sub_1A900
                push    0
                push    8000h
                call    RAND            ; int rand (void);
                cwd
                push    ax
                push    dx
                xor     dx, dx
                mov     ax, 14h
                pop     cx
                pop     bx
                call    F_LXMUL
                push    dx
                push    ax
                call    F_LDIV
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, es:word_29A76
                add     dx, ax
                imul    dx, 3Ch ; '<'
                push    dx
                call    RTKICK          ; rtkick(int time, void *rouptr());
                add     sp, 6
                pop     ds
                assume ds:dseg21
                pop     si
                retf
sub_1A900       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1A972       proc far                ; CODE XREF: sub_1A900+20↑p

var_A           = dword ptr -0Ah
var_6           = word ptr -6
var_4           = word ptr -4
var_2           = word ptr -2
arg_0           = word ptr  6

                enter   0Ah, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg14
                mov     ds, ax
                assume ds:dseg14
                mov     si, [bp+arg_0]
                push    si
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                mov     word ptr [bp+var_A+2], dx
                mov     word ptr [bp+var_A], ax
                les     bx, [bp+var_A]
                assume es:nothing
                mov     word ptr es:[bx+0D6h], 8
                mov     ax, si
                imul    ax, 29h ; ')'
                mov     dx, seg USER
                mov     es, dx
                assume es:nothing
                les     bx, dword ptr es:USER ; struct user;
                assume es:nothing
                add     bx, ax
                mov     word ptr es:[bx+8], 8
                push    0
                push    8000h
                call    RAND            ; int rand (void);
                cwd
                push    ax
                push    dx
                xor     dx, dx
                mov     ax, 9
                pop     cx
                pop     bx
                call    F_LXMUL
                push    dx
                push    ax
                call    F_LDIV
                inc     ax
                mov     di, ax
                push    0
                push    8000h
                call    RAND            ; int rand (void);
                cwd
                push    ax
                push    dx
                xor     dx, dx
                mov     ax, 9
                pop     cx
                pop     bx
                call    F_LXMUL
                push    dx
                push    ax
                call    F_LDIV
                inc     ax
                mov     [bp+var_2], ax
                push    0
                push    8000h
                call    RAND            ; int rand (void);
                cwd
                shl     ax, 1
                rcl     dx, 1
                push    dx
                push    ax
                call    F_LDIV
                mov     [bp+var_4], ax
                cmp     [bp+var_4], 0
                jz      short loc_1AA20
                mov     dx, di
                add     dx, [bp+var_2]
                mov     [bp+var_6], 2Bh ; '+'
                jmp     short loc_1AA2A
; ---------------------------------------------------------------------------

loc_1AA20:                              ; CODE XREF: sub_1A972+A0↑j
                mov     dx, di
                sub     dx, [bp+var_2]
                mov     [bp+var_6], 2Dh ; '-'

loc_1AA2A:                              ; CODE XREF: sub_1A972+AC↑j
                push    dx
                push    ds
                push    offset aD       ; "%d"
                mov     ax, word ptr [bp+var_A]
                add     ax, 126h
                push    word ptr [bp+var_A+2]
                push    ax
                call    SPRINTF         ; int sprintf(char *str, const char *format, ... );
                add     sp, 0Ah
                push    [bp+var_2]
                push    [bp+var_6]
                push    di
                push    ds
                push    offset aDCD     ; "%d%c%d"
                mov     ax, word ptr [bp+var_A]
                add     ax, 130h
                push    word ptr [bp+var_A+2]
                push    ax
                call    SPRINTF         ; int sprintf(char *str, const char *format, ... );
                add     sp, 0Eh
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     word ptr es:[bx+158h], 0
                push    si
                nop
                push    cs
                call    near ptr sub_1AC72
                pop     cx
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_1A972       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1AA7B       proc far                ; CODE XREF: sttrou:loc_2AE8↑P

var_100         = byte ptr -100h

                enter   100h, 0
                push    ds
                mov     ax, seg dseg14
                mov     ds, ax
                assume ds:dseg14
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     es:word_2AED3, 2
                jge     short loc_1AA95
                jmp     loc_1AC5F
; ---------------------------------------------------------------------------

loc_1AA95:                              ; CODE XREF: sub_1AA7B+15↑j
                push    ds
                push    offset aAn      ; "AN"
                push    seg dseg19
                push    offset byte_29F13
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jnz     short loc_1AAB8
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                jmp     loc_1AC69
; ---------------------------------------------------------------------------

loc_1AAB8:                              ; CODE XREF: sub_1AA7B+2E↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, word ptr es:dword_29DD4
                add     ax, 126h
                push    word ptr es:dword_29DD4+2
                push    ax
                push    seg dseg19
                push    offset byte_29FDB
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jnz     short loc_1AADF
                jmp     loc_1AC10
; ---------------------------------------------------------------------------

loc_1AADF:                              ; CODE XREF: sub_1AA7B+5F↑j
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     word ptr es:[bx+0D6h], 2
                mov     ax, seg USRPTR
                mov     es, ax
                assume es:nothing
                les     bx, dword ptr es:USRPTR ; struct user *usrptr;
                assume es:nothing
                mov     word ptr es:[bx+8], 2
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:word_2AED3, 1
                push    ds
                push    offset aGood    ; "\r\r\aGOOD!\r\r"
                call    PRF             ; prf(string);
                add     sp, 4
                call    sub_955B
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+15Ah], 0
                jnz     short loc_1AB32
                jmp     loc_1AC6F
; ---------------------------------------------------------------------------

loc_1AB32:                              ; CODE XREF: sub_1AA7B+B2↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    37Ah
                push    cs
                call    near ptr sub_15C18
                add     sp, 6
                push    0
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                push    cs
                call    near ptr sub_15677
                add     sp, 6
                push    dx
                push    ax
                push    cs
                call    near ptr sub_175B0
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     word ptr es:[bx+0D6h], 2
                push    0
                push    0FFh
                push    ss
                lea     ax, [bp+var_100]
                push    ax
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+1Eh]
                imul    ax, 34h ; '4'
                add     ax, 0AF2h
                push    seg dseg19
                push    ax
                push    ds
                push    offset aSSHasJustArriv_0 ; "%s %s has just arrived into this world"
                push    ss
                lea     ax, [bp+var_100]
                push    ax
                call    SPRINTF         ; int sprintf(char *str, const char *format, ... );
                add     sp, 10h
                push    ss
                lea     ax, [bp+var_100]
                push    ax
                push    cs
                call    near ptr sub_19D25
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     word ptr es:[bx+15Ah], 0
                jmp     short loc_1AC6F
; ---------------------------------------------------------------------------

loc_1AC10:                              ; CODE XREF: sub_1AA7B+61↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                inc     word ptr es:[bx+158h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+158h], 2
                jle     short loc_1AC5F
                mov     ax, seg USRPTR
                mov     es, ax
                assume es:nothing
                les     bx, dword ptr es:USRPTR ; struct user *usrptr;
                assume es:nothing
                mov     word ptr es:[bx+8], 1
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:word_2AED3, 1
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:byte_29F13, 2Ah ; '*'
                call    sub_2B24
                jmp     short loc_1AC6F
; ---------------------------------------------------------------------------

loc_1AC5F:                              ; CODE XREF: sub_1AA7B+17↑j
                                        ; sub_1AA7B+1B4↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5

loc_1AC69:                              ; CODE XREF: sub_1AA7B+3A↑j
                nop
                push    cs
                call    near ptr sub_1AC72
                pop     cx

loc_1AC6F:                              ; CODE XREF: sub_1AA7B+B4↑j
                                        ; sub_1AA7B+193↑j ...
                pop     ds
                assume ds:dseg21
                leave
                retf
sub_1AA7B       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1AC72       proc far                ; CODE XREF: sub_1A972+100↑p
                                        ; sub_1AA7B+1F0↑p

var_168         = byte ptr -168h
var_14C         = byte ptr -14Ch
var_50          = byte ptr -50h
var_34          = byte ptr -34h
var_18          = byte ptr -18h
var_E           = dword ptr -0Eh
var_A           = byte ptr -0Ah
var_4           = word ptr -4
var_2           = word ptr -2
arg_0           = word ptr  6

                enter   14Ch, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg14
                mov     ds, ax
                assume ds:dseg14
                mov     di, [bp+arg_0]
                lea     ax, [bp+var_14C]
                push    ss
                push    ax
                push    ds
                push    offset off_25B09
                mov     cx, 134h
                call    F_SCOPY
                push    di
                call    _BTUCLO         ; int btuclo(int chan);
                pop     cx
                push    20h ; ' '
                push    0Ah
                push    ss
                lea     ax, [bp+var_18]
                push    ax
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                push    0
                push    8000h
                call    RAND            ; int rand (void);
                cwd
                push    ax
                push    dx
                xor     dx, dx
                mov     ax, 0Ah
                pop     cx
                pop     bx
                call    F_LXMUL
                push    dx
                push    ax
                call    F_LDIV
                lea     dx, [bp+var_18]
                add     ax, dx
                mov     bx, ax
                mov     byte ptr ss:[bx], 0
                xor     si, si

loc_1ACD8:                              ; CODE XREF: sub_1AC72+D7↓j
                push    0
                push    8000h
                call    RAND            ; int rand (void);
                cwd
                push    ax
                push    dx
                xor     dx, dx
                mov     ax, 5Ah ; 'Z'
                pop     cx
                pop     bx
                call    F_LXMUL
                push    dx
                push    ax
                call    F_LDIV
                add     ax, 21h ; '!'
                mov     [bp+var_4], ax
                xor     cx, cx

loc_1AD00:                              ; CODE XREF: sub_1AC72+D1↓j
                mov     bx, si
                imul    bx, 1Ch
                mov     ax, cx
                shl     ax, 2
                add     bx, ax
                lea     ax, [bp+var_14C]
                add     bx, ax
                mov     ax, ss:[bx+2]
                mov     dx, ss:[bx]
                mov     word ptr [bp+var_E+2], ax
                mov     word ptr [bp+var_E], dx
                jmp     short loc_1AD36
; ---------------------------------------------------------------------------

loc_1AD21:                              ; CODE XREF: sub_1AC72+CB↓j
                les     bx, [bp+var_E]
                assume es:nothing
                cmp     byte ptr es:[bx], 2Ah ; '*'
                jnz     short loc_1AD33
                les     bx, [bp+var_E]
                mov     al, byte ptr [bp+var_4]
                mov     es:[bx], al

loc_1AD33:                              ; CODE XREF: sub_1AC72+B6↑j
                inc     word ptr [bp+var_E]

loc_1AD36:                              ; CODE XREF: sub_1AC72+AD↑j
                les     bx, [bp+var_E]
                cmp     byte ptr es:[bx], 0
                jnz     short loc_1AD21
                inc     cx
                cmp     cx, 7
                jl      short loc_1AD00
                inc     si
                cmp     si, 0Bh
                jl      short loc_1ACD8
                xor     si, si

loc_1AD4D:                              ; CODE XREF: sub_1AC72+1F0↓j
                push    di
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                mov     al, es:[bx+130h]
                mov     ah, 0
                push    ax
                push    ds
                push    (offset aCCC_0+4) ; "%c"
                push    ss
                lea     ax, [bp+var_A]
                push    ax
                call    SPRINTF         ; int sprintf(char *str, const char *format, ... );
                add     sp, 0Ah
                push    ss
                lea     ax, [bp+var_A]
                push    ax
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                imul    ax, 1Ch
                mov     dx, si
                shl     dx, 2
                add     ax, dx
                lea     dx, [bp+var_168]
                add     ax, dx
                mov     bx, ax
                push    word ptr ss:[bx+2]
                push    word ptr ss:[bx]
                push    ss
                lea     ax, [bp+var_18]
                push    ax
                push    ds
                push    offset aSS_3    ; "%s%s"
                call    PRF             ; prf(string);
                add     sp, 0Ch
                push    di
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                mov     al, es:[bx+131h]
                mov     ah, 0
                mov     [bp+var_2], ax
                cmp     [bp+var_2], 2Bh ; '+'
                jnz     short loc_1ADE0
                mov     bx, si
                shl     bx, 2
                lea     ax, [bp+var_50]
                add     bx, ax
                push    word ptr ss:[bx+2]
                push    word ptr ss:[bx]
                push    ds
                push    offset aS_14    ; "%s"
                call    PRF             ; prf(string);
                add     sp, 8
                jmp     short loc_1AE02
; ---------------------------------------------------------------------------

loc_1ADE0:                              ; CODE XREF: sub_1AC72+14D↑j
                mov     bx, si
                shl     bx, 2
                lea     ax, [bp+var_34]
                add     bx, ax
                push    word ptr ss:[bx+2]
                push    word ptr ss:[bx]
                push    ss
                lea     ax, [bp+var_18]
                push    ax
                push    ds
                push    offset aSS_3    ; "%s%s"
                call    PRF             ; prf(string);
                add     sp, 0Ch

loc_1AE02:                              ; CODE XREF: sub_1AC72+16C↑j
                push    di
                push    cs
                call    near ptr sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                mov     al, es:[bx+132h]
                mov     ah, 0
                push    ax
                push    ds
                push    (offset aCCC_0+4) ; "%c"
                push    ss
                lea     ax, [bp+var_A]
                push    ax
                call    SPRINTF         ; int sprintf(char *str, const char *format, ... );
                add     sp, 0Ah
                push    ss
                lea     ax, [bp+var_A]
                push    ax
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                imul    ax, 1Ch
                mov     dx, si
                shl     dx, 2
                add     ax, dx
                lea     dx, [bp+var_168]
                add     ax, dx
                mov     bx, ax
                push    word ptr ss:[bx+2]
                push    word ptr ss:[bx]
                push    ss
                lea     ax, [bp+var_18]
                push    ax
                push    ds
                push    offset aSS_4    ; "%s%s\r"
                call    PRF             ; prf(string);
                add     sp, 0Ch
                inc     si
                cmp     si, 7
                jge     short loc_1AE65
                jmp     loc_1AD4D
; ---------------------------------------------------------------------------

loc_1AE65:                              ; CODE XREF: sub_1AC72+1EE↑j
                push    ds
                push    offset aPleaseAnswerTh ; "\r\rPlease answer the above math questi"...
                call    PRF             ; prf(string);
                add     sp, 4
                push    ds
                push    offset aYouAreOnTheOth ; "you are on the other end of the compute"...
                call    PRF             ; prf(string);
                add     sp, 4
                push    ds
                push    offset aAnswerTheQuest ; "Answer the question by typing AN answer"...
                call    PRF             ; prf(string);
                add     sp, 4
                push    ds
                push    offset aYouWouldEnterA ; "you would enter       AN 4\r\r"
                call    PRF             ; prf(string);
                add     sp, 4
                push    di
                call    OUTPRF          ; outprf (unum);
                pop     cx
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_1AC72       endp

; ---------------------------------------------------------------------------
                align 10h
cseg06          ends

; Segment Number    : 7
; Alloc Size        : 322Bh
; Offset in the file: 29A00h  Length: 322Bh
; Attributes  (0D00): CODE Relocations DPL: 3
; ===========================================================================

; Segment type: Pure code
cseg07          segment para public 'CODE' use16
                assume cs:cseg07
                assume es:nothing, ss:nothing, ds:dseg21, fs:nothing, gs:nothing

; =============== S U B R O U T I N E =======================================


sub_1AEB0       proc far                ; DATA XREF: dseg19:05A2↓o
                push    si
                push    ds
                mov     ax, seg dseg15
                mov     ds, ax
                assume ds:dseg15
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     es:word_2AED3, 2
                jge     short loc_1AECC
                call    sub_15CFA
                jmp     loc_1AFEE
; ---------------------------------------------------------------------------

loc_1AECC:                              ; CODE XREF: sub_1AEB0+12↑j
                push    seg dseg19
                push    offset byte_29FDB
                call    sub_15F5D
                add     sp, 4
                mov     si, ax
                cmp     si, 0FFFFh
                jnz     short loc_1AEF9
                push    442h
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4
                jmp     loc_1AFEE
; ---------------------------------------------------------------------------

loc_1AEF9:                              ; CODE XREF: sub_1AEB0+2F↑j
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+64h]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     ax, es:[bx+0D0h]
                jnz     short loc_1AF21
                jmp     loc_1AFD5
; ---------------------------------------------------------------------------

loc_1AF21:                              ; CODE XREF: sub_1AEB0+6C↑j
                nop
                push    cs
                call    near ptr sub_1D92E
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+64h]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     es:[bx+0D0h], ax
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     bx, es:[bx+64h]
                imul    bx, 36h ; '6'
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     dx, es:[bx+0FFCh]
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                sub     dx, es:[bx+30h]
                or      dx, dx
                jge     short loc_1AF7E
                xor     dx, dx

loc_1AF7E:                              ; CODE XREF: sub_1AEB0+CA↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     es:[bx+0D2h], dx
                or      dx, dx
                jnz     short loc_1AFB7
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+0D0h]
                imul    ax, 36h ; '6'
                add     ax, 0FDEh
                push    seg dseg19
                push    ax
                push    42Eh

loc_1AFAD:                              ; CODE XREF: sub_1AEB0+123↓j
                call    sub_15C18
                add     sp, 6
                jmp     short loc_1AFDE
; ---------------------------------------------------------------------------

loc_1AFB7:                              ; CODE XREF: sub_1AEB0+DF↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+0D0h]
                imul    ax, 36h ; '6'
                add     ax, 0FDEh
                push    seg dseg19
                push    ax
                push    42Fh
                jmp     short loc_1AFAD
; ---------------------------------------------------------------------------

loc_1AFD5:                              ; CODE XREF: sub_1AEB0+6E↑j
                push    430h
                call    sub_15C18
                pop     cx

loc_1AFDE:                              ; CODE XREF: sub_1AEB0+105↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_17567
                pop     cx

loc_1AFEE:                              ; CODE XREF: sub_1AEB0+19↑j
                                        ; sub_1AEB0+46↑j
                pop     ds
                assume ds:dseg21
                pop     si
                retf
sub_1AEB0       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1AFF1       proc far                ; CODE XREF: sub_1FE75+B9↓P
                                        ; DATA XREF: dseg19:0200↓o

var_6           = word ptr -6
var_4           = dword ptr -4

                enter   6, 0
                push    si
                push    ds
                mov     ax, seg dseg15
                mov     ds, ax
                assume ds:dseg15
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+0D0h]
                imul    ax, 36h ; '6'
                add     ax, 0FDEh
                mov     word ptr [bp+var_4+2], seg dseg19
                mov     word ptr [bp+var_4], ax
                les     bx, [bp+var_4]
                mov     ax, es:[bx+20h]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                cmp     ax, es:word_2AED3
                jle     short loc_1B034
                call    sub_15CFA
                jmp     loc_1B45F
; ---------------------------------------------------------------------------

loc_1B034:                              ; CODE XREF: sub_1AFF1+39↑j
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+0D0h], 0FFFFh
                jnz     short loc_1B04C
                push    431h
                jmp     loc_1B44D
; ---------------------------------------------------------------------------

loc_1B04C:                              ; CODE XREF: sub_1AFF1+53↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+0D2h], 0
                jle     short loc_1B064
                push    432h
                jmp     loc_1B44D
; ---------------------------------------------------------------------------

loc_1B064:                              ; CODE XREF: sub_1AFF1+6B↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_15D7B
                add     sp, 4
                push    0
                call    sub_18EAF
                pop     cx
                or      ax, ax
                jnz     short loc_1B0E8
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+0C8h], 0
                jnz     short loc_1B0C5
                mov     dx, ds
                mov     ax, 0
                jmp     short loc_1B0CA
; ---------------------------------------------------------------------------

loc_1B0C5:                              ; CODE XREF: sub_1AFF1+CB↑j
                mov     dx, ds
                mov     ax, 4

loc_1B0CA:                              ; CODE XREF: sub_1AFF1+D2↑j
                push    dx
                push    ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    437h
                call    sub_15C18
                add     sp, 0Ah
                jmp     short loc_1B0F1
; ---------------------------------------------------------------------------

loc_1B0E8:                              ; CODE XREF: sub_1AFF1+B9↑j
                push    438h
                call    sub_15C18
                pop     cx

loc_1B0F1:                              ; CODE XREF: sub_1AFF1+F5↑j
                push    0
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+96h], 0
                jge     short loc_1B150
                jmp     loc_1B44A
; ---------------------------------------------------------------------------

loc_1B150:                              ; CODE XREF: sub_1AFF1+15A↑j
                jg      short loc_1B15D
                cmp     word ptr es:[bx+94h], 0
                ja      short loc_1B15D
                jmp     loc_1B44A
; ---------------------------------------------------------------------------

loc_1B15D:                              ; CODE XREF: sub_1AFF1:loc_1B150↑j
                                        ; sub_1AFF1+167↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+96h]
                mov     dx, es:[bx+94h]
                les     bx, [bp+var_4]
                sub     dx, es:[bx+2Ah]
                sbb     ax, es:[bx+2Ch]
                mov     bx, seg dseg19
                mov     es, bx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     es:[bx+96h], ax
                mov     es:[bx+94h], dx
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+96h], 0
                jg      short loc_1B1E5
                jl      short loc_1B1AC
                cmp     word ptr es:[bx+94h], 1
                jnb     short loc_1B1E5

loc_1B1AC:                              ; CODE XREF: sub_1AFF1+1B1↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+96h]
                mov     dx, es:[bx+94h]
                les     bx, [bp+var_4]
                add     dx, es:[bx+2Ah]
                adc     ax, es:[bx+2Ch]
                mov     bx, seg dseg19
                mov     es, bx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     es:[bx+96h], ax
                mov     es:[bx+94h], dx
                push    443h
                jmp     loc_1B44D
; ---------------------------------------------------------------------------

loc_1B1E5:                              ; CODE XREF: sub_1AFF1+1AF↑j
                                        ; sub_1AFF1+1B9↑j
                les     bx, [bp+var_4]
                cmp     word ptr es:[bx+32h], 0FFFFh
                jnz     short loc_1B228
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+0CEh], 0
                jle     short loc_1B206
                nop
                push    cs
                call    near ptr sub_1D92E

loc_1B206:                              ; CODE XREF: sub_1AFF1+20E↑j
                les     bx, [bp+var_4]
                cmp     word ptr es:[bx+30h], 0
                jge     short loc_1B213
                jmp     loc_1B3D9
; ---------------------------------------------------------------------------

loc_1B213:                              ; CODE XREF: sub_1AFF1+21D↑j
                jle     short loc_1B218
                jmp     loc_1B3AE
; ---------------------------------------------------------------------------

loc_1B218:                              ; CODE XREF: sub_1AFF1:loc_1B213↑j
                cmp     word ptr es:[bx+2Eh], 0
                ja      short loc_1B222
                jmp     loc_1B3D9
; ---------------------------------------------------------------------------

loc_1B222:                              ; CODE XREF: sub_1AFF1+22C↑j
                jmp     loc_1B3AE
; ---------------------------------------------------------------------------
                jmp     loc_1B3D9
; ---------------------------------------------------------------------------

loc_1B228:                              ; CODE XREF: sub_1AFF1+1FC↑j
                xor     cx, cx
                xor     si, si

loc_1B22C:                              ; CODE XREF: sub_1AFF1+38B↓j
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                les     bx, [bp+var_4]
                cmp     ax, es:[bx+32h]
                jz      short loc_1B24C
                jmp     loc_1B376
; ---------------------------------------------------------------------------

loc_1B24C:                              ; CODE XREF: sub_1AFF1+256↑j
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29BDA
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+28h]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                sub     es:[bx+0CCh], ax
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                push    385h
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                push    386h
                call    sub_15C18
                add     sp, 6
                push    0
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     word ptr es:[bx+3Ch], 0FFFFh
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     word ptr es:[bx+50h], 0FFFFh
                mov     cx, 1
                mov     si, 0Bh

loc_1B376:                              ; CODE XREF: sub_1AFF1+258↑j
                inc     si
                cmp     si, 0Ah
                jge     short loc_1B37F
                jmp     loc_1B22C
; ---------------------------------------------------------------------------

loc_1B37F:                              ; CODE XREF: sub_1AFF1+389↑j
                cmp     cx, 1
                jnz     short loc_1B3E2
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+0CEh], 0
                jle     short loc_1B39B
                nop
                push    cs
                call    near ptr sub_1D92E

loc_1B39B:                              ; CODE XREF: sub_1AFF1+3A3↑j
                les     bx, [bp+var_4]
                cmp     word ptr es:[bx+30h], 0
                jl      short loc_1B3D9
                jg      short loc_1B3AE
                cmp     word ptr es:[bx+2Eh], 0
                jbe     short loc_1B3D9

loc_1B3AE:                              ; CODE XREF: sub_1AFF1+224↑j
                                        ; sub_1AFF1:loc_1B222↑j ...
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+30h]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     ax, es:[bx+34h]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     es:[bx+0CEh], ax

loc_1B3D9:                              ; CODE XREF: sub_1AFF1+21F↑j
                                        ; sub_1AFF1+22E↑j ...
                les     bx, [bp+var_4]
                call    dword ptr es:[bx+22h]
                jmp     short loc_1B45F
; ---------------------------------------------------------------------------

loc_1B3E2:                              ; CODE XREF: sub_1AFF1+391↑j
                les     bx, [bp+var_4]
                mov     ax, es:[bx+32h]
                imul    ax, 32h ; '2'
                mov     [bp+var_6], ax
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                push    0
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, word ptr es:dword_29BDA
                add     ax, [bp+var_6]
                add     ax, 4
                push    word ptr es:dword_29BDA+2
                push    ax
                call    sub_15560
                add     sp, 6
                push    dx
                push    ax
                push    ds
                push    offset unk_263E8
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                push    325h
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 0Ch
                jmp     short loc_1B45F
; ---------------------------------------------------------------------------

loc_1B44A:                              ; CODE XREF: sub_1AFF1+15C↑j
                                        ; sub_1AFF1+169↑j
                push    444h

loc_1B44D:                              ; CODE XREF: sub_1AFF1+58↑j
                                        ; sub_1AFF1+70↑j ...
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4

loc_1B45F:                              ; CODE XREF: sub_1AFF1+40↑j
                                        ; sub_1AFF1+3EF↑j ...
                pop     ds
                assume ds:dseg21
                pop     si
                leave
                retf
sub_1AFF1       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1B463       proc far                ; DATA XREF: dseg19:132A↓o

var_4           = word ptr -4
var_2           = word ptr -2

                enter   4, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg15
                mov     ds, ax
                assume ds:dseg15
                push    2
                push    seg dseg19
                push    offset byte_29FDB
                call    sub_1609C
                add     sp, 6
                mov     di, ax
                cmp     di, 0FFFFh
                jg      short loc_1B489
                jmp     loc_1B694
; ---------------------------------------------------------------------------

loc_1B489:                              ; CODE XREF: sub_1B463+21↑j
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+50h], 63h ; 'c'
                jg      short loc_1B4A3
                jmp     loc_1B67D
; ---------------------------------------------------------------------------

loc_1B4A3:                              ; CODE XREF: sub_1B463+3B↑j
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+50h], 0C8h
                jl      short loc_1B4BE
                jmp     loc_1B676
; ---------------------------------------------------------------------------

loc_1B4BE:                              ; CODE XREF: sub_1B463+56↑j
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29BDA
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+1Ch], 0
                jz      short loc_1B515
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29BDA
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+1Ch], 2
                jz      short loc_1B515
                jmp     loc_1B676
; ---------------------------------------------------------------------------

loc_1B515:                              ; CODE XREF: sub_1B463+83↑j
                                        ; sub_1B463+AD↑j
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                push    word ptr es:[bx+50h]
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                push    word ptr es:[bx+3Ch]
                call    sub_15B72
                add     sp, 4
                mov     bx, di
                shl     bx, 1
                mov     cx, seg dseg19
                mov     es, cx
                assume es:dseg19
                les     si, es:dword_29DD4
                assume es:nothing
                add     si, bx
                push    ax
                mov     ax, es:[si+50h]
                add     ax, 0FF9Dh
                push    dx
                cwd
                pop     cx
                pop     bx
                call    F_LXMUL
                push    ax
                push    dx
                xor     dx, dx
                mov     ax, 0Ah
                pop     cx
                pop     bx
                call    F_LXMUL
                mov     [bp+var_2], dx
                mov     [bp+var_4], ax
                mov     dx, [bp+var_2]
                mov     ax, [bp+var_4]
                mov     cl, 2
                call    F_LXLSH
                mov     [bp+var_2], dx
                mov     [bp+var_4], ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+96h]
                mov     dx, es:[bx+94h]
                cmp     ax, [bp+var_2]
                jl      short loc_1B61F
                jnz     short loc_1B5AD
                cmp     dx, [bp+var_4]
                jb      short loc_1B61F

loc_1B5AD:                              ; CODE XREF: sub_1B463+143↑j
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                push    35Bh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                inc     word ptr es:[bx+50h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, [bp+var_2]
                mov     dx, [bp+var_4]
                sub     es:[bx+94h], dx
                sbb     es:[bx+96h], ax
                jmp     loc_1B6AF
; ---------------------------------------------------------------------------

loc_1B61F:                              ; CODE XREF: sub_1B463+141↑j
                                        ; sub_1B463+148↑j
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                push    [bp+var_2]
                push    [bp+var_4]
                push    ds
                push    offset unk_263EB
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                push    445h
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 0Ch
                jmp     short loc_1B6AF
; ---------------------------------------------------------------------------

loc_1B676:                              ; CODE XREF: sub_1B463+58↑j
                                        ; sub_1B463+AF↑j ...
                push    41Ch
                jmp     short loc_1B680
; ---------------------------------------------------------------------------
                jmp     short loc_1B676
; ---------------------------------------------------------------------------

loc_1B67D:                              ; CODE XREF: sub_1B463+3D↑j
                push    35Ch

loc_1B680:                              ; CODE XREF: sub_1B463+216↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4
                jmp     short loc_1B6AF
; ---------------------------------------------------------------------------

loc_1B694:                              ; CODE XREF: sub_1B463+23↑j
                push    seg dseg19
                push    offset byte_29FDB
                push    3C1h
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8

loc_1B6AF:                              ; CODE XREF: sub_1B463+1B9↑j
                                        ; sub_1B463+211↑j ...
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_1B463       endp


; =============== S U B R O U T I N E =======================================


sub_1B6B4       proc far                ; DATA XREF: dseg19:1000↓o
                push    ds
                mov     ax, seg dseg15
                mov     ds, ax
                assume ds:dseg15
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_15D7B
                add     sp, 4
                push    0
                call    sub_18EAF
                pop     cx
                cmp     ax, 1
                jnz     short loc_1B750
                push    446h
                call    sub_15C18
                pop     cx
                push    0
                push    0FFFFh
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                jmp     short loc_1B765
; ---------------------------------------------------------------------------

loc_1B750:                              ; CODE XREF: sub_1B6B4+4D↑j
                push    374h
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4

loc_1B765:                              ; CODE XREF: sub_1B6B4+9A↑j
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                or      word ptr es:[bx+0E0h], 2
                or      word ptr es:[bx+0E2h], 0
                pop     ds
                assume ds:dseg21
                retf
sub_1B6B4       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1B77D       proc far                ; DATA XREF: dseg19:1036↓o

var_A           = dword ptr -0Ah
var_6           = word ptr -6
var_4           = word ptr -4
var_2           = word ptr -2

                enter   0Ah, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg15
                mov     ds, ax
                assume ds:dseg15
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_2AED5
                mov     [bp+var_2], ax
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+24h]
                mov     [bp+var_4], ax
                push    [bp+var_4]
                call    sub_1A075
                pop     cx
                mov     bx, ax
                mov     es, dx
                mov     ax, es:[bx+4B0h]
                mov     [bp+var_6], ax
                xor     si, si
                cmp     si, [bp+var_6]
                jl      short loc_1B7C5
                jmp     loc_1B864
; ---------------------------------------------------------------------------

loc_1B7C5:                              ; CODE XREF: sub_1B77D+43↑j
                                        ; sub_1B77D+E4↓j
                push    [bp+var_4]
                call    sub_1A075
                pop     cx
                mov     bx, si
                shl     bx, 1
                add     ax, bx
                mov     bx, ax
                mov     es, dx
                mov     di, es:[bx+320h]
                push    di
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                cmp     word ptr es:[bx+0D6h], 2
                jnz     short loc_1B85B
                cmp     di, [bp+var_2]
                jz      short loc_1B85B
                push    di
                call    sub_1A0E4
                pop     cx
                mov     bx, seg dseg19
                mov     es, bx
                assume es:dseg19
                mov     word ptr es:dword_29DD4+2, dx
                mov     word ptr es:dword_29DD4, ax
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+0CEh], 0
                jle     short loc_1B85B
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     word ptr es:[bx+0CEh], 0
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:word_2AED5, di
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+0D0h]
                imul    ax, 36h ; '6'
                add     ax, 0FDEh
                mov     word ptr [bp+var_A+2], seg dseg19
                mov     word ptr [bp+var_A], ax
                les     bx, [bp+var_A]
                call    dword ptr es:[bx+26h]

loc_1B85B:                              ; CODE XREF: sub_1B77D+71↑j
                                        ; sub_1B77D+76↑j ...
                inc     si
                cmp     si, [bp+var_6]
                jge     short loc_1B864
                jmp     loc_1B7C5
; ---------------------------------------------------------------------------

loc_1B864:                              ; CODE XREF: sub_1B77D+45↑j
                                        ; sub_1B77D+E2↑j
                mov     ax, seg dseg19
                mov     dx, [bp+var_2]
                mov     es, ax
                assume es:dseg19
                mov     es:word_2AED5, dx
                push    [bp+var_2]
                call    sub_1A0E4
                pop     cx
                mov     bx, seg dseg19
                mov     es, bx
                mov     word ptr es:dword_29DD4+2, dx
                mov     word ptr es:dword_29DD4, ax
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_15D7B
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     es:word_29BFA, 1
                jg      short loc_1B8D4
                jmp     loc_1B96C
; ---------------------------------------------------------------------------

loc_1B8D4:                              ; CODE XREF: sub_1B77D+152↑j
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, seg dseg19
                push    es
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_29BFA
                pop     es
                assume es:nothing
                sub     ax, es:[bx+2Ah]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     es:word_29BFA, ax
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_29BFA, 2
                jge     short loc_1B90F
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29BFA, 0

loc_1B90F:                              ; CODE XREF: sub_1B77D+184↑j
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_29BFA, 0
                jnz     short loc_1B967
                push    447h
                call    sub_15C18
                pop     cx
                push    0
                push    0FFFFh
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah

loc_1B967:                              ; CODE XREF: sub_1B77D+19D↑j
                call    sub_15DD6

loc_1B96C:                              ; CODE XREF: sub_1B77D+154↑j
                push    374h
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_1B77D       endp


; =============== S U B R O U T I N E =======================================


sub_1B986       proc far                ; DATA XREF: dseg19:10A2↓o
                push    ds
                mov     ax, seg dseg15
                mov     ds, ax
                assume ds:dseg15
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_15D7B
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     es:word_29BFA, 0
                jnz     short loc_1BA3F
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+2Ah]
                inc     ax
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     es:word_29BFA, ax
                call    sub_15DD6
                push    448h
                call    sub_15C18
                pop     cx
                push    0
                push    0FFFFh
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                jmp     short loc_1BA54
; ---------------------------------------------------------------------------

loc_1BA3F:                              ; CODE XREF: sub_1B986+4D↑j
                push    41Ch
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4

loc_1BA54:                              ; CODE XREF: sub_1B986+B7↑j
                pop     ds
                assume ds:dseg21
                retf
sub_1B986       endp


; =============== S U B R O U T I N E =======================================


sub_1BA56       proc far                ; DATA XREF: dseg19:10D8↓o
                push    ds
                mov     ax, seg dseg15
                mov     ds, ax
                assume ds:dseg15
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+0E0h]
                and     ax, 4
                or      ax, 0
                jz      short loc_1BA76
                jmp     loc_1BB07
; ---------------------------------------------------------------------------

loc_1BA76:                              ; CODE XREF: sub_1BA56+1B↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                or      word ptr es:[bx+0E0h], 4
                or      word ptr es:[bx+0E2h], 0
                push    449h
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    44Ah
                call    sub_15C18
                add     sp, 6
                push    0
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                jmp     short loc_1BB1C
; ---------------------------------------------------------------------------

loc_1BB07:                              ; CODE XREF: sub_1BA56+1D↑j
                push    44Bh
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4

loc_1BB1C:                              ; CODE XREF: sub_1BA56+AF↑j
                pop     ds
                assume ds:dseg21
                retf
sub_1BA56       endp


; =============== S U B R O U T I N E =======================================


sub_1BB1E       proc far                ; DATA XREF: dseg19:11E6↓o
                push    si
                push    di
                push    ds
                mov     ax, seg dseg15
                mov     ds, ax
                assume ds:dseg15
                push    seg dseg19
                push    offset byte_29FDB
                call    sub_1872A
                add     sp, 4
                mov     di, ax
                cmp     di, 0FFFFh
                jg      short loc_1BB3E
                jmp     loc_1BD14
; ---------------------------------------------------------------------------

loc_1BB3E:                              ; CODE XREF: sub_1BB1E+1B↑j
                cmp     di, 4
                jl      short loc_1BB46
                jmp     loc_1BD14
; ---------------------------------------------------------------------------

loc_1BB46:                              ; CODE XREF: sub_1BB1E+23↑j
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                cmp     word ptr es:[bx+18FCh], 1
                jz      short loc_1BB5A
                jmp     loc_1BD14
; ---------------------------------------------------------------------------

loc_1BB5A:                              ; CODE XREF: sub_1BB1E+37↑j
                push    0
                call    sub_1A031
                pop     cx
                cmp     ax, 1
                jz      short loc_1BB6A
                jmp     loc_1BD0F
; ---------------------------------------------------------------------------

loc_1BB6A:                              ; CODE XREF: sub_1BB1E+47↑j
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                mov     word ptr es:[bx+18FCh], 2
                call    sub_15DD6
                mov     bx, di
                shl     bx, 2
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:[bx+28h]
                push    word ptr es:[bx+26h]
                push    44Ch
                call    sub_15C18
                add     sp, 6
                push    0
                push    0FFFFh
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+24h]
                mov     es, ax
                assume es:dseg19
                add     dx, es:[bx+18h]
                push    dx
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+22h]
                mov     es, ax
                assume es:dseg19
                add     dx, es:[bx+10h]
                push    dx
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+20h]
                mov     es, ax
                assume es:dseg19
                add     dx, es:[bx+8]
                push    dx
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_15D7B
                add     sp, 4
                cmp     ax, 1
                jz      short loc_1BC51
                jmp     loc_1BD29
; ---------------------------------------------------------------------------

loc_1BC51:                              ; CODE XREF: sub_1BB1E+12E↑j
                mov     si, 1
                cmp     di, 1
                jz      short loc_1BC63
                cmp     di, 3
                jz      short loc_1BC63
                cmp     di, 5
                jnz     short loc_1BC66

loc_1BC63:                              ; CODE XREF: sub_1BB1E+139↑j
                                        ; sub_1BB1E+13E↑j
                mov     si, 0FFFFh

loc_1BC66:                              ; CODE XREF: sub_1BB1E+143↑j
                mov     bx, di
                add     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                mov     word ptr es:[bx+18FCh], 2
                call    sub_15DD6
                mov     bx, di
                add     bx, si
                shl     bx, 2
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:[bx+28h]
                push    word ptr es:[bx+26h]
                push    44Ch
                call    sub_15C18
                add     sp, 6
                push    0
                push    0FFFFh
                push    0FFFFh
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+24h]
                mov     es, ax
                assume es:dseg19
                add     dx, es:[bx+18h]
                push    dx
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+22h]
                mov     es, ax
                assume es:dseg19
                add     dx, es:[bx+10h]
                push    dx
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+20h]
                mov     es, ax
                assume es:dseg19
                add     dx, es:[bx+8]
                push    dx
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                jmp     short loc_1BD29
; ---------------------------------------------------------------------------

loc_1BD0F:                              ; CODE XREF: sub_1BB1E+49↑j
                push    32Eh
                jmp     short loc_1BD17
; ---------------------------------------------------------------------------

loc_1BD14:                              ; CODE XREF: sub_1BB1E+1D↑j
                                        ; sub_1BB1E+25↑j ...
                push    41Ch

loc_1BD17:                              ; CODE XREF: sub_1BB1E+1F4↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4

loc_1BD29:                              ; CODE XREF: sub_1BB1E+130↑j
                                        ; sub_1BB1E+1EF↑j
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                retf
sub_1BB1E       endp


; =============== S U B R O U T I N E =======================================


sub_1BD2D       proc far                ; DATA XREF: dseg19:121C↓o
                push    si
                push    di
                push    ds
                mov     ax, seg dseg15
                mov     ds, ax
                assume ds:dseg15
                push    seg dseg19
                push    offset byte_29FDB
                call    sub_1872A
                add     sp, 4
                mov     di, ax
                cmp     di, 0FFFFh
                jg      short loc_1BD4D
                jmp     loc_1BF5E
; ---------------------------------------------------------------------------

loc_1BD4D:                              ; CODE XREF: sub_1BD2D+1B↑j
                cmp     di, 4
                jl      short loc_1BD55
                jmp     loc_1BF5E
; ---------------------------------------------------------------------------

loc_1BD55:                              ; CODE XREF: sub_1BD2D+23↑j
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                cmp     word ptr es:[bx+18FCh], 1
                jz      short loc_1BD69
                jmp     loc_1BF5E
; ---------------------------------------------------------------------------

loc_1BD69:                              ; CODE XREF: sub_1BD2D+37↑j
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+24h]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                cmp     ax, es:word_29786
                jnz     short loc_1BD86
                jmp     loc_1BF5E
; ---------------------------------------------------------------------------

loc_1BD86:                              ; CODE XREF: sub_1BD2D+54↑j
                push    0
                call    sub_1A031
                pop     cx
                cmp     ax, 1
                jz      short loc_1BD96
                jmp     loc_1BF59
; ---------------------------------------------------------------------------

loc_1BD96:                              ; CODE XREF: sub_1BD2D+64↑j
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+2Ah]
                add     ax, 13h
                mov     bx, di
                shl     bx, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     es:[bx+18FCh], ax
                call    sub_15DD6
                mov     bx, di
                shl     bx, 2
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:[bx+28h]
                push    word ptr es:[bx+26h]
                push    44Dh
                call    sub_15C18
                add     sp, 6
                push    0
                push    0FFFFh
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+24h]
                mov     es, ax
                assume es:dseg19
                add     dx, es:[bx+18h]
                push    dx
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+22h]
                mov     es, ax
                assume es:dseg19
                add     dx, es:[bx+10h]
                push    dx
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+20h]
                mov     es, ax
                assume es:dseg19
                add     dx, es:[bx+8]
                push    dx
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_15D7B
                add     sp, 4
                cmp     ax, 1
                jz      short loc_1BE8C
                jmp     loc_1BF73
; ---------------------------------------------------------------------------

loc_1BE8C:                              ; CODE XREF: sub_1BD2D+15A↑j
                mov     si, 1
                cmp     di, 1
                jz      short loc_1BE9E
                cmp     di, 3
                jz      short loc_1BE9E
                cmp     di, 5
                jnz     short loc_1BEA1

loc_1BE9E:                              ; CODE XREF: sub_1BD2D+165↑j
                                        ; sub_1BD2D+16A↑j
                mov     si, 0FFFFh

loc_1BEA1:                              ; CODE XREF: sub_1BD2D+16F↑j
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+2Ah]
                add     ax, 13h
                mov     bx, di
                add     bx, si
                shl     bx, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     es:[bx+18FCh], ax
                call    sub_15DD6
                mov     bx, di
                add     bx, si
                shl     bx, 2
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:[bx+28h]
                push    word ptr es:[bx+26h]
                push    44Dh
                call    sub_15C18
                add     sp, 6
                push    0
                push    0FFFFh
                push    0FFFFh
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+24h]
                mov     es, ax
                assume es:dseg19
                add     dx, es:[bx+18h]
                push    dx
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+22h]
                mov     es, ax
                assume es:dseg19
                add     dx, es:[bx+10h]
                push    dx
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+20h]
                mov     es, ax
                assume es:dseg19
                add     dx, es:[bx+8]
                push    dx
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                jmp     short loc_1BF73
; ---------------------------------------------------------------------------

loc_1BF59:                              ; CODE XREF: sub_1BD2D+66↑j
                push    32Eh
                jmp     short loc_1BF61
; ---------------------------------------------------------------------------

loc_1BF5E:                              ; CODE XREF: sub_1BD2D+1D↑j
                                        ; sub_1BD2D+25↑j ...
                push    41Ch

loc_1BF61:                              ; CODE XREF: sub_1BD2D+22F↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4

loc_1BF73:                              ; CODE XREF: sub_1BD2D+15C↑j
                                        ; sub_1BD2D+22A↑j
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                retf
sub_1BD2D       endp


; =============== S U B R O U T I N E =======================================


sub_1BF77       proc far                ; DATA XREF: dseg19:117A↓o
                push    si
                push    di
                push    ds
                mov     ax, seg dseg15
                mov     ds, ax
                assume ds:dseg15
                mov     di, 0FFFFh
                xor     si, si

loc_1BF84:                              ; CODE XREF: sub_1BF77+5D↓j
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+64h], 0FFFFh
                jle     short loc_1BFD0
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+64h]
                imul    ax, 36h ; '6'
                add     ax, 0FDEh
                push    seg dseg19
                push    ax
                push    seg dseg19
                push    offset byte_29FDB
                call    SAMETO          ; int match=sameto(char *shorts, char *longs);
                add     sp, 8
                or      ax, ax
                jz      short loc_1BFD0
                mov     di, si
                mov     si, 14h

loc_1BFD0:                              ; CODE XREF: sub_1BF77+22↑j
                                        ; sub_1BF77+52↑j
                inc     si
                cmp     si, 14h
                jl      short loc_1BF84
                cmp     di, 0FFFFh
                jg      short loc_1BFDE
                jmp     loc_1C061
; ---------------------------------------------------------------------------

loc_1BFDE:                              ; CODE XREF: sub_1BF77+62↑j
                xor     cx, cx
                xor     si, si

loc_1BFE2:                              ; CODE XREF: sub_1BF77+DF↓j
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+3Ch], 0FFFFh
                jnz     short loc_1C052
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     word ptr es:[bx+3Ch], 3
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+64h]
                mov     dx, si
                shl     dx, 1
                mov     bx, seg dseg19
                mov     es, bx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, dx
                mov     es:[bx+50h], ax
                push    44Eh
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4
                mov     si, 0Bh
                mov     cx, 1

loc_1C052:                              ; CODE XREF: sub_1BF77+80↑j
                inc     si
                cmp     si, 0Ah
                jl      short loc_1BFE2
                or      cx, cx
                jnz     short loc_1C076
                push    436h
                jmp     short loc_1C064
; ---------------------------------------------------------------------------

loc_1C061:                              ; CODE XREF: sub_1BF77+64↑j
                push    44Fh

loc_1C064:                              ; CODE XREF: sub_1BF77+E8↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4

loc_1C076:                              ; CODE XREF: sub_1BF77+E3↑j
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                retf
sub_1BF77       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1C07A       proc far                ; DATA XREF: dseg19:12F4↓o

var_6           = word ptr -6
var_4           = word ptr -4
var_2           = word ptr -2

                enter   6, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg15
                mov     ds, ax
                assume ds:dseg15
                push    2
                push    seg dseg19
                push    offset byte_29FDB
                call    sub_1609C
                add     sp, 6
                mov     si, ax
                mov     di, 0FFFFh
                cmp     si, 0FFFFh
                jg      short loc_1C0A3
                jmp     loc_1C54E
; ---------------------------------------------------------------------------

loc_1C0A3:                              ; CODE XREF: sub_1C07A+24↑j
                xor     cx, cx

loc_1C0A5:                              ; CODE XREF: sub_1C07A+4B↓j
                mov     ax, cx
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+3Ch], 0FFFFh
                jnz     short loc_1C0C1
                mov     di, cx
                mov     cx, 0Ah

loc_1C0C1:                              ; CODE XREF: sub_1C07A+40↑j
                inc     cx
                cmp     cx, 0Ah
                jl      short loc_1C0A5
                cmp     di, 0FFFFh
                jg      short loc_1C0CF
                jmp     loc_1C537
; ---------------------------------------------------------------------------

loc_1C0CF:                              ; CODE XREF: sub_1C07A+50↑j
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                push    word ptr es:[bx+50h]
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                push    word ptr es:[bx+3Ch]
                call    sub_15B72
                add     sp, 4
                push    ax
                push    dx
                xor     dx, dx
                mov     ax, 0C8h
                pop     cx
                pop     bx
                call    F_LXMUL
                mov     [bp+var_4], dx
                mov     [bp+var_6], ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+96h]
                mov     dx, es:[bx+94h]
                cmp     ax, [bp+var_4]
                jge     short loc_1C12F
                jmp     loc_1C4E0
; ---------------------------------------------------------------------------

loc_1C12F:                              ; CODE XREF: sub_1C07A+B0↑j
                jnz     short loc_1C139
                cmp     dx, [bp+var_6]
                jnb     short loc_1C139
                jmp     loc_1C4E0
; ---------------------------------------------------------------------------

loc_1C139:                              ; CODE XREF: sub_1C07A:loc_1C12F↑j
                                        ; sub_1C07A+BA↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, [bp+var_4]
                mov     dx, [bp+var_6]
                sub     es:[bx+94h], dx
                sbb     es:[bx+96h], ax
                mov     [bp+var_2], 0
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29BDA
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+1Ch], 6
                jz      short loc_1C185
                jmp     loc_1C30C
; ---------------------------------------------------------------------------

loc_1C185:                              ; CODE XREF: sub_1C07A+106↑j
                push    3
                call    sub_18A8A
                pop     cx
                or      ax, ax
                jz      short loc_1C194
                jmp     loc_1C30C
; ---------------------------------------------------------------------------

loc_1C194:                              ; CODE XREF: sub_1C07A+115↑j
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                push    4B6h
                call    sub_15C18
                add     sp, 6
                push    9
                push    ds
                push    offset unk_263EF
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 6
                push    dx
                push    ax
                push    34Eh
                call    sub_15C18
                add     sp, 6
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_17567
                pop     cx
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                push    4B7h
                call    sub_15C18
                add     sp, 0Ah
                push    9
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     word ptr es:[bx+3Ch], 0FFFFh
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     word ptr es:[bx+50h], 0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     word ptr es:[bx+9Ah], 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                sub     word ptr es:[bx+26h], 9
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+26h], 1
                jge     short loc_1C307
                push    339h
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_183D9
                pop     cx

loc_1C307:                              ; CODE XREF: sub_1C07A+266↑j
                mov     [bp+var_2], 1

loc_1C30C:                              ; CODE XREF: sub_1C07A+108↑j
                                        ; sub_1C07A+117↑j
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+3Ch], 10Ah
                jz      short loc_1C33C
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+3Ch], 10Bh
                jnz     short loc_1C341

loc_1C33C:                              ; CODE XREF: sub_1C07A+2A8↑j
                mov     [bp+var_2], 1

loc_1C341:                              ; CODE XREF: sub_1C07A+2C0↑j
                cmp     [bp+var_2], 0
                jz      short loc_1C34A
                jmp     loc_1C537
; ---------------------------------------------------------------------------

loc_1C34A:                              ; CODE XREF: sub_1C07A+2CB↑j
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                mov     dx, di
                shl     dx, 1
                mov     bx, seg dseg19
                mov     es, bx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, dx
                mov     es:[bx+3Ch], ax
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+50h]
                mov     dx, di
                shl     dx, 1
                mov     bx, seg dseg19
                mov     es, bx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, dx
                mov     es:[bx+50h], ax
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                push    0
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                call    sub_15560
                add     sp, 6
                push    dx
                push    ax
                push    3BEh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 0Ch
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                push    0
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                call    sub_15560
                add     sp, 6
                push    dx
                push    ax
                push    450h
                call    sub_15C18
                add     sp, 0Eh
                push    0
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                jmp     loc_1C569
; ---------------------------------------------------------------------------
                jmp     short loc_1C537
; ---------------------------------------------------------------------------

loc_1C4E0:                              ; CODE XREF: sub_1C07A+B2↑j
                                        ; sub_1C07A+BC↑j
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                push    [bp+var_4]
                push    [bp+var_6]
                push    ds
                push    offset unk_263EB
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                push    dx
                push    ax
                push    451h
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 0Ch
                jmp     short loc_1C569
; ---------------------------------------------------------------------------

loc_1C537:                              ; CODE XREF: sub_1C07A+52↑j
                                        ; sub_1C07A+2CD↑j ...
                push    436h
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4
                jmp     short loc_1C569
; ---------------------------------------------------------------------------

loc_1C54E:                              ; CODE XREF: sub_1C07A+26↑j
                push    seg dseg19
                push    offset byte_29FDB
                push    3C1h
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8

loc_1C569:                              ; CODE XREF: sub_1C07A+461↑j
                                        ; sub_1C07A+4BB↑j ...
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_1C07A       endp


; =============== S U B R O U T I N E =======================================


sub_1C56E       proc far                ; DATA XREF: dseg19:1252↓o
                push    si
                push    di
                push    ds
                mov     ax, seg dseg15
                mov     ds, ax
                assume ds:dseg15
                mov     di, 0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AED3, 2
                jge     short loc_1C58E
                call    sub_15CFA
                jmp     loc_1C705
; ---------------------------------------------------------------------------

loc_1C58E:                              ; CODE XREF: sub_1C56E+16↑j
                mov     ax, seg dseg19
                mov     es, ax
                mov     si, es:word_2AED1
                jmp     short loc_1C5C2
; ---------------------------------------------------------------------------

loc_1C59A:                              ; CODE XREF: sub_1C56E+5E↓j
                push    si
                call    sub_1A0E4
                pop     cx
                push    dx
                push    ax
                push    seg dseg19
                push    offset byte_29FDB
                call    SAMETO          ; int match=sameto(char *shorts, char *longs);
                add     sp, 8
                or      ax, ax
                jz      short loc_1C5C1
                mov     di, si
                mov     ax, seg dseg19
                mov     es, ax
                mov     si, es:word_2AECF

loc_1C5C1:                              ; CODE XREF: sub_1C56E+45↑j
                inc     si

loc_1C5C2:                              ; CODE XREF: sub_1C56E+2A↑j
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AECF, si
                jg      short loc_1C59A
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AED1, di
                jnz     short loc_1C5F9
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED1
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                cmp     word ptr es:[bx+0D6h], 2
                jz      short loc_1C5F9
                jmp     loc_1C6F0
; ---------------------------------------------------------------------------

loc_1C5F9:                              ; CODE XREF: sub_1C56E+6A↑j
                                        ; sub_1C56E+86↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     si, es:word_2AED1
                jmp     short loc_1C64F
; ---------------------------------------------------------------------------

loc_1C605:                              ; CODE XREF: sub_1C56E+EB↓j
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                cmp     word ptr es:[bx+0D6h], 2
                jnz     short loc_1C64E
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                cmp     word ptr es:[bx+0D4h], 1
                jnz     short loc_1C64E
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                mov     ax, es:[bx+0DCh]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                cmp     ax, es:word_2AED5
                jnz     short loc_1C64E
                push    si
                call    sub_1FF54
                pop     cx

loc_1C64E:                              ; CODE XREF: sub_1C56E+A8↑j
                                        ; sub_1C56E+BB↑j ...
                inc     si

loc_1C64F:                              ; CODE XREF: sub_1C56E+95↑j
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AECF, si
                jg      short loc_1C605
                cmp     di, 0FFFFh
                jg      short loc_1C663
                jmp     loc_1C6F0
; ---------------------------------------------------------------------------

loc_1C663:                              ; CODE XREF: sub_1C56E+F0↑j
                push    di
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                mov     ax, es:[bx+36h]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     ax, es:[bx+36h]
                jge     short loc_1C696
                push    di
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                mov     word ptr es:[bx+0D4h], 1
                jmp     short loc_1C6A8
; ---------------------------------------------------------------------------

loc_1C696:                              ; CODE XREF: sub_1C56E+112↑j
                push    di
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                mov     word ptr es:[bx+0D4h], 0

loc_1C6A8:                              ; CODE XREF: sub_1C56E+126↑j
                push    di
                call    sub_1A0E4
                pop     cx
                mov     bx, seg dseg19
                mov     es, bx
                assume es:dseg19
                mov     bx, es:word_2AED5
                mov     es, dx
                assume es:nothing
                xchg    ax, bx
                mov     es:[bx+0DCh], ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     es:[bx+0DCh], di
                push    di
                call    sub_1A0E4
                pop     cx
                push    dx
                push    ax
                push    452h
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8
                jmp     short loc_1C705
; ---------------------------------------------------------------------------

loc_1C6F0:                              ; CODE XREF: sub_1C56E+88↑j
                                        ; sub_1C56E+F2↑j
                push    436h
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4

loc_1C705:                              ; CODE XREF: sub_1C56E+1D↑j
                                        ; sub_1C56E+180↑j
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                retf
sub_1C56E       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1C709       proc far                ; DATA XREF: dseg19:off_29578↓o

var_A           = word ptr -0Ah
var_8           = dword ptr -8
var_4           = word ptr -4
var_2           = word ptr -2

                enter   0Ah, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg15
                mov     ds, ax
                assume ds:dseg15
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     di, es:[bx+0DCh]
                cmp     di, 0FFFFh
                jle     short loc_1C73F
                push    di
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                cmp     word ptr es:[bx+0D4h], 1
                jz      short loc_1C73F
                mov     di, 0FFFFh

loc_1C73F:                              ; CODE XREF: sub_1C709+1E↑j
                                        ; sub_1C709+31↑j
                cmp     di, 0FFFFh
                jg      short loc_1C747
                jmp     loc_1C836
; ---------------------------------------------------------------------------

loc_1C747:                              ; CODE XREF: sub_1C709+39↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     si, es:word_2AED3
                cmp     si, 14h
                jle     short loc_1C759
                mov     si, 14h

loc_1C759:                              ; CODE XREF: sub_1C709+4B↑j
                mov     [bp+var_2], 0
                cmp     [bp+var_2], si
                jge     short loc_1C790

loc_1C763:                              ; CODE XREF: sub_1C709+85↓j
                push    12h
                mov     ax, [bp+var_2]
                imul    ax, 0C8h
                mov     [bp+var_A], ax
                add     ax, 1CEBh
                push    seg dseg19
                push    ax
                mov     ax, [bp+var_A]
                add     ax, 1C23h
                push    seg dseg19
                push    ax
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                inc     [bp+var_2]
                cmp     [bp+var_2], si
                jl      short loc_1C763

loc_1C790:                              ; CODE XREF: sub_1C709+58↑j
                mov     ax, si
                dec     ax
                mov     dx, seg dseg19
                mov     es, dx
                mov     es:word_2AED3, ax
                push    seg dseg19
                push    offset byte_29F13
                call    sub_680
                add     sp, 4
                mov     [bp+var_4], ax
                cmp     ax, 0FFFFh
                jg      short loc_1C7B5
                jmp     loc_1C836
; ---------------------------------------------------------------------------

loc_1C7B5:                              ; CODE XREF: sub_1C709+A7↑j
                mov     ax, [bp+var_4]
                imul    ax, 1Eh
                add     ax, 156h
                mov     word ptr [bp+var_8+2], seg dseg19
                mov     word ptr [bp+var_8], ax
                les     bx, [bp+var_8]
                assume es:nothing
                mov     ax, es:[bx+1Ch]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     es:word_2AEC7, ax
                les     bx, [bp+var_8]
                assume es:nothing
                cmp     word ptr es:[bx+1Ah], 0
                jnz     short loc_1C836
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     si, es:word_2AED5
                push    di
                call    sub_1A0E4
                pop     cx
                mov     bx, seg dseg19
                mov     es, bx
                mov     word ptr es:dword_29DD4+2, dx
                mov     word ptr es:dword_29DD4, ax
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_2AED5, di
                les     bx, [bp+var_8]
                assume es:nothing
                call    dword ptr es:[bx+14h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:word_2AED5, si
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, seg dseg19
                mov     es, bx
                mov     word ptr es:dword_29DD4+2, dx
                mov     word ptr es:dword_29DD4, ax
                push    374h
                jmp     short loc_1C839
; ---------------------------------------------------------------------------
                jmp     short $+2
; ---------------------------------------------------------------------------

loc_1C836:                              ; CODE XREF: sub_1C709+3B↑j
                                        ; sub_1C709+A9↑j ...
                push    436h

loc_1C839:                              ; CODE XREF: sub_1C709+129↑j
                call    sub_15C18
                pop     cx
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_17567
                pop     cx
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_1C709       endp


; =============== S U B R O U T I N E =======================================


sub_1C854       proc far                ; DATA XREF: dseg19:off_294A0↓o
                push    ds
                mov     ax, seg dseg15
                mov     ds, ax
                assume ds:dseg15
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_15D7B
                add     sp, 4
                push    0
                call    sub_1A031
                pop     cx
                or      ax, ax
                jnz     short loc_1C8A5
                jmp     loc_1C964
; ---------------------------------------------------------------------------

loc_1C8A5:                              ; CODE XREF: sub_1C854+4C↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     es:word_29BF6, 1
                jz      short loc_1C8B5
                jmp     loc_1C964
; ---------------------------------------------------------------------------

loc_1C8B5:                              ; CODE XREF: sub_1C854+5C↑j
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+24h]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                cmp     ax, es:word_29786
                jnz     short loc_1C8D2
                jmp     loc_1C964
; ---------------------------------------------------------------------------

loc_1C8D2:                              ; CODE XREF: sub_1C854+79↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_29880
                push    es:word_2987E
                call    SETBTV          ; void setbtv(BTVFILE *bbprt);
                add     sp, 4
                push    37h ; '7'
                push    0
                push    seg dseg19
                push    offset byte_29BDE
                call    QRYBTV          ; int is=qrybtv(char *key, int keynum, int qryopt);
                add     sp, 8
                or      ax, ax
                jz      short loc_1C964
                push    0
                call    ABSBTV          ; long absbtv (void);
                push    dx
                push    ax
                push    seg dseg19
                push    offset byte_29B40
                call    GABBTV          ; void garbbtv(char *recptr, long abspos, intkeynum);
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    seg dseg19
                push    offset unk_29B4A
                call    SAMEAS          ; int match=sameas(char *stgl, char* stg2);
                add     sp, 8
                or      ax, ax
                jz      short loc_1C964
                push    1Eh
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    seg dseg19
                push    offset unk_29C1E
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                call    sub_15DD6
                push    453h
                jmp     short loc_1C967
; ---------------------------------------------------------------------------
                jmp     short loc_1C964
; ---------------------------------------------------------------------------
                jmp     short $+2
; ---------------------------------------------------------------------------

loc_1C964:                              ; CODE XREF: sub_1C854+4E↑j
                                        ; sub_1C854+5E↑j ...
                push    436h

loc_1C967:                              ; CODE XREF: sub_1C854+10A↑j
                call    sub_15C18
                pop     cx
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_17567
                pop     cx
                pop     ds
                assume ds:dseg21
                retf
sub_1C854       endp


; =============== S U B R O U T I N E =======================================


sub_1C97F       proc far                ; DATA XREF: dseg19:1360↓o
                push    ds
                mov     ax, seg dseg15
                mov     ds, ax
                assume ds:dseg15
                push    455h
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                add     word ptr es:[bx+3Ah], 1F4h
                pop     ds
                assume ds:dseg21
                retf
sub_1C97F       endp


; =============== S U B R O U T I N E =======================================


sub_1C9AC       proc far                ; DATA XREF: dseg19:1402↓o
                push    ds
                mov     ax, seg dseg15
                mov     ds, ax
                assume ds:dseg15
                push    456h
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                add     word ptr es:[bx+32h], 1F4h
                pop     ds
                assume ds:dseg21
                retf
sub_1C9AC       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1C9D9       proc far                ; CODE XREF: sub_20DF0+1F4↓P
                                        ; DATA XREF: dseg19:1396↓o

var_14          = dword ptr -14h
var_10          = word ptr -10h
var_E           = word ptr -0Eh
var_C           = word ptr -0Ch
var_A           = word ptr -0Ah
var_8           = word ptr -8
var_6           = word ptr -6
var_4           = dword ptr -4

                enter   14h, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg15
                mov     ds, ax
                assume ds:dseg15
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+0DCh]
                mov     [bp+var_A], ax
                push    seg dseg19
                push    offset byte_29FDB
                call    sub_1872A
                add     sp, 4
                mov     si, ax
                mov     [bp+var_E], 1
                cmp     si, 1
                jz      short loc_1CA1B
                cmp     si, 3
                jz      short loc_1CA1B
                cmp     si, 5
                jnz     short loc_1CA20

loc_1CA1B:                              ; CODE XREF: sub_1C9D9+36↑j
                                        ; sub_1C9D9+3B↑j
                mov     [bp+var_E], 0FFFFh

loc_1CA20:                              ; CODE XREF: sub_1C9D9+40↑j
                cmp     si, 0FFFFh
                jg      short loc_1CA28
                jmp     loc_1CE48
; ---------------------------------------------------------------------------

loc_1CA28:                              ; CODE XREF: sub_1C9D9+4A↑j
                cmp     [bp+var_A], 0FFFFh
                jle     short loc_1CA3D
                push    [bp+var_A]
                call    sub_1A0E4
                pop     cx
                mov     word ptr [bp+var_14+2], dx
                mov     word ptr [bp+var_14], ax

loc_1CA3D:                              ; CODE XREF: sub_1C9D9+53↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     di, es:[bx+20h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+22h]
                mov     [bp+var_6], ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+24h]
                mov     [bp+var_8], ax
                mov     bx, si
                shl     bx, 2
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    word ptr es:[bx+28h]
                push    word ptr es:[bx+26h]
                push    457h
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8
                mov     [bp+var_C], 0

loc_1CA9B:                              ; CODE XREF: sub_1C9D9+46A↓j
                push    458h
                call    sub_15C18
                pop     cx
                push    0
                push    0FFFFh
                push    0FFFFh
                push    [bp+var_8]
                push    [bp+var_6]
                push    di
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                cmp     [bp+var_A], 0FFFFh
                jg      short loc_1CACC
                jmp     loc_1CC3A
; ---------------------------------------------------------------------------

loc_1CACC:                              ; CODE XREF: sub_1C9D9+EE↑j
                les     bx, [bp+var_14]
                assume es:nothing
                cmp     es:[bx+20h], di
                jz      short loc_1CAD8
                jmp     loc_1CC3A
; ---------------------------------------------------------------------------

loc_1CAD8:                              ; CODE XREF: sub_1C9D9+FA↑j
                les     bx, [bp+var_14]
                mov     ax, es:[bx+22h]
                cmp     ax, [bp+var_6]
                jz      short loc_1CAE7
                jmp     loc_1CC3A
; ---------------------------------------------------------------------------

loc_1CAE7:                              ; CODE XREF: sub_1C9D9+109↑j
                les     bx, [bp+var_14]
                mov     ax, es:[bx+24h]
                cmp     ax, [bp+var_8]
                jz      short loc_1CAF6
                jmp     loc_1CC3A
; ---------------------------------------------------------------------------

loc_1CAF6:                              ; CODE XREF: sub_1C9D9+118↑j
                push    word ptr [bp+var_14+2]
                push    word ptr [bp+var_14]
                push    459h
                call    sub_15C18
                add     sp, 6
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_2AED5
                mov     [bp+var_10], ax
                mov     ax, seg dseg19
                mov     dx, [bp+var_A]
                mov     es, ax
                mov     es:word_2AED5, dx
                push    0
                push    [bp+var_A]
                push    0FFFFh
                les     bx, [bp+var_14]
                assume es:nothing
                push    word ptr es:[bx+24h]
                les     bx, [bp+var_14]
                push    word ptr es:[bx+22h]
                les     bx, [bp+var_14]
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     dx, [bp+var_10]
                mov     es, ax
                assume es:dseg19
                mov     es:word_2AED5, dx
                push    45Ah
                push    [bp+var_A]
                call    sub_15C7E
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     es:[bx+20h], di
                jnz     short loc_1CB9F
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+22h]
                cmp     ax, [bp+var_6]
                jnz     short loc_1CB9F
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+24h]
                cmp     ax, [bp+var_8]
                jz      short loc_1CBBA

loc_1CB9F:                              ; CODE XREF: sub_1C9D9+19E↑j
                                        ; sub_1C9D9+1B1↑j
                push    word ptr [bp+var_14+2]
                push    word ptr [bp+var_14]
                push    45Bh
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8

loc_1CBBA:                              ; CODE XREF: sub_1C9D9+1C4↑j
                push    seg dseg19
                push    offset byte_29F13
                push    ds
                push    offset unk_263F2
                call    SAMETO          ; int match=sameto(char *shorts, char *longs);
                add     sp, 8
                or      ax, ax
                jz      short loc_1CBFC
                push    0Ah
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+2Ah]
                shl     ax, 3

loc_1CBE3:                              ; CODE XREF: sub_1C9D9+25F↓j
                push    ax
                push    [bp+var_A]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_16AD9
                add     sp, 8
                jmp     loc_1CE4D
; ---------------------------------------------------------------------------

loc_1CBFC:                              ; CODE XREF: sub_1C9D9+1F5↑j
                mov     word ptr [bp+var_4+2], seg dseg19
                mov     word ptr [bp+var_4], 1DB3h
                les     bx, [bp+var_4]
                assume es:nothing
                mov     al, es:[bx]
                mov     ah, 0
                push    ax
                call    TOUPPER         ; int toupper (int c);
                pop     cx
                les     bx, [bp+var_4]
                mov     es:[bx], al
                les     bx, [bp+var_4]
                mov     al, es:[bx]
                mov     ah, 0
                add     ax, 0FFC0h
                push    ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+2Ah]
                imul    ax, 3
                jmp     short loc_1CBE3
; ---------------------------------------------------------------------------

loc_1CC3A:                              ; CODE XREF: sub_1C9D9+F0↑j
                                        ; sub_1C9D9+FC↑j ...
                push    [bp+var_8]
                push    [bp+var_6]
                push    di
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_15D7B
                add     sp, 4
                or      ax, ax
                jnz     short loc_1CC5A
                jmp     loc_1CE4D
; ---------------------------------------------------------------------------

loc_1CC5A:                              ; CODE XREF: sub_1C9D9+27C↑j
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     word ptr es:[bx+18FCh], 2
                jz      short loc_1CC6E
                jmp     loc_1CD7C
; ---------------------------------------------------------------------------

loc_1CC6E:                              ; CODE XREF: sub_1C9D9+290↑j
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                mov     word ptr es:[bx+18FCh], 1
                call    sub_15DD6
                mov     bx, si
                shl     bx, 2
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:[bx+28h]
                push    word ptr es:[bx+26h]
                push    45Ch
                call    sub_15C18
                add     sp, 6
                push    0
                push    0FFFFh
                push    0FFFFh
                push    [bp+var_8]
                push    [bp+var_6]
                push    di
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, [bp+var_8]
                mov     es, ax
                add     dx, es:[bx+18h]
                push    dx
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, [bp+var_6]
                mov     es, ax
                add     dx, es:[bx+10h]
                push    dx
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, di
                mov     es, ax
                add     dx, es:[bx+8]
                push    dx
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_15D7B
                add     sp, 4
                mov     bx, si
                add     bx, [bp+var_E]
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                mov     word ptr es:[bx+18FCh], 1
                call    sub_15DD6
                mov     bx, si
                add     bx, [bp+var_E]
                shl     bx, 2
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:[bx+28h]
                push    word ptr es:[bx+26h]
                push    45Ch
                call    sub_15C18
                add     sp, 6
                push    9
                push    0FFFFh
                push    0FFFFh
                mov     bx, si
                add     bx, [bp+var_E]
                shl     bx, 1
                mov     si, bx
                mov     ax, seg dseg19
                mov     dx, [bp+var_8]
                mov     es, ax
                add     dx, es:[bx+18h]
                push    dx
                mov     ax, seg dseg19
                mov     dx, [bp+var_6]
                mov     es, ax
                add     dx, es:[si+10h]
                push    dx
                mov     ax, seg dseg19
                mov     dx, di
                mov     es, ax
                add     dx, es:[si+8]
                push    dx
                jmp     short loc_1CDCA
; ---------------------------------------------------------------------------

loc_1CD7C:                              ; CODE XREF: sub_1C9D9+292↑j
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                cmp     word ptr es:[bx+18FCh], 0Ah
                jle     short loc_1CDDE
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                cmp     word ptr es:[bx+18FCh], 14h
                jge     short loc_1CDDE
                mov     bx, si
                shl     bx, 2
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:[bx+28h]
                push    word ptr es:[bx+26h]
                push    45Dh
                call    sub_15C18
                add     sp, 6
                push    0
                push    0FFFFh
                push    0FFFFh
                push    [bp+var_8]
                push    [bp+var_6]
                push    di

loc_1CDCA:                              ; CODE XREF: sub_1C9D9+3A1↑j
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                jmp     short loc_1CE4D
; ---------------------------------------------------------------------------

loc_1CDDE:                              ; CODE XREF: sub_1C9D9+3B2↑j
                                        ; sub_1C9D9+3C3↑j
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                cmp     word ptr es:[bx+18FCh], 1
                jz      short loc_1CE00
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                cmp     word ptr es:[bx+18FCh], 0Ah
                jnz     short loc_1CE4D

loc_1CE00:                              ; CODE XREF: sub_1C9D9+414↑j
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, di
                mov     es, ax
                add     dx, es:[bx+8]
                mov     di, dx
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, [bp+var_6]
                mov     es, ax
                add     dx, es:[bx+10h]
                mov     [bp+var_6], dx
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, [bp+var_8]
                mov     es, ax
                add     dx, es:[bx+18h]
                mov     [bp+var_8], dx
                inc     [bp+var_C]
                cmp     [bp+var_C], 5
                jge     short loc_1CE46
                jmp     loc_1CA9B
; ---------------------------------------------------------------------------

loc_1CE46:                              ; CODE XREF: sub_1C9D9+468↑j
                jmp     short loc_1CE4D
; ---------------------------------------------------------------------------

loc_1CE48:                              ; CODE XREF: sub_1C9D9+4C↑j
                call    sub_15CFA

loc_1CE4D:                              ; CODE XREF: sub_1C9D9+220↑j
                                        ; sub_1C9D9+27E↑j ...
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_1C9D9       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1CE52       proc far                ; DATA XREF: dseg19:off_296BC↓o

var_E           = dword ptr -0Eh
var_A           = word ptr -0Ah
var_8           = word ptr -8
var_6           = word ptr -6
var_4           = word ptr -4
var_2           = word ptr -2

                enter   0Eh, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg15
                mov     ds, ax
                assume ds:dseg15
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    45Eh
                call    sub_15C18
                add     sp, 6
                push    9
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                push    45Fh
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+24h]
                mov     [bp+var_8], ax
                push    [bp+var_8]
                call    sub_1A075
                pop     cx
                mov     bx, ax
                mov     es, dx
                mov     ax, es:[bx+4B0h]
                mov     [bp+var_6], ax
                mov     [bp+var_2], 0
                mov     [bp+var_4], 0
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     es:word_2AED3, 1
                jle     short loc_1CF28
                push    seg dseg19
                push    offset byte_29FDB
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                mov     [bp+var_2], dx
                mov     [bp+var_4], ax

loc_1CF28:                              ; CODE XREF: sub_1CE52+C0↑j
                cmp     [bp+var_2], 0
                jge     short loc_1CF31
                jmp     loc_1CFC6
; ---------------------------------------------------------------------------

loc_1CF31:                              ; CODE XREF: sub_1CE52+DA↑j
                jg      short loc_1CF3D
                cmp     [bp+var_4], 0C350h
                ja      short loc_1CF3D
                jmp     loc_1CFC6
; ---------------------------------------------------------------------------

loc_1CF3D:                              ; CODE XREF: sub_1CE52:loc_1CF31↑j
                                        ; sub_1CE52+E6↑j
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+96h], 0
                jl      short loc_1CFC6
                jg      short loc_1CF5A
                cmp     word ptr es:[bx+94h], 0C350h
                jbe     short loc_1CFC6

loc_1CF5A:                              ; CODE XREF: sub_1CE52+FD↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+96h]
                mov     dx, es:[bx+94h]
                cmp     ax, [bp+var_2]
                jg      short loc_1CF94
                jl      short loc_1CF7A
                cmp     dx, [bp+var_4]
                jnb     short loc_1CF94

loc_1CF7A:                              ; CODE XREF: sub_1CE52+121↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+96h]
                mov     dx, es:[bx+94h]
                mov     [bp+var_2], ax
                mov     [bp+var_4], dx

loc_1CF94:                              ; CODE XREF: sub_1CE52+11F↑j
                                        ; sub_1CE52+126↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, [bp+var_2]
                mov     dx, [bp+var_4]
                sub     es:[bx+94h], dx
                sbb     es:[bx+96h], ax
                push    0
                push    0C350h
                push    [bp+var_2]
                push    [bp+var_4]
                call    F_LDIV
                mov     [bp+var_2], dx
                mov     [bp+var_4], ax
                jmp     short loc_1CFD0
; ---------------------------------------------------------------------------

loc_1CFC6:                              ; CODE XREF: sub_1CE52+DC↑j
                                        ; sub_1CE52+E8↑j ...
                mov     [bp+var_2], 0
                mov     [bp+var_4], 0

loc_1CFD0:                              ; CODE XREF: sub_1CE52+172↑j
                xor     di, di
                jmp     loc_1D1AA
; ---------------------------------------------------------------------------

loc_1CFD5:                              ; CODE XREF: sub_1CE52+35D↓j
                push    [bp+var_8]
                call    sub_1A075
                pop     cx
                mov     bx, di
                shl     bx, 1
                add     ax, bx
                mov     bx, ax
                mov     es, dx
                mov     si, es:[bx+320h]
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                cmp     word ptr es:[bx+0D6h], 2
                jz      short loc_1D003
                jmp     loc_1D1A9
; ---------------------------------------------------------------------------

loc_1D003:                              ; CODE XREF: sub_1CE52+1AC↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     es:word_2AED5, si
                jnz     short loc_1D012
                jmp     loc_1D1A9
; ---------------------------------------------------------------------------

loc_1D012:                              ; CODE XREF: sub_1CE52+1BB↑j
                push    si
                call    sub_1A0E4
                pop     cx
                mov     word ptr [bp+var_E+2], dx
                mov     word ptr [bp+var_E], ax
                les     bx, [bp+var_E]
                assume es:nothing
                mov     ax, es:[bx+20h]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     ax, es:[bx+20h]
                jz      short loc_1D039
                jmp     loc_1D1A9
; ---------------------------------------------------------------------------

loc_1D039:                              ; CODE XREF: sub_1CE52+1E2↑j
                les     bx, [bp+var_E]
                mov     ax, es:[bx+22h]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     ax, es:[bx+22h]
                jz      short loc_1D053
                jmp     loc_1D1A9
; ---------------------------------------------------------------------------

loc_1D053:                              ; CODE XREF: sub_1CE52+1FC↑j
                les     bx, [bp+var_E]
                mov     ax, es:[bx+24h]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     ax, es:[bx+24h]
                jz      short loc_1D06D
                jmp     loc_1D1A9
; ---------------------------------------------------------------------------

loc_1D06D:                              ; CODE XREF: sub_1CE52+216↑j
                mov     [bp+var_A], 1
                mov     ax, seg NTERMS
                mov     es, ax
                assume es:nothing
                cmp     word ptr es:NTERMS, si ; int nterms;
                jg      short loc_1D081
                jmp     loc_1D12E
; ---------------------------------------------------------------------------

loc_1D081:                              ; CODE XREF: sub_1CE52+22A↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_2AED5
                mov     dx, seg NTERMS
                mov     es, dx
                assume es:nothing
                cmp     ax, word ptr es:NTERMS ; int nterms;
                jl      short loc_1D099
                jmp     loc_1D12E
; ---------------------------------------------------------------------------

loc_1D099:                              ; CODE XREF: sub_1CE52+242↑j
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                mov     ax, es:[bx+2Ah]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                add     ax, es:word_29A70
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     ax, es:[bx+2Ah]
                jnb     short loc_1D0E2
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     bx, es:[bx+1Eh]
                imul    bx, 34h ; '4'
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     word ptr es:[bx+0B20h], 0
                jnz     short loc_1D12E
                jmp     short loc_1D129
; ---------------------------------------------------------------------------

loc_1D0E2:                              ; CODE XREF: sub_1CE52+26E↑j
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                mov     ax, es:[bx+2Ah]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                sub     ax, es:word_29A70
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     ax, es:[bx+2Ah]
                jbe     short loc_1D12E
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     bx, es:[bx+1Eh]
                imul    bx, 34h ; '4'
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     word ptr es:[bx+0B20h], 0
                jnz     short loc_1D12E

loc_1D129:                              ; CODE XREF: sub_1CE52+28E↑j
                mov     [bp+var_A], 0

loc_1D12E:                              ; CODE XREF: sub_1CE52+22C↑j
                                        ; sub_1CE52+244↑j ...
                cmp     [bp+var_A], 0
                jz      short loc_1D1A9
                push    460h
                push    si
                call    sub_15C7E
                add     sp, 4
                push    word ptr [bp+var_E+2]
                push    word ptr [bp+var_E]
                push    461h
                call    sub_15C18
                add     sp, 6
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_17567
                pop     cx
                push    [bp+var_4]
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+2Ah]
                imul    ax, 0Fh
                push    ax
                push    si
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_16AD9
                add     sp, 8
                sub     [bp+var_4], 1
                sbb     [bp+var_2], 0
                cmp     [bp+var_2], 0
                jg      short loc_1D1A9
                jl      short loc_1D19F
                cmp     [bp+var_4], 0
                jnb     short loc_1D1A9

loc_1D19F:                              ; CODE XREF: sub_1CE52+345↑j
                mov     [bp+var_2], 0
                mov     [bp+var_4], 0

loc_1D1A9:                              ; CODE XREF: sub_1CE52+1AE↑j
                                        ; sub_1CE52+1BD↑j ...
                inc     di

loc_1D1AA:                              ; CODE XREF: sub_1CE52+180↑j
                cmp     di, [bp+var_6]
                jge     short loc_1D1B2
                jmp     loc_1CFD5
; ---------------------------------------------------------------------------

loc_1D1B2:                              ; CODE XREF: sub_1CE52+35B↑j
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_1CE52       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1D1B7       proc far                ; DATA XREF: dseg19:106C↓o

var_4           = dword ptr -4

                enter   4, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg15
                mov     ds, ax
                assume ds:dseg15
                xor     di, di
                xor     si, si
                jmp     loc_1D276
; ---------------------------------------------------------------------------

loc_1D1CA:                              ; CODE XREF: sub_1D1B7+CB↓j
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                cmp     word ptr es:[bx+0D6h], 2
                jz      short loc_1D1E0
                jmp     loc_1D275
; ---------------------------------------------------------------------------

loc_1D1E0:                              ; CODE XREF: sub_1D1B7+24↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     es:word_2AED5, si
                jnz     short loc_1D1EF
                jmp     loc_1D275
; ---------------------------------------------------------------------------

loc_1D1EF:                              ; CODE XREF: sub_1D1B7+33↑j
                push    si
                call    sub_1A0E4
                pop     cx
                mov     word ptr [bp+var_4+2], dx
                mov     word ptr [bp+var_4], ax
                push    word ptr [bp+var_4+2]
                push    word ptr [bp+var_4]
                push    seg dseg19
                push    offset byte_29FDB
                call    SAMETO          ; int match=sameto(char *shorts, char *longs);
                add     sp, 8
                or      ax, ax
                jz      short loc_1D275
                les     bx, [bp+var_4]
                assume es:nothing
                mov     ax, es:[bx+0E0h]
                and     ax, 8
                or      ax, 0
                jnz     short loc_1D246
                les     bx, [bp+var_4]
                mov     ax, es:[bx+24h]
                imul    ax, 64h ; 'd'
                add     ax, 7D0h
                push    ax
                push    word ptr [bp+var_4+2]
                push    word ptr [bp+var_4]
                push    ds
                push    offset aSIsTheYearDAD ; "%s is the year %d A.D.\r"
                call    PRF             ; prf(string);
                add     sp, 0Ah
                jmp     short loc_1D258
; ---------------------------------------------------------------------------

loc_1D246:                              ; CODE XREF: sub_1D1B7+6B↑j
                push    word ptr [bp+var_4+2]
                push    word ptr [bp+var_4]
                push    ds
                push    offset aForSomeReasonY ; "For some reason you can't search %s!\r"
                call    PRF             ; prf(string);
                add     sp, 8

loc_1D258:                              ; CODE XREF: sub_1D1B7+8D↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_17567
                pop     cx
                mov     ax, seg dseg19
                mov     es, ax
                mov     si, es:word_2AECF
                mov     di, 1

loc_1D275:                              ; CODE XREF: sub_1D1B7+26↑j
                                        ; sub_1D1B7+35↑j ...
                inc     si

loc_1D276:                              ; CODE XREF: sub_1D1B7+10↑j
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AECF, si
                jle     short loc_1D285
                jmp     loc_1D1CA
; ---------------------------------------------------------------------------

loc_1D285:                              ; CODE XREF: sub_1D1B7+C9↑j
                or      di, di
                jnz     short loc_1D29E
                push    436h
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4

loc_1D29E:                              ; CODE XREF: sub_1D1B7+D0↑j
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_1D1B7       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1D2A3       proc far                ; DATA XREF: dseg19:110E↓o

var_A           = dword ptr -0Ah
var_6           = word ptr -6
var_4           = word ptr -4
var_2           = word ptr -2

                enter   0Ah, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg15
                mov     ds, ax
                assume ds:dseg15
                xor     di, di
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+24h]
                mov     [bp+var_4], ax
                push    [bp+var_4]
                call    sub_1A075
                pop     cx
                mov     bx, ax
                mov     es, dx
                mov     ax, es:[bx+4B0h]
                mov     [bp+var_2], ax
                xor     si, si
                cmp     si, [bp+var_2]
                jl      short loc_1D2E1
                jmp     loc_1D4A9
; ---------------------------------------------------------------------------

loc_1D2E1:                              ; CODE XREF: sub_1D2A3+39↑j
                                        ; sub_1D2A3+203↓j
                push    [bp+var_4]
                call    sub_1A075
                pop     cx
                mov     bx, si
                shl     bx, 1
                add     ax, bx
                mov     bx, ax
                mov     es, dx
                mov     ax, es:[bx+320h]
                mov     [bp+var_6], ax
                push    [bp+var_6]
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                cmp     word ptr es:[bx+0D6h], 2
                jz      short loc_1D314
                jmp     loc_1D4A0
; ---------------------------------------------------------------------------

loc_1D314:                              ; CODE XREF: sub_1D2A3+6C↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_2AED5
                cmp     ax, [bp+var_6]
                jnz     short loc_1D325
                jmp     loc_1D4A0
; ---------------------------------------------------------------------------

loc_1D325:                              ; CODE XREF: sub_1D2A3+7D↑j
                push    [bp+var_6]
                call    sub_1A0E4
                pop     cx
                mov     word ptr [bp+var_A+2], dx
                mov     word ptr [bp+var_A], ax
                push    word ptr [bp+var_A+2]
                push    word ptr [bp+var_A]
                push    seg dseg19
                push    offset byte_29FDB
                call    SAMETO          ; int match=sameto(char *shorts, char *longs);
                add     sp, 8
                or      ax, ax
                jnz     short loc_1D34F
                jmp     loc_1D4A0
; ---------------------------------------------------------------------------

loc_1D34F:                              ; CODE XREF: sub_1D2A3+A7↑j
                les     bx, [bp+var_A]
                assume es:nothing
                mov     ax, es:[bx+0E0h]
                and     ax, 8
                or      ax, 0
                jz      short loc_1D362
                jmp     loc_1D478
; ---------------------------------------------------------------------------

loc_1D362:                              ; CODE XREF: sub_1D2A3+BA↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_2AED1
                cmp     ax, [bp+var_6]
                jnz     short loc_1D373
                jmp     loc_1D478
; ---------------------------------------------------------------------------

loc_1D373:                              ; CODE XREF: sub_1D2A3+CB↑j
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+20h]
                les     bx, [bp+var_A]
                sub     ax, es:[bx+20h]
                mov     si, ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+22h]
                les     bx, [bp+var_A]
                sub     ax, es:[bx+22h]
                mov     di, ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+24h]
                les     bx, [bp+var_A]
                cmp     ax, es:[bx+24h]
                jz      short loc_1D3C8
                push    436h
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                jmp     loc_1D468
; ---------------------------------------------------------------------------

loc_1D3C8:                              ; CODE XREF: sub_1D2A3+113↑j
                push    word ptr [bp+var_A+2]
                push    word ptr [bp+var_A]
                push    ds
                push    offset aSIs     ; "%s is "
                call    PRF             ; prf(string);
                add     sp, 8
                or      si, si
                jnz     short loc_1D400
                or      di, di
                jnz     short loc_1D400
                push    ds
                push    offset aRightHere ; "right here!\r"
                call    PRF             ; prf(string);
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_17567
                pop     cx
                jmp     short loc_1D470
; ---------------------------------------------------------------------------

loc_1D400:                              ; CODE XREF: sub_1D2A3+139↑j
                                        ; sub_1D2A3+13D↑j
                or      si, si
                jge     short loc_1D412
                mov     ax, si
                cwd
                xor     ax, dx
                sub     ax, dx
                push    ax
                push    ds
                push    offset aDEast   ; "%d east; "
                jmp     short loc_1D41B
; ---------------------------------------------------------------------------

loc_1D412:                              ; CODE XREF: sub_1D2A3+15F↑j
                or      si, si
                jle     short loc_1D423
                push    si
                push    ds
                push    offset aDWest   ; "%d west; "

loc_1D41B:                              ; CODE XREF: sub_1D2A3+16D↑j
                call    PRF             ; prf(string);
                add     sp, 6

loc_1D423:                              ; CODE XREF: sub_1D2A3+171↑j
                or      di, di
                jge     short loc_1D435
                mov     ax, di
                cwd
                xor     ax, dx
                sub     ax, dx
                push    ax
                push    ds
                push    offset aDNorth  ; "%d north; "
                jmp     short loc_1D43E
; ---------------------------------------------------------------------------

loc_1D435:                              ; CODE XREF: sub_1D2A3+182↑j
                or      di, di
                jle     short loc_1D446
                push    di
                push    ds
                push    offset aDSouth  ; "%d south; "

loc_1D43E:                              ; CODE XREF: sub_1D2A3+190↑j
                call    PRF             ; prf(string);
                add     sp, 6

loc_1D446:                              ; CODE XREF: sub_1D2A3+194↑j
                push    ds
                push    (offset aSIsTheYearDAD+16h) ; "\r"
                call    PRF             ; prf(string);
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_17567
                pop     cx
                push    462h
                push    [bp+var_6]

loc_1D468:                              ; CODE XREF: sub_1D2A3+122↑j
                call    sub_15C7E
                add     sp, 4

loc_1D470:                              ; CODE XREF: sub_1D2A3+15B↑j
                mov     si, [bp+var_2]
                mov     di, 1
                jmp     short loc_1D4A0
; ---------------------------------------------------------------------------

loc_1D478:                              ; CODE XREF: sub_1D2A3+BC↑j
                                        ; sub_1D2A3+CD↑j
                push    word ptr [bp+var_A+2]
                push    word ptr [bp+var_A]
                push    ds
                push    offset aForSomeReasonY_0 ; "For some reason,you can't find %s!\r"
                call    PRF             ; prf(string);
                add     sp, 8
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_17567
                pop     cx
                mov     di, 1
                mov     si, [bp+var_2]

loc_1D4A0:                              ; CODE XREF: sub_1D2A3+6E↑j
                                        ; sub_1D2A3+7F↑j ...
                inc     si
                cmp     si, [bp+var_2]
                jge     short loc_1D4A9
                jmp     loc_1D2E1
; ---------------------------------------------------------------------------

loc_1D4A9:                              ; CODE XREF: sub_1D2A3+3B↑j
                                        ; sub_1D2A3+201↑j
                or      di, di
                jnz     short loc_1D4C2
                push    436h
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4

loc_1D4C2:                              ; CODE XREF: sub_1D2A3+208↑j
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_1D2A3       endp


; =============== S U B R O U T I N E =======================================


sub_1D4C7       proc far                ; DATA XREF: dseg19:1144↓o
                push    ds
                mov     ax, seg dseg15
                mov     ds, ax
                assume ds:dseg15
                push    449h
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    384h
                call    sub_15C18
                add     sp, 6
                push    0
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                or      word ptr es:[bx+0E0h], 4
                or      word ptr es:[bx+0E2h], 0
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                or      word ptr es:[bx+0E0h], 8
                or      word ptr es:[bx+0E2h], 0
                pop     ds
                assume ds:dseg21
                retf
sub_1D4C7       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1D574       proc far                ; CODE XREF: sub_20DF0+20E↓P
                                        ; DATA XREF: dseg19:off_295AE↓o

var_C           = dword ptr -0Ch
var_8           = word ptr -8
var_6           = word ptr -6
var_4           = word ptr -4
var_2           = word ptr -2

                enter   0Ch, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg15
                mov     ds, ax
                assume ds:dseg15
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+0DCh]
                mov     [bp+var_6], ax
                push    seg dseg19
                push    offset byte_29FDB
                call    sub_1872A
                add     sp, 4
                mov     si, ax
                cmp     si, 0FFFFh
                jg      short loc_1D5AA
                jmp     loc_1D924
; ---------------------------------------------------------------------------

loc_1D5AA:                              ; CODE XREF: sub_1D574+31↑j
                cmp     [bp+var_6], 0FFFFh
                jle     short loc_1D5BF
                push    [bp+var_6]
                call    sub_1A0E4
                pop     cx
                mov     word ptr [bp+var_C+2], dx
                mov     word ptr [bp+var_C], ax

loc_1D5BF:                              ; CODE XREF: sub_1D574+3A↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     di, es:[bx+20h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+22h]
                mov     [bp+var_2], ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+24h]
                mov     [bp+var_4], ax
                mov     bx, si
                shl     bx, 2
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    word ptr es:[bx+28h]
                push    word ptr es:[bx+26h]
                push    463h
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8
                mov     bx, si
                shl     bx, 2
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:[bx+28h]
                push    word ptr es:[bx+26h]
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    464h
                call    sub_15C18
                add     sp, 0Ah
                push    0
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                mov     [bp+var_8], 0

loc_1D695:                              ; CODE XREF: sub_1D574+3AB↓j
                push    465h
                call    sub_15C18
                pop     cx
                push    0
                push    0FFFFh
                push    0FFFFh
                push    [bp+var_4]
                push    [bp+var_2]
                push    di
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                cmp     [bp+var_6], 0FFFFh
                jg      short loc_1D6C6
                jmp     loc_1D7DC
; ---------------------------------------------------------------------------

loc_1D6C6:                              ; CODE XREF: sub_1D574+14D↑j
                les     bx, [bp+var_C]
                cmp     es:[bx+20h], di
                jz      short loc_1D6D2
                jmp     loc_1D7DC
; ---------------------------------------------------------------------------

loc_1D6D2:                              ; CODE XREF: sub_1D574+159↑j
                les     bx, [bp+var_C]
                mov     ax, es:[bx+22h]
                cmp     ax, [bp+var_2]
                jz      short loc_1D6E1
                jmp     loc_1D7DC
; ---------------------------------------------------------------------------

loc_1D6E1:                              ; CODE XREF: sub_1D574+168↑j
                les     bx, [bp+var_C]
                mov     ax, es:[bx+24h]
                cmp     ax, [bp+var_4]
                jz      short loc_1D6F0
                jmp     loc_1D7DC
; ---------------------------------------------------------------------------

loc_1D6F0:                              ; CODE XREF: sub_1D574+177↑j
                push    word ptr [bp+var_C+2]
                push    word ptr [bp+var_C]
                push    466h
                call    sub_15C18
                add     sp, 6
                push    0
                push    0FFFFh
                push    [bp+var_6]
                les     bx, [bp+var_C]
                push    word ptr es:[bx+24h]
                les     bx, [bp+var_C]
                push    word ptr es:[bx+22h]
                les     bx, [bp+var_C]
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                push    467h
                push    [bp+var_6]
                call    sub_15C7E
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     es:[bx+20h], di
                jnz     short loc_1D773
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+22h]
                cmp     ax, [bp+var_2]
                jnz     short loc_1D773
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+24h]
                cmp     ax, [bp+var_4]
                jz      short loc_1D78E

loc_1D773:                              ; CODE XREF: sub_1D574+1D7↑j
                                        ; sub_1D574+1EA↑j
                push    word ptr [bp+var_C+2]
                push    word ptr [bp+var_C]
                push    468h
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8

loc_1D78E:                              ; CODE XREF: sub_1D574+1FD↑j
                push    5
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+2Ah]
                shl     ax, 1
                push    ax
                push    [bp+var_6]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_16AD9
                add     sp, 8
                les     bx, [bp+var_C]
                assume es:nothing
                mov     ax, es:[bx+9Ah]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[bx+2Ah]
                imul    dx, 5
                add     ax, dx
                les     bx, [bp+var_C]
                mov     es:[bx+9Ah], ax
                jmp     loc_1D929
; ---------------------------------------------------------------------------

loc_1D7DC:                              ; CODE XREF: sub_1D574+14F↑j
                                        ; sub_1D574+15B↑j ...
                push    [bp+var_4]
                push    [bp+var_2]
                push    di
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_15D7B
                add     sp, 4
                or      ax, ax
                jnz     short loc_1D7FC
                jmp     loc_1D929
; ---------------------------------------------------------------------------

loc_1D7FC:                              ; CODE XREF: sub_1D574+283↑j
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     word ptr es:[bx+18FCh], 1
                jnz     short loc_1D810
                jmp     loc_1D8DC
; ---------------------------------------------------------------------------

loc_1D810:                              ; CODE XREF: sub_1D574+297↑j
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                cmp     word ptr es:[bx+18FCh], 0Ah
                jle     short loc_1D872
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                cmp     word ptr es:[bx+18FCh], 14h
                jge     short loc_1D872
                mov     bx, si
                shl     bx, 2
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:[bx+28h]
                push    word ptr es:[bx+26h]
                push    330h

loc_1D849:                              ; CODE XREF: sub_1D574+326↓j
                                        ; sub_1D574+350↓j
                call    sub_15C18
                add     sp, 6
                push    0
                push    0FFFFh
                push    0FFFFh
                push    [bp+var_4]
                push    [bp+var_2]
                push    di
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                jmp     short loc_1D8D7
; ---------------------------------------------------------------------------

loc_1D872:                              ; CODE XREF: sub_1D574+2AB↑j
                                        ; sub_1D574+2BC↑j
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                cmp     word ptr es:[bx+18FCh], 13h
                jle     short loc_1D89C
                mov     bx, si
                shl     bx, 2
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:[bx+28h]
                push    word ptr es:[bx+26h]
                push    336h
                jmp     short loc_1D849
; ---------------------------------------------------------------------------

loc_1D89C:                              ; CODE XREF: sub_1D574+30D↑j
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                cmp     word ptr es:[bx+18FCh], 2
                jnz     short loc_1D8C6
                mov     bx, si
                shl     bx, 2
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:[bx+28h]
                push    word ptr es:[bx+26h]
                push    338h
                jmp     short loc_1D849
; ---------------------------------------------------------------------------

loc_1D8C6:                              ; CODE XREF: sub_1D574+337↑j
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                cmp     word ptr es:[bx+18FCh], 0Ah
                jz      short loc_1D8DC

loc_1D8D7:                              ; CODE XREF: sub_1D574+2FC↑j
                mov     [bp+var_8], 6

loc_1D8DC:                              ; CODE XREF: sub_1D574+299↑j
                                        ; sub_1D574+361↑j
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, di
                mov     es, ax
                add     dx, es:[bx+8]
                mov     di, dx
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, [bp+var_2]
                mov     es, ax
                add     dx, es:[bx+10h]
                mov     [bp+var_2], dx
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, [bp+var_4]
                mov     es, ax
                add     dx, es:[bx+18h]
                mov     [bp+var_4], dx
                inc     [bp+var_8]
                cmp     [bp+var_8], 5
                jge     short loc_1D922
                jmp     loc_1D695
; ---------------------------------------------------------------------------

loc_1D922:                              ; CODE XREF: sub_1D574+3A9↑j
                jmp     short loc_1D929
; ---------------------------------------------------------------------------

loc_1D924:                              ; CODE XREF: sub_1D574+33↑j
                call    sub_15CFA

loc_1D929:                              ; CODE XREF: sub_1D574+265↑j
                                        ; sub_1D574+285↑j ...
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_1D574       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1D92E       proc far                ; CODE XREF: sub_11208+18↑P
                                        ; sub_16D39+56F↑P ...

var_4           = dword ptr -4

                enter   4, 0
                push    ds
                mov     ax, seg dseg15
                mov     ds, ax
                assume ds:dseg15
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+0CEh], 0
                jz      short loc_1D9A7
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     word ptr es:[bx+0CEh], 0
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+0D0h]
                imul    ax, 36h ; '6'
                add     ax, 0FDEh
                mov     word ptr [bp+var_4+2], seg dseg19
                mov     word ptr [bp+var_4], ax
                les     bx, [bp+var_4]
                mov     ax, es:[bx+26h]
                or      ax, es:[bx+28h]
                jz      short loc_1D9A7
                push    seg dseg19
                push    word ptr [bp+var_4]
                push    375h
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8
                les     bx, [bp+var_4]
                assume es:nothing
                call    dword ptr es:[bx+26h]

loc_1D9A7:                              ; CODE XREF: sub_1D92E+1A↑j
                                        ; sub_1D92E+55↑j
                pop     ds
                assume ds:dseg21
                leave
                retf
sub_1D92E       endp


; =============== S U B R O U T I N E =======================================


sub_1D9AA       proc far                ; DATA XREF: dseg19:1004↓o
                push    ds
                mov     ax, seg dseg15
                mov     ds, ax
                assume ds:dseg15
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_15D7B
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                and     word ptr es:[bx+0E0h], 0FFFDh
                and     word ptr es:[bx+0E2h], 0FFFFh
                push    0
                call    sub_18EAF
                pop     cx
                cmp     ax, 1
                jnz     short loc_1DA5A
                push    448h
                call    sub_15C18
                pop     cx
                push    0
                push    0FFFFh
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah

loc_1DA5A:                              ; CODE XREF: sub_1D9AA+63↑j
                pop     ds
                assume ds:dseg21
                retf
sub_1D9AA       endp


; =============== S U B R O U T I N E =======================================


sub_1DA5C       proc far                ; CODE XREF: sub_C376+27C↑P
                                        ; sub_C6BB+1F1↑P ...
                push    ds
                mov     ax, seg dseg15
                mov     ds, ax
                assume ds:dseg15
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                and     word ptr es:[bx+0E0h], 0FFFBh
                and     word ptr es:[bx+0E2h], 0FFFFh
                push    3C6h
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    37Ah
                call    sub_15C18
                add     sp, 6
                push    0
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                pop     ds
                assume ds:dseg21
                retf
sub_1DA5C       endp


; =============== S U B R O U T I N E =======================================


sub_1DAF3       proc far                ; DATA XREF: dseg19:1364↓o
                push    ds
                mov     ax, seg dseg15
                mov     ds, ax
                assume ds:dseg15
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                sub     word ptr es:[bx+3Ah], 1F4h
                pop     ds
                assume ds:dseg21
                retf
sub_1DAF3       endp


; =============== S U B R O U T I N E =======================================


sub_1DB0B       proc far                ; DATA XREF: dseg19:1406↓o
                push    ds
                mov     ax, seg dseg15
                mov     ds, ax
                assume ds:dseg15
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                sub     word ptr es:[bx+32h], 1F4h
                pop     ds
                assume ds:dseg21
                retf
sub_1DB0B       endp


; =============== S U B R O U T I N E =======================================


sub_1DB23       proc far                ; DATA XREF: dseg19:1148↓o
                push    ds
                mov     ax, seg dseg15
                mov     ds, ax
                assume ds:dseg15
                push    3C6h
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    37Ah
                call    sub_15C18
                add     sp, 6
                push    0
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                and     word ptr es:[bx+0E0h], 0FFFBh
                and     word ptr es:[bx+0E2h], 0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                and     word ptr es:[bx+0E0h], 0FFF7h
                and     word ptr es:[bx+0E2h], 0FFFFh
                pop     ds
                assume ds:dseg21
                retf
sub_1DB23       endp


; =============== S U B R O U T I N E =======================================


sub_1DBD0       proc far                ; DATA XREF: dseg19:0674↓o
                push    si
                push    ds
                mov     ax, seg dseg15
                mov     ds, ax
                assume ds:dseg15
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     es:word_2AED3, 2
                jge     short loc_1DBEC
                call    sub_15CFA
                jmp     loc_1DDCD
; ---------------------------------------------------------------------------

loc_1DBEC:                              ; CODE XREF: sub_1DBD0+12↑j
                push    2
                push    seg dseg19
                push    offset byte_29FDB
                call    sub_1609C
                add     sp, 6
                mov     si, ax
                cmp     si, 0FFFFh
                jg      short loc_1DC06
                jmp     loc_1DDB2
; ---------------------------------------------------------------------------

loc_1DC06:                              ; CODE XREF: sub_1DBD0+31↑j
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29BDA
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+1Ch], 5
                jz      short loc_1DC33
                jmp     loc_1DD9B
; ---------------------------------------------------------------------------

loc_1DC33:                              ; CODE XREF: sub_1DBD0+5E↑j
                push    cs
                call    near ptr sub_1D92E
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+50h]
                imul    ax, 36h ; '6'
                add     ax, 0FDEh
                push    seg dseg19
                push    ax
                push    42Eh
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8
                push    433h
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+0C8h], 0
                jnz     short loc_1DC98
                mov     dx, ds
                mov     ax, 0
                jmp     short loc_1DC9D
; ---------------------------------------------------------------------------

loc_1DC98:                              ; CODE XREF: sub_1DBD0+BF↑j
                mov     dx, ds
                mov     ax, 4

loc_1DC9D:                              ; CODE XREF: sub_1DBD0+C6↑j
                push    dx
                push    ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    434h
                call    sub_15C18
                add     sp, 0Ah
                push    0
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+50h]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     es:[bx+0D0h], ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     word ptr es:[bx+0D2h], 0
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29BDA
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+28h]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                sub     es:[bx+0CCh], ax
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     word ptr es:[bx+3Ch], 0FFFFh
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     word ptr es:[bx+50h], 0FFFFh
                jmp     short loc_1DDCD
; ---------------------------------------------------------------------------

loc_1DD9B:                              ; CODE XREF: sub_1DBD0+60↑j
                push    4B0h
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4
                jmp     short loc_1DDCD
; ---------------------------------------------------------------------------

loc_1DDB2:                              ; CODE XREF: sub_1DBD0+33↑j
                push    seg dseg19
                push    offset byte_29FDB
                push    3C1h
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8

loc_1DDCD:                              ; CODE XREF: sub_1DBD0+19↑j
                                        ; sub_1DBD0+1C9↑j ...
                pop     ds
                assume ds:dseg21
                pop     si
                retf
sub_1DBD0       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1DDD0       proc far                ; DATA XREF: dseg19:1438↓o

var_4           = dword ptr -4

                enter   4, 0
                push    si
                push    ds
                mov     ax, seg dseg15
                mov     ds, ax
                assume ds:dseg15
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AED3, 2
                jge     short loc_1DDF0
                call    sub_15CFA
                jmp     loc_1DEA2
; ---------------------------------------------------------------------------

loc_1DDF0:                              ; CODE XREF: sub_1DDD0+16↑j
                xor     si, si
                jmp     loc_1DE7E
; ---------------------------------------------------------------------------

loc_1DDF5:                              ; CODE XREF: sub_1DDD0+BA↓j
                push    si
                call    sub_1A0E4
                pop     cx
                mov     word ptr [bp+var_4+2], dx
                mov     word ptr [bp+var_4], ax
                les     bx, [bp+var_4]
                assume es:nothing
                cmp     word ptr es:[bx+0D6h], 2
                jnz     short loc_1DE7D
                push    word ptr [bp+var_4+2]
                push    word ptr [bp+var_4]
                push    seg dseg19
                push    offset byte_29FDB
                call    SAMETO          ; int match=sameto(char *shorts, char *longs);
                add     sp, 8
                or      ax, ax
                jz      short loc_1DE7D
                les     bx, [bp+var_4]
                cmp     word ptr es:[bx+9Ah], 0
                jbe     short loc_1DE60
                les     bx, [bp+var_4]
                mov     word ptr es:[bx+9Ah], 0
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    507h
                push    si
                call    sub_15C7E
                add     sp, 8
                push    word ptr [bp+var_4+2]
                push    word ptr [bp+var_4]
                push    508h
                jmp     short loc_1DE69
; ---------------------------------------------------------------------------

loc_1DE60:                              ; CODE XREF: sub_1DDD0+5E↑j
                push    word ptr [bp+var_4+2]
                push    word ptr [bp+var_4]
                push    509h

loc_1DE69:                              ; CODE XREF: sub_1DDD0+8E↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8
                jmp     short loc_1DEA2
; ---------------------------------------------------------------------------

loc_1DE7D:                              ; CODE XREF: sub_1DDD0+3B↑j
                                        ; sub_1DDD0+53↑j
                inc     si

loc_1DE7E:                              ; CODE XREF: sub_1DDD0+22↑j
                mov     ax, seg NTERMS
                mov     es, ax
                assume es:nothing
                cmp     word ptr es:NTERMS, si ; int nterms;
                jle     short loc_1DE8D
                jmp     loc_1DDF5
; ---------------------------------------------------------------------------

loc_1DE8D:                              ; CODE XREF: sub_1DDD0+B8↑j
                push    436h
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4

loc_1DEA2:                              ; CODE XREF: sub_1DDD0+1D↑j
                                        ; sub_1DDD0+AB↑j
                pop     ds
                assume ds:dseg21
                pop     si
                leave
                retf
sub_1DDD0       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1DEA6       proc far                ; DATA XREF: dseg19:146E↓o

var_6           = word ptr -6
var_4           = word ptr -4
var_2           = word ptr -2

                enter   6, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg15
                mov     ds, ax
                assume ds:dseg15
                push    seg dseg19
                push    offset byte_29FDB
                call    sub_1872A
                add     sp, 4
                mov     si, ax
                cmp     si, 0FFFFh
                jg      short loc_1DECA
                jmp     loc_1E0D1
; ---------------------------------------------------------------------------

loc_1DECA:                              ; CODE XREF: sub_1DEA6+1F↑j
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                cmp     word ptr es:[bx+18FCh], 0Bh
                jg      short loc_1DEDE
                jmp     loc_1E052
; ---------------------------------------------------------------------------

loc_1DEDE:                              ; CODE XREF: sub_1DEA6+33↑j
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                cmp     word ptr es:[bx+18FCh], 14h
                jl      short loc_1DEF2
                jmp     loc_1E052
; ---------------------------------------------------------------------------

loc_1DEF2:                              ; CODE XREF: sub_1DEA6+47↑j
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+20h]
                mov     [bp+var_2], ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+22h]
                mov     [bp+var_4], ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+24h]
                mov     [bp+var_6], ax
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     word ptr es:[bx+18FCh], 0Ah
                call    sub_15DD6
                mov     di, 1
                cmp     si, 1
                jz      short loc_1DF4C
                cmp     si, 3
                jz      short loc_1DF4C
                cmp     si, 5
                jnz     short loc_1DF4F

loc_1DF4C:                              ; CODE XREF: sub_1DEA6+9A↑j
                                        ; sub_1DEA6+9F↑j
                mov     di, 0FFFFh

loc_1DF4F:                              ; CODE XREF: sub_1DEA6+A4↑j
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, [bp+var_6]
                mov     es, ax
                add     dx, es:[bx+18h]
                push    dx
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, [bp+var_4]
                mov     es, ax
                add     dx, es:[bx+10h]
                push    dx
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, [bp+var_2]
                mov     es, ax
                add     dx, es:[bx+8]
                push    dx
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_15D7B
                add     sp, 4
                mov     bx, si
                add     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                mov     word ptr es:[bx+18FCh], 0Ah
                call    sub_15DD6
                mov     bx, si
                shl     bx, 2
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:[bx+28h]
                push    word ptr es:[bx+26h]
                push    50Fh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8
                mov     bx, si
                shl     bx, 2
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:[bx+28h]
                push    word ptr es:[bx+26h]
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    513h
                call    sub_15C18
                add     sp, 0Ah
                push    0
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                jmp     loc_1E0D6
; ---------------------------------------------------------------------------

loc_1E052:                              ; CODE XREF: sub_1DEA6+35↑j
                                        ; sub_1DEA6+49↑j
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     word ptr es:[bx+18FCh], 0Ah
                jnz     short loc_1E07C
                mov     bx, si
                shl     bx, 2
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:[bx+28h]
                push    word ptr es:[bx+26h]
                push    510h
                jmp     short loc_1E0BD
; ---------------------------------------------------------------------------

loc_1E07C:                              ; CODE XREF: sub_1DEA6+1BB↑j
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                cmp     word ptr es:[bx+18FCh], 0Bh
                jnz     short loc_1E0A6
                mov     bx, si
                shl     bx, 2
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:[bx+28h]
                push    word ptr es:[bx+26h]
                push    512h
                jmp     short loc_1E0BD
; ---------------------------------------------------------------------------

loc_1E0A6:                              ; CODE XREF: sub_1DEA6+1E5↑j
                mov     bx, si
                shl     bx, 2
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:[bx+28h]
                push    word ptr es:[bx+26h]
                push    511h

loc_1E0BD:                              ; CODE XREF: sub_1DEA6+1D4↑j
                                        ; sub_1DEA6+1FE↑j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8
                jmp     short loc_1E0D6
; ---------------------------------------------------------------------------

loc_1E0D1:                              ; CODE XREF: sub_1DEA6+21↑j
                call    sub_15CFA

loc_1E0D6:                              ; CODE XREF: sub_1DEA6+1A9↑j
                                        ; sub_1DEA6+229↑j
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_1DEA6       endp

; ---------------------------------------------------------------------------
                align 8
cseg07          ends

; Segment Number    : 8
; Alloc Size        : 2D09h
; Offset in the file: 2E600h  Length: 2D09h
; Attributes  (0D00): CODE Relocations DPL: 3
; ===========================================================================

; Segment type: Pure code
cseg08          segment para public 'CODE' use16
                assume cs:cseg08
                assume es:nothing, ss:nothing, ds:dseg21, fs:nothing, gs:nothing

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1E0E0       proc far                ; CODE XREF: _INIT__MUTANTS+CA6↑P
                                        ; sub_1A4E3+10F↑P

var_E           = word ptr -0Eh
var_C           = word ptr -0Ch
var_A           = dword ptr -0Ah
var_6           = dword ptr -6
var_2           = word ptr -2
arg_0           = dword ptr  6
arg_4           = word ptr  0Ah

                enter   0Eh, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg16
                mov     ds, ax
                assume ds:dseg16
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_2AED5
                mov     [bp+var_2], ax
                mov     ax, seg dseg19
                mov     dx, [bp+arg_4]
                mov     es, ax
                mov     es:word_2AED5, dx
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29778, 1
                push    [bp+arg_4]
                call    sub_1A0E4
                pop     cx
                mov     word ptr [bp+var_6+2], dx
                mov     word ptr [bp+var_6], ax
                les     bx, [bp+var_6]
                assume es:nothing
                mov     word ptr es:[bx+0D6h], 2
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_2AED1
                cmp     ax, [bp+arg_4]
                jl      short loc_1E13B
                jmp     loc_1E29B
; ---------------------------------------------------------------------------

loc_1E13B:                              ; CODE XREF: sub_1E0E0+56↑j
                les     bx, [bp+arg_0]
                assume es:nothing
                mov     al, es:[bx+2]
                mov     ah, 0
                push    ax
                les     bx, [bp+arg_0]
                mov     al, es:[bx+1]
                mov     ah, 0
                push    ax
                les     bx, [bp+arg_0]
                mov     al, es:[bx]
                mov     ah, 0
                push    ax
                push    ds
                push    offset aCCC_1   ; "%c%c%c"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 0Ah
                push    dx
                push    ax
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                les     bx, [bp+var_6]
                mov     es:[bx+20h], ax
                les     bx, [bp+arg_0]
                mov     al, es:[bx+5]
                mov     ah, 0
                push    ax
                les     bx, [bp+arg_0]
                mov     al, es:[bx+4]
                mov     ah, 0
                push    ax
                les     bx, [bp+arg_0]
                mov     al, es:[bx+3]
                mov     ah, 0
                push    ax
                push    ds
                push    offset aCCC_1   ; "%c%c%c"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 0Ah
                push    dx
                push    ax
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                les     bx, [bp+var_6]
                mov     es:[bx+22h], ax
                les     bx, [bp+arg_0]
                mov     al, es:[bx+8]
                mov     ah, 0
                push    ax
                les     bx, [bp+arg_0]
                mov     al, es:[bx+7]
                mov     ah, 0
                push    ax
                les     bx, [bp+arg_0]
                mov     al, es:[bx+6]
                mov     ah, 0
                push    ax
                push    ds
                push    offset aCCC_1   ; "%c%c%c"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 0Ah
                push    dx
                push    ax
                call    ATOL            ; long int atol(const char *str);
                add     sp, 4
                les     bx, [bp+var_6]
                mov     es:[bx+24h], ax
                les     bx, [bp+var_6]
                mov     ax, es:[bx+24h]
                cwd
                xor     ax, dx
                sub     ax, dx
                mov     cx, ax
                cmp     cx, 4Fh ; 'O'
                jle     short loc_1E201
                mov     cx, 4Fh ; 'O'

loc_1E201:                              ; CODE XREF: sub_1E0E0+11C↑j
                cmp     cx, 1
                jge     short loc_1E209
                mov     cx, 1

loc_1E209:                              ; CODE XREF: sub_1E0E0+124↑j
                xor     di, di
                xor     si, si
                jmp     short loc_1E277
; ---------------------------------------------------------------------------

loc_1E20F:                              ; CODE XREF: sub_1E0E0+1A1↓j
                cmp     cx, 4Fh ; 'O'
                jge     short loc_1E24E
                mov     ax, si
                imul    ax, 82h
                mov     [bp+var_C], ax
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29BD6
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+52h]
                add     ax, 0FFFEh
                cmp     ax, cx
                jg      short loc_1E276
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29BD6
                assume es:nothing
                add     bx, [bp+var_C]
                mov     ax, es:[bx+52h]
                add     ax, 2
                cmp     ax, cx
                jl      short loc_1E276
                jmp     short loc_1E26D
; ---------------------------------------------------------------------------

loc_1E24E:                              ; CODE XREF: sub_1E0E0+132↑j
                mov     ax, si
                imul    ax, 82h
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29BD6
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+52h], 4Eh ; 'N'
                jle     short loc_1E276
                cmp     si, 0A6h
                jz      short loc_1E276

loc_1E26D:                              ; CODE XREF: sub_1E0E0+16C↑j
                mov     bx, di
                shl     bx, 1
                mov     [bx+0], si
                inc     di

loc_1E276:                              ; CODE XREF: sub_1E0E0+152↑j
                                        ; sub_1E0E0+16A↑j ...
                inc     si

loc_1E277:                              ; CODE XREF: sub_1E0E0+12D↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     es:word_2AEBD, si
                jg      short loc_1E20F
                push    di
                call    sub_18A8A
                pop     cx
                shl     ax, 1
                mov     bx, ax
                mov     di, [bx+0]
                les     bx, [bp+var_6]
                assume es:nothing
                mov     es:[bx+1Eh], di
                jmp     short loc_1E2DD
; ---------------------------------------------------------------------------

loc_1E29B:                              ; CODE XREF: sub_1E0E0+58↑j
                les     bx, [bp+var_6]
                mov     ax, seg dseg19
                push    es
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_29784
                pop     es
                assume es:nothing
                mov     es:[bx+20h], ax
                les     bx, [bp+var_6]
                mov     ax, seg dseg19
                push    es
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_29782
                pop     es
                assume es:nothing
                mov     es:[bx+22h], ax
                les     bx, [bp+var_6]
                mov     ax, seg dseg19
                push    es
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_29786
                pop     es
                assume es:nothing
                mov     es:[bx+24h], ax
                mov     di, 0A6h
                les     bx, [bp+var_6]
                mov     word ptr es:[bx+1Eh], 0A6h

loc_1E2DD:                              ; CODE XREF: sub_1E0E0+1B9↑j
                push    1Eh
                push    1Eh
                push    word ptr [bp+var_6+2]
                push    word ptr [bp+var_6]
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                mov     ax, seg NTERMS
                mov     dx, [bp+arg_4]
                mov     es, ax
                assume es:nothing
                sub     dx, word ptr es:NTERMS ; int nterms;
                inc     dx
                push    dx
                mov     ax, di
                imul    ax, 82h
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BD6
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BD6+2
                push    dx
                push    ds
                push    offset aSD_0    ; "%s-%d"
                push    word ptr [bp+var_6+2]
                push    word ptr [bp+var_6]
                call    SPRINTF         ; int sprintf(char *str, const char *format, ... );
                add     sp, 0Eh
                les     bx, [bp+var_6]
                assume es:nothing
                cmp     word ptr es:[bx+24h], 0
                jle     short loc_1E354
                mov     ax, di
                imul    ax, 82h
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29BD6
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+52h]
                les     bx, [bp+var_6]
                mov     es:[bx+2Ah], ax
                jmp     short loc_1E35D
; ---------------------------------------------------------------------------

loc_1E354:                              ; CODE XREF: sub_1E0E0+253↑j
                les     bx, [bp+var_6]
                mov     word ptr es:[bx+2Ah], 1

loc_1E35D:                              ; CODE XREF: sub_1E0E0+272↑j
                les     bx, [bp+var_6]
                mov     ax, es:[bx+2Ah]
                imul    ax, 14h
                push    ax
                call    sub_18A8A
                pop     cx
                add     ax, 0Ah
                les     bx, [bp+var_6]
                mov     es:[bx+30h], ax
                les     bx, [bp+var_6]
                mov     ax, es:[bx+2Ah]
                imul    ax, 0Ah
                push    ax
                call    sub_18A8A
                pop     cx
                add     ax, 0Ah
                les     bx, [bp+var_6]
                mov     es:[bx+32h], ax
                les     bx, [bp+var_6]
                mov     ax, es:[bx+2Ah]
                imul    ax, 14h
                push    ax
                call    sub_18A8A
                pop     cx
                add     ax, 0Ah
                les     bx, [bp+var_6]
                mov     es:[bx+38h], ax
                les     bx, [bp+var_6]
                mov     ax, es:[bx+2Ah]
                imul    ax, 5
                push    ax
                call    sub_18A8A
                pop     cx
                add     ax, 0Ah
                les     bx, [bp+var_6]
                mov     es:[bx+3Ah], ax
                les     bx, [bp+var_6]
                mov     ax, es:[bx+2Ah]
                imul    ax, 14h
                push    ax
                call    sub_18A8A
                pop     cx
                add     ax, 0Ah
                les     bx, [bp+var_6]
                mov     es:[bx+34h], ax
                les     bx, [bp+var_6]
                mov     ax, es:[bx+2Ah]
                imul    ax, 14h
                push    ax
                call    sub_18A8A
                pop     cx
                add     ax, 0Ah
                les     bx, [bp+var_6]
                mov     es:[bx+36h], ax
                les     bx, [bp+var_6]
                mov     bx, es:[bx+2Ah]
                xor     cx, cx
                add     bx, 1
                adc     cx, 0
                xor     dx, dx
                mov     ax, 2710h
                call    F_LXMUL
                les     bx, [bp+var_6]
                mov     es:[bx+2Eh], dx
                mov     es:[bx+2Ch], ax
                mov     ax, di
                imul    ax, 82h
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29BD6
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+50h]
                les     bx, [bp+var_6]
                mov     es:[bx+8Ch], ax
                les     bx, [bp+var_6]
                cmp     word ptr es:[bx+8Ch], 0FFFFh
                jle     short loc_1E471
                les     bx, [bp+var_6]
                mov     ax, es:[bx+8Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29BDA
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+1Eh]
                les     bx, [bp+var_6]
                mov     es:[bx+8Eh], ax
                jmp     short loc_1E47B
; ---------------------------------------------------------------------------

loc_1E471:                              ; CODE XREF: sub_1E0E0+36A↑j
                les     bx, [bp+var_6]
                mov     word ptr es:[bx+8Eh], 0FFFFh

loc_1E47B:                              ; CODE XREF: sub_1E0E0+38F↑j
                les     bx, [bp+var_6]
                mov     ax, es:[bx+2Ah]
                imul    ax, 1Eh
                push    ax
                call    sub_18A8A
                pop     cx
                add     ax, 0Ah
                les     bx, [bp+var_6]
                mov     es:[bx+26h], ax
                les     bx, [bp+var_6]
                mov     ax, es:[bx+26h]
                les     bx, [bp+var_6]
                mov     es:[bx+28h], ax
                les     bx, [bp+var_6]
                mov     ax, es:[bx+2Ah]
                inc     ax
                push    ax
                call    sub_18A8A
                pop     cx
                imul    ax, 4B0h
                add     ax, 118h
                cwd
                les     bx, [bp+var_6]
                mov     es:[bx+92h], dx
                mov     es:[bx+90h], ax
                xor     si, si

loc_1E4CA:                              ; CODE XREF: sub_1E0E0+47D↓j
                cmp     si, 2
                jle     short loc_1E4E0
                mov     ax, si
                shl     ax, 1
                les     bx, [bp+var_6]
                add     bx, ax
                mov     word ptr es:[bx+3Ch], 0FFFFh
                jmp     short loc_1E548
; ---------------------------------------------------------------------------

loc_1E4E0:                              ; CODE XREF: sub_1E0E0+3ED↑j
                mov     ax, di
                imul    ax, 82h
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29BD6
                assume es:nothing
                add     bx, ax
                mov     ax, si
                shl     ax, 1
                add     bx, ax
                mov     ax, es:[bx+4Ah]
                mov     dx, si
                shl     dx, 1
                les     bx, [bp+var_6]
                add     bx, dx
                mov     es:[bx+3Ch], ax
                mov     ax, si
                shl     ax, 1
                les     bx, [bp+var_6]
                add     bx, ax
                cmp     word ptr es:[bx+3Ch], 0FFFFh
                jle     short loc_1E548
                mov     ax, si
                shl     ax, 1
                les     bx, [bp+var_6]
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29BDA
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+1Eh]
                mov     dx, si
                shl     dx, 1
                les     bx, [bp+var_6]
                add     bx, dx
                mov     es:[bx+50h], ax
                jmp     short loc_1E557
; ---------------------------------------------------------------------------

loc_1E548:                              ; CODE XREF: sub_1E0E0+3FE↑j
                                        ; sub_1E0E0+437↑j
                mov     ax, si
                shl     ax, 1
                les     bx, [bp+var_6]
                add     bx, ax
                mov     word ptr es:[bx+50h], 0FFFFh

loc_1E557:                              ; CODE XREF: sub_1E0E0+466↑j
                inc     si
                cmp     si, 0Ah
                jge     short loc_1E560
                jmp     loc_1E4CA
; ---------------------------------------------------------------------------

loc_1E560:                              ; CODE XREF: sub_1E0E0+47B↑j
                mov     ax, di
                imul    ax, 82h
                mov     [bp+var_E], ax
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29BD6
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+78h]
                les     bx, [bp+var_6]
                add     es:[bx+50h], ax
                les     bx, [bp+var_6]
                mov     word ptr es:[bx+0E2h], 0
                mov     word ptr es:[bx+0E0h], 0
                les     bx, [bp+var_6]
                mov     word ptr es:[bx+0CCh], 0
                les     bx, [bp+var_6]
                mov     word ptr es:[bx+0CEh], 0
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29BD6
                assume es:nothing
                add     bx, [bp+var_E]
                mov     ax, es:[bx+76h]
                les     bx, [bp+var_6]
                mov     es:[bx+0D0h], ax
                les     bx, [bp+var_6]
                mov     word ptr es:[bx+0D2h], 0
                push    0
                push    8000h
                call    RAND            ; int rand (void);
                cwd
                push    ax
                push    dx
                xor     dx, dx
                mov     ax, 2710h
                pop     cx
                pop     bx
                call    F_LXMUL
                push    dx
                push    ax
                call    F_LDIV
                cwd
                les     bx, [bp+var_6]
                push    ax
                mov     ax, es:[bx+2Ah]
                push    dx
                xor     dx, dx
                pop     cx
                pop     bx
                call    F_LXMUL
                les     bx, [bp+var_6]
                mov     es:[bx+96h], dx
                mov     es:[bx+94h], ax
                les     bx, [bp+var_6]
                mov     word ptr es:[bx+0D4h], 0
                les     bx, [bp+var_6]
                mov     word ptr es:[bx+0D8h], 0
                les     bx, [bp+var_6]
                mov     word ptr es:[bx+9Ah], 0
                les     bx, [bp+var_6]
                mov     word ptr es:[bx+0CCh], 0
                les     bx, [bp+var_6]
                mov     word ptr es:[bx+0DCh], 0FFFFh
                mov     ax, word ptr [bp+var_6+2]
                mov     dx, word ptr [bp+var_6]
                mov     word ptr [bp+var_A+2], ax
                mov     word ptr [bp+var_A], dx
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     es:word_29776, 0
                jnz     short loc_1E656
                jmp     loc_1E744
; ---------------------------------------------------------------------------

loc_1E656:                              ; CODE XREF: sub_1E0E0+571↑j
                xor     si, si
                jmp     loc_1E735
; ---------------------------------------------------------------------------

loc_1E65B:                              ; CODE XREF: sub_1E0E0+661↓j
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29778, 2
                push    si
                call    sub_1A0E4
                pop     cx
                mov     word ptr [bp+var_6+2], dx
                mov     word ptr [bp+var_6], ax
                les     bx, [bp+var_6]
                assume es:nothing
                cmp     word ptr es:[bx+0D6h], 2
                jz      short loc_1E682
                jmp     loc_1E734
; ---------------------------------------------------------------------------

loc_1E682:                              ; CODE XREF: sub_1E0E0+59D↑j
                les     bx, [bp+var_6]
                mov     ax, es:[bx+20h]
                les     bx, [bp+var_A]
                cmp     ax, es:[bx+20h]
                jz      short loc_1E695
                jmp     loc_1E734
; ---------------------------------------------------------------------------

loc_1E695:                              ; CODE XREF: sub_1E0E0+5B0↑j
                les     bx, [bp+var_6]
                mov     ax, es:[bx+22h]
                les     bx, [bp+var_A]
                cmp     ax, es:[bx+22h]
                jz      short loc_1E6A8
                jmp     loc_1E734
; ---------------------------------------------------------------------------

loc_1E6A8:                              ; CODE XREF: sub_1E0E0+5C3↑j
                les     bx, [bp+var_6]
                mov     ax, es:[bx+24h]
                les     bx, [bp+var_A]
                cmp     ax, es:[bx+24h]
                jnz     short loc_1E734
                push    si
                call    sub_18275
                pop     cx
                les     bx, [bp+var_A]
                mov     dx, es:[bx+2Ah]
                imul    dx, 3
                sub     dx, ax
                mov     di, dx
                or      di, di
                jge     short loc_1E6D3
                xor     di, di

loc_1E6D3:                              ; CODE XREF: sub_1E0E0+5EF↑j
                push    4F9h
                call    sub_15C18
                pop     cx
                push    di
                push    ds
                push    (offset aSD_0+3) ; "%d"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 6
                push    dx
                push    ax
                push    34Eh
                push    si
                call    sub_15C7E
                add     sp, 8
                push    0
                push    0FFFFh
                push    0FFFFh
                les     bx, [bp+var_6]
                push    word ptr es:[bx+24h]
                les     bx, [bp+var_6]
                push    word ptr es:[bx+22h]
                les     bx, [bp+var_6]
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                les     bx, [bp+var_6]
                mov     ax, es:[bx+26h]
                sub     ax, di
                les     bx, [bp+var_6]
                mov     es:[bx+26h], ax

loc_1E734:                              ; CODE XREF: sub_1E0E0+59F↑j
                                        ; sub_1E0E0+5B2↑j ...
                inc     si

loc_1E735:                              ; CODE XREF: sub_1E0E0+578↑j
                mov     ax, seg NTERMS
                mov     es, ax
                assume es:nothing
                cmp     word ptr es:NTERMS, si ; int nterms;
                jle     short loc_1E744
                jmp     loc_1E65B
; ---------------------------------------------------------------------------

loc_1E744:                              ; CODE XREF: sub_1E0E0+573↑j
                                        ; sub_1E0E0+65F↑j
                mov     ax, word ptr [bp+var_A+2]
                mov     dx, word ptr [bp+var_A]
                mov     word ptr [bp+var_6+2], ax
                mov     word ptr [bp+var_6], dx
                push    word ptr [bp+var_A+2]
                push    word ptr [bp+var_A]
                push    4F8h
                call    sub_15C18
                add     sp, 6
                push    0
                push    0FFFFh
                push    0FFFFh
                les     bx, [bp+var_6]
                assume es:nothing
                push    word ptr es:[bx+24h]
                les     bx, [bp+var_6]
                push    word ptr es:[bx+22h]
                les     bx, [bp+var_6]
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     es:word_29776, 0
                jz      short loc_1E7BF
                mov     ax, seg dseg19
                mov     dx, [bp+var_2]
                mov     es, ax
                mov     es:word_2AED5, dx
                push    [bp+var_2]
                call    sub_1A0E4
                pop     cx
                mov     bx, seg dseg19
                mov     es, bx
                mov     word ptr es:dword_29DD4+2, dx
                mov     word ptr es:dword_29DD4, ax

loc_1E7BF:                              ; CODE XREF: sub_1E0E0+6B9↑j
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_1E0E0       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1E7C4       proc far                ; CODE XREF: sub_2D88+32E↑P

var_A           = dword ptr -0Ah
var_6           = word ptr -6
var_4           = word ptr -4
var_2           = word ptr -2
arg_0           = word ptr  6

                enter   0Ah, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg16
                mov     ds, ax
                assume ds:dseg16
                mov     si, [bp+arg_0]
                cmp     si, 0FFFFh
                jg      short loc_1E7DB
                jmp     loc_1EA07
; ---------------------------------------------------------------------------

loc_1E7DB:                              ; CODE XREF: sub_1E7C4+12↑j
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29778, 4
                push    si
                call    sub_1A0E4
                pop     cx
                mov     word ptr [bp+var_A+2], dx
                mov     word ptr [bp+var_A], ax
                les     bx, [bp+var_A]
                assume es:nothing
                mov     ax, es:[bx+24h]
                mov     [bp+var_2], ax
                push    [bp+var_2]
                call    sub_1A075
                pop     cx
                mov     bx, ax
                mov     es, dx
                mov     ax, es:[bx+4B0h]
                mov     [bp+var_6], ax
                xor     di, di
                jmp     loc_1E9FF
; ---------------------------------------------------------------------------

loc_1E818:                              ; CODE XREF: sub_1E7C4+240↓j
                push    [bp+var_2]
                call    sub_1A075
                pop     cx
                mov     bx, di
                shl     bx, 1
                add     ax, bx
                mov     bx, ax
                mov     es, dx
                mov     ax, es:[bx+320h]
                mov     [bp+var_4], ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:word_29778, 5
                push    [bp+var_4]
                call    sub_1A0E4
                pop     cx
                mov     bx, seg dseg19
                mov     es, bx
                mov     word ptr es:dword_29DD4+2, dx
                mov     word ptr es:dword_29DD4, ax
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+0D6h], 2
                jz      short loc_1E86B
                jmp     loc_1E9FE
; ---------------------------------------------------------------------------

loc_1E86B:                              ; CODE XREF: sub_1E7C4+A2↑j
                mov     ax, seg NTERMS
                mov     es, ax
                assume es:nothing
                mov     ax, word ptr es:NTERMS ; int nterms;
                dec     ax
                cmp     ax, [bp+var_4]
                jl      short loc_1E87D
                jmp     loc_1E9FE
; ---------------------------------------------------------------------------

loc_1E87D:                              ; CODE XREF: sub_1E7C4+B4↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     es:[bx+0DCh], si
                jz      short loc_1E891
                jmp     loc_1E9FE
; ---------------------------------------------------------------------------

loc_1E891:                              ; CODE XREF: sub_1E7C4+C8↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:word_2AECB, 0
                mov     ax, seg dseg19
                mov     dx, [bp+var_4]
                mov     es, ax
                mov     es:word_2AED5, dx
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+24h]
                les     bx, [bp+var_A]
                cmp     ax, es:[bx+24h]
                jz      short loc_1E8C4
                jmp     loc_1E9FE
; ---------------------------------------------------------------------------

loc_1E8C4:                              ; CODE XREF: sub_1E7C4+FB↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_15D7B
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+26h], 0Ah
                jge     short loc_1E935
                push    0
                push    8000h
                call    RAND            ; int rand (void);
                cwd
                mov     cl, 2
                call    F_LXLSH
                push    dx
                push    ax
                call    F_LDIV
                or      ax, ax
                jnz     short loc_1E935
                push    si
                nop
                push    cs
                call    near ptr sub_1F53F
                pop     cx

loc_1E935:                              ; CODE XREF: sub_1E7C4+14B↑j
                                        ; sub_1E7C4+168↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+20h]
                les     bx, [bp+var_A]
                cmp     ax, es:[bx+20h]
                jnz     short loc_1E963
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+22h]
                les     bx, [bp+var_A]
                cmp     ax, es:[bx+22h]
                jz      short loc_1E99E

loc_1E963:                              ; CODE XREF: sub_1E7C4+186↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+26h], 0Ah
                jg      short loc_1E977
                jmp     loc_1E9FE
; ---------------------------------------------------------------------------

loc_1E977:                              ; CODE XREF: sub_1E7C4+1AE↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:word_2AECB, 0
                nop
                push    cs
                call    near ptr sub_201B3
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AECB, 0
                jnz     short loc_1E9FE
                push    si
                nop
                push    cs
                call    near ptr sub_1F2CD
                pop     cx
                jmp     short loc_1E9FE
; ---------------------------------------------------------------------------

loc_1E99E:                              ; CODE XREF: sub_1E7C4+19D↑j
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+0D4h], 0
                jnz     short loc_1E9FE
                push    0
                push    8000h
                call    RAND            ; int rand (void);
                cwd
                shl     ax, 1
                rcl     dx, 1
                push    dx
                push    ax
                call    F_LDIV
                or      ax, ax
                jnz     short loc_1E9D1
                nop
                push    cs
                call    near ptr sub_1F755
                jmp     short loc_1E9D6
; ---------------------------------------------------------------------------

loc_1E9D1:                              ; CODE XREF: sub_1E7C4+204↑j
                nop
                push    cs
                call    near ptr sub_20088

loc_1E9D6:                              ; CODE XREF: sub_1E7C4+20B↑j
                nop
                push    cs
                call    near ptr sub_20AA2
                nop
                push    cs
                call    near ptr sub_1FBDE
                nop
                push    cs
                call    near ptr sub_1FA9B
                nop
                push    cs
                call    near ptr sub_1FD81
                nop
                push    cs
                call    near ptr sub_1EEDB
                nop
                push    cs
                call    near ptr sub_1EFB5
                nop
                push    cs
                call    near ptr sub_1FE75
                nop
                push    cs
                call    near ptr sub_200EF

loc_1E9FE:                              ; CODE XREF: sub_1E7C4+A4↑j
                                        ; sub_1E7C4+B6↑j ...
                inc     di

loc_1E9FF:                              ; CODE XREF: sub_1E7C4+51↑j
                cmp     di, [bp+var_6]
                jge     short loc_1EA07
                jmp     loc_1E818
; ---------------------------------------------------------------------------

loc_1EA07:                              ; CODE XREF: sub_1E7C4+14↑j
                                        ; sub_1E7C4+23E↑j
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_1E7C4       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1EA0C       proc far                ; DATA XREF: huprou+113↑o
                                        ; sttrou+4E4↑o ...

var_4           = dword ptr -4

                enter   4, 0
                push    ds
                mov     ax, seg dseg16
                mov     ds, ax
                assume ds:dseg16
                nop
                push    cs
                call    near ptr sub_2058A
                call    CLRPRF          ; clrprf()
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                inc     es:word_2AEB7
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:word_2AEB7
                mov     dx, seg dseg19
                mov     es, dx
                cmp     ax, es:word_29A68
                jge     short loc_1EA42
                jmp     loc_1EED8
; ---------------------------------------------------------------------------

loc_1EA42:                              ; CODE XREF: sub_1EA0C+31↑j
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_2AEB7, 0
                mov     ax, seg dseg19
                mov     es, ax
                inc     es:word_282F6
                mov     ax, seg dseg19
                mov     es, ax
                inc     es:word_2AECD
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                mov     dx, es:word_2AECF
                dec     dx
                mov     es, ax
                cmp     es:word_2AECD, dx
                jle     short loc_1EA8B
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:word_2AED1
                mov     dx, seg dseg19
                mov     es, dx
                mov     es:word_2AECD, ax

loc_1EA8B:                              ; CODE XREF: sub_1EA0C+6B↑j
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29778, 6
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AECD
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                cmp     word ptr es:[bx+0D6h], 2
                jz      short loc_1EAB6
                jmp     loc_1EED3
; ---------------------------------------------------------------------------

loc_1EAB6:                              ; CODE XREF: sub_1EA0C+A5↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_2AECD
                mov     dx, seg dseg19
                mov     es, dx
                mov     es:word_2AED5, ax
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AECD
                call    sub_1A0E4
                pop     cx
                mov     bx, seg dseg19
                mov     es, bx
                mov     word ptr es:dword_29DD4+2, dx
                mov     word ptr es:dword_29DD4, ax
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_2AECB, 0
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+0DCh], 0FFFFh
                jg      short loc_1EB07
                jmp     loc_1EDBD
; ---------------------------------------------------------------------------

loc_1EB07:                              ; CODE XREF: sub_1EA0C+F6↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:word_29778, 8
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+0DCh]
                call    sub_1A0E4
                pop     cx
                mov     word ptr [bp+var_4+2], dx
                mov     word ptr [bp+var_4], ax
                les     bx, [bp+var_4]
                mov     ax, es:[bx+24h]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     ax, es:[bx+24h]
                jz      short loc_1EB48
                jmp     loc_1EDBD
; ---------------------------------------------------------------------------

loc_1EB48:                              ; CODE XREF: sub_1EA0C+137↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+0D4h], 0
                jz      short loc_1EB5D
                jmp     loc_1ED20
; ---------------------------------------------------------------------------

loc_1EB5D:                              ; CODE XREF: sub_1EA0C+14C↑j
                les     bx, [bp+var_4]
                mov     ax, es:[bx+20h]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     ax, es:[bx+20h]
                jz      short loc_1EB77
                jmp     loc_1EC50
; ---------------------------------------------------------------------------

loc_1EB77:                              ; CODE XREF: sub_1EA0C+166↑j
                les     bx, [bp+var_4]
                mov     ax, es:[bx+22h]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     ax, es:[bx+22h]
                jz      short loc_1EB91
                jmp     loc_1EC50
; ---------------------------------------------------------------------------

loc_1EB91:                              ; CODE XREF: sub_1EA0C+180↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+26h], 0Bh
                jge     short loc_1EC15
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_15D7B
                add     sp, 4
                push    0
                push    8000h
                call    RAND            ; int rand (void);
                cwd
                mov     cl, 2
                call    F_LXLSH
                push    dx
                push    ax
                call    F_LDIV
                or      ax, ax
                jz      short loc_1EBFE
                jmp     loc_1EDBD
; ---------------------------------------------------------------------------

loc_1EBFE:                              ; CODE XREF: sub_1EA0C+1ED↑j
                                        ; sub_1EA0C:loc_1ED1D↓j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+0DCh]
                nop
                push    cs
                call    near ptr sub_1F53F
                jmp     loc_1EDBC
; ---------------------------------------------------------------------------

loc_1EC15:                              ; CODE XREF: sub_1EA0C+194↑j
                push    0
                push    8000h
                call    RAND            ; int rand (void);
                cwd
                push    ax
                push    dx
                xor     dx, dx
                mov     ax, 3
                pop     cx
                pop     bx
                call    F_LXMUL
                push    dx
                push    ax
                call    F_LDIV
                or      ax, ax
                jz      short loc_1EC3C
                jmp     loc_1EDBD
; ---------------------------------------------------------------------------

loc_1EC3C:                              ; CODE XREF: sub_1EA0C+22B↑j
                nop
                push    cs
                call    near ptr sub_1F755
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:word_2AECB, 0
                jmp     loc_1EDBD
; ---------------------------------------------------------------------------

loc_1EC50:                              ; CODE XREF: sub_1EA0C+168↑j
                                        ; sub_1EA0C+182↑j
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+26h], 0Ah
                jle     short loc_1ECC1
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_15D7B
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:word_2AECB, 0
                nop
                push    cs
                call    near ptr sub_201B3
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AECB, 0
                jz      short loc_1ECBE
                jmp     loc_1EDBD
; ---------------------------------------------------------------------------

loc_1ECBE:                              ; CODE XREF: sub_1EA0C+2AD↑j
                jmp     loc_1EDA8
; ---------------------------------------------------------------------------

loc_1ECC1:                              ; CODE XREF: sub_1EA0C+253↑j
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_15D7B
                add     sp, 4
                push    0
                push    8000h
                call    RAND            ; int rand (void);
                cwd
                mov     cl, 2
                call    F_LXLSH
                push    dx
                push    ax
                call    F_LDIV
                or      ax, ax
                jz      short loc_1ED1D
                jmp     loc_1EDBD
; ---------------------------------------------------------------------------

loc_1ED1D:                              ; CODE XREF: sub_1EA0C+30C↑j
                jmp     loc_1EBFE
; ---------------------------------------------------------------------------

loc_1ED20:                              ; CODE XREF: sub_1EA0C+14E↑j
                les     bx, [bp+var_4]
                mov     ax, es:[bx+20h]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     ax, es:[bx+20h]
                jnz     short loc_1ED4E
                les     bx, [bp+var_4]
                mov     ax, es:[bx+22h]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     ax, es:[bx+22h]
                jz      short loc_1EDBD

loc_1ED4E:                              ; CODE XREF: sub_1EA0C+329↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_15D7B
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:word_2AECB, 0
                nop
                push    cs
                call    near ptr sub_201B3
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AECB, 0
                jnz     short loc_1EDBD

loc_1EDA8:                              ; CODE XREF: sub_1EA0C:loc_1ECBE↑j
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+0DCh]
                nop
                push    cs
                call    near ptr sub_1F2CD

loc_1EDBC:                              ; CODE XREF: sub_1EA0C+206↑j
                pop     cx

loc_1EDBD:                              ; CODE XREF: sub_1EA0C+F8↑j
                                        ; sub_1EA0C+139↑j ...
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+0D4h], 0
                jnz     short loc_1EE4B
                nop
                push    cs
                call    near ptr sub_20AA2
                nop
                push    cs
                call    near ptr sub_20088
                nop
                push    cs
                call    near ptr sub_1FBDE
                nop
                push    cs
                call    near ptr sub_1FA9B
                nop
                push    cs
                call    near ptr sub_1FD81
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     es:word_2AECB, 0
                jz      short loc_1EDF8
                jmp     loc_1EED3
; ---------------------------------------------------------------------------

loc_1EDF8:                              ; CODE XREF: sub_1EA0C+3E7↑j
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_15D7B
                add     sp, 4
                nop
                push    cs
                call    near ptr sub_1EEDB
                nop
                push    cs
                call    near ptr sub_1EFB5
                nop
                push    cs
                call    near ptr sub_1F07A
                nop
                push    cs
                call    near ptr sub_200EF
                jmp     loc_1EED3
; ---------------------------------------------------------------------------

loc_1EE4B:                              ; CODE XREF: sub_1EA0C+3C1↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:word_29778, 9
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+0DCh]
                call    sub_1A0E4
                pop     cx
                push    dx
                push    ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    ds
                push    offset aSSaysAwaitingY ; "%s says: Awaiting your command, Master "...
                call    PRF             ; prf(string);
                add     sp, 0Ch
                push    0
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah

loc_1EED3:                              ; CODE XREF: sub_1EA0C+A7↑j
                                        ; sub_1EA0C+3E9↑j ...
                call    CLRPRF          ; clrprf()

loc_1EED8:                              ; CODE XREF: sub_1EA0C+33↑j
                pop     ds
                assume ds:dseg21
                leave
                retf
sub_1EA0C       endp


; =============== S U B R O U T I N E =======================================


sub_1EEDB       proc far                ; CODE XREF: sub_1E7C4+228↑p
                                        ; sub_1EA0C+42A↑p ...
                push    si
                push    ds
                mov     ax, seg dseg16
                mov     ds, ax
                assume ds:dseg16
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     es:word_2AECB, 0
                jz      short loc_1EEF2
                jmp     loc_1EFB2
; ---------------------------------------------------------------------------

loc_1EEF2:                              ; CODE XREF: sub_1EEDB+12↑j
                xor     cx, cx
                xor     si, si

loc_1EEF6:                              ; CODE XREF: sub_1EEDB+3C↓j
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+3Ch], 0FFFFh
                jnz     short loc_1EF13
                mov     si, 0Bh
                mov     cx, 1

loc_1EF13:                              ; CODE XREF: sub_1EEDB+30↑j
                inc     si
                cmp     si, 0Ah
                jl      short loc_1EEF6
                cmp     cx, 1
                jz      short loc_1EF21
                jmp     loc_1EFB2
; ---------------------------------------------------------------------------

loc_1EF21:                              ; CODE XREF: sub_1EEDB+41↑j
                xor     si, si

loc_1EF23:                              ; CODE XREF: sub_1EEDB+D4↓j
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     word ptr es:[bx+190Ch], 1
                jle     short loc_1EFA9
                push    2
                call    sub_18A8A
                pop     cx
                or      ax, ax
                jnz     short loc_1EFA9
                push    0Ah
                push    ds
                push    offset aGet_0   ; "get"
                push    seg dseg19
                push    offset byte_29F13
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                push    0Ah
                mov     bx, si
                shl     bx, 1
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:[bx+190Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                push    seg dseg19
                push    offset byte_29FDB
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_2AED3, 2
                call    sub_B7E3
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_2AECB, 1
                jmp     short loc_1EFB2
; ---------------------------------------------------------------------------

loc_1EFA9:                              ; CODE XREF: sub_1EEDB+57↑j
                                        ; sub_1EEDB+63↑j
                inc     si
                cmp     si, 6
                jge     short loc_1EFB2
                jmp     loc_1EF23
; ---------------------------------------------------------------------------

loc_1EFB2:                              ; CODE XREF: sub_1EEDB+14↑j
                                        ; sub_1EEDB+43↑j ...
                pop     ds
                assume ds:dseg21
                pop     si
                retf
sub_1EEDB       endp


; =============== S U B R O U T I N E =======================================


sub_1EFB5       proc far                ; CODE XREF: sub_1E7C4+22D↑p
                                        ; sub_1EA0C+42F↑p ...
                push    si
                push    ds
                mov     ax, seg dseg16
                mov     ds, ax
                assume ds:dseg16
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AECB, 0
                jz      short loc_1EFCC
                jmp     loc_1F077
; ---------------------------------------------------------------------------

loc_1EFCC:                              ; CODE XREF: sub_1EFB5+12↑j
                xor     si, si

loc_1EFCE:                              ; CODE XREF: sub_1EFB5+BF↓j
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+3Ch], 0FFFFh
                jg      short loc_1EFE8
                jmp     loc_1F06E
; ---------------------------------------------------------------------------

loc_1EFE8:                              ; CODE XREF: sub_1EFB5+2E↑j
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+3Ch], 2
                jge     short loc_1F06E
                push    0Ah
                push    ds
                push    offset aDrop    ; "drop"
                push    seg dseg19
                push    offset byte_29F13
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                push    14h
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                push    seg dseg19
                push    offset byte_29FDB
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_2AED3, 2
                call    sub_B378
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_2AECB, 1
                jmp     short loc_1F077
; ---------------------------------------------------------------------------

loc_1F06E:                              ; CODE XREF: sub_1EFB5+30↑j
                                        ; sub_1EFB5+48↑j
                inc     si
                cmp     si, 0Ah
                jge     short loc_1F077
                jmp     loc_1EFCE
; ---------------------------------------------------------------------------

loc_1F077:                              ; CODE XREF: sub_1EFB5+14↑j
                                        ; sub_1EFB5+B7↑j ...
                pop     ds
                assume ds:dseg21
                pop     si
                retf
sub_1EFB5       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1F07A       proc far                ; CODE XREF: sub_1EA0C+434↑p
                                        ; sub_2058A+483↓p ...

var_8           = dword ptr -8
var_4           = word ptr -4
var_2           = word ptr -2

                enter   8, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg16
                mov     ds, ax
                assume ds:dseg16
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AECB, 0
                jz      short loc_1F096
                jmp     loc_1F2C8
; ---------------------------------------------------------------------------

loc_1F096:                              ; CODE XREF: sub_1F07A+17↑j
                push    0Ah
                push    4
                call    sub_18A8A
                pop     cx
                shl     ax, 2
                mov     dx, seg dseg19
                mov     bx, ax
                mov     es, dx
                push    word ptr es:[bx+28h]
                push    word ptr es:[bx+26h]
                push    seg dseg19
                push    offset byte_29F13
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_2AED3, 1
                call    sub_8B00
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+24h]
                mov     [bp+var_4], ax
                push    [bp+var_4]
                call    sub_1A075
                pop     cx
                mov     bx, ax
                mov     es, dx
                mov     ax, es:[bx+4B0h]
                mov     [bp+var_2], ax
                xor     si, si
                cmp     si, [bp+var_2]
                jl      short loc_1F103
                jmp     loc_1F2BC
; ---------------------------------------------------------------------------

loc_1F103:                              ; CODE XREF: sub_1F07A+84↑j
                                        ; sub_1F07A+23F↓j
                push    [bp+var_4]
                call    sub_1A075
                pop     cx
                mov     bx, si
                shl     bx, 1
                add     ax, bx
                mov     bx, ax
                mov     es, dx
                mov     di, es:[bx+320h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:word_29778, 0Ah
                push    di
                call    sub_1A0E4
                pop     cx
                mov     word ptr [bp+var_8+2], dx
                mov     word ptr [bp+var_8], ax
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AED5, di
                jnz     short loc_1F143
                jmp     loc_1F2B3
; ---------------------------------------------------------------------------

loc_1F143:                              ; CODE XREF: sub_1F07A+C4↑j
                les     bx, [bp+var_8]
                assume es:nothing
                cmp     word ptr es:[bx+0D6h], 2
                jz      short loc_1F151
                jmp     loc_1F2B3
; ---------------------------------------------------------------------------

loc_1F151:                              ; CODE XREF: sub_1F07A+D2↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+24h]
                les     bx, [bp+var_8]
                cmp     ax, es:[bx+24h]
                jz      short loc_1F16B
                jmp     loc_1F2B3
; ---------------------------------------------------------------------------

loc_1F16B:                              ; CODE XREF: sub_1F07A+EC↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+22h]
                les     bx, [bp+var_8]
                cmp     ax, es:[bx+22h]
                jz      short loc_1F185
                jmp     loc_1F2B3
; ---------------------------------------------------------------------------

loc_1F185:                              ; CODE XREF: sub_1F07A+106↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+20h]
                les     bx, [bp+var_8]
                cmp     ax, es:[bx+20h]
                jz      short loc_1F19F
                jmp     loc_1F2B3
; ---------------------------------------------------------------------------

loc_1F19F:                              ; CODE XREF: sub_1F07A+120↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_1A77E
                pop     cx
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     es:[bx+0DCh], di
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    ds
                push    offset aS_7     ; "%s "
                call    PRF             ; prf(string);
                add     sp, 8
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+1Eh]
                imul    ax, 82h
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BD6
                add     dx, ax
                add     dx, 18h
                push    word ptr es:dword_29BD6+2
                push    dx
                push    ds
                push    offset aSs_0    ; "%ss "
                call    PRF             ; prf(string);
                add     sp, 8
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+1Eh]
                imul    ax, 82h
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BD6
                add     dx, ax
                add     dx, 2Ch ; ','
                push    word ptr es:dword_29BD6+2
                push    dx
                push    ds
                push    offset aS_8     ; "%s, "
                call    PRF             ; prf(string);
                add     sp, 8
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29778, 0Bh
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+0DCh]
                call    sub_1A0E4
                pop     cx
                push    dx
                push    ax
                push    ds
                push    offset aS_9     ; "%s!\r"
                call    PRF             ; prf(string);
                add     sp, 8
                push    4
                push    0FFFFh
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                mov     si, [bp+var_2]

loc_1F2B3:                              ; CODE XREF: sub_1F07A+C6↑j
                                        ; sub_1F07A+D4↑j ...
                inc     si
                cmp     si, [bp+var_2]
                jge     short loc_1F2BC
                jmp     loc_1F103
; ---------------------------------------------------------------------------

loc_1F2BC:                              ; CODE XREF: sub_1F07A+86↑j
                                        ; sub_1F07A+23D↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:word_2AECB, 1

loc_1F2C8:                              ; CODE XREF: sub_1F07A+19↑j
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_1F07A       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1F2CD       proc far                ; CODE XREF: sub_1E7C4+1D4↑p
                                        ; sub_1EA0C+3AD↑p ...

var_E           = dword ptr -0Eh
var_A           = byte ptr -0Ah
arg_0           = word ptr  6

                enter   0Eh, 0
                push    ds
                mov     ax, seg dseg16
                mov     ds, ax
                assume ds:dseg16
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29778, 0Ch
                push    [bp+arg_0]
                call    sub_1A0E4
                pop     cx
                mov     word ptr [bp+var_E+2], dx
                mov     word ptr [bp+var_E], ax
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AECB, 0
                jz      short loc_1F302
                jmp     loc_1F53C
; ---------------------------------------------------------------------------

loc_1F302:                              ; CODE XREF: sub_1F2CD+30↑j
                les     bx, [bp+var_E]
                assume es:nothing
                mov     ax, es:[bx+24h]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     ax, es:[bx+24h]
                jz      short loc_1F31C
                jmp     loc_1F53C
; ---------------------------------------------------------------------------

loc_1F31C:                              ; CODE XREF: sub_1F2CD+4A↑j
                push    2
                call    sub_18A8A
                pop     cx
                or      ax, ax
                jz      short loc_1F32B
                jmp     loc_1F445
; ---------------------------------------------------------------------------

loc_1F32B:                              ; CODE XREF: sub_1F2CD+59↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+0D4h], 0
                jz      short loc_1F340
                jmp     loc_1F3CE
; ---------------------------------------------------------------------------

loc_1F340:                              ; CODE XREF: sub_1F2CD+6E↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:word_29778, 0Dh
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+0DCh]
                call    sub_1A0E4
                pop     cx
                push    dx
                push    ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+1Eh]
                imul    ax, 82h
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BD6
                add     dx, ax
                add     dx, 2Ch ; ','
                push    word ptr es:dword_29BD6+2
                push    dx
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+1Eh]
                imul    ax, 82h
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BD6
                add     dx, ax
                add     dx, 18h
                push    word ptr es:dword_29BD6+2
                push    dx
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    ds
                push    offset aSSsSS_0 ; "%s %ss: %s, %s!\r"
                call    PRF             ; prf(string);
                add     sp, 14h
                jmp     short loc_1F3FB
; ---------------------------------------------------------------------------

loc_1F3CE:                              ; CODE XREF: sub_1F2CD+70↑j
                push    5
                call    sub_18A8A
                pop     cx
                or      ax, ax
                jnz     short loc_1F445
                push    word ptr [bp+var_E+2]
                push    word ptr [bp+var_E]
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    ds
                push    offset aSHasAnyoneSeen ; "%s: Has anyone seen %s?\r"
                call    PRF             ; prf(string);
                add     sp, 0Ch

loc_1F3FB:                              ; CODE XREF: sub_1F2CD+FF↑j
                push    4
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah

loc_1F445:                              ; CODE XREF: sub_1F2CD+5B↑j
                                        ; sub_1F2CD+10B↑j
                push    0Ah
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                push    ss
                lea     ax, [bp+var_A]
                push    ax
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+20h]
                les     bx, [bp+var_E]
                cmp     ax, es:[bx+20h]
                jle     short loc_1F4AC
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:byte_29F13, 77h ; 'w'
                jmp     short loc_1F4CE
; ---------------------------------------------------------------------------

loc_1F4AC:                              ; CODE XREF: sub_1F2CD+1D0↑j
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+20h]
                les     bx, [bp+var_E]
                cmp     ax, es:[bx+20h]
                jge     short loc_1F4CE
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:byte_29F13, 65h ; 'e'

loc_1F4CE:                              ; CODE XREF: sub_1F2CD+1DD↑j
                                        ; sub_1F2CD+1F4↑j
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+22h]
                les     bx, [bp+var_E]
                cmp     ax, es:[bx+22h]
                jle     short loc_1F4F2
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:byte_29F13, 73h ; 's'
                jmp     short loc_1F514
; ---------------------------------------------------------------------------

loc_1F4F2:                              ; CODE XREF: sub_1F2CD+216↑j
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+22h]
                les     bx, [bp+var_E]
                cmp     ax, es:[bx+22h]
                jge     short loc_1F514
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:byte_29F13, 6Eh ; 'n'

loc_1F514:                              ; CODE XREF: sub_1F2CD+223↑j
                                        ; sub_1F2CD+23A↑j
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:byte_29F14, 0
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_2AED3, 1
                call    sub_8B00
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_2AECB, 1

loc_1F53C:                              ; CODE XREF: sub_1F2CD+32↑j
                                        ; sub_1F2CD+4C↑j
                pop     ds
                assume ds:dseg21
                leave
                retf
sub_1F2CD       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1F53F       proc far                ; CODE XREF: sub_163FE+60B↑P
                                        ; sub_1E7C4+16D↑p ...

var_4           = dword ptr -4
arg_0           = word ptr  6

                enter   4, 0
                push    ds
                mov     ax, seg dseg16
                mov     ds, ax
                assume ds:dseg16
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29778, 0Eh
                push    [bp+arg_0]
                call    sub_1A0E4
                pop     cx
                mov     word ptr [bp+var_4+2], dx
                mov     word ptr [bp+var_4], ax
                les     bx, [bp+var_4]
                assume es:nothing
                mov     ax, es:[bx+0E0h]
                and     ax, 4
                or      ax, 0
                jz      short loc_1F577
                jmp     loc_1F752
; ---------------------------------------------------------------------------

loc_1F577:                              ; CODE XREF: sub_1F53F+33↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                nop
                push    cs
                call    near ptr sub_1FF54
                pop     cx
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:byte_29F13, 0
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+24h]
                les     bx, [bp+var_4]
                cmp     ax, es:[bx+24h]
                jnz     short loc_1F606
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+22h]
                les     bx, [bp+var_4]
                cmp     ax, es:[bx+22h]
                jnz     short loc_1F606
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+20h]
                les     bx, [bp+var_4]
                cmp     ax, es:[bx+20h]
                jnz     short loc_1F606
                push    0Ah
                push    4
                call    sub_18A8A
                pop     cx
                shl     ax, 2
                mov     dx, seg dseg19
                mov     bx, ax
                mov     es, dx
                assume es:dseg19
                push    word ptr es:[bx+28h]
                push    word ptr es:[bx+26h]
                push    seg dseg19
                push    offset byte_29F13
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                jmp     loc_1F692
; ---------------------------------------------------------------------------

loc_1F606:                              ; CODE XREF: sub_1F53F+68↑j
                                        ; sub_1F53F+7F↑j ...
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+20h]
                les     bx, [bp+var_4]
                cmp     ax, es:[bx+20h]
                jle     short loc_1F62A
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:byte_29F13, 65h ; 'e'
                jmp     short loc_1F64C
; ---------------------------------------------------------------------------

loc_1F62A:                              ; CODE XREF: sub_1F53F+DC↑j
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+20h]
                les     bx, [bp+var_4]
                cmp     ax, es:[bx+20h]
                jge     short loc_1F64C
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:byte_29F13, 77h ; 'w'

loc_1F64C:                              ; CODE XREF: sub_1F53F+E9↑j
                                        ; sub_1F53F+100↑j
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+22h]
                les     bx, [bp+var_4]
                cmp     ax, es:[bx+22h]
                jle     short loc_1F670
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:byte_29F13, 6Eh ; 'n'
                jmp     short loc_1F692
; ---------------------------------------------------------------------------

loc_1F670:                              ; CODE XREF: sub_1F53F+122↑j
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+22h]
                les     bx, [bp+var_4]
                cmp     ax, es:[bx+22h]
                jge     short loc_1F692
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:byte_29F13, 73h ; 's'

loc_1F692:                              ; CODE XREF: sub_1F53F+C4↑j
                                        ; sub_1F53F+12F↑j ...
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:byte_29F13, 0
                jnz     short loc_1F6A2
                jmp     loc_1F752
; ---------------------------------------------------------------------------

loc_1F6A2:                              ; CODE XREF: sub_1F53F+15E↑j
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:byte_29F14, 0
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_2AED3, 1
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29778, 0Fh
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+0DCh]
                call    sub_1A0E4
                pop     cx
                push    dx
                push    ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    ds
                push    offset aSScreamsGetAwa ; "%s screams: Get away from me, %s!!!\r"
                call    PRF             ; prf(string);
                add     sp, 0Ch
                push    0
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                call    sub_8B00
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:word_2AECB, 1

loc_1F752:                              ; CODE XREF: sub_1F53F+35↑j
                                        ; sub_1F53F+160↑j
                pop     ds
                assume ds:dseg21
                leave
                retf
sub_1F53F       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1F755       proc far                ; CODE XREF: sub_1E7C4+208↑p
                                        ; sub_1EA0C+232↑p ...

var_8           = word ptr -8
var_6           = word ptr -6
var_4           = word ptr -4
var_2           = word ptr -2

                enter   8, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg16
                mov     ds, ax
                assume ds:dseg16
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+2Ah], 0Ah
                jnb     short loc_1F799
                push    0
                push    8000h
                call    RAND            ; int rand (void);
                cwd
                push    ax
                push    dx
                xor     dx, dx
                mov     ax, 3
                pop     cx
                pop     bx
                call    F_LXMUL
                push    dx
                push    ax
                call    F_LDIV
                or      ax, ax
                jnz     short loc_1F799
                jmp     loc_1FA96
; ---------------------------------------------------------------------------

loc_1F799:                              ; CODE XREF: sub_1F755+1B↑j
                                        ; sub_1F755+3F↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+0D4h], 0
                jz      short loc_1F7AE
                jmp     loc_1FA96
; ---------------------------------------------------------------------------

loc_1F7AE:                              ; CODE XREF: sub_1F755+54↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     es:word_2AECB, 0
                jz      short loc_1F7BE
                jmp     loc_1FA96
; ---------------------------------------------------------------------------

loc_1F7BE:                              ; CODE XREF: sub_1F755+64↑j
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+1Eh]
                imul    ax, 82h
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29BD6
                assume es:nothing
                add     bx, ax
                push    word ptr es:[bx+74h]
                call    sub_18A8A
                pop     cx
                or      ax, ax
                jz      short loc_1F7ED
                jmp     loc_1F98D
; ---------------------------------------------------------------------------

loc_1F7ED:                              ; CODE XREF: sub_1F755+93↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:word_29778, 10h
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+0DCh]
                call    sub_1A0E4
                pop     cx
                push    dx
                push    ax
                call    sub_15FC6
                add     sp, 4
                mov     si, ax
                cmp     si, 0FFFFh
                jg      short loc_1F822
                jmp     loc_1FA96
; ---------------------------------------------------------------------------

loc_1F822:                              ; CODE XREF: sub_1F755+C8↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:word_29778, 11h
                push    0
                call    sub_18EAF
                pop     cx
                or      ax, ax
                jz      short loc_1F83D
                jmp     loc_1FA96
; ---------------------------------------------------------------------------

loc_1F83D:                              ; CODE XREF: sub_1F755+E3↑j
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                mov     ax, es:[bx+0E0h]
                and     ax, 4
                or      ax, 0
                jz      short loc_1F858
                jmp     loc_1FA96
; ---------------------------------------------------------------------------

loc_1F858:                              ; CODE XREF: sub_1F755+FE↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+1Eh]
                imul    ax, 82h
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BD6
                add     dx, ax
                add     dx, 54h ; 'T'
                push    word ptr es:dword_29BD6+2
                push    dx
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    ds
                push    offset aTheSSYou ; "The %s %s you!\r"
                call    PRF             ; prf(string);
                add     sp, 0Ch
                push    si
                call    sub_17567
                pop     cx
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29778, 12h
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+0DCh]
                call    sub_1A0E4
                pop     cx
                push    dx
                push    ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+1Eh]
                imul    ax, 82h
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BD6
                add     dx, ax
                add     dx, 54h ; 'T'
                push    word ptr es:dword_29BD6+2
                push    dx
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    ds
                push    offset aTheSSS  ; "The %s %s %s!\r"
                call    PRF             ; prf(string);
                add     sp, 10h
                push    0
                push    0FFFFh
                push    si
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+2Ah]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+1Eh]
                imul    ax, 82h
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29BD6
                assume es:nothing
                add     bx, ax
                push    word ptr es:[bx+72h]
                push    si
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_16AD9
                add     sp, 8
                jmp     loc_1FA96
; ---------------------------------------------------------------------------

loc_1F98D:                              ; CODE XREF: sub_1F755+95↑j
                nop
                push    cs
                call    near ptr sub_201B3
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AECB, 0
                jz      short loc_1F9A2
                jmp     loc_1FA96
; ---------------------------------------------------------------------------

loc_1F9A2:                              ; CODE XREF: sub_1F755+248↑j
                mov     [bp+var_6], 0FFFFh
                mov     [bp+var_8], 0FC18h
                mov     si, 0FFFFh
                xor     di, di

loc_1F9B1:                              ; CODE XREF: sub_1F755+2CD↓j
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+3Ch], 0FFFFh
                jle     short loc_1FA1E
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                push    word ptr es:[bx+50h]
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                push    word ptr es:[bx+3Ch]
                call    sub_15B72
                add     sp, 4
                mov     [bp+var_2], dx
                mov     [bp+var_4], ax
                mov     ax, [bp+var_2]
                mov     dx, [bp+var_4]
                cmp     ax, [bp+var_6]
                jl      short loc_1FA1E
                jg      short loc_1FA10
                cmp     dx, [bp+var_8]
                jbe     short loc_1FA1E

loc_1FA10:                              ; CODE XREF: sub_1F755+2B4↑j
                mov     ax, [bp+var_2]
                mov     dx, [bp+var_4]
                mov     [bp+var_6], ax
                mov     [bp+var_8], dx
                mov     si, di

loc_1FA1E:                              ; CODE XREF: sub_1F755+271↑j
                                        ; sub_1F755+2B2↑j ...
                inc     di
                cmp     di, 0Ah
                jl      short loc_1F9B1
                cmp     si, 0FFFFh
                jle     short loc_1FA96
                push    0Ah
                push    ds
                push    offset aWield_0 ; "wield"
                push    seg dseg19
                push    offset byte_29F13
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                push    14h
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                push    seg dseg19
                push    offset byte_29FDB
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_2AED3, 2
                call    sub_CBFE
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_2AECB, 1

loc_1FA96:                              ; CODE XREF: sub_1F755+41↑j
                                        ; sub_1F755+56↑j ...
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_1F755       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1FA9B       proc far                ; CODE XREF: sub_1E7C4+21E↑p
                                        ; sub_1EA0C+3D4↑p ...

var_8           = word ptr -8
var_6           = word ptr -6
var_4           = word ptr -4
var_2           = word ptr -2

                enter   8, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg16
                mov     ds, ax
                assume ds:dseg16
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AECB, 0
                jz      short loc_1FAB7
                jmp     loc_1FBD9
; ---------------------------------------------------------------------------

loc_1FAB7:                              ; CODE XREF: sub_1FA9B+17↑j
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+8Ch], 0FFFFh
                jg      short loc_1FACC
                jmp     loc_1FBD9
; ---------------------------------------------------------------------------

loc_1FACC:                              ; CODE XREF: sub_1FA9B+2C↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+8Eh]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+8Ch]
                call    sub_15B72
                add     sp, 4
                mov     [bp+var_2], dx
                mov     [bp+var_4], ax
                mov     di, 0FFFFh
                xor     si, si

loc_1FAFD:                              ; CODE XREF: sub_1FA9B+F3↓j
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+3Ch], 0FFFFh
                jle     short loc_1FB88
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29BDA
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+1Ch], 2
                jnz     short loc_1FB88
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                push    word ptr es:[bx+50h]
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                push    word ptr es:[bx+3Ch]
                call    sub_15B72
                add     sp, 4
                mov     [bp+var_6], dx
                mov     [bp+var_8], ax
                mov     ax, [bp+var_2]
                mov     dx, [bp+var_4]
                cmp     ax, [bp+var_6]
                jg      short loc_1FB88
                jl      short loc_1FB86
                cmp     dx, [bp+var_8]
                jnb     short loc_1FB88

loc_1FB86:                              ; CODE XREF: sub_1FA9B+E4↑j
                mov     di, si

loc_1FB88:                              ; CODE XREF: sub_1FA9B+77↑j
                                        ; sub_1FA9B+A1↑j ...
                inc     si
                cmp     si, 0Ah
                jge     short loc_1FB91
                jmp     loc_1FAFD
; ---------------------------------------------------------------------------

loc_1FB91:                              ; CODE XREF: sub_1FA9B+F1↑j
                cmp     di, 0FFFFh
                jle     short loc_1FBD9
                push    0Ah
                push    ds
                push    offset aRemove  ; "remove"
                push    seg dseg19
                push    offset byte_29F13
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:word_2AED3, 1
                call    sub_D66C
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+8Ch], 0FFFFh
                jnz     short loc_1FBD9
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:word_2AECB, 1

loc_1FBD9:                              ; CODE XREF: sub_1FA9B+19↑j
                                        ; sub_1FA9B+2E↑j ...
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_1FA9B       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1FBDE       proc far                ; CODE XREF: sub_1E7C4+219↑p
                                        ; sub_1EA0C+3CF↑p ...

var_8           = word ptr -8
var_6           = word ptr -6
var_4           = word ptr -4
var_2           = word ptr -2

                enter   8, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg16
                mov     ds, ax
                assume ds:dseg16
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AECB, 0
                jz      short loc_1FBFA
                jmp     loc_1FD7C
; ---------------------------------------------------------------------------

loc_1FBFA:                              ; CODE XREF: sub_1FBDE+17↑j
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+8Ch], 0FFFFh
                jz      short loc_1FC0F
                jmp     loc_1FD7C
; ---------------------------------------------------------------------------

loc_1FC0F:                              ; CODE XREF: sub_1FBDE+2C↑j
                mov     di, 0FFFFh
                xor     si, si

loc_1FC14:                              ; CODE XREF: sub_1FBDE+114↓j
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+3Ch], 0FFFFh
                jg      short loc_1FC2E
                jmp     loc_1FCEC
; ---------------------------------------------------------------------------

loc_1FC2E:                              ; CODE XREF: sub_1FBDE+4B↑j
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29BDA
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+1Ch], 2
                jz      short loc_1FC5B
                jmp     loc_1FCEC
; ---------------------------------------------------------------------------

loc_1FC5B:                              ; CODE XREF: sub_1FBDE+78↑j
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                push    word ptr es:[bx+50h]
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                push    word ptr es:[bx+3Ch]
                call    sub_15B72
                add     sp, 4
                mov     [bp+var_2], dx
                mov     [bp+var_4], ax
                cmp     di, 0FFFFh
                jle     short loc_1FCCE
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                push    word ptr es:[bx+50h]
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                push    word ptr es:[bx+3Ch]
                call    sub_15B72
                add     sp, 4
                mov     [bp+var_6], dx
                mov     [bp+var_8], ax
                jmp     short loc_1FCD8
; ---------------------------------------------------------------------------

loc_1FCCE:                              ; CODE XREF: sub_1FBDE+B6↑j
                mov     [bp+var_6], 0FFFFh
                mov     [bp+var_8], 0FFFFh

loc_1FCD8:                              ; CODE XREF: sub_1FBDE+EE↑j
                mov     ax, [bp+var_2]
                mov     dx, [bp+var_4]
                cmp     ax, [bp+var_6]
                jl      short loc_1FCEC
                jg      short loc_1FCEA
                cmp     dx, [bp+var_8]
                jbe     short loc_1FCEC

loc_1FCEA:                              ; CODE XREF: sub_1FBDE+105↑j
                mov     di, si

loc_1FCEC:                              ; CODE XREF: sub_1FBDE+4D↑j
                                        ; sub_1FBDE+7A↑j ...
                inc     si
                cmp     si, 0Ah
                jge     short loc_1FCF5
                jmp     loc_1FC14
; ---------------------------------------------------------------------------

loc_1FCF5:                              ; CODE XREF: sub_1FBDE+112↑j
                cmp     di, 0FFFFh
                jg      short loc_1FCFD
                jmp     loc_1FD7C
; ---------------------------------------------------------------------------

loc_1FCFD:                              ; CODE XREF: sub_1FBDE+11A↑j
                push    0Ah
                push    ds
                push    offset aWear    ; "wear"
                push    seg dseg19
                push    offset byte_29F13
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                push    14h
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                push    seg dseg19
                push    offset byte_29FDB
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_2AED3, 2
                call    sub_D230
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+8Ch], 0FFFFh
                jle     short loc_1FD7C
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:word_2AECB, 1

loc_1FD7C:                              ; CODE XREF: sub_1FBDE+19↑j
                                        ; sub_1FBDE+2E↑j ...
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_1FBDE       endp


; =============== S U B R O U T I N E =======================================


sub_1FD81       proc far                ; CODE XREF: sub_1E7C4+223↑p
                                        ; sub_1EA0C+3D9↑p ...
                push    ds
                mov     ax, seg dseg16
                mov     ds, ax
                assume ds:dseg16
                xor     cx, cx

loc_1FD89:                              ; CODE XREF: sub_1FD81+6B↓j
                mov     ax, cx
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+3Ch], 2
                jnz     short loc_1FDE8
                push    0Ah
                push    ds
                push    offset aConvert_1 ; "convert"
                push    seg dseg19
                push    offset byte_29F13
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                push    0Ah
                push    ds
                push    offset aSkull   ; "skull"
                push    seg dseg19
                push    offset byte_29FDB
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:word_2AED3, 2
                call    sub_10BE0
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_2AECB, 1
                mov     cx, 0Ah

loc_1FDE8:                              ; CODE XREF: sub_1FD81+1D↑j
                inc     cx
                cmp     cx, 0Ah
                jl      short loc_1FD89
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AECB, 0
                jnz     short loc_1FE73
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+4Eh], 0FFFFh
                jle     short loc_1FE73
                push    0Ah
                push    ds
                push    offset aConvert_1 ; "convert"
                push    seg dseg19
                push    offset byte_29F13
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                push    14h
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+4Eh]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                push    seg dseg19
                push    offset byte_29FDB
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_2AED3, 2
                call    sub_10BE0
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_2AECB, 1

loc_1FE73:                              ; CODE XREF: sub_1FD81+78↑j
                                        ; sub_1FD81+89↑j
                pop     ds
                assume ds:dseg21
                retf
sub_1FD81       endp


; =============== S U B R O U T I N E =======================================


sub_1FE75       proc far                ; CODE XREF: sub_1E7C4+232↑p
                                        ; sub_2058A+47F↓p
                push    si
                push    ds
                mov     ax, seg dseg16
                mov     ds, ax
                assume ds:dseg16
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AECB, 0
                jz      short loc_1FE8C
                jmp     loc_1FF51
; ---------------------------------------------------------------------------

loc_1FE8C:                              ; CODE XREF: sub_1FE75+12↑j
                push    14h
                call    sub_18A8A
                pop     cx
                or      ax, ax
                jz      short loc_1FE9B
                jmp     loc_1FF51
; ---------------------------------------------------------------------------

loc_1FE9B:                              ; CODE XREF: sub_1FE75+21↑j
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+0D0h], 0FFFFh
                jg      short loc_1FEB0
                jmp     loc_1FF51
; ---------------------------------------------------------------------------

loc_1FEB0:                              ; CODE XREF: sub_1FE75+36↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+0CEh], 0
                jz      short loc_1FEC5
                jmp     loc_1FF51
; ---------------------------------------------------------------------------

loc_1FEC5:                              ; CODE XREF: sub_1FE75+4B↑j
                push    0Ah
                push    ds
                push    offset aCast    ; "cast"
                push    seg dseg19
                push    offset byte_29F13
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:word_2AED3, 1
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     bx, es:[bx+0D0h]
                imul    bx, 36h ; '6'
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+96h]
                mov     cx, es:[si+94h]
                mov     es, ax
                assume es:dseg19
                add     cx, es:[bx+1008h]
                adc     dx, es:[bx+100Ah]
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     es:[bx+96h], dx
                mov     es:[bx+94h], cx
                call    sub_1AFF1
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+0CEh], 0
                jle     short loc_1FF51
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:word_2AECB, 1

loc_1FF51:                              ; CODE XREF: sub_1FE75+14↑j
                                        ; sub_1FE75+23↑j ...
                pop     ds
                assume ds:dseg21
                pop     si
                retf
sub_1FE75       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1FF54       proc far                ; CODE XREF: sub_C376+25F↑P
                                        ; sub_C6BB+2ED↑P ...

arg_0           = word ptr  6

                push    bp
                mov     bp, sp
                push    si
                push    di
                push    ds
                mov     ax, seg dseg16
                mov     ds, ax
                assume ds:dseg16
                mov     si, [bp+arg_0]
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29778, 13h
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                cmp     word ptr es:[bx+0D4h], 1
                jz      short loc_1FF84
                jmp     loc_20083
; ---------------------------------------------------------------------------

loc_1FF84:                              ; CODE XREF: sub_1FF54+2B↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_2AED1
                dec     ax
                cmp     ax, si
                jl      short loc_1FF95
                jmp     loc_20083
; ---------------------------------------------------------------------------

loc_1FF95:                              ; CODE XREF: sub_1FF54+3C↑j
                mov     ax, seg dseg19
                mov     es, ax
                mov     di, es:word_2AED5
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_2AED5, si
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29778, 14h
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, seg dseg19
                mov     es, bx
                mov     word ptr es:dword_29DD4+2, dx
                mov     word ptr es:dword_29DD4, ax
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+0C8h], 0
                jnz     short loc_1FFE3
                mov     dx, ds
                mov     ax, 932h
                jmp     short loc_1FFE8
; ---------------------------------------------------------------------------

loc_1FFE3:                              ; CODE XREF: sub_1FF54+86↑j
                mov     dx, ds
                mov     ax, 936h

loc_1FFE8:                              ; CODE XREF: sub_1FF54+8D↑j
                push    dx
                push    ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    ds
                push    offset aSGetsAConfused ; "%s gets a confused look on %s face.\r"
                call    PRF             ; prf(string);
                add     sp, 0Ch
                push    0
                push    0FFFFh
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     word ptr es:[bx+0D4h], 0
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:word_29778, 15h
                push    di
                call    sub_1A0E4
                pop     cx
                mov     bx, seg dseg19
                mov     es, bx
                mov     word ptr es:dword_29DD4+2, dx
                mov     word ptr es:dword_29DD4, ax
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_2AED5, di

loc_20083:                              ; CODE XREF: sub_1FF54+2D↑j
                                        ; sub_1FF54+3E↑j
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                pop     bp
                retf
sub_1FF54       endp


; =============== S U B R O U T I N E =======================================


sub_20088       proc far                ; CODE XREF: sub_1E7C4+20F↑p
                                        ; sub_1EA0C+3CA↑p ...
                push    ds
                mov     ax, seg dseg16
                mov     ds, ax
                assume ds:dseg16
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+26h]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     ax, es:[bx+28h]
                jnb     short loc_200ED
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+26h], 9
                jle     short loc_200ED
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+26h]
                add     ax, 0FFFCh
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     es:[bx+26h], ax
                call    sub_10FDD
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:word_2AECB, 1

loc_200ED:                              ; CODE XREF: sub_20088+22↑j
                                        ; sub_20088+33↑j
                pop     ds
                assume ds:dseg21
                retf
sub_20088       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_200EF       proc far                ; CODE XREF: sub_1E7C4+237↑p
                                        ; sub_1EA0C+439↑p ...

var_54          = byte ptr -54h

                enter   54h, 0
                push    ds
                mov     ax, seg dseg16
                mov     ds, ax
                assume ds:dseg16
                lea     ax, [bp+var_54]
                push    ss
                push    ax
                push    ds
                push    offset off_26C70
                mov     cx, 54h ; 'T'
                call    F_SCOPY
                nop
                push    cs
                call    near ptr sub_20AA2
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AECB, 0
                jz      short loc_2011F
                jmp     loc_201B0
; ---------------------------------------------------------------------------

loc_2011F:                              ; CODE XREF: sub_200EF+2B↑j
                push    1Eh
                call    sub_18A8A
                pop     cx
                or      ax, ax
                jz      short loc_2012E
                jmp     loc_201B0
; ---------------------------------------------------------------------------

loc_2012E:                              ; CODE XREF: sub_200EF+3A↑j
                push    15h
                call    sub_18A8A
                pop     cx
                shl     ax, 2
                lea     dx, [bp+var_54]
                add     ax, dx
                mov     bx, ax
                push    word ptr ss:[bx+2]
                push    word ptr ss:[bx]
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    ds
                push    offset aSIsS    ; "%s is %s\r"
                call    PRF             ; prf(string);
                add     sp, 0Ch
                push    0
                push    0FFFFh
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:word_2AECB, 1

loc_201B0:                              ; CODE XREF: sub_200EF+2D↑j
                                        ; sub_200EF+3C↑j
                pop     ds
                assume ds:dseg21
                leave
                retf
sub_200EF       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_201B3       proc far                ; CODE XREF: sub_1E7C4+1C1↑p
                                        ; sub_1EA0C+29F↑p ...

var_A           = byte ptr -0Ah

                enter   0Ah, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg16
                mov     ds, ax
                assume ds:dseg16
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+2Ah], 6
                jnb     short loc_201D3
                jmp     loc_20509
; ---------------------------------------------------------------------------

loc_201D3:                              ; CODE XREF: sub_201B3+1B↑j
                mov     di, 0FFFFh
                xor     si, si

loc_201D8:                              ; CODE XREF: sub_201B3+165↓j
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29BDA
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+1Ch], 3
                jz      short loc_20205
                jmp     loc_20312
; ---------------------------------------------------------------------------

loc_20205:                              ; CODE XREF: sub_201B3+4D↑j
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+50h], 1
                jg      short loc_2021F
                jmp     loc_20312
; ---------------------------------------------------------------------------

loc_2021F:                              ; CODE XREF: sub_201B3+67↑j
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29BDA
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+1Ah], 2
                jz      short loc_2024C
                jmp     loc_2030D
; ---------------------------------------------------------------------------

loc_2024C:                              ; CODE XREF: sub_201B3+94↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    ds
                push    offset aSLaughsYouCanT ; "%s laughs: You can't fool me!!\r"
                call    PRF             ; prf(string);
                add     sp, 8
                push    0
                push    0FFFFh
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                push    0Ah
                push    ds
                push    offset aConv    ; "CONV"
                push    seg dseg19
                push    offset byte_29F13
                call    STZCPY          ; stzcpy(char *dest, char *source, int nbytes);
                add     sp, 0Ah
                push    0Ah
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                push    seg dseg19
                push    offset byte_29FDB
                call    STZCPY          ; stzcpy(char *dest, char *source, int nbytes);
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_2AED3, 2
                call    sub_10BE0
                jmp     loc_204FD
; ---------------------------------------------------------------------------

loc_2030D:                              ; CODE XREF: sub_201B3+96↑j
                mov     di, si
                mov     si, 0Ah

loc_20312:                              ; CODE XREF: sub_201B3+4F↑j
                                        ; sub_201B3+69↑j
                inc     si
                cmp     si, 0Ah
                jge     short loc_2031B
                jmp     loc_201D8
; ---------------------------------------------------------------------------

loc_2031B:                              ; CODE XREF: sub_201B3+163↑j
                cmp     di, 0FFFFh
                jg      short loc_20323
                jmp     loc_20509
; ---------------------------------------------------------------------------

loc_20323:                              ; CODE XREF: sub_201B3+16B↑j
                push    0
                push    0Ah
                push    ss
                lea     ax, [bp+var_A]
                push    ax
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     si, es:[bx+0DCh]
                cmp     si, 0FFFFh
                jg      short loc_2034B
                jmp     loc_20509
; ---------------------------------------------------------------------------

loc_2034B:                              ; CODE XREF: sub_201B3+193↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:word_29778, 16h
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                mov     ax, es:[bx+24h]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     ax, es:[bx+24h]
                jz      short loc_20379
                jmp     loc_20509
; ---------------------------------------------------------------------------

loc_20379:                              ; CODE XREF: sub_201B3+1C1↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:word_29778, 17h
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                mov     ax, es:[bx+22h]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     ax, es:[bx+22h]
                jnz     short loc_203DB
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:word_29778, 18h
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                mov     ax, es:[bx+20h]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     ax, es:[bx+20h]
                jle     short loc_203D5
                push    ds
                push    offset aEast_3  ; "east"
                jmp     short loc_2043B
; ---------------------------------------------------------------------------

loc_203D5:                              ; CODE XREF: sub_201B3+21A↑j
                push    ds
                push    offset aWest_3  ; "west"
                jmp     short loc_2043B
; ---------------------------------------------------------------------------

loc_203DB:                              ; CODE XREF: sub_201B3+1EF↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:word_29778, 19h
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                mov     ax, es:[bx+20h]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     ax, es:[bx+20h]
                jnz     short loc_20448
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:word_29778, 1Ah
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                mov     ax, es:[bx+22h]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     ax, es:[bx+22h]
                jle     short loc_20437
                push    ds
                push    offset aNorth_3 ; "north"
                jmp     short loc_2043B
; ---------------------------------------------------------------------------

loc_20437:                              ; CODE XREF: sub_201B3+27C↑j
                push    ds
                push    offset aSouth_3 ; "south"

loc_2043B:                              ; CODE XREF: sub_201B3+220↑j
                                        ; sub_201B3+226↑j ...
                push    ss
                lea     ax, [bp+var_A]
                push    ax
                call    STRCPY          ; char* strcpy(char* destination, const char* source );
                add     sp, 8

loc_20448:                              ; CODE XREF: sub_201B3+251↑j
                push    ss
                lea     ax, [bp+var_A]
                push    ax
                call    STRLEN          ; size_t strlen(const char* str);
                add     sp, 4
                or      ax, ax
                ja      short loc_2045C
                jmp     loc_20509
; ---------------------------------------------------------------------------

loc_2045C:                              ; CODE XREF: sub_201B3+2A4↑j
                push    0Ah
                push    ds
                push    offset aPoint_0 ; "point"
                push    seg dseg19
                push    offset byte_29F13
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                push    0Ch
                push    ss
                lea     ax, [bp+var_A]
                push    ax
                push    seg dseg19
                push    offset byte_29FDB
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                push    19h
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                push    seg dseg19
                push    offset byte_2A0A3
                call    STRNCPY         ; char *strncpy(char *destination, const char *source, size_t num);
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_2AED3, 3
                call    sub_20DF0
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+50h], 1
                jge     short loc_204FD
                mov     ax, di
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                inc     word ptr es:[bx+50h]

loc_204FD:                              ; CODE XREF: sub_201B3+157↑j
                                        ; sub_201B3+334↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:word_2AECB, 1

loc_20509:                              ; CODE XREF: sub_201B3+1D↑j
                                        ; sub_201B3+16D↑j ...
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_201B3       endp


; =============== S U B R O U T I N E =======================================


sub_2050E       proc far                ; CODE XREF: _INIT__MUTANTS+D4E↑P
                                        ; DATA XREF: sub_2050E+6D↓o
                push    ds
                mov     ax, seg dseg16
                mov     ds, ax
                assume ds:dseg16
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_29860, 0
                jz      short loc_20578
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AEB9, 0FFFFh
                jle     short loc_20578
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_282F6, 2
                jle     short loc_20548
                mov     ax, seg dseg19
                mov     es, ax
                add     es:word_29A68, 64h ; 'd'
                jmp     short loc_2056C
; ---------------------------------------------------------------------------

loc_20548:                              ; CODE XREF: sub_2050E+2B↑j
                mov     ax, seg dseg19
                mov     es, ax
                sub     es:word_29A68, 64h ; 'd'
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_29A68, 64h ; 'd'
                jge     short loc_2056C
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29A68, 64h ; 'd'

loc_2056C:                              ; CODE XREF: sub_2050E+38↑j
                                        ; sub_2050E+50↑j
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_282F6, 0

loc_20578:                              ; CODE XREF: sub_2050E+11↑j
                                        ; sub_2050E+1E↑j
                push    seg cseg08
                push    offset sub_2050E
                push    1
                call    RTKICK          ; rtkick(int time, void *rouptr());
                add     sp, 6
                pop     ds
                assume ds:dseg21
                retf
sub_2050E       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_2058A       proc far                ; CODE XREF: sub_1EA0C+C↑p

var_4           = dword ptr -4

                enter   4, 0
                push    ds
                mov     ax, seg dseg16
                mov     ds, ax
                assume ds:dseg16
                mov     ax, seg dseg19
                mov     es, ax
                add     es:word_2977A, 1
                adc     es:word_2977C, 0
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:word_2977C
                mov     dx, es:word_2977A
                mov     bx, seg dseg19
                mov     es, bx
                cmp     ax, es:word_29A6E
                jg      short loc_205CE
                jge     short loc_205C4
                jmp     loc_20A9F
; ---------------------------------------------------------------------------

loc_205C4:                              ; CODE XREF: sub_2058A+35↑j
                cmp     dx, es:word_29A6C
                jnb     short loc_205CE
                jmp     loc_20A9F
; ---------------------------------------------------------------------------

loc_205CE:                              ; CODE XREF: sub_2058A+33↑j
                                        ; sub_2058A+3F↑j
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_2977C, 0
                mov     es:word_2977A, 0
                mov     ax, seg dseg19
                mov     es, ax
                inc     es:word_2977E
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:word_2977E
                mov     dx, seg dseg19
                mov     es, dx
                cmp     ax, es:word_2B232
                jle     short loc_2060C
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_2977E, 0

loc_2060C:                              ; CODE XREF: sub_2058A+74↑j
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2B232, 0
                jg      short loc_2061C
                jmp     loc_20A9F
; ---------------------------------------------------------------------------

loc_2061C:                              ; CODE XREF: sub_2058A+8D↑j
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:word_2977E
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_2B234
                assume es:nothing
                add     bx, ax
                mov     dx, es:[bx]
                mov     ax, seg NTERMS
                mov     es, ax
                assume es:nothing
                cmp     word ptr es:NTERMS, dx ; int nterms;
                jg      short loc_2064E
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     es:word_2AECF, dx
                jge     short loc_20658

loc_2064E:                              ; CODE XREF: sub_2058A+B6↑j
                push    dx
                call    sub_1A870
                pop     cx
                jmp     loc_20A9F
; ---------------------------------------------------------------------------

loc_20658:                              ; CODE XREF: sub_2058A+C2↑j
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_29778, 1Bh
                mov     ax, seg dseg19
                mov     es, ax
                mov     ax, es:word_2977E
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_2B234
                assume es:nothing
                add     bx, ax
                push    word ptr es:[bx]
                call    sub_1A0E4
                pop     cx
                mov     bx, seg dseg19
                mov     es, bx
                assume es:dseg19
                mov     word ptr es:dword_29DD4+2, dx
                mov     word ptr es:dword_29DD4, ax
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+0D6h], 2
                jz      short loc_206A7
                jmp     loc_20A9F
; ---------------------------------------------------------------------------

loc_206A7:                              ; CODE XREF: sub_2058A+118↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_2977E
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_2B234
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     es:word_2AED5, ax
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_2AECB, 0
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+0DCh], 0FFFFh
                jg      short loc_206EB
                jmp     loc_20992
; ---------------------------------------------------------------------------

loc_206EB:                              ; CODE XREF: sub_2058A+15C↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:word_29778, 1Ch
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+0DCh]
                call    sub_1A0E4
                pop     cx
                mov     word ptr [bp+var_4+2], dx
                mov     word ptr [bp+var_4], ax
                les     bx, [bp+var_4]
                mov     ax, es:[bx+24h]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     ax, es:[bx+24h]
                jz      short loc_2072C
                jmp     loc_20992
; ---------------------------------------------------------------------------

loc_2072C:                              ; CODE XREF: sub_2058A+19D↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+0D4h], 0
                jz      short loc_20741
                jmp     loc_208F7
; ---------------------------------------------------------------------------

loc_20741:                              ; CODE XREF: sub_2058A+1B2↑j
                les     bx, [bp+var_4]
                mov     ax, es:[bx+20h]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     ax, es:[bx+20h]
                jz      short loc_2075B
                jmp     loc_20828
; ---------------------------------------------------------------------------

loc_2075B:                              ; CODE XREF: sub_2058A+1CC↑j
                les     bx, [bp+var_4]
                mov     ax, es:[bx+22h]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     ax, es:[bx+22h]
                jz      short loc_20775
                jmp     loc_20828
; ---------------------------------------------------------------------------

loc_20775:                              ; CODE XREF: sub_2058A+1E6↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+26h], 0Bh
                jge     short loc_207F8
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_15D7B
                add     sp, 4
                push    0
                push    8000h
                call    RAND            ; int rand (void);
                cwd
                mov     cl, 2
                call    F_LXLSH
                push    dx
                push    ax
                call    F_LDIV
                or      ax, ax
                jz      short loc_207E2
                jmp     loc_20992
; ---------------------------------------------------------------------------

loc_207E2:                              ; CODE XREF: sub_2058A+253↑j
                                        ; sub_2058A:loc_208F4↓j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+0DCh]
                push    cs
                call    near ptr sub_1F53F
                jmp     loc_20991
; ---------------------------------------------------------------------------

loc_207F8:                              ; CODE XREF: sub_2058A+1FA↑j
                push    0
                push    8000h
                call    RAND            ; int rand (void);
                cwd
                shl     ax, 1
                rcl     dx, 1
                push    dx
                push    ax
                call    F_LDIV
                or      ax, ax
                jz      short loc_20815
                jmp     loc_20992
; ---------------------------------------------------------------------------

loc_20815:                              ; CODE XREF: sub_2058A+286↑j
                push    cs
                call    near ptr sub_1F755
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:word_2AECB, 0
                jmp     loc_20992
; ---------------------------------------------------------------------------

loc_20828:                              ; CODE XREF: sub_2058A+1CE↑j
                                        ; sub_2058A+1E8↑j
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+26h], 0Ah
                jle     short loc_20898
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_15D7B
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:word_2AECB, 0
                push    cs
                call    near ptr sub_201B3
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AECB, 0
                jz      short loc_20895
                jmp     loc_20992
; ---------------------------------------------------------------------------

loc_20895:                              ; CODE XREF: sub_2058A+306↑j
                jmp     loc_2097E
; ---------------------------------------------------------------------------

loc_20898:                              ; CODE XREF: sub_2058A+2AD↑j
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_15D7B
                add     sp, 4
                push    0
                push    8000h
                call    RAND            ; int rand (void);
                cwd
                mov     cl, 2
                call    F_LXLSH
                push    dx
                push    ax
                call    F_LDIV
                or      ax, ax
                jz      short loc_208F4
                jmp     loc_20992
; ---------------------------------------------------------------------------

loc_208F4:                              ; CODE XREF: sub_2058A+365↑j
                jmp     loc_207E2
; ---------------------------------------------------------------------------

loc_208F7:                              ; CODE XREF: sub_2058A+1B4↑j
                les     bx, [bp+var_4]
                mov     ax, es:[bx+20h]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     ax, es:[bx+20h]
                jnz     short loc_20925
                les     bx, [bp+var_4]
                mov     ax, es:[bx+22h]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     ax, es:[bx+22h]
                jz      short loc_20992

loc_20925:                              ; CODE XREF: sub_2058A+382↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_15D7B
                add     sp, 4
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:word_2AECB, 0
                push    cs
                call    near ptr sub_201B3
                mov     ax, seg dseg19
                mov     es, ax
                cmp     es:word_2AECB, 0
                jnz     short loc_20992

loc_2097E:                              ; CODE XREF: sub_2058A:loc_20895↑j
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+0DCh]
                push    cs
                call    near ptr sub_1F2CD

loc_20991:                              ; CODE XREF: sub_2058A+26B↑j
                pop     cx

loc_20992:                              ; CODE XREF: sub_2058A+15E↑j
                                        ; sub_2058A+19F↑j ...
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+0D4h], 0
                jnz     short loc_20A17
                push    cs
                call    near ptr sub_20088
                push    cs
                call    near ptr sub_1FBDE
                push    cs
                call    near ptr sub_1FA9B
                push    cs
                call    near ptr sub_1FD81
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     es:word_2AECB, 0
                jz      short loc_209C4
                jmp     loc_20A9F
; ---------------------------------------------------------------------------

loc_209C4:                              ; CODE XREF: sub_2058A+435↑j
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_15D7B
                add     sp, 4
                push    cs
                call    near ptr sub_1EEDB
                push    cs
                call    near ptr sub_1EFB5
                push    cs
                call    near ptr sub_1FE75
                push    cs
                call    near ptr sub_1F07A
                push    cs
                call    near ptr sub_200EF
                jmp     loc_20A9F
; ---------------------------------------------------------------------------

loc_20A17:                              ; CODE XREF: sub_2058A+418↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:word_29778, 1Dh
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+0DCh]
                call    sub_1A0E4
                pop     cx
                push    dx
                push    ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    ds
                push    offset aSSaysAwaitingY ; "%s says: Awaiting your command, Master "...
                call    PRF             ; prf(string);
                add     sp, 0Ch
                push    0
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah

loc_20A9F:                              ; CODE XREF: sub_2058A+37↑j
                                        ; sub_2058A+41↑j ...
                pop     ds
                assume ds:dseg21
                leave
                retf
sub_2058A       endp


; =============== S U B R O U T I N E =======================================


sub_20AA2       proc far                ; CODE XREF: sub_1E7C4+214↑p
                                        ; sub_1EA0C+3C5↑p ...
                push    ds
                mov     ax, seg dseg16
                mov     ds, ax
                assume ds:dseg16
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     ax, es:word_2AED5
                mov     dx, seg NTERMS
                mov     es, dx
                assume es:nothing
                cmp     ax, word ptr es:NTERMS ; int nterms;
                jz      short loc_20AC0
                jmp     loc_20BC6
; ---------------------------------------------------------------------------

loc_20AC0:                              ; CODE XREF: sub_20AA2+19↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+26h]
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                cmp     ax, es:word_29A72
                jl      short loc_20ADD
                jmp     loc_20BC6
; ---------------------------------------------------------------------------

loc_20ADD:                              ; CODE XREF: sub_20AA2+36↑j
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     ax, es:[bx+0DCh]
                mov     dx, seg NTERMS
                mov     es, dx
                assume es:nothing
                cmp     ax, word ptr es:NTERMS ; int nterms;
                jl      short loc_20AFB
                jmp     loc_20BC6
; ---------------------------------------------------------------------------

loc_20AFB:                              ; CODE XREF: sub_20AA2+54↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+0DCh], 0FFFFh
                jg      short loc_20B10
                jmp     loc_20BC6
; ---------------------------------------------------------------------------

loc_20B10:                              ; CODE XREF: sub_20AA2+69↑j
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+0DCh]
                call    sub_1A0E4
                pop     cx
                push    dx
                push    ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    ds
                push    offset aSIWillEscapeS ; "%s: I will escape, %s!\r"
                call    PRF             ; prf(string);
                add     sp, 0Ch
                push    0
                push    0FFFFh
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+0DCh]
                nop
                push    cs
                call    near ptr sub_20BC8
                pop     cx
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                mov     word ptr es:[bx+0DCh], 0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                mov     es:word_2AECB, 0
                push    cs
                call    near ptr sub_1F07A
                mov     ax, seg dseg19
                mov     es, ax
                mov     es:word_2AECB, 1

loc_20BC6:                              ; CODE XREF: sub_20AA2+1B↑j
                                        ; sub_20AA2+38↑j ...
                pop     ds
                assume ds:dseg21
                retf
sub_20AA2       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_20BC8       proc far                ; CODE XREF: sub_20AA2+F3↑p

var_A           = word ptr -0Ah
var_8           = word ptr -8
var_6           = word ptr -6
var_4           = dword ptr -4
arg_0           = word ptr  6

                enter   0Ah, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg16
                mov     ds, ax
                assume ds:dseg16
                mov     si, [bp+arg_0]
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                assume es:nothing
                mov     ax, es:[bx+24h]
                mov     [bp+var_A], ax
                push    [bp+var_A]
                call    sub_1A075
                pop     cx
                mov     bx, ax
                mov     es, dx
                mov     di, es:[bx+4B0h]
                mov     [bp+var_6], 0
                cmp     [bp+var_6], di
                jl      short loc_20C08
                jmp     loc_20DE4
; ---------------------------------------------------------------------------

loc_20C08:                              ; CODE XREF: sub_20BC8+3B↑j
                                        ; sub_20BC8+219↓j
                push    [bp+var_A]
                call    sub_1A075
                pop     cx
                mov     bx, [bp+var_6]
                shl     bx, 1
                add     ax, bx
                mov     bx, ax
                mov     es, dx
                mov     ax, es:[bx+320h]
                mov     [bp+var_8], ax
                push    [bp+var_8]
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                cmp     word ptr es:[bx+0D6h], 2
                jz      short loc_20C3C
                jmp     loc_20DD9
; ---------------------------------------------------------------------------

loc_20C3C:                              ; CODE XREF: sub_20BC8+6F↑j
                mov     ax, seg NTERMS
                mov     es, ax
                assume es:nothing
                mov     ax, word ptr es:NTERMS ; int nterms;
                cmp     ax, [bp+var_8]
                jl      short loc_20C4D
                jmp     loc_20DD9
; ---------------------------------------------------------------------------

loc_20C4D:                              ; CODE XREF: sub_20BC8+80↑j
                push    [bp+var_8]
                call    sub_1A0E4
                pop     cx
                mov     word ptr [bp+var_4+2], dx
                mov     word ptr [bp+var_4], ax
                push    word ptr [bp+var_4+2]
                push    word ptr [bp+var_4]
                push    331h
                call    sub_15C18
                add     sp, 6
                push    0
                push    0FFFFh
                push    0FFFFh
                les     bx, [bp+var_4]
                assume es:nothing
                push    word ptr es:[bx+24h]
                les     bx, [bp+var_4]
                push    word ptr es:[bx+22h]
                les     bx, [bp+var_4]
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                push    [bp+var_8]
                call    sub_1A663
                pop     cx
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                mov     ax, es:[bx+20h]
                les     bx, [bp+var_4]
                mov     es:[bx+20h], ax
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                mov     ax, es:[bx+22h]
                les     bx, [bp+var_4]
                mov     es:[bx+22h], ax
                push    [bp+var_A]
                call    sub_1A633
                pop     cx
                mov     di, ax
                push    [bp+var_A]
                call    sub_1A075
                pop     cx
                mov     bx, di
                shl     bx, 1
                add     ax, bx
                push    dx
                push    ax
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                mov     ax, es:[bx+20h]
                pop     bx
                pop     es
                mov     es:[bx], ax
                push    [bp+var_A]
                call    sub_1A075
                pop     cx
                mov     bx, di
                shl     bx, 1
                add     ax, bx
                push    dx
                push    ax
                push    si
                call    sub_1A0E4
                pop     cx
                mov     bx, ax
                mov     es, dx
                mov     ax, es:[bx+22h]
                pop     bx
                pop     es
                mov     es:[bx+190h], ax
                push    [bp+var_A]
                call    sub_1A075
                pop     cx
                mov     bx, di
                shl     bx, 1
                add     ax, bx
                mov     bx, [bp+var_8]
                mov     es, dx
                xchg    ax, bx
                mov     es:[bx+320h], ax
                push    word ptr [bp+var_4+2]
                push    word ptr [bp+var_4]
                push    332h
                call    sub_15C18
                add     sp, 6
                push    0
                push    0FFFFh
                push    0FFFFh
                les     bx, [bp+var_4]
                push    word ptr es:[bx+24h]
                les     bx, [bp+var_4]
                push    word ptr es:[bx+22h]
                les     bx, [bp+var_4]
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                push    si
                call    sub_1A0E4
                pop     cx
                push    dx
                push    ax
                push    word ptr [bp+var_4+2]
                push    word ptr [bp+var_4]
                push    ds
                push    offset aSLeaveHimAlone ; "%s: Leave him alone, %s!\n"
                call    PRF             ; prf(string);
                add     sp, 0Ch
                push    0
                push    0FFFFh
                push    0FFFFh
                les     bx, [bp+var_4]
                push    word ptr es:[bx+24h]
                les     bx, [bp+var_4]
                push    word ptr es:[bx+22h]
                les     bx, [bp+var_4]
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                les     bx, [bp+var_4]
                mov     es:[bx+0DCh], si
                push    [bp+var_8]
                call    sub_1A77E
                pop     cx
                jmp     short loc_20DE4
; ---------------------------------------------------------------------------

loc_20DD9:                              ; CODE XREF: sub_20BC8+71↑j
                                        ; sub_20BC8+82↑j
                inc     [bp+var_6]
                cmp     [bp+var_6], di
                jge     short loc_20DE4
                jmp     loc_20C08
; ---------------------------------------------------------------------------

loc_20DE4:                              ; CODE XREF: sub_20BC8+3D↑j
                                        ; sub_20BC8+20F↑j ...
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_20BC8       endp

; ---------------------------------------------------------------------------
                align 8
cseg08          ends

; Segment Number    : 9
; Alloc Size        : 09BEh
; Offset in the file: 32C00h  Length: 09BEh
; Attributes  (0D00): CODE Relocations DPL: 3
; ===========================================================================

; Segment type: Pure code
cseg09          segment para public 'CODE' use16
                assume cs:cseg09
                assume es:nothing, ss:nothing, ds:dseg21, fs:nothing, gs:nothing

; =============== S U B R O U T I N E =======================================


sub_20DF0       proc far                ; CODE XREF: sub_201B3+31A↑P
                                        ; DATA XREF: dseg19:061A↓o
                push    si
                push    di
                push    ds
                mov     ax, seg dseg17
                mov     ds, ax
                assume ds:dseg17
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                cmp     es:word_2AED3, 3
                jge     short loc_20E08
                jmp     loc_2105C
; ---------------------------------------------------------------------------

loc_20E08:                              ; CODE XREF: sub_20DF0+13↑j
                push    3
                push    seg dseg19
                push    offset byte_2A0A3
                call    sub_1609C
                add     sp, 6
                mov     si, ax
                cmp     si, 0FFFFh
                jg      short loc_20E22
                jmp     loc_2105C
; ---------------------------------------------------------------------------

loc_20E22:                              ; CODE XREF: sub_20DF0+2D↑j
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29BDA
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+1Ch], 3
                jz      short loc_20E90
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                push    469h

loc_20E7B:                              ; CODE XREF: sub_20DF0+FE↓j
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8
                jmp     loc_21061
; ---------------------------------------------------------------------------

loc_20E90:                              ; CODE XREF: sub_20DF0+5A↑j
                push    seg dseg19
                push    offset byte_29FDB
                call    sub_1872A
                add     sp, 4
                mov     di, ax
                cmp     di, 0FFFFh
                jnz     short loc_20EA8
                jmp     loc_2105C
; ---------------------------------------------------------------------------

loc_20EA8:                              ; CODE XREF: sub_20DF0+B3↑j
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                cmp     word ptr es:[bx+50h], 0
                jg      short loc_20EF0
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                push    46Ah
                jmp     short loc_20E7B
; ---------------------------------------------------------------------------

loc_20EF0:                              ; CODE XREF: sub_20DF0+CD↑j
                mov     bx, di
                shl     bx, 2
                mov     ax, seg dseg19
                mov     es, ax
                push    word ptr es:[bx+28h]
                push    word ptr es:[bx+26h]
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                cmp     word ptr es:[bx+0C8h], 0
                jnz     short loc_20F49
                mov     dx, ds
                mov     ax, 0
                jmp     short loc_20F4E
; ---------------------------------------------------------------------------

loc_20F49:                              ; CODE XREF: sub_20DF0+150↑j
                mov     dx, ds
                mov     ax, 4

loc_20F4E:                              ; CODE XREF: sub_20DF0+157↑j
                push    dx
                push    ax
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    word ptr es:dword_29DD4+2
                push    word ptr es:dword_29DD4
                push    46Bh
                call    sub_15C18
                add     sp, 12h
                push    0
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                push    0FFFFh
                mov     ax, seg dseg19
                mov     es, ax
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+24h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+22h]
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                push    word ptr es:[bx+20h]
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_175B0
                add     sp, 0Ah
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29BDA
                assume es:nothing
                add     bx, ax
                mov     dx, es:[bx+1Ah]
                or      dx, dx
                jz      short loc_21005
                cmp     dx, 1
                jnz     short loc_20FEB
                call    sub_1C9D9
                jmp     short loc_21046
; ---------------------------------------------------------------------------

loc_20FEB:                              ; CODE XREF: sub_20DF0+1F2↑j
                cmp     dx, 2
                jnz     short loc_20FF9
                push    di
                nop
                push    cs
                call    near ptr sub_21065
                pop     cx
                jmp     short loc_21046
; ---------------------------------------------------------------------------

loc_20FF9:                              ; CODE XREF: sub_20DF0+1FE↑j
                cmp     dx, 3
                jnz     short loc_21005
                call    sub_1D574
                jmp     short loc_21046
; ---------------------------------------------------------------------------

loc_21005:                              ; CODE XREF: sub_20DF0+1ED↑j
                                        ; sub_20DF0+20C↑j
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                mov     ax, es:[bx+3Ch]
                imul    ax, 32h ; '2'
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                mov     dx, word ptr es:dword_29BDA
                add     dx, ax
                add     dx, 4
                push    word ptr es:dword_29BDA+2
                push    dx
                push    32Ch
                mov     ax, seg dseg19
                mov     es, ax
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 8

loc_21046:                              ; CODE XREF: sub_20DF0+1F9↑j
                                        ; sub_20DF0+207↑j ...
                mov     ax, si
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                dec     word ptr es:[bx+50h]
                jmp     short loc_21061
; ---------------------------------------------------------------------------

loc_2105C:                              ; CODE XREF: sub_20DF0+15↑j
                                        ; sub_20DF0+2F↑j ...
                call    sub_15CFA

loc_21061:                              ; CODE XREF: sub_20DF0+9D↑j
                                        ; sub_20DF0+26A↑j
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                retf
sub_20DF0       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_21065       proc far                ; CODE XREF: sub_20DF0+203↑p

var_2           = word ptr -2
arg_0           = word ptr  6

                enter   2, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg17
                mov     ds, ax
                assume ds:dseg17
                mov     di, [bp+arg_0]
                push    3
                push    seg dseg19
                push    offset byte_2A0A3
                call    sub_1609C
                add     sp, 6
                mov     [bp+var_2], ax
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                assume es:dseg19
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+24h]
                mov     es, ax
                assume es:dseg19
                add     dx, es:[bx+18h]
                push    dx
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+22h]
                mov     es, ax
                assume es:dseg19
                add     dx, es:[bx+10h]
                push    dx
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+20h]
                mov     es, ax
                assume es:dseg19
                add     dx, es:[bx+8]
                push    dx
                call    sub_15677
                add     sp, 6
                push    dx
                push    ax
                call    sub_15D7B
                add     sp, 4
                or      ax, ax
                jnz     short loc_21155
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+24h]
                mov     es, ax
                assume es:dseg19
                add     dx, es:[bx+18h]
                push    dx
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+22h]
                mov     es, ax
                assume es:dseg19
                add     dx, es:[bx+10h]
                push    dx
                mov     bx, di
                shl     bx, 1
                mov     ax, seg dseg19
                mov     dx, seg dseg19
                mov     es, dx
                les     si, es:dword_29DD4
                assume es:nothing
                mov     dx, es:[si+20h]
                mov     es, ax
                assume es:dseg19
                add     dx, es:[bx+8]
                push    dx
                call    sub_18EDF
                add     sp, 6
                jmp     short loc_2117F
; ---------------------------------------------------------------------------

loc_21155:                              ; CODE XREF: sub_21065+8D↑j
                mov     ax, [bp+var_2]
                shl     ax, 1
                mov     dx, seg dseg19
                mov     es, dx
                les     bx, es:dword_29DD4
                assume es:nothing
                add     bx, ax
                inc     word ptr es:[bx+50h]
                push    41Ch
                mov     ax, seg dseg19
                mov     es, ax
                assume es:dseg19
                push    es:word_2AED5
                call    sub_15C7E
                add     sp, 4

loc_2117F:                              ; CODE XREF: sub_21065+EE↑j
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_21065       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_21184       proc far                ; CODE XREF: sub_212A7+B↓p
                                        ; sub_212BA+6F↓p ...

var_4           = word ptr -4
var_2           = word ptr -2
arg_0           = word ptr  6
arg_2           = word ptr  8

                enter   4, 0
                push    ds
                mov     ax, seg dseg18
                mov     ds, ax
                assume ds:dseg18
                cmp     word_27000, 0
                jnz     short loc_211A1
                push    ds
                push    offset aRipNotInitiali ; "RIP NOT INITIALIZED! USE INITRIP!"
                call    CATASTRO        ; catastro(char * ctlstg, TYPE pl, TYPE p2,...,pn)
                add     sp, 4

loc_211A1:                              ; CODE XREF: sub_21184+F↑j
                call    sub_211DD
                or      ax, ax
                jz      short loc_211DA
                push    [bp+arg_2]
                push    [bp+arg_0]
                push    ds
                push    offset aS_10    ; "%s\r"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 8
                mov     [bp+var_2], dx
                mov     [bp+var_4], ax
                push    [bp+var_2]
                push    [bp+var_4]
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                push    word ptr es:USRNUM ; int usrnum;
                call    _BTUXMT         ; int btuxmt(int chan,char *datstg);
                add     sp, 6

loc_211DA:                              ; CODE XREF: sub_21184+24↑j
                pop     ds
                assume ds:dseg21
                leave
                retf
sub_21184       endp


; =============== S U B R O U T I N E =======================================


sub_211DD       proc far                ; CODE XREF: sttrou+183↑P
                                        ; sttrou+300↑P ...
                push    ds
                mov     ax, seg dseg18
                mov     ds, ax
                assume ds:dseg18
                mov     ax, seg USRNUM
                mov     es, ax
                mov     bx, word ptr es:USRNUM ; int usrnum;
                shl     bx, 1
                mov     ax, seg dseg18
                mov     es, ax
                assume es:dseg18
                mov     ax, es:[bx+0F68h]
                pop     ds
                assume ds:dseg21
                retf
sub_211DD       endp


; =============== S U B R O U T I N E =======================================


sub_211FB       proc far                ; CODE XREF: lonrou:loc_19F2↑P
                push    ds
                mov     ax, seg dseg18
                mov     ds, ax
                assume ds:dseg18
                mov     ax, seg USRNUM
                mov     es, ax
                assume es:nothing
                mov     bx, word ptr es:USRNUM ; int usrnum;
                shl     bx, 1
                mov     ax, seg dseg18
                mov     es, ax
                assume es:dseg18
                mov     word ptr es:[bx+0F68h], 0
                pop     ds
                assume ds:dseg21
                retf
sub_211FB       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_2121B       proc far                ; CODE XREF: _INIT__MUTANTS+D18↑P

var_4           = dword ptr -4

                enter   4, 0
                push    si
                push    di
                push    ds
                mov     ax, seg dseg18
                mov     ds, ax
                assume ds:dseg18
                mov     word ptr [bp+var_4+2], ds
                mov     word ptr [bp+var_4], 118Eh
                cmp     word_27000, 1
                jnz     short loc_21242
                push    ds
                push    offset aRipInitialized ; "RIP INITIALIZED MORE THAN ONCE!"
                call    CATASTRO        ; catastro(char * ctlstg, TYPE pl, TYPE p2,...,pn)
                add     sp, 4

loc_21242:                              ; CODE XREF: sub_2121B+19↑j
                push    0
                push    0F3Ch
                push    ds
                push    offset unk_2702C
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                xor     dx, dx
                mov     di, dx
                xor     cx, cx

loc_21259:                              ; CODE XREF: sub_2121B+70↓j
                les     bx, [bp+var_4]
                assume es:nothing
                add     bx, di
                mov     al, es:[bx]
                mov     bx, cx
                imul    bx, 3
                mov     si, bx
                mov     [bx+2Ch], al
                les     bx, [bp+var_4]
                add     bx, dx
                mov     al, es:[bx]
                mov     [si+2Dh], al
                mov     byte ptr [si+2Eh], 0
                inc     dx
                cmp     dx, 23h ; '#'
                jle     short loc_21286
                xor     dx, dx
                inc     di

loc_21286:                              ; CODE XREF: sub_2121B+66↑j
                inc     cx
                cmp     cx, 510h
                jl      short loc_21259
                mov     word_27000, 1
                mov     cx, 100h
                mov     di, 0F68h
                mov     ax, seg dseg18
                mov     es, ax
                assume es:dseg18
                xor     ax, ax
                rep stosw
                pop     ds
                assume ds:dseg21
                pop     di
                pop     si
                leave
                retf
sub_2121B       endp


; =============== S U B R O U T I N E =======================================


sub_212A7       proc far                ; CODE XREF: sttrou:loc_267D↑P
                                        ; sttrou:loc_26CC↑P ...
                push    ds
                mov     ax, seg dseg18
                mov     ds, ax
                assume ds:dseg18
                push    ds
                push    offset asc_281D3 ; "!|*"
                push    cs
                call    near ptr sub_21184
                add     sp, 4
                pop     ds
                assume ds:dseg21
                retf
sub_212A7       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_212BA       proc far                ; CODE XREF: sub_31D4+36↑P
                                        ; sub_3352+36↑P ...

var_32          = byte ptr -32h
arg_0           = word ptr  6
arg_2           = word ptr  8
arg_4           = word ptr  0Ah
arg_6           = word ptr  0Ch
arg_8           = word ptr  0Eh

                enter   32h, 0
                push    ds
                mov     ax, seg dseg18
                mov     ds, ax
                assume ds:dseg18
                push    0
                push    32h ; '2'
                push    ss
                lea     ax, [bp+var_32]
                push    ax
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                push    [bp+arg_8]
                push    ds
                push    offset aD_4     ; "%d"
                call    SPR             ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                add     sp, 6
                push    dx
                push    ax
                mov     ax, [bp+arg_6]
                imul    ax, 3
                add     ax, 2Ch ; ','
                push    ds
                push    ax
                mov     ax, [bp+arg_4]
                imul    ax, 3
                add     ax, 2Ch ; ','
                push    ds
                push    ax
                mov     ax, [bp+arg_2]
                imul    ax, 3
                add     ax, 2Ch ; ','
                push    ds
                push    ax
                mov     ax, [bp+arg_0]
                imul    ax, 3
                add     ax, 2Ch ; ','
                push    ds
                push    ax
                push    ds
                push    offset aWSSSS1S ; "!|w%s%s%s%s1%s"
                push    ss
                lea     ax, [bp+var_32]
                push    ax
                call    SPRINTF         ; int sprintf(char *str, const char *format, ... );
                add     sp, 1Ch
                push    ss
                lea     ax, [bp+var_32]
                push    ax
                push    cs
                call    near ptr sub_21184
                add     sp, 4
                pop     ds
                assume ds:dseg21
                leave
                retf
sub_212BA       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_21332       proc far

var_32          = byte ptr -32h
arg_0           = word ptr  6
arg_2           = word ptr  8
arg_4           = word ptr  0Ah
arg_6           = word ptr  0Ch

                enter   32h, 0
                push    ds
                mov     ax, seg dseg18
                mov     ds, ax
                assume ds:dseg18
                push    0
                push    32h ; '2'
                push    ss
                lea     ax, [bp+var_32]
                push    ax
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                mov     ax, [bp+arg_6]
                imul    ax, 3
                add     ax, 2Ch ; ','
                push    ds
                push    ax
                mov     ax, [bp+arg_4]
                imul    ax, 3
                add     ax, 2Ch ; ','
                push    ds
                push    ax
                mov     ax, [bp+arg_2]
                imul    ax, 3
                add     ax, 2Ch ; ','
                push    ds
                push    ax
                mov     ax, [bp+arg_0]
                imul    ax, 3
                add     ax, 2Ch ; ','
                push    ds
                push    ax
                push    ds
                push    offset aVSSSS   ; "!|v%s%s%s%s"
                push    ss
                lea     ax, [bp+var_32]
                push    ax
                call    SPRINTF         ; int sprintf(char *str, const char *format, ... );
                add     sp, 18h
                push    ss
                lea     ax, [bp+var_32]
                push    ax
                push    cs
                call    near ptr sub_21184
                add     sp, 4
                pop     ds
                assume ds:dseg21
                leave
                retf
sub_21332       endp


; =============== S U B R O U T I N E =======================================


sub_21399       proc far                ; CODE XREF: sttrou+1F3↑P
                                        ; sub_31D4+27↑P ...
                push    ds
                mov     ax, seg dseg18
                mov     ds, ax
                assume ds:dseg18
                push    ds
                push    offset a1k      ; "!|1K"
                push    cs
                call    near ptr sub_21184
                add     sp, 4
                pop     ds
                assume ds:dseg21
                retf
sub_21399       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_213AC       proc far                ; CODE XREF: sub_31D4+77↑P
                                        ; sub_31D4+F4↑P ...

var_100         = byte ptr -100h
arg_0           = word ptr  6
arg_2           = word ptr  8
arg_4           = word ptr  0Ah
arg_6           = word ptr  0Ch
arg_8           = word ptr  0Eh
arg_A           = word ptr  10h
arg_C           = word ptr  12h
arg_E           = word ptr  14h

                enter   100h, 0
                push    ds
                mov     ax, seg dseg18
                mov     ds, ax
                assume ds:dseg18
                push    0
                push    100h
                push    ss
                lea     ax, [bp+var_100]
                push    ax
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                push    [bp+arg_E]
                push    [bp+arg_C]
                push    [bp+arg_A]
                push    [bp+arg_8]
                mov     ax, [bp+arg_6]
                imul    ax, 3
                add     ax, 2Ch ; ','
                push    ds
                push    ax
                mov     ax, [bp+arg_4]
                imul    ax, 3
                add     ax, 2Ch ; ','
                push    ds
                push    ax
                mov     ax, [bp+arg_2]
                imul    ax, 3
                add     ax, 2Ch ; ','
                push    ds
                push    ax
                mov     ax, [bp+arg_0]
                imul    ax, 3
                add     ax, 2Ch ; ','
                push    ds
                push    ax
                push    ds
                push    offset a1uSSSS0000SS ; "!|1U%s%s%s%s0000<>%s<>%s"
                push    ss
                lea     ax, [bp+var_100]
                push    ax
                call    SPRINTF         ; int sprintf(char *str, const char *format, ... );
                add     sp, 20h
                push    ss
                lea     ax, [bp+var_100]
                push    ax
                push    cs
                call    near ptr sub_21184
                add     sp, 4
                pop     ds
                assume ds:dseg21
                leave
                retf
sub_213AC       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_21423       proc far                ; CODE XREF: sub_31D4+5C↑P
                                        ; sub_31D4+DB↑P ...

var_78          = byte ptr -78h
arg_0           = word ptr  6
arg_2           = word ptr  8

                enter   78h, 0
                push    si
                push    ds
                mov     ax, seg dseg18
                mov     ds, ax
                assume ds:dseg18
                mov     si, [bp+arg_2]
                push    0
                push    78h ; 'x'
                push    ss
                lea     ax, [bp+var_78]
                push    ax
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                mov     ax, [bp+arg_0]
                or      ax, ax
                jz      short loc_21455
                cmp     ax, 1
                jz      short loc_21465
                cmp     ax, 2
                jz      short loc_21475
                jmp     short loc_21490
; ---------------------------------------------------------------------------

loc_21455:                              ; CODE XREF: sub_21423+24↑j
                mov     ax, si
                imul    ax, 3
                add     ax, 2Ch ; ','
                push    ds
                push    ax
                push    ds
                push    offset a1b3c0k02010q03 ; "!|1B3C0K02010Q030E000F08%s0000000000003"...
                jmp     short loc_21483
; ---------------------------------------------------------------------------

loc_21465:                              ; CODE XREF: sub_21423+29↑j
                mov     ax, si
                imul    ax, 3
                add     ax, 2Ch ; ','
                push    ds
                push    ax
                push    ds
                push    offset a1b00000200lc03 ; "!|1B00000200LC030F000F08%s00000F0700000"...
                jmp     short loc_21483
; ---------------------------------------------------------------------------

loc_21475:                              ; CODE XREF: sub_21423+2E↑j
                mov     ax, si
                imul    ax, 3
                add     ax, 2Ch ; ','
                push    ds
                push    ax
                push    ds
                push    offset a1b0a0a02030202 ; "!|1B0A0A020302020E000F08%s0000000000000"...

loc_21483:                              ; CODE XREF: sub_21423+40↑j
                                        ; sub_21423+50↑j
                push    ss
                lea     ax, [bp+var_78]
                push    ax
                call    SPRINTF         ; int sprintf(char *str, const char *format, ... );
                add     sp, 0Ch

loc_21490:                              ; CODE XREF: sub_21423+30↑j
                push    ss
                lea     ax, [bp+var_78]
                push    ax
                push    cs
                call    near ptr sub_21184
                add     sp, 4
                pop     ds
                assume ds:dseg21
                pop     si
                leave
                retf
sub_21423       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_214A0       proc far

var_32          = byte ptr -32h
arg_0           = word ptr  6
arg_2           = word ptr  8
arg_4           = word ptr  0Ah
arg_6           = word ptr  0Ch

                enter   32h, 0
                push    ds
                mov     ax, seg dseg18
                mov     ds, ax
                assume ds:dseg18
                push    0
                push    32h ; '2'
                push    ss
                lea     ax, [bp+var_32]
                push    ax
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                mov     ax, [bp+arg_6]
                imul    ax, 3
                add     ax, 2Ch ; ','
                push    ds
                push    ax
                mov     ax, [bp+arg_4]
                imul    ax, 3
                add     ax, 2Ch ; ','
                push    ds
                push    ax
                mov     ax, [bp+arg_2]
                imul    ax, 3
                add     ax, 2Ch ; ','
                push    ds
                push    ax
                mov     ax, [bp+arg_0]
                imul    ax, 3
                add     ax, 2Ch ; ','
                push    ds
                push    ax
                push    ds
                push    offset aBSSSS   ; "!|B%s%s%s%s"
                push    ss
                lea     ax, [bp+var_32]
                push    ax
                call    SPRINTF         ; int sprintf(char *str, const char *format, ... );
                add     sp, 18h
                push    ss
                lea     ax, [bp+var_32]
                push    ax
                push    cs
                call    near ptr sub_21184
                add     sp, 4
                pop     ds
                assume ds:dseg21
                leave
                retf
sub_214A0       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_21507       proc far                ; CODE XREF: sub_31D4+48↑P
                                        ; sub_3352+48↑P ...

var_32          = byte ptr -32h
arg_0           = word ptr  6
arg_2           = word ptr  8
arg_4           = word ptr  0Ah
arg_6           = word ptr  0Ch

                enter   32h, 0
                push    ds
                mov     ax, seg dseg18
                mov     ds, ax
                assume ds:dseg18
                push    0
                push    32h ; '2'
                push    ss
                lea     ax, [bp+var_32]
                push    ax
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                mov     ax, [bp+arg_6]
                imul    ax, 3
                add     ax, 2Ch ; ','
                push    ds
                push    ax
                mov     ax, [bp+arg_4]
                imul    ax, 3
                add     ax, 2Ch ; ','
                push    ds
                push    ax
                mov     ax, [bp+arg_2]
                imul    ax, 3
                add     ax, 2Ch ; ','
                push    ds
                push    ax
                mov     ax, [bp+arg_0]
                imul    ax, 3
                add     ax, 2Ch ; ','
                push    ds
                push    ax
                push    ds
                push    offset aRSSSS   ; "!|R%s%s%s%s"
                push    ss
                lea     ax, [bp+var_32]
                push    ax
                call    SPRINTF         ; int sprintf(char *str, const char *format, ... );
                add     sp, 18h
                push    ss
                lea     ax, [bp+var_32]
                push    ax
                push    cs
                call    near ptr sub_21184
                add     sp, 4
                pop     ds
                assume ds:dseg21
                leave
                retf
sub_21507       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_2156E       proc far                ; CODE XREF: sub_31D4+85↑P
                                        ; sub_31D4+C3↑P ...

var_32          = byte ptr -32h
arg_0           = word ptr  6
arg_2           = word ptr  8

                enter   32h, 0
                push    ds
                mov     ax, seg dseg18
                mov     ds, ax
                assume ds:dseg18
                push    0
                push    32h ; '2'
                push    ss
                lea     ax, [bp+var_32]
                push    ax
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                mov     ax, [bp+arg_2]
                imul    ax, 3
                add     ax, 2Ch ; ','
                push    ds
                push    ax
                mov     ax, [bp+arg_0]
                imul    ax, 3
                add     ax, 2Ch ; ','
                push    ds
                push    ax
                push    ds
                push    offset aMSS     ; "!|m%s%s"
                push    ss
                lea     ax, [bp+var_32]
                push    ax
                call    SPRINTF         ; int sprintf(char *str, const char *format, ... );
                add     sp, 10h
                push    ss
                lea     ax, [bp+var_32]
                push    ax
                push    cs
                call    near ptr sub_21184
                add     sp, 4
                pop     ds
                assume ds:dseg21
                leave
                retf
sub_2156E       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_215BF       proc far                ; CODE XREF: sub_31D4+A7↑P
                                        ; sub_31D4+CF↑P ...

var_78          = byte ptr -78h
arg_0           = word ptr  6
arg_2           = word ptr  8

                enter   78h, 0
                push    ds
                mov     ax, seg dseg18
                mov     ds, ax
                assume ds:dseg18
                push    0
                push    78h ; 'x'
                push    ss
                lea     ax, [bp+var_78]
                push    ax
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                push    [bp+arg_2]
                push    [bp+arg_0]
                push    ds
                push    offset aTS      ; "!|T%s"
                push    ss
                lea     ax, [bp+var_78]
                push    ax
                call    SPRINTF         ; int sprintf(char *str, const char *format, ... );
                add     sp, 0Ch
                push    ss
                lea     ax, [bp+var_78]
                push    ax
                push    cs
                call    near ptr sub_21184
                add     sp, 4
                pop     ds
                assume ds:dseg21
                leave
                retf
sub_215BF       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_21600       proc far                ; CODE XREF: sub_31D4+93↑P
                                        ; sub_31D4+B5↑P ...

var_32          = byte ptr -32h
arg_0           = word ptr  6
arg_2           = word ptr  8
arg_4           = word ptr  0Ah

                enter   32h, 0
                push    ds
                mov     ax, seg dseg18
                mov     ds, ax
                assume ds:dseg18
                push    0
                push    32h ; '2'
                push    ss
                lea     ax, [bp+var_32]
                push    ax
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                mov     ax, [bp+arg_4]
                imul    ax, 3
                add     ax, 2Ch ; ','
                push    ds
                push    ax
                mov     ax, [bp+arg_2]
                imul    ax, 3
                add     ax, 2Ch ; ','
                push    ds
                push    ax
                mov     ax, [bp+arg_0]
                imul    ax, 3
                add     ax, 2Ch ; ','
                push    ds
                push    ax
                push    ds
                push    offset aYSSS00  ; "!|Y%s%s%s00"
                push    ss
                lea     ax, [bp+var_32]
                push    ax
                call    SPRINTF         ; int sprintf(char *str, const char *format, ... );
                add     sp, 14h
                push    ss
                lea     ax, [bp+var_32]
                push    ax
                push    cs
                call    near ptr sub_21184
                add     sp, 4
                pop     ds
                assume ds:dseg21
                leave
                retf
sub_21600       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_2165C       proc far                ; CODE XREF: sub_31D4+52↑P
                                        ; sub_31D4+9D↑P ...

var_32          = byte ptr -32h
arg_0           = word ptr  6

                enter   32h, 0
                push    ds
                mov     ax, seg dseg18
                mov     ds, ax
                assume ds:dseg18
                push    0
                push    32h ; '2'
                push    ss
                lea     ax, [bp+var_32]
                push    ax
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                mov     ax, [bp+arg_0]
                imul    ax, 3
                add     ax, 2Ch ; ','
                push    ds
                push    ax
                push    ds
                push    offset aCS      ; "!|c%s"
                push    ss
                lea     ax, [bp+var_32]
                push    ax
                call    SPRINTF         ; int sprintf(char *str, const char *format, ... );
                add     sp, 0Ch
                push    ss
                lea     ax, [bp+var_32]
                push    ax
                push    cs
                call    near ptr sub_21184
                add     sp, 4
                pop     ds
                assume ds:dseg21
                leave
                retf
sub_2165C       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_216A2       proc far                ; CODE XREF: sub_A259+350↑P
                                        ; sub_AD59+159↑P ...

var_1E          = byte ptr -1Eh
arg_0           = word ptr  6
arg_2           = word ptr  8

                enter   1Eh, 0
                push    ds
                mov     ax, seg dseg18
                mov     ds, ax
                assume ds:dseg18
                push    0
                push    1Eh
                push    ss
                lea     ax, [bp+var_1E]
                push    ax
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                push    [bp+arg_2]
                push    [bp+arg_0]
                push    ds
                push    offset aSM_0    ; "%s^M"
                push    ss
                lea     ax, [bp+var_1E]
                push    ax
                call    SPRINTF         ; int sprintf(char *str, const char *format, ... );
                add     sp, 0Ch
                push    ss
                lea     ax, [bp+var_1E]
                push    ax
                push    [bp+arg_2]
                push    [bp+arg_0]
                push    0
                push    0
                mov     bx, word_27002
                shl     bx, 1
                push    word ptr [bx+18h]
                mov     bx, word_27002
                shl     bx, 1
                push    word ptr [bx+4]
                push    cs
                call    near ptr sub_213AC
                add     sp, 10h
                inc     word_27002
                cmp     word_27002, 9
                jle     short loc_2170F
                mov     word_27002, 0

loc_2170F:                              ; CODE XREF: sub_216A2+65↑j
                pop     ds
                assume ds:dseg21
                leave
                retf
sub_216A2       endp


; =============== S U B R O U T I N E =======================================


sub_21712       proc far                ; CODE XREF: sub_3352+45B↑P
                                        ; sub_A259+2D4↑P ...
                push    ds
                mov     ax, seg dseg18
                mov     ds, ax
                assume ds:dseg18
                push    cs
                call    near ptr sub_21399
                push    ds
                push    offset aRmf     ; "$RMF$"
                call    sub_21751
                add     sp, 4
                mov     word_27002, 0
                pop     ds
                assume ds:dseg21
                retf
sub_21712       endp


; =============== S U B R O U T I N E =======================================


sub_21730       proc far                ; CODE XREF: sub_3352+460↑P
                                        ; sub_A259:loc_A65E↑P ...
                push    si
                push    ds
                mov     ax, seg dseg18
                mov     ds, ax
                assume ds:dseg18
                mov     si, word_27002
                jmp     short loc_21749
; ---------------------------------------------------------------------------

loc_2173D:                              ; CODE XREF: sub_21730+1C↓j
                push    ds
                push    (offset aRipNotInitiali+21h) ; ""
                push    cs
                call    near ptr sub_216A2
                add     sp, 4
                inc     si

loc_21749:                              ; CODE XREF: sub_21730+B↑j
                cmp     si, 0Ah
                jl      short loc_2173D
                pop     ds
                assume ds:dseg21
                pop     si
                retf
sub_21730       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_21751       proc far                ; CODE XREF: sub_3352+453↑P
                                        ; sub_21712+E↑P

var_32          = byte ptr -32h
arg_0           = word ptr  6
arg_2           = word ptr  8

                enter   32h, 0
                push    ds
                mov     ax, seg dseg18
                mov     ds, ax
                assume ds:dseg18
                push    0
                push    32h ; '2'
                push    ss
                lea     ax, [bp+var_32]
                push    ax
                call    SETMEM          ; void setmem(char *destination, unsigned nbytes, char value);
                add     sp, 8
                push    [bp+arg_2]
                push    [bp+arg_0]
                push    1Bh
                push    ds
                push    offset a1C0000S ; "!|1%c0000%s"
                push    ss
                lea     ax, [bp+var_32]
                push    ax
                call    SPRINTF         ; int sprintf(char *str, const char *format, ... );
                add     sp, 0Eh
                push    ss
                lea     ax, [bp+var_32]
                push    ax
                push    cs
                call    near ptr sub_21184
                add     sp, 4
                pop     ds
                assume ds:dseg21
                leave
                retf
sub_21751       endp


; =============== S U B R O U T I N E =======================================


sub_21794       proc far                ; CODE XREF: sub_3B50+B↑P
                push    ds
                mov     ax, seg dseg19
                mov     ds, ax
                assume ds:dseg19
                mov     word_2AEC5, 52h ; 'R'
                mov     word_2AEC1, 16h
                mov     word_2AEC3, 10h
                pop     ds
                assume ds:dseg21
                retf
sub_21794       endp

; ---------------------------------------------------------------------------
                align 4
cseg09          ends

; Segment Number    : 10
; Alloc Size        : 0793h
; Offset in the file: 33A00h  Length: 0793h
; Attributes  (0D21): DATA Pure Relocations DPL: 3
; ===========================================================================

; Segment type: Pure data
dseg10          segment para public 'DATA' use16
                assume cs:dseg10
unk_217B0       db    0                 ; DATA XREF: _INIT__MUTANTS+29↑o
                                        ; _INIT__MUTANTS+35↑o
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd lonrou
                dd sttrou
                dd stsrou
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd huprou
                dd mcurou
                dd dlarou
                dd finrou
byte_217ED      db 0                    ; DATA XREF: _INIT__MUTANTS+A89↑o
                                        ; _INIT__MUTANTS+ADE↑r
byte_217EE      db 0                    ; DATA XREF: _INIT__MUTANTS+AD8↑r
byte_217EF      db 0                    ; DATA XREF: _INIT__MUTANTS:loc_11C7↑r
byte_217F0      db 0                    ; DATA XREF: _INIT__MUTANTS+B2D↑r
byte_217F1      db 0                    ; DATA XREF: _INIT__MUTANTS+B27↑r
byte_217F2      db 0                    ; DATA XREF: _INIT__MUTANTS+B21↑r
byte_217F3      db 0                    ; DATA XREF: _INIT__MUTANTS+AAC↑r
byte_217F4      db 0                    ; DATA XREF: _INIT__MUTANTS+AA6↑r
byte_217F5      db 0                    ; DATA XREF: _INIT__MUTANTS:loc_1195↑r
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  74h ; t
                db    0
                db 0D2h
                db    0
                db  30h ; 0
                db    1
                db  8Eh
                db    1
                db 0ECh
                db    1
                db  7Eh ; ~
                db    0
                db 0DCh
                db    0
                db  3Ah ; :
                db    1
                db  98h
                db    1
                db 0F6h
                db    1
                db  88h
                db    0
                db 0E6h
                db    0
                db  44h ; D
                db    1
                db 0A2h
                db    1
                db    0
                db    2
                db  92h
                db    0
                db 0F0h
                db    0
                db  4Eh ; N
                db    1
                db 0ACh
                db    1
                db  0Ah
                db    2
                db  9Ch
                db    0
                db 0FAh
                db    0
                db  58h ; X
                db    1
                db 0B6h
                db    1
                db  14h
                db    2
                db 0A6h
                db    0
                db    4
                db    1
                db  62h ; b
                db    1
                db 0C0h
                db    1
                db  1Eh
                db    2
                db 0B0h
                db    0
                db  0Eh
                db    1
                db  6Ch ; l
                db    1
                db 0CAh
                db    1
                db  28h ; (
                db    2
                db 0BAh
                db    0
                db  18h
                db    1
                db  76h ; v
                db    1
                db 0D4h
                db    1
                db  32h ; 2
                db    2
                db 0C4h
                db    0
                db  22h ; "
                db    1
                db  80h
                db    1
                db 0DEh
                db    1
                db  3Ch ; <
                db    2
                db 0CEh
                db    0
                db  2Ch ; ,
                db    1
                db  8Ah
                db    1
                db 0E8h
                db    1
                db  46h ; F
                db    2
word_218A1      dw 1                    ; DATA XREF: _INIT__MUTANTS+BD↑r
                                        ; _INIT__MUTANTS+E5↑r ...
word_218A3      dw 8000h                ; DATA XREF: _INIT__MUTANTS+B9↑r
                                        ; _INIT__MUTANTS+E1↑r ...
word_218A5      dw 0FFFFh               ; DATA XREF: _INIT__MUTANTS+B5↑r
                                        ; _INIT__MUTANTS+DD↑r ...
word_218A7      dw 7FFFh                ; DATA XREF: _INIT__MUTANTS+B1↑r
                                        ; _INIT__MUTANTS+D9↑r ...
aMjwmutMdf      db 'MJWMUT.MDF',0       ; DATA XREF: _INIT__MUTANTS+1B↑o
                                        ; sttrou+144↑o ...
aMjwmutxMcv     db 'MJWMUTX.MCV',0      ; DATA XREF: _INIT__MUTANTS+69↑o
aMjwmutrDat     db 'MJWMUTR.DAT',0      ; DATA XREF: _INIT__MUTANTS+363↑o
aMjwmutsDat     db 'MJWMUTS.DAT',0      ; DATA XREF: _INIT__MUTANTS+380↑o
aMjwmutplDat    db 'MJWMUTPL.DAT',0     ; DATA XREF: _INIT__MUTANTS+39D↑o
aMjwmutloDat    db 'MJWMUTLO.DAT',0     ; DATA XREF: _INIT__MUTANTS+3BA↑o
aMjwmuthiDat    db 'MJWMUTHI.DAT',0     ; DATA XREF: _INIT__MUTANTS+3D6↑o
aMjwmutiDat     db 'MJWMUTI.DAT',0      ; DATA XREF: _INIT__MUTANTS+3F7↑o
aMjwmutmDat     db 'MJWMUTM.DAT',0      ; DATA XREF: _INIT__MUTANTS+414↑o
aNoMonstersOnFi db 'NO MONSTERS ON FILE',0
                                        ; DATA XREF: _INIT__MUTANTS+7B3↑o
aCannotFindFirs db 'CANNOT FIND FIRST MONSTER RECORD',0
                                        ; DATA XREF: _INIT__MUTANTS+870↑o
aNoItemsOnFile  db 'NO ITEMS ON FILE',0 ; DATA XREF: _INIT__MUTANTS+8C0↑o
aCannotFindFirs_0 db 'CANNOT FIND FIRST ITEM RECORD',0
                                        ; DATA XREF: _INIT__MUTANTS+97A↑o
aMjwmutIxx      db 'MJWMUT.IXX',0       ; DATA XREF: _INIT__MUTANTS+A08↑o
                                        ; sub_3352+414↑o
aRb             db 'rb',0               ; DATA XREF: _INIT__MUTANTS+A04↑o
aMutantsCannotF db 'MUTANTS: Cannot find MUTMAP.IXX',0
                                        ; DATA XREF: _INIT__MUTANTS+A1E↑o
aCCC            db '%c%c%c',0           ; DATA XREF: _INIT__MUTANTS+AB3↑o
                                        ; _INIT__MUTANTS+AE5↑o ...
                db    0
                db  1Bh
                db  5Bh ; [
                db  31h ; 1
                db  3Bh ; ;
                db  33h ; 3
                db  36h ; 6
                db  6Dh ; m
                db    0
aMutantsCleanup db 'Mutants Cleanup',0  ; DATA XREF: mcurou+2F↑o
                                        ; mcurou+33↑o
aVillageShop_0  db 'Village Shop',0     ; DATA XREF: mcurou+84↑o
                db    0
aForSale        db 'FOR SALE',0         ; DATA XREF: mcurou+F9↑o
                                        ; mcurou+1D5↑o
aPowerOfSaleLd  db 'POWER OF SALE $ %ld',0
                                        ; DATA XREF: mcurou+259↑o
aOneOfYourStore db 'One of your stores could not meet its tax commitments.',0
                                        ; DATA XREF: mcurou+286↑o
aYourSHasBeenBu db 'Your %s has been buried and layed to rest.',0
                                        ; DATA XREF: mcurou+375↑o
aMutantsCleanup_0 db 'Mutants cleanup done!',0
                                        ; DATA XREF: mcurou+63F↑o
                                        ; mcurou+643↑o
asc_21A6C       db 'x',0                ; DATA XREF: sttrou+2CE↑o
aBury           db 'BURY',0             ; DATA XREF: sttrou+338↑o
aTypeRipOnToEnt db 0Dh,'!!!',0Dh,'Type RIP ON to enter RIP GRAPHICS MODE! (RIPTERM RE'
                                        ; DATA XREF: sttrou+525↑o
                db 'QUIRED)',0Dh,0Dh,0
aSSHasJustArriv db '%s %s has just arrived into this world',0
                                        ; DATA XREF: sttrou+5E5↑o
aSorryThisDemoH db 'Sorry,this demo has expired!',0Dh,0
                                        ; DATA XREF: sub_2B24+F2↑o
aPleaseTellYour db 'Please tell your SYSOP how much you enjoy MUTANTS!',0Dh,0
                                        ; DATA XREF: sub_2B24+FE↑o
aAndAskHimHerTo db 'and ask him/her to register this great game!',0Dh,0
                                        ; DATA XREF: sub_2B24+10A↑o
aSorryThisOptio db 'Sorry,this option is not available at the moment.',0Dh,0
                                        ; DATA XREF: sub_2B24+160↑o
aLast           db 'last',0             ; DATA XREF: sub_2D88+1F↑o
aHeyYouReDead   db 0Dh,'***',0Dh,'Hey! You',27h,'re dead!',0Dh,0Dh,0
                                        ; DATA XREF: sub_2D88+1B9↑o
aWhoopsSinceThi db 'Whoops! Since this is only a demo,you can only have',0Dh,0
                                        ; DATA XREF: sub_2D88+39A↑o
aAMaximumOf4000 db 'a maximum of 400000 points! Please ask your SYSOP to',0Dh,0
                                        ; DATA XREF: sub_2D88+3A6↑o
aRegisterThisGr db 'register this great game,so that you',27h,'d be able to get',0Dh,0
                                        ; DATA XREF: sub_2D88+3B2↑o
aTheFullBenifit db 'the full benifits of the real MUTANTS!',0Dh,0
                                        ; DATA XREF: sub_2D88+3BE↑o
aS_1            db '%s',0               ; DATA XREF: sub_2D88+3F4↑o
a137m_0         db 1Bh,'[1;37m',0       ; DATA XREF: sub_2D88+3F0↑o
aMutantsV310a   db 'Mutants! V3.10a',0  ; DATA XREF: sub_31D4+A4↑o
aC199194Majorwa db '(C) 1991-94 Majorware Inc.',0
                                        ; DATA XREF: sub_31D4+CC↑o
aPlayMutants    db 'Play Mutants!',0    ; DATA XREF: sub_31D4+E8↑o
aPM             db 'P^M',0              ; DATA XREF: sub_31D4+E4↑o
                                        ; sub_3352+334↑o ...
aInformation    db 'Information',0      ; DATA XREF: sub_31D4+101↑o
aIM             db 'I^M',0              ; DATA XREF: sub_31D4+FD↑o
aHighScores     db 'High Scores',0      ; DATA XREF: sub_31D4+11A↑o
aHM             db 'H^M',0              ; DATA XREF: sub_31D4+116↑o
aMutantlink_1   db 'MutantLink',0       ; DATA XREF: sub_31D4+133↑o
aSM             db 'S^M',0              ; DATA XREF: sub_31D4+12F↑o
                                        ; sub_3352+3D0↑o
aWhatsNew       db 'Whats new?',0       ; DATA XREF: sub_31D4+14D↑o
aWM             db 'W^M',0              ; DATA XREF: sub_31D4+149↑o
                                        ; sub_3352+39C↑o
aExit           db 'Exit',0             ; DATA XREF: sub_31D4+167↑o
                                        ; sub_3854+1D0↑o
aXM             db 'X^M',0              ; DATA XREF: sub_31D4+163↑o
                                        ; sub_3352+410↑o ...
aInventory      db 'Inventory',0        ; DATA XREF: sub_3352+90↑o
aInvM           db 'INV^M',0            ; DATA XREF: sub_3352+8C↑o
aItems          db 'Items',0            ; DATA XREF: sub_3352+A9↑o
aIteM           db 'ITE^M',0            ; DATA XREF: sub_3352+A5↑o
                                        ; sub_3352+3B6↑o
aWhoSAround     db 'Who',27h,'s Around',0
                                        ; DATA XREF: sub_3352+C2↑o
aWhoM           db 'WHO^M',0            ; DATA XREF: sub_3352+BE↑o
aStat           db 'Stat',0             ; DATA XREF: sub_3352+DB↑o
aStaM           db 'STA^M',0            ; DATA XREF: sub_3352+D7↑o
aGetItem        db 'Get Item',0         ; DATA XREF: sub_3352+F4↑o
aGet            db 'GET ',0             ; DATA XREF: sub_3352+F0↑o
aPointStaff     db 'Point Staff',0      ; DATA XREF: sub_3352+10D↑o
aPoint          db 'POINT ',0           ; DATA XREF: sub_3352+109↑o
aCombat_0       db 'Combat',0           ; DATA XREF: sub_3352+126↑o
aCombat         db 'COMBAT ',0          ; DATA XREF: sub_3352+122↑o
aWieldItem      db 'Wield Item',0       ; DATA XREF: sub_3352+13F↑o
aWield          db 'WIELD ',0           ; DATA XREF: sub_3352+13B↑o
aHealYourself   db 'Heal Yourself',0    ; DATA XREF: sub_3352+158↑o
aHealM          db 'HEAL^M',0           ; DATA XREF: sub_3352+154↑o
aLook           db 'Look',0             ; DATA XREF: sub_3352+172↑o
aLookM          db 'LOOK^M',0           ; DATA XREF: sub_3352+16E↑o
aTravel_0       db 'Travel',0           ; DATA XREF: sub_3352+18C↑o
aTravel         db 'TRAVEL ',0          ; DATA XREF: sub_3352+188↑o
aConvert_0      db 'Convert',0          ; DATA XREF: sub_3352+1A6↑o
aConvert        db 'CONVERT ',0         ; DATA XREF: sub_3352+1A2↑o
aEast_1         db 'EAST',0             ; DATA XREF: sub_3352+1C0↑o
aEast_0         db 'EAST ',0            ; DATA XREF: sub_3352+1BC↑o
aNorth_1        db 'NORTH',0            ; DATA XREF: sub_3352+1DA↑o
aNorth_0        db 'NORTH ',0           ; DATA XREF: sub_3352+1D6↑o
aSouth_1        db 'SOUTH',0            ; DATA XREF: sub_3352+1F4↑o
aSouth_0        db 'SOUTH ',0           ; DATA XREF: sub_3352+1F0↑o
aWest_1         db 'WEST',0             ; DATA XREF: sub_3352+20E↑o
aWest_0         db 'WEST ',0            ; DATA XREF: sub_3352+20A↑o
aRepeatCmd      db 'REPEAT CMD',0       ; DATA XREF: sub_3352+228↑o
aLastM          db 'LAST^M',0           ; DATA XREF: sub_3352+224↑o
a1              db '1',0                ; DATA XREF: sub_3352+24A↑o
                                        ; sub_3352+24E↑o
a2              db '2',0                ; DATA XREF: sub_3352+264↑o
                                        ; sub_3352+268↑o
a3              db '3',0                ; DATA XREF: sub_3352+27E↑o
                                        ; sub_3352+282↑o
a4              db '4',0                ; DATA XREF: sub_3352+298↑o
                                        ; sub_3352+29C↑o
a5              db '5',0                ; DATA XREF: sub_3352+2B2↑o
                                        ; sub_3352+2B6↑o
a6              db '6',0                ; DATA XREF: sub_3352+2CC↑o
                                        ; sub_3352+2D0↑o
a7              db '7',0                ; DATA XREF: sub_3352+2E6↑o
                                        ; sub_3352+2EA↑o
a8              db '8',0                ; DATA XREF: sub_3352+300↑o
                                        ; sub_3352+304↑o
a9              db '9',0                ; DATA XREF: sub_3352+31A↑o
                                        ; sub_3352+31E↑o
a0              db '0',0                ; DATA XREF: sub_3352+34E↑o
                                        ; sub_3352+352↑o
aN              db 'N',0                ; DATA XREF: sub_3352+386↑o
aNM             db 'N^M',0              ; DATA XREF: sub_3352+382↑o
aW              db 'W',0                ; DATA XREF: sub_3352+3A0↑o
aS_13           db 'S',0                ; DATA XREF: sub_3352+3D4↑o
aR              db 'R',0                ; DATA XREF: sub_3352+3FA↑o
aResetripM      db 'RESETRIP^M',0       ; DATA XREF: sub_3352+3F6↑o
aO              db 'O',0                ; DATA XREF: sub_3352+42E↑o
aRipOffM        db 'RIP OFF^M',0        ; DATA XREF: sub_3352+42A↑o
aSmf            db '$SMF$',0            ; DATA XREF: sub_3352+450↑o
aRepeatCommand  db 'REPEAT COMMAND: ',0 ; DATA XREF: sub_37B9+8↑o
aS_11           db '%s ',0              ; DATA XREF: sub_37B9+31↑o
aSelect         db 'Select',0           ; DATA XREF: sub_3854+7F↑o
aBury_0         db 'Bury',0             ; DATA XREF: sub_3854+99↑o
aThief          db 'Thief',0            ; DATA XREF: sub_3854+B5↑o
a1M             db '1^M',0              ; DATA XREF: sub_3854+B1↑o
aPriest         db 'Priest',0           ; DATA XREF: sub_3854+CE↑o
a2M             db '2^M',0              ; DATA XREF: sub_3854+CA↑o
aWizard         db 'Wizard',0           ; DATA XREF: sub_3854+E7↑o
a3M             db '3^M',0              ; DATA XREF: sub_3854+E3↑o
aWarrior        db 'Warrior',0          ; DATA XREF: sub_3854+100↑o
a4M             db '4^M',0              ; DATA XREF: sub_3854+FC↑o
aMage           db 'Mage',0             ; DATA XREF: sub_3854+11A↑o
a5M             db '5^M',0              ; DATA XREF: sub_3854+116↑o
aRedisplay      db 'Redisplay',0        ; DATA XREF: sub_3854+134↑o
aM              db '?^M',0              ; DATA XREF: sub_3854+130↑o
aBuryThief      db 'Bury Thief',0       ; DATA XREF: sub_3854+14E↑o
aBury1MM        db 'bury 1^M?^M',0      ; DATA XREF: sub_3854+14A↑o
aBuryPriest     db 'Bury Priest',0      ; DATA XREF: sub_3854+168↑o
aBury2MM        db 'bury 2^M?^M',0      ; DATA XREF: sub_3854+164↑o
aBuryWizard     db 'Bury Wizard',0      ; DATA XREF: sub_3854+182↑o
aBury3MM        db 'bury 3^M?^M',0      ; DATA XREF: sub_3854+17E↑o
aBuryWarrior    db 'Bury Warrior',0     ; DATA XREF: sub_3854+19C↑o
aBury4MM        db 'bury 4^M?^M',0      ; DATA XREF: sub_3854+198↑o
aBuryMage       db 'Bury Mage',0        ; DATA XREF: sub_3854+1B6↑o
aBury5M         db 'bury 5^M',0         ; DATA XREF: sub_3854+1B2↑o
aTypeRipOnToRet db 'Type RIP ON to return to RIP MODE.',0Dh,0
aSS             db '%s\%s',0            ; DATA XREF: sub_3B04+20↑o
                align 10h
dseg10          ends

; Segment Number    : 11
; Alloc Size        : 1759h
; Offset in the file: 34200h  Length: 1759h
; Attributes  (0D21): DATA Pure Relocations DPL: 3
; ===========================================================================

; Segment type: Pure data
dseg11          segment para public 'DATA' use16
                assume cs:dseg11
                dd aEnterNewResetB      ; "Enter new reset bit"
byte_21F54      db 0                    ; DATA XREF: sub_8791+26↑r
                db    0
                db    0
                db    0
                db    0
                db    0
                dd unk_22DD7
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd aTaxAmountPerSt      ; "TAX amount per store"
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd aSellingValueOf      ; "Selling value of new stores"
                align 8
                dd aDefaultStoresM      ; "Default stores mark up"
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd aDefaultStoresM_0    ; "Default stores mark down"
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd aWieghtPlayerCa      ; "Wieght player can have per strength poi"...
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd aMonsterAggress      ; "Monster aggression"
                align 8
                dd aMaximumYearAPl      ; "Maximum year a player can travel too"
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd aUnableToConnec      ; "Unable to connect"
                dd aFailedIdPasswo      ; "Failed ID password"
                dd aFailedResetCod      ; "Failed reset code"
                dd aIncompleteLink      ; "Incomplete link"
                dd aSuccessful          ; "Successful"
off_21FBE       dd aMaximumDialing      ; DATA XREF: sub_7B2D+19E↑r
                                        ; sub_7B2D:loc_7CC7↑r
                                        ; "Maximum dialing attempts"
                dd aIllegalSystemI      ; "Illegal system ID"
                dd aHubNotAuthoriz      ; "HUB not authorized"
                dd aThisLinkZapped      ; "This link zapped!"
                dd aHubNotReset         ; "HUB not reset"
                dd aResetCodeIssue      ; "Reset code issued"
                dd aFailedResetCod      ; "Failed reset code"
                dd aCallerIsZapped      ; "Caller is zapped"
                dd aLinkZapped          ; "Link zapped!"
                dd aIllegalSystem       ; "Illegal system"
                dd aResetCodeRecei      ; "Reset code received"
                dd aZappedNotAutho      ; "ZAPPED, Not authorized"
                dd aHubIsZapped         ; "HUB is zapped"
                dd aCallEndNormall      ; "Call end normally"
                dd aCanTLinkUntilC      ; "Can't link until cleanup"
                dd aViolationLinkZ      ; "VIOLATION: Link Zapped!"
off_21FFE       dd aCallerLinkInPr      ; DATA XREF: sub_5713+34↑r
                                        ; sub_5713+3C↑r ...
                                        ; "Caller - link in progress"
                dd aTimeOut             ; "Time-Out"
                dd aUpdateRequired      ; "Update required!"
byte_2200A      db 0                    ; DATA XREF: sub_3F60+F↑o
                                        ; sub_3F60+34↑w
byte_2200B      db 0                    ; DATA XREF: sub_3F60+3A↑w
byte_2200C      db 0                    ; DATA XREF: sub_3F60+3D↑w
byte_2200D      db 0                    ; DATA XREF: sub_3F60+45↑w
byte_2200E      db 0                    ; DATA XREF: sub_3F60+4B↑w
byte_2200F      db 0                    ; DATA XREF: sub_3F60+4E↑w
byte_22010      db 0                    ; DATA XREF: sub_3F60+56↑w
byte_22011      db 0                    ; DATA XREF: sub_3F60+5C↑w
                align 4
unk_22014       db    0                 ; DATA XREF: sub_3FC7+64↑o
                                        ; sub_3FC7+76↑o
                db    0
                db    0
                db    0
                db    0
                db    0
unk_2201A       db    0                 ; DATA XREF: sub_4050+10↑o
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
unk_22042       db    0                 ; DATA XREF: sub_4050+20↑o
                db    0
                db    0
                db    0
                db    0
off_22047       dd aMjwlnkhd            ; DATA XREF: sub_41CC+13↑o
                                        ; "MJWLNKHD"
                dd aMjwlnkus            ; "MJWLNKUS"
                dd aMjwmutr             ; "MJWMUTR"
                dd aMjwmuts             ; "MJWMUTS"
                dd aMjwmutpl            ; "MJWMUTPL"
                dd aMjwmuthi            ; "MJWMUTHI"
                dd aMjwmutlo            ; "MJWMUTLO"
off_22063       dd aMutantlinkLogO      ; DATA XREF: sub_7E49+11↑o
                                        ; "MUTANTLINK: LOG ON (1st TRY)"
                dd aMutantlinkLogO_0    ; "MUTANTLINK: LOG ON (2nd TRY)"
                dd aMutantlinkLogO_1    ; "MUTANTLINK: LOG ON (3rd TRY)"
unk_2206F       db    0                 ; DATA XREF: sub_651D+92↑o
                                        ; sub_651D+BC↑o ...
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
unk_2216E       db    0                 ; DATA XREF: sub_651D+C9↑o
                                        ; sub_651D+382↑o ...
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
unk_2226D       db    0                 ; DATA XREF: sub_651D+337↑o
                                        ; sub_651D+396↑o ...
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
unk_2236C       db    0                 ; DATA XREF: sub_651D+3A9↑o
                                        ; sub_651D+7D4↑o ...
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
unk_2246B       db    0                 ; DATA XREF: sub_651D+3BE↑o
                                        ; sub_651D+3DA↑o ...
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
unk_2256A       db    0                 ; DATA XREF: sub_651D+3EC↑o
                                        ; sub_651D+457↑o ...
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
word_22A65      dw 0                    ; DATA XREF: sub_4961+39↑w
                                        ; sub_5214:loc_5271↑w ...
unk_22A67       db    0                 ; DATA XREF: sub_3B50+BC↑o
                                        ; sub_3B50+19A↑o ...
                db    0
                db    0
                db    0
unk_22A6B       db    0                 ; DATA XREF: sub_3B50+C9↑o
                                        ; sub_3B50+DA↑o ...
                db    0
                db    0
                db    0
                db    0
unk_22A70       db    0                 ; DATA XREF: sub_3B50+54↑o
                                        ; sub_3FC7+37↑o ...
                db    0
                db    0
                db    0
unk_22A74       db    0                 ; DATA XREF: sub_3B50+66↑o
                                        ; sub_7F99+B6↑o ...
                db    0
                db    0
                db    0
word_22A78      dw 0                    ; DATA XREF: stsrou+65↑r
                                        ; stsrou+9A↑r ...
word_22A7A      dw 0                    ; DATA XREF: stsrou+56↑r
                                        ; stsrou+94↑r ...
word_22A7C      dw 0                    ; DATA XREF: sub_4F1A+B1↑w
                                        ; sub_5214+A↑r ...
byte_22A7E      db 0                    ; DATA XREF: sub_51B5+52↑o
                                        ; sub_5776+1E↑o ...
byte_22A7F      db 0                    ; DATA XREF: sub_651D+26↑r
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
unk_22B7D       db    0                 ; DATA XREF: sub_538A+16↑o
                                        ; sub_57FC+54↑o ...
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
word_22C7C      dw 0                    ; DATA XREF: sub_51B5+18↑w
                                        ; sub_5214+89↑w ...
word_22C7E      dw 0                    ; DATA XREF: sub_4F1A+B7↑w
                                        ; sub_538A+95↑w ...
word_22C80      dw 0                    ; DATA XREF: sub_4F1A+BD↑w
                                        ; sub_538A+9B↑w ...
word_22C82      dw 0                    ; DATA XREF: sub_4F1A+C3↑w
                                        ; sub_5214+68↑w ...
unk_22C84       db    0                 ; DATA XREF: sub_3B50+355↑o
                                        ; sub_859C+9B↑o ...
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
unk_22CC5       db    0                 ; DATA XREF: sub_4A44+176↑o
                                        ; sub_5B48+2D↑o ...
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
unk_22CE3       db    0                 ; DATA XREF: sub_4A44+17A↑o
                                        ; sub_4A44+19C↑o ...
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
word_22D01      dw 0                    ; DATA XREF: sub_4F1A:loc_4F9B↑r
                                        ; sub_4F1A:loc_4FA1↑r ...
word_22D03      dw 0                    ; DATA XREF: sub_4F1A:loc_4F4E↑r
                                        ; sub_859C+120↑w
word_22D05      dw 0                    ; DATA XREF: sub_3B50+3F5↑r
                                        ; sub_5BAC+51↑r ...
word_22D07      dw 0                    ; DATA XREF: sub_51B5+1E↑w
                                        ; sub_5BAC+A↑r ...
word_22D09      dw 0                    ; DATA XREF: sub_51B5+24↑w
                                        ; sub_7B2D+185↑w ...
word_22D0B      dw 0                    ; DATA XREF: sub_7B2D:loc_7CAB↑r
                                        ; sub_7B2D+18C↑r ...
word_22D0D      dw 0                    ; DATA XREF: sub_7B2D:loc_7CFD↑r
                                        ; sub_7B2D+1DE↑r ...
word_22D0F      dw 0                    ; DATA XREF: sub_4F1A+274↑r
                                        ; sub_54B6+1F7↑r ...
word_22D11      dw 0                    ; DATA XREF: sub_4F1A+C9↑w
                                        ; sub_54B6+1EB↑r ...
word_22D13      dw 0                    ; DATA XREF: sub_4F1A+CF↑w
                                        ; sub_54B6:loc_56B5↑w ...
word_22D15      dw 0                    ; DATA XREF: sub_4F1A+DB↑w
                                        ; sub_52E5+44↑w ...
unk_22D17       db    0                 ; DATA XREF: sub_859C+1E7↑o
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
word_22D2B      dw 0                    ; DATA XREF: sub_4A44:loc_4E4D↑w
                                        ; sub_4F1A+99↑w ...
word_22D2D      dw 0                    ; DATA XREF: sub_651D:loc_6C2F↑w
                                        ; sub_651D:loc_6EED↑w ...
unk_22D2F       db    0                 ; DATA XREF: sub_61BB+129↑o
                                        ; sub_61BB+13C↑o ...
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
word_22D3E      dw 0                    ; DATA XREF: sub_4F1A+D5↑w
                                        ; sub_54B6+223↑w ...
word_22D40      dw 0                    ; DATA XREF: sub_4A44+5F↑r
                                        ; sub_4A44+81↑r ...
word_22D42      dw 0                    ; DATA XREF: sub_4961+51↑w
                                        ; sub_4F1A:loc_4F41↑r ...
unk_22D44       db    0                 ; DATA XREF: sub_4961+6E↑o
                                        ; sub_4961+7A↑o ...
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
word_22D76      dw 0                    ; DATA XREF: stsrou:loc_484C↑w
                                        ; sub_4961+85↑w ...
word_22D78      dw 0                    ; DATA XREF: sub_4F1A:loc_4FAD↑w
                                        ; sub_7E49+4F↑r ...
word_22D7A      dw 0                    ; DATA XREF: sub_4F1A+164↑r
                                        ; sub_859C+16D↑w
word_22D7C      dw 0                    ; DATA XREF: sub_4F1A+160↑r
                                        ; sub_859C+169↑w
word_22D7E      dw 0                    ; DATA XREF: sub_4F1A+1AB↑r
                                        ; sub_859C+17C↑w
word_22D80      dw 0                    ; DATA XREF: sub_4F1A+1A7↑r
                                        ; sub_859C+178↑w
word_22D82      dw 0                    ; DATA XREF: sub_7F99+71↑r
                                        ; sub_8344+71↑r ...
unk_22D84       db    0                 ; DATA XREF: sub_859C+5B↑o
                                        ; sub_859C+AF↑o
                db    0
                db    0
                db    0
                db    0
                db    0
unk_22D8A       db    0                 ; DATA XREF: sub_859C+43↑o
                                        ; sub_859C+B3↑o
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
unk_22D9C       db    0                 ; DATA XREF: sub_859C+8B↑o
                                        ; sub_859C+A7↑o
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
unk_22DA6       db    0                 ; DATA XREF: sub_859C+73↑o
                                        ; sub_859C+AB↑o
                db    0
                db    0
                db    0
unk_22DAA       db    0                 ; DATA XREF: sub_859C+2B↑o
                                        ; sub_859C+B7↑o
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
word_22DBF      dw 0                    ; DATA XREF: sub_52E5+24↑w
                                        ; sub_63A1+37↑r ...
word_22DC1      dw 0                    ; DATA XREF: sub_52E5+20↑w
                                        ; sub_63A1+33↑r ...
aEnterNewResetB db 'Enter new reset bit',0
                                        ; DATA XREF: dseg11:0000↑o
unk_22DD7       db  4Dh ; M             ; DATA XREF: dseg11:000A↑o
                db  61h ; a
                db  78h ; x
                db  69h ; i
                db  6Dh ; m
                db  75h ; u
                db  6Dh ; m
                db  20h
                db  4Dh ; M
                db  6Fh ; o
                db  6Eh ; n
                db  73h ; s
                db  74h ; t
                db  65h ; e
                db  72h ; r
                db  73h ; s
                db  20h
                db  61h ; a
                db  6Ch ; l
byte_22DEA      db 6Ch                  ; DATA XREF: sub_859C+CA↑w
aOwed           db 'owed',0
aTaxAmountPerSt db 'TAX amount per store',0
                                        ; DATA XREF: dseg11:0014↑o
aSellingValueOf db 'Selling value of new stores',0
                                        ; DATA XREF: dseg11:001E↑o
aDefaultStoresM db 'Default stores mark up',0
                                        ; DATA XREF: dseg11:0028↑o
aDefaultStoresM_0 db 'Default stores mark down',0
                                        ; DATA XREF: dseg11:0032↑o
aWieghtPlayerCa db 'Wieght player can have per strength point',0
                                        ; DATA XREF: dseg11:003C↑o
aMonsterAggress db 'Monster aggression',0
                                        ; DATA XREF: dseg11:0046↑o
aMaximumYearAPl db 'Maximum year a player can travel too',0
                                        ; DATA XREF: dseg11:0050↑o
aUnableToConnec db 'Unable to connect',0
                                        ; DATA XREF: dseg11:005A↑o
aFailedIdPasswo db 'Failed ID password',0
                                        ; DATA XREF: dseg11:005E↑o
aFailedResetCod db 'Failed reset code',0
                                        ; DATA XREF: dseg11:0062↑o
                                        ; dseg11:0086↑o
aIncompleteLink db 'Incomplete link',0  ; DATA XREF: dseg11:0066↑o
aSuccessful     db 'Successful',0       ; DATA XREF: dseg11:006A↑o
aMaximumDialing db 'Maximum dialing attempts',0
                                        ; DATA XREF: dseg11:off_21FBE↑o
aIllegalSystemI db 'Illegal system ID',0
                                        ; DATA XREF: dseg11:0072↑o
                                        ; sub_54B6+1A5↑o ...
aHubNotAuthoriz db 'HUB not authorized',0
                                        ; DATA XREF: dseg11:0076↑o
aThisLinkZapped db 'This link zapped!',0
                                        ; DATA XREF: dseg11:007A↑o
aHubNotReset    db 'HUB not reset',0    ; DATA XREF: dseg11:007E↑o
aResetCodeIssue db 'Reset code issued',0
                                        ; DATA XREF: dseg11:0082↑o
aCallerIsZapped db 'Caller is zapped',0 ; DATA XREF: dseg11:008A↑o
aLinkZapped     db 'Link zapped!',0     ; DATA XREF: dseg11:008E↑o
aIllegalSystem  db 'Illegal system',0   ; DATA XREF: dseg11:0092↑o
aResetCodeRecei db 'Reset code received',0
                                        ; DATA XREF: dseg11:0096↑o
aZappedNotAutho db 'ZAPPED, Not authorized',0
                                        ; DATA XREF: dseg11:009A↑o
aHubIsZapped    db 'HUB is zapped',0    ; DATA XREF: dseg11:009E↑o
aCallEndNormall db 'Call end normally',0
                                        ; DATA XREF: dseg11:00A2↑o
aCanTLinkUntilC db 'Can',27h,'t link until cleanup',0
                                        ; DATA XREF: dseg11:00A6↑o
aViolationLinkZ db 'VIOLATION: Link Zapped!',0
                                        ; DATA XREF: dseg11:00AA↑o
aCallerLinkInPr db 'Caller - link in progress',0
                                        ; DATA XREF: dseg11:off_21FFE↑o
aTimeOut        db 'Time-Out',0         ; DATA XREF: dseg11:00B2↑o
aUpdateRequired db 'Update required!',0 ; DATA XREF: dseg11:00B6↑o
aMjwlnkhdDat    db 'MJWLNKHD.DAT',0     ; DATA XREF: sub_3B50+13↑o
                                        ; sub_41CC+329↑o
aMjwlnkusDat    db 'MJWLNKUS.DAT',0     ; DATA XREF: sub_3B50+2F↑o
aCnf            db 'CNF',0              ; DATA XREF: sub_3B50+50↑o
aAzz            db 'AZZ',0              ; DATA XREF: sub_3B50+62↑o
                                        ; sub_651D+13D↑o ...
aWelcomeToMutan db 'Welcome to Mutantlink, Local Version!',0
                                        ; DATA XREF: sub_3B50+80↑o
aMutantlinkDisa db 'Mutantlink disabled: IDPASS',0
                                        ; DATA XREF: sub_3B50+EE↑o
aMutantlinkIdPa db 'Mutantlink ID Password incorrect',0
                                        ; DATA XREF: sub_3B50+EA↑o
aMl             db 'ML',0               ; DATA XREF: sub_3B50+15F↑o
                                        ; sub_41CC+442↑o
aSS_0           db '%s@%s',0            ; DATA XREF: sub_3B50+1A4↑o
aMutantlinkInit db 'Mutantlink Initialized',0
                                        ; DATA XREF: sub_3B50+3C9↑o
                                        ; sub_3B50+3CD↑o
aMutantlinkActi db 'Mutantlink Active',0
                                        ; DATA XREF: sub_3B50+3E6↑o
                                        ; sub_3B50+3EA↑o
aLd_0           db '%ld',0              ; DATA XREF: sub_3F60+21↑o
                                        ; sub_7F99+E5↑o ...
aMjwlnkhd       db 'MJWLNKHD',0         ; DATA XREF: dseg11:off_22047↑o
aMjwlnkus       db 'MJWLNKUS',0         ; DATA XREF: dseg11:00FB↑o
aMjwmutr        db 'MJWMUTR',0          ; DATA XREF: dseg11:00FF↑o
aMjwmuts        db 'MJWMUTS',0          ; DATA XREF: dseg11:0103↑o
aMjwmutpl       db 'MJWMUTPL',0         ; DATA XREF: dseg11:0107↑o
                                        ; sub_651D+8B3↑o ...
aMjwmuthi       db 'MJWMUTHI',0         ; DATA XREF: dseg11:010B↑o
aMjwmutlo       db 'MJWMUTLO',0         ; DATA XREF: dseg11:010F↑o
a294hsuyd       db '294HSUYD',0         ; DATA XREF: sub_41CC+38↑o
                                        ; sub_5D04+251↑o ...
aResettingMutan db 'Resetting Mutants',0
                                        ; DATA XREF: sub_41CC+1C6↑o
                                        ; sub_41CC+1CA↑o
aSVir           db '%s.VIR',0           ; DATA XREF: sub_41CC+204↑o
                                        ; sub_41CC+2B3↑o
aRb_0           db 'rb',0               ; DATA XREF: sub_41CC+216↑o
                                        ; sub_5C3F+C↑o
aCanTOpenS      db 'Can',27h,'t open %s',0
                                        ; DATA XREF: sub_41CC+23C↑o
aMutantsCannotB db 'Mutants cannot be reset',0
                                        ; DATA XREF: sub_41CC+232↑o
aSDat           db '%s.DAT',0           ; DATA XREF: sub_41CC+2D7↑o
aErrorResetting db 'Error resetting Mutants',0
                                        ; DATA XREF: sub_41CC+306↑o
aMutantsResetAb db 'Mutants reset aborted',0
                                        ; DATA XREF: sub_41CC+302↑o
aMjwmuthiDat_0  db 'MJWMUTHI.DAT',0     ; DATA XREF: sub_41CC+40F↑o
aMjwmutplDat_0  db 'MJWMUTPL.DAT',0     ; DATA XREF: sub_41CC+4D9↑o
aConnect        db 'CONNECT',0          ; DATA XREF: sub_4961+7↑o
aMutantlinkConn db 'MUTANTLINK: CONNECTED',0
                                        ; DATA XREF: sub_4961+6A↑o
aNo             db 'NO',0               ; DATA XREF: sub_4961+8E↑o
aBusy           db 'BUSY',0             ; DATA XREF: sub_4961+AD↑o
aMonitorAborted db 'Monitor Aborted. (press enter)',0Dh,0
                                        ; DATA XREF: sub_4A44+8B↑o
aAutodialerNowO db 'Autodialer now ON',0Dh,0
                                        ; DATA XREF: sub_4A44+1C9↑o
aAutodialerNowO_0 db 'Autodialer now OFF',0Dh,0
                                        ; DATA XREF: sub_4A44+1D0↑o
aD_0            db '%d',0               ; DATA XREF: sub_4A44+27B↑o
aA              db 'A',0                ; DATA XREF: sub_4A44+2AC↑o
asc_23256       db '#',0                ; DATA XREF: sub_4A44+2C2↑o
aMonitorScriptI db 'Monitor Script is now ON',0Dh,0
                                        ; DATA XREF: sub_4A44+378↑o
aMonitorScriptI_0 db 'Monitor Script is now OFF',0Dh,0
                                        ; DATA XREF: sub_4A44+394↑o
aMonitorIsInUse db 'Monitor is in use.',0Dh,0
                                        ; DATA XREF: sub_4A44+39B↑o
aListingAborted db 0Dh,'*** LISTING ABORTED (press enter) ***',0Dh,0
                                        ; DATA XREF: sub_4A44+48D↑o
aSS_1           db '%s%s',0Dh,0         ; DATA XREF: sub_4F1A+169↑o
                                        ; sub_7E49+38↑o
aSSm            db '%s%sM',0            ; DATA XREF: sub_4F1A+1B0↑o
a7s             db '(%.7s)',0           ; DATA XREF: sub_4F1A+1D4↑o
                                        ; sub_54B6+D8↑o
aMlink          db 'Mlink',0            ; DATA XREF: sub_4F1A+1D0↑o
aMutantlinkDial db 'MUTANTLINK: DIALING',0
                                        ; DATA XREF: sub_4F1A+259↑o
aR_0            db 'r',0
aMutantlinkExce db 'MUTANTLINK: EXCECUTING SCRIPT',0
                                        ; DATA XREF: sub_63A1+17↑o
aConnectedExcec db 0Dh,0Dh,'** CONNECTED - EXCECUTING SCRIPT **',0Dh,0
aCSDC           db '%c%s%d%c',0         ; DATA XREF: sub_538A+57↑o
aMl_0           db 'Ml',0               ; DATA XREF: sub_54B6+34↑o
                                        ; sub_5713+C↑o ...
                align 2
aMlink_0        db 'MLink',0            ; DATA XREF: sub_54B6+D4↑o
aMutantlink     db 'MUTANTLINK!',0      ; DATA XREF: sub_54B6+102↑o
asc_2335C       db '??',0               ; DATA XREF: sub_57FC+48↑o
                                        ; sub_6F5A+A4E↑o
aOn             db 'ON',0               ; DATA XREF: sub_5B48+31↑o
aOff            db 'OFF',0              ; DATA XREF: sub_5B48+3B↑o
aWb             db 'wb',0               ; DATA XREF: sub_5C3F+3B↑o
aMutantsSRegS   db 'Mutants %s Reg# %s',0
                                        ; DATA XREF: sub_5D04+B7↑o
                                        ; sub_5D04+15E↑o
aMutantsS       db 'Mutants %s',0       ; DATA XREF: sub_5D04+CE↑o
                                        ; sub_5D04+175↑o
aMutantsSExtdDD db 'Mutants %s EXTD %d/%d',0
                                        ; DATA XREF: sub_5D04+2EB↑o
aMutantsSDemoDD db 'Mutants %s DEMO %d/%d',0
                                        ; DATA XREF: sub_5D04+350↑o
aMutantsSDemoEx db 'Mutants %s DEMO EXPIRED',0
                                        ; DATA XREF: sub_5D04+31C↑o
                db '+++++++++',0
unk_233D5       db    2                 ; DATA XREF: sub_61BB+4F↑o
                db  68h ; h
                db  61h ; a
                db  70h ; p
                db  70h ; p
                db  79h ; y
                db    2
                db    0
aMutantLinkId   db 'Mutant-Link ID',0   ; DATA XREF: sub_61BB+63↑o
aDoNotDeleteThi db 'Do not delete this user.',0
                                        ; DATA XREF: sub_61BB+77↑o
aThisAccountIsU db 'This account is used for',0
                                        ; DATA XREF: sub_61BB+8B↑o
aMutantlink_0   db 'Mutantlink!',0      ; DATA XREF: sub_61BB+9F↑o
asc_2342A       db '  ',0               ; DATA XREF: sub_61BB+B3↑o
                                        ; sub_61BB+C7↑o
aMutantlinkIdCr_0 db 'Mutantlink ID created.',0
                                        ; DATA XREF: sub_61BB+1D8↑o
aMutantlinkIdCr db 'Mutantlink ID Created (ML)',0
                                        ; DATA XREF: sub_61BB+1D4↑o
aEndScriptSelec db 0Dh,0Dh,'** END SCRIPT - SELECTING TERMINAL TYPE **',0Dh,0
                                        ; DATA XREF: sub_63A1+150↑o
aMutantlinkCall db 'MUTANTLINK: CALLER %s',0
                                        ; DATA XREF: sub_651D+96↑o
aDn             db 'DN',0               ; DATA XREF: sub_651D+E3↑o
                                        ; sub_651D+A17↑o ...
aIl             db 'IL',0               ; DATA XREF: sub_651D+118↑o
                                        ; sub_6F5A+D6↑o
a9999           db '9999',0             ; DATA XREF: sub_651D+11E↑o
                                        ; sub_651D+249↑o ...
aPs             db 'PS',0               ; DATA XREF: sub_651D+146↑o
                                        ; sub_651D+14C↑o ...
aNr             db 'NR',0               ; DATA XREF: sub_651D+1E0↑o
                                        ; sub_6F5A+187↑o
aNbSS           db 'NB%s~%s',0          ; DATA XREF: sub_651D+20B↑o
aHb             db 'HB',0               ; DATA XREF: sub_651D+272↑o
                                        ; sub_651D+539↑o ...
aHz             db 'HZ',0               ; DATA XREF: sub_651D+268↑o
                                        ; sub_6F5A+9DD↑o
asc_234C2       db '<>',0               ; DATA XREF: sub_651D+28A↑o
                                        ; sub_651D+67F↑o ...
asc_234C5       db '<H',0               ; DATA XREF: sub_651D+320↑o
                                        ; sub_6F5A+3B7↑o
a999999         db '999999',0           ; DATA XREF: sub_651D+3BA↑o
                                        ; sub_6F5A+520↑o
aGh             db 'GH',0               ; DATA XREF: sub_651D+540↑o
                                        ; sub_6F5A+3D0↑o ...
aGhSLdSSLdLd    db 'GH%s~%ld~%s~%s~%ld~%ld',0
                                        ; DATA XREF: sub_651D+5EA↑o
aGh_0           db 'GH<>',0             ; DATA XREF: sub_651D+648↑o
aSp             db 'SP',0               ; DATA XREF: sub_651D+64F↑o
                                        ; sub_6F5A+486↑o
aGp             db 'GP',0               ; DATA XREF: sub_651D+667↑o
                                        ; sub_651D+8AC↑o ...
aRp             db 'RP',0               ; DATA XREF: sub_651D+71C↑o
                                        ; sub_6F5A+7FC↑o
aPlSLdLdLdLd    db 'PL%s~%ld~%ld~%ld~%ld',0
                                        ; DATA XREF: sub_651D+963↑o
aPl             db 'PL<>',0             ; DATA XREF: sub_651D+A04↑o
aMutantlinkLink_0 db 'MUTANTLINK: LINKING',0
                                        ; DATA XREF: sub_6F5A+9E↑o
aIdSS           db 'ID%s~%s',0          ; DATA XREF: sub_6F5A+B8↑o
aPsS            db 'PS%s',0             ; DATA XREF: sub_6F5A+172↑o
aNb             db 'NB',0               ; DATA XREF: sub_6F5A+1A6↑o
aFr             db 'FR',0               ; DATA XREF: sub_6F5A+288↑o
aHbSLdSSLdLd    db 'HB%s~%ld~%s~%s~%ld~%ld',0
                                        ; DATA XREF: sub_6F5A+352↑o
aHb_0           db 'HB<>',0             ; DATA XREF: sub_6F5A+3B0↑o
aGpSLdLdLdLd    db 'GP%s~%ld~%ld~%ld~%ld',0
                                        ; DATA XREF: sub_6F5A+757↑o
aGp_0           db 'GP<>',0             ; DATA XREF: sub_6F5A+7F5↑o
aLinkDisconnect db 0Dh,0Dh,'*** LINK DISCONNECTED',0Dh,0
                                        ; DATA XREF: sub_7B2D+3F↑o
aMutantlinkS    db 'MUTANTLINK: %s',0   ; DATA XREF: sub_7B2D+13F↑o
                                        ; sub_7B2D+1A3↑o ...
aMutantlinkLogO db 'MUTANTLINK: LOG ON (1st TRY)',0
                                        ; DATA XREF: dseg11:off_22063↑o
aMutantlinkLogO_0 db 'MUTANTLINK: LOG ON (2nd TRY)',0
                                        ; DATA XREF: dseg11:0117↑o
aMutantlinkLogO_1 db 'MUTANTLINK: LOG ON (3rd TRY)',0
                                        ; DATA XREF: dseg11:011B↑o
a1_0            db '1',0Dh,0            ; DATA XREF: sub_7F03+1D↑o
aMutantlinkTerm db 'MUTANTLINK: TERMINAL TYPE',0
                                        ; DATA XREF: sub_7F03+5C↑o
aCS60s3s9sSC    db '%c%s%-60s %-3s  %9s  %s%c',0Dh,0
                                        ; DATA XREF: sub_7F99+11F↑o
                                        ; sub_8344+FC↑o
a136m_0         db 1Bh,'[1;36m',0       ; DATA XREF: sub_7F99+FD↑o
                                        ; sub_8344+F5↑o
a133m_1         db 1Bh,'[1;33m',0       ; DATA XREF: sub_7F99+DB↑o
                                        ; sub_7F99+106↑o ...
a0m             db 1Bh,'[0m',0          ; DATA XREF: sub_7F99+118↑o
aDqualifd       db 'DQUALIFD',0         ; DATA XREF: sub_7F99+10A↑o
aC30s5s10s10sC  db '%c%-30s %-5s  %10s   $ %10s             %c',0Dh,0
                                        ; DATA XREF: sub_819F+BF↑o
aSD             db '%s %d',0            ; DATA XREF: sub_8527+36↑o
a20s17s5s3sS    db '%-20s %-17s %-5s (%-3s) %s',0
                                        ; DATA XREF: sub_859C+BB↑o
aMutantlinkLink db 'Mutantlink: Link Zapped!',0
                                        ; DATA XREF: sub_8918+90↑o
                                        ; sub_8918+94↑o
                align 8
dseg11          ends

; Segment Number    : 12
; Alloc Size        : 1E90h
; Offset in the file: 35C00h  Length: 1E90h
; Attributes  (0C21): DATA Pure DPL: 3
; ===========================================================================

; Segment type: Pure data
dseg12          segment para public 'DATA' use16
                assume cs:dseg12
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
unk_23E80       db    0                 ; DATA XREF: sub_AD59+12↑o
                                        ; sub_AD59+DF↑o ...
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
unk_2474F       db    0                 ; DATA XREF: sub_B091+12↑o
                                        ; sub_B091+153↑o ...
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
aYouGetThrownBa db 'You get thrown back!',0Dh,0
                                        ; DATA XREF: sub_8B00+100↑o
                                        ; sub_8B00+380↑o
aAMagicalForceS db '***',0Dh,'A magical force strikes you and throws you back!',0Dh,0
                                        ; DATA XREF: sub_8B00+506↑o
aYouGetTheFeeli db '***',0Dh,'You get the feeling you should leave.',0Dh,0
                                        ; DATA XREF: sub_8B00+512↑o
aNorth_4        db 0Dh,'       NORTH',0Dh,0
                                        ; DATA XREF: sub_9325+21↑o
aY              db 'Y ',0               ; DATA XREF: sub_9325+3B↑o
                                        ; sub_A259+394↑o ...
aC              db '%c ',0              ; DATA XREF: sub_9325+70↑o
aMMaintenanceSh db 0Dh,'m-maintenance shop',0Dh,'t-trading center',0Dh,'#-roadway',0Dh
                                        ; DATA XREF: sub_9325+94↑o
                db 0
aSSHasJustDemat db '%s %s has just dematerialized from this world.',0
                                        ; DATA XREF: sub_93D8+160↑o
aD_2            db '%d',0               ; DATA XREF: sub_955B+18C↑o
                                        ; sub_955B+387↑o ...
aTheS           db 'The %s ',0          ; DATA XREF: sub_955B+43A↑o
                                        ; sub_A259+65B↑o ...
aAHuman         db 'a human',0          ; DATA XREF: sub_955B+6AF↑o
aSS_5           db '%s%s',0             ; DATA XREF: sub_955B+71F↑o
                                        ; sub_A077+2A↑o ...
aYouReLookingS  db 'You',27h,'re looking %s...',0Dh,0
                                        ; DATA XREF: sub_955B+957↑o
aSS_6           db '%s%s',0Dh,0         ; DATA XREF: sub_A077+12↑o
                                        ; sub_AD59+252↑o ...
a131m_0         db 1Bh,'[1;31m',0       ; DATA XREF: sub_A077+E↑o
                                        ; sub_12D5E+93↑o ...
aScompassDeDn   db '%sCompass: (%dE : %dN)',0Dh,0
                                        ; DATA XREF: sub_A077+56↑o
a132m           db 1Bh,'[1;32m',0       ; DATA XREF: sub_A077+52↑o
aS6sSopenGate   db '%s%-6s- %sopen gate.',0Dh,0
                                        ; DATA XREF: sub_A077+A9↑o
a133m_0         db 1Bh,'[1;33m',0       ; DATA XREF: sub_A077+A5↑o
                                        ; sub_A077+D9↑o ...
a136m           db 1Bh,'[1;36m',0       ; DATA XREF: sub_A077+8D↑o
                                        ; sub_A077+C1↑o ...
aS6sSwallOfIce  db '%s%-6s- %swall of ice.',0Dh,0
                                        ; DATA XREF: sub_A077+DD↑o
aS6sSclosedGate db '%s%-6s- %sclosed gate.',0Dh,0
                                        ; DATA XREF: sub_A077+122↑o
aS6sSionForceFi db '%s%-6s- %sion force field.',0Dh,0
                                        ; DATA XREF: sub_A077+155↑o
aS6sSareaContin db '%s%-6s- %sarea continues.',0Dh,0
                                        ; DATA XREF: sub_A077+188↑o
asc_24A23       db ', ',0               ; DATA XREF: sub_A259+26B↑o
                                        ; sub_A259+38E↑o ...
aWho            db 'who',0              ; DATA XREF: sub_A259+2AA↑o
                                        ; sub_A259+2EA↑o ...
aAnd            db 'and ',0             ; DATA XREF: sub_A259+3B0↑o
aAreHereWithYou db 'are here with you.',0Dh,0
                                        ; DATA XREF: sub_A259+3CB↑o
aIsHere         db 'is here.',0Dh,0     ; DATA XREF: sub_A259+3D1↑o
aToThe          db ' to the ',0         ; DATA XREF: sub_A259+4C1↑o
asc_24A56       db '***',0Dh,0          ; DATA XREF: sub_A259+63A↑o
aSs             db '%ss: ',0            ; DATA XREF: sub_A259+69B↑o
                                        ; sub_12484+89↑o
aS_2            db '%s, ',0             ; DATA XREF: sub_A259+6DB↑o
aS_3            db '%s!',0Dh,0          ; DATA XREF: sub_A259+6F6↑o
aSnameSSS       db '%sName: %s%s / %s',0Dh,0
aSexhaustionS3d db '%sExhaustion    : %s%-3d%',0Dh,0
aSstrS3dSintS3d db '%sStr: %s%-3d    %sInt: %s%-3d   %sWis: %s%-3d',0Dh,0
aSdexS3dSconS3d db '%sDex: %s%-3d    %sCon: %s%-3d   %sCha: %s%-3d',0Dh,0
aShitPointsS3d3 db '%sHit Points    %s: %-3d / %-3d',0
aSpoisoned      db ' %sPOISONED!',0
aSexpPointsS7sS db '%sExp. Points   : %s%-7s %sLevel: %s%-3d',0Dh,0
aLd_1           db '%ld',0              ; DATA XREF: sub_CA86+B8↑o
                                        ; sub_CA86+119↑o ...
aSribletsS7s    db '%sRiblets       : %s%-7s',0Dh,0
aSionsS7s       db '%sIons          : %s%-7s',0Dh,0
aSwearingArmor  db '%sWearing Armor : ',0
aSS_8           db '%s%s ',0
                db  25h ; %
                db  73h ; s
aNothing        db 'Nothing.',0         ; DATA XREF: sub_AD59+21D↑o
aSarmourClassS3 db ' %sArmour Class: %s%-3d',0Dh,0
aSreadyToCombat db '%sReady to Combat: %s%-30s',0Dh,0
aSsummonedS30s  db '%sSUMMONED       : %s%-30s',0Dh,0
aSreadyToCombat_0 db '%sReady to Combat: %sNO ONE',0Dh,0
aSreadiedSpellS db '%sReadied Spell  : %s',0
aSyearADSD      db '%sYear A.D.      : %s%d',0Dh,0
aInv            db 'inv',0              ; DATA XREF: sub_AD59+65↑o
                                        ; sub_AD59+EB↑o ...
aD_1            db ' (%d)',0            ; DATA XREF: sub_AD59+199↑o
                                        ; sub_B091+19B↑o
aHis            db 'his',0
aHer            db 'her',0
aItems_0        db 'items',0            ; DATA XREF: sub_B091+3B↑o
                                        ; sub_B091+B6↑o ...
aSDroppedSS     db '%s dropped %s %s.',0Dh,0
                                        ; DATA XREF: sub_B378+FE↑o
aEgg            db 'egg',0              ; DATA XREF: sub_B7E3+22↑o
aHeyEggsArePois db 'Hey! Eggs are poisonous!',0Dh,0
                                        ; DATA XREF: sub_B7E3+50↑o
a0_0            db '0',0                ; DATA XREF: sub_BD0B+54↑o
                db    0
aTheSSsSS       db 'The %s %ss: %s, %s!',0Dh,0
                                        ; DATA XREF: sub_C376+200↑o
a20s3d          db '%-20s: %-3d ',0     ; DATA XREF: sub_D12D+9D↑o
aYouDonTHaveThe db 'You don',27h,'t have the strength to put that on!',0Dh,0
                                        ; DATA XREF: sub_D230+111↑o
aStore          db 'store',0            ; DATA XREF: sub_D871+2E↑o
                                        ; sub_E3E5+69↑o
aMutantPlayersH db 'Mutant Players have been known to explode by doing that!',0Dh,0
                                        ; DATA XREF: sub_D871+105↑o
aALittleExpensi db 'A little expensive,don',27h,'t you think?',0Dh,0
                                        ; DATA XREF: sub_D871+11E↑o
aForSaleByOwner db 'FOR SALE BY OWNER $ %ld',0
                                        ; DATA XREF: sub_D871+21B↑o
aVillageShop_1  db 'Village Shop',0     ; DATA XREF: sub_D871+4B1↑o
aSSoldOneOfYour db '%s sold one of your stores a %s for $ %ld!',0
                                        ; DATA XREF: sub_D871+572↑o
aCredits        db 'credits',0          ; DATA XREF: sub_E3E5+2B↑o
aIons           db 'ions',0             ; DATA XREF: sub_E3E5+4C↑o
aForSale_1      db 'FOR SALE',0         ; DATA XREF: sub_E3E5+103↑o
                                        ; sub_EBCA+2B1↑o
aSHasPurchasedO db '%s has purchased one of your stores!',0
                                        ; DATA XREF: sub_E3E5+13E↑o
aPost_0         db 'POST',0             ; DATA XREF: sub_E3E5+16A↑o
aStoreOwnedBy   db 'STORE OWNED BY ',0  ; DATA XREF: sub_E3E5+1FF↑o
aSPurchasedASFo db '%s purchased a %s for $ %ld!',0
                                        ; DATA XREF: sub_E3E5+573↑o
aItSTooHeavyToC db 'It',27h,'s too heavy to carry!',0Dh,0
                                        ; DATA XREF: sub_E3E5+609↑o
aDrop_0         db 'drop',0             ; DATA XREF: sub_E3E5+627↑o
a2d20s10s       db '%2d. %-20s $ %-10s',0
                                        ; DATA XREF: sub_E3E5+761↑o
aOwnedByS       db 'Owned By       : %s',0Dh,0
                                        ; DATA XREF: sub_EBCA+2CD↑o
aOwnedByVillage db 'Owned By       : VILLAGE',0Dh,0
                                        ; DATA XREF: sub_EBCA+2DB↑o
aDS             db '%d. %s',0Dh,0       ; DATA XREF: sub_EBCA+343↑o
                                        ; sub_12E92+1BD↑o
aStockReport    db 'Stock Report',0Dh,'------------',0Dh,0
                                        ; DATA XREF: sub_F198+C9↑o
a2d20s          db '%2d. %-20s',0       ; DATA XREF: sub_F198+112↑o
aNoInventory    db 'No inventory.',0    ; DATA XREF: sub_F198+143↑o
asc_24EA3       db 0Dh,0Dh,0            ; DATA XREF: sub_F198+14F↑o
aPlayerNotFound db 'PLAYER NOT FOUND-DUN_ERROR: 2402',0
                                        ; DATA XREF: sub_FABA+136↑o
aSSs            db '%s %ss: ',0         ; DATA XREF: sub_FC62+39↑o
aUnderstood     db 'Understood!',0Dh,0  ; DATA XREF: sub_FC62+C6↑o
aDSReadyForRess db '%d. %s (READY FOR RESSURECTION)',0Dh,0
                                        ; DATA XREF: sub_FD4D+118↑o
aPlayerNotFound_0 db 'PLAYER NOT FOUND-DUN_ERROR: 2334',0
                                        ; DATA XREF: sub_FD4D+16E↑o
aPlayerNotFound_1 db 'PLAYER NOT FOUND-DUN_ERROR: 2348',0
                                        ; DATA XREF: sub_FD4D+203↑o
aYouReHealedToT db 'You',27h,'re healed to the maximum!',0Dh,0
                                        ; DATA XREF: sub_10FDD+191↑o
aSSBodyIsGlowin db '%s',27h,'s body is glowing!',0Dh,0
                                        ; DATA XREF: sub_10FDD+1BC↑o
aHeyYouReDead_0 db 'Hey! You',27h,'re dead!',0Dh,0
                                        ; DATA XREF: sub_11A2F+3A↑o
aHeyThisYearIsA db 'Hey! This year is a ',27h,'safe-ground',27h,'. You can',27h,'t st'
                                        ; DATA XREF: sub_11A2F+7F↑o
                db 'eal here!',0Dh,0
aThisClassDoesN db 'This class does not have theiving abilities.',0Dh,0
                                        ; DATA XREF: sub_11A2F+3CC↑o
aC_0            db '%c',0               ; DATA XREF: sub_11A2F+308↑o
aYouSufferDHitP db 'You suffer %d hit points of damage and ion drainage!',0Dh,0
                                        ; DATA XREF: sub_11A2F+643↑o
aVillageShop_2  db 'Village Shop',0     ; DATA XREF: sub_11A2F+6DF↑o
                align 2
aHasStolenCashF db ' has stolen cash from one of your stores!',0
                                        ; DATA XREF: sub_11A2F+895↑o
aHasStolenAnIte db ' has stolen an item from one of your stores!',0
                                        ; DATA XREF: sub_11A2F+A12↑o
aYouTelepathica db 'You telepathically send the message.',0Dh,0
                                        ; DATA XREF: sub_12484+E8↑o
aHeyYouDonTOwnT db 'Hey! You don',27h,'t own this store!',0Dh,0
                                        ; DATA XREF: sub_125A2+108↑o
                                        ; sub_1282B+E2↑o
aYouCanTRemoveL db 'You can',27h,'t remove less then 30,000 ions!',0Dh,'Strange thing'
                                        ; DATA XREF: sub_1282B+123↑o
                db 's might happen!',0Dh,0
aYearRelativeWo db 'Year           Relative             Worth',0Dh,0Dh,0
                                        ; DATA XREF: sub_12B3F+46↑o
aCC             db '%c%c',0             ; DATA XREF: sub_12B3F+84↑o
aCCC_2          db '%c%c%c',0           ; DATA XREF: sub_12B3F+C7↑o
                                        ; sub_12B3F+104↑o
aDADEast4dNorth db '%d A.D.    east: %-4d north: %-4d  $ %-8s',0Dh,0
                                        ; DATA XREF: sub_12B3F+178↑o
aDADNotAvailabl db '%d A.D.    NOT AVAILABLE           $ %-8s',0Dh,0
                                        ; DATA XREF: sub_12B3F+1A4↑o
aYouDonTHaveAny db 'You don',27h,'t have any stores established.',0Dh,0
                                        ; DATA XREF: sub_12B3F+1FF↑o
aSplayerScoreNe db '%sPLAYER                          SCORE         NET WORTH',0Dh,0
                                        ; DATA XREF: sub_12D5E+40↑o
aS_4            db '%s=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=',0Dh,0
                                        ; DATA XREF: sub_12D5E+50↑o
aMl_1           db 'ML',0               ; DATA XREF: sub_12D5E+73↑o
a137m_1         db 1Bh,'[1;37m',0       ; DATA XREF: sub_12D5E+8D↑o
                                        ; sub_12E92+B3↑o
aS30s10s10s     db '%s%-30s   %-10s   $ %-10s',0Dh,0
                                        ; DATA XREF: sub_12D5E+E9↑o
aSkeywords      db '%sKeywords:',0Dh,0Dh,0
                                        ; DATA XREF: sub_12E92+23↑o
aS10s           db '%s%-10s  ',0        ; DATA XREF: sub_12E92+56↑o
aCombat_2       db 'combat',0           ; DATA XREF: sub_12E92+E2↑o
aTalking        db 'talking',0          ; DATA XREF: sub_12E92+FD↑o
aMoving         db 'moving',0           ; DATA XREF: sub_12E92+133↑o
aStrategy       db 'strategy',0         ; DATA XREF: sub_12E92+14E↑o
aClass          db 'class',0            ; DATA XREF: sub_12E92+179↑o
aSclassNameSS   db 0Dh,'%sClass Name: %s%s',0Dh,0Dh,0
                                        ; DATA XREF: sub_12E92+231↑o
aSstrengthSD    db '%sStrength:        %s%d',0Dh,0
                                        ; DATA XREF: sub_12E92+24C↑o
aSintellengence db '%sIntellengence:   %s%d',0Dh,0
                                        ; DATA XREF: sub_12E92+267↑o
aSwisdomSD      db '%sWisdom:          %s%d',0Dh,0
                                        ; DATA XREF: sub_12E92+282↑o
aSdexteritySD   db '%sDexterity:       %s%d',0Dh,0
                                        ; DATA XREF: sub_12E92+29D↑o
aSconstitutionS db '%sConstitution:    %s%d',0Dh,0
                                        ; DATA XREF: sub_12E92+2B8↑o
aScharismaSD    db '%sCharisma:        %s%d',0Dh,0
                                        ; DATA XREF: sub_12E92+2D3↑o
aSionConsumptio db '%sIon Consumption: %s%d',0Dh,0
                                        ; DATA XREF: sub_12E92+2EE↑o
aSlevelExpStrIn db '%sLevel     Exp.   Str+ Int+ Wis+ Dex+ Con+ Cha+ HP+ Spell Gained'
                                        ; DATA XREF: sub_12E92+30A↑o
                db '+',0Dh,0
aS5d            db '%s %-5d   ',0       ; DATA XREF: sub_12E92+359↑o
a7s_0           db '%-7s  ',0           ; DATA XREF: sub_12E92+384↑o
a5d             db '%-5d',0             ; DATA XREF: sub_12E92+39D↑o
                                        ; sub_12E92+3B6↑o ...
aSpell          db 'spell',0            ; DATA XREF: sub_12E92+465↑o
aS18s           db '%s%-18s ',0         ; DATA XREF: sub_12E92+4D4↑o
aScastingCostSS db 0Dh,'%sCasting Cost     : %s%s Ions',0
                                        ; DATA XREF: sub_12E92+60A↑o
aSmaintenanceCo db 0Dh,'%sMaintenance Cost : %s%s Ions / Second',0Dh,0
                                        ; DATA XREF: sub_12E92+640↑o
aIncommingBlurb db 'Incomming Blurbs %s',0Dh,0
aOn_0           db 'ON',0
aOff_0          db 'OFF',0
aSDeaf          db '%s deaf!',0Dh,0
aYouReNow       db 'You',27h,'re now ',0
aYouReNoLonger  db 'You',27h,'re no longer ',0
aCredit         db 'Credit',0           ; DATA XREF: sub_1374B+87↑o
aTheShopKeeperJ db 'The shop keeper just laughs at you.',0Dh,0
                                        ; DATA XREF: sub_1374B+E4↑o
aMutantsSBought db 'MUTANTS: %s BOUGHT %ld CREDITS: MUTANTS',0
                                        ; DATA XREF: sub_1374B+1C2↑o
aCredits_0      db 'Credits',0          ; DATA XREF: sub_1374B+1E5↑o
aIon            db 'Ion',0              ; DATA XREF: sub_13992+50↑o
aYouCanTBuyThat db 'You can',27h,'t buy that many ions at once! You',27h,'d explode!',0Dh
                                        ; DATA XREF: sub_13992+7F↑o
                db 0
aSorryThatWould db 'Sorry,that would cost you a ridiculous amount!',0Dh,0
                                        ; DATA XREF: sub_13992+CC↑o
aDD             db '%d %d',0Dh,0        ; DATA XREF: sub_13C73+59↑o
flt_25534       dd 100.0                ; DATA XREF: sub_13CF8+87↑r
flt_25538       dd 2.0                  ; DATA XREF: sub_13CF8+8C↑r
flt_2553C       dd 5.0e7                ; DATA XREF: sub_13CF8+9D↑r
dseg12          ends

; Segment Number    : 13
; Alloc Size        : 0453h
; Offset in the file: 37C00h  Length: 0453h
; Attributes  (0C21): DATA Pure DPL: 3
; ===========================================================================

; Segment type: Pure data
dseg13          segment para public 'DATA' use16
                assume cs:dseg13
byte_25540      db 0                    ; DATA XREF: sub_13F68+5E↑o
                                        ; sub_13F68+9F↑o ...
                align 200h
aTypeSysForALis db 'Type SYS for a list of SYSOP commands.',0Dh,0
                                        ; DATA XREF: sub_13DE0+169↑o
aTypeSysCommand db 0Dh,'Type SYS [COMMAND] ? for help on any of these topics.',0Dh,0Dh
                                        ; DATA XREF: sub_13F68+6A↑o
                db 0
asc_257A1       db ',',0                ; DATA XREF: sub_13F68+AB↑o
aSS_7           db '%s%s',0Dh,0Dh,0     ; DATA XREF: sub_13F68+ED↑o
a133m_2         db 1Bh,'[1;33m',0       ; DATA XREF: sub_13F68+E9↑o
aOkThisAreaIsNo db 'Ok,this area is now for sale!',0Dh,0
aOwnedByS_0     db '(OWNED BY: %s)',0Dh,0
aLd_2           db '%ld',0
aConsiderSDead  db 'Consider %s dead.',0Dh,0
                                        ; DATA XREF: sub_14261+FF↑o
aYouAlreadyHave db 'You already have that spell!',0Dh,0
                                        ; DATA XREF: sub_144A8+83↑o
aSpellAdded     db 'Spell added.',0Dh,0 ; DATA XREF: sub_144A8+DD↑o
aVillageShop_3  db 'Village Shop',0
aTradingRoomNot db 'TRADING ROOM NOT FOUND ON FILE!',0
aCityTradingCen_0 db 'City Trading Centre',0
aYouReInAMainte_0 db 'You',27h,'re in a Maintenance Shop.',0
aYouSmellDeadFi db 'You smell dead fish everywhere.',0
aD_3            db '%d',0
aWalkingThrough db 'Walking through walls: %s',0Dh,0
aOn_1           db 'ON',0
aOff_1          db 'OFF',0
asc_258C8       db ' ',0                ; DATA XREF: sub_14DA8+5F↑o
                                        ; sub_151BF+25↑o ...
aSinceYourChara db 'Since your character was edited,you are disqualified from MutantL'
                                        ; DATA XREF: sub_14DA8+17F↑o
                db 'ink.',0Dh,0
aStr            db 'STR',0              ; DATA XREF: sub_14DA8+1A8↑o
aInt            db 'INT',0              ; DATA XREF: sub_14DA8+1D2↑o
aWis            db 'WIS',0              ; DATA XREF: sub_14DA8+1FC↑o
aDex            db 'DEX',0              ; DATA XREF: sub_14DA8+226↑o
aCon            db 'CON',0              ; DATA XREF: sub_14DA8+250↑o
aCha            db 'CHA',0              ; DATA XREF: sub_14DA8+27A↑o
aHit            db 'HIT',0              ; DATA XREF: sub_14DA8+2A4↑o
aMhp            db 'MHP',0              ; DATA XREF: sub_14DA8+2CE↑o
aLev            db 'LEV',0              ; DATA XREF: sub_14DA8+2F8↑o
aExp            db 'EXP',0              ; DATA XREF: sub_14DA8+322↑o
aRib            db 'RIB',0              ; DATA XREF: sub_14DA8+352↑o
aIon_0          db 'ION',0              ; DATA XREF: sub_14DA8+384↑o
aThereIsNoRoomO db 'There is no room on the other side!',0Dh,0
                                        ; DATA XREF: sub_152D8+1CD↑o
aBoosterIsSetTo db 'Booster is set to %s',0Dh,0
aBoosterNowSetT db 'Booster now set to %s',0Dh,0
                align 10h
dseg13          ends

; Segment Number    : 14
; Alloc Size        : 0A3Ah
; Offset in the file: 38200h  Length: 0A3Ah
; Attributes  (0D21): DATA Pure Relocations DPL: 3
; ===========================================================================

; Segment type: Pure data
dseg14          segment para public 'DATA' use16
                assume cs:dseg14
byte_259A0      db 0                    ; DATA XREF: sub_15560+21↑o
                                        ; sub_15560+37↑w ...
byte_259A1      db 0                    ; DATA XREF: sub_15560+2C↑w
                                        ; sub_15560+5D↑w
byte_259A2      db 0                    ; DATA XREF: sub_15560+62↑w
                align 2
byte_259A4      db 0                    ; DATA XREF: sub_155D9+13↑o
                                        ; sub_155D9+51↑w ...
byte_259A5      db 0                    ; DATA XREF: sub_155D9+67↑w
                                        ; sub_155D9+7C↑w ...
byte_259A6      db 0                    ; DATA XREF: sub_155D9:loc_15666↑w
byte_259A7      db 0                    ; DATA XREF: sub_155D9+90↑w
unk_259A8       db    0                 ; DATA XREF: sub_15677+E↑o
                                        ; sub_15677+24↑o ...
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
unk_259B2       db    0                 ; DATA XREF: sub_156EA+24↑o
                                        ; sub_156EA+36↑o ...
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
unk_25AB1       db    0                 ; DATA XREF: sub_17667+12↑o
                db    0
                db  3Eh ; >
                db    3
                db  3Fh ; ?
                db    3
                db  40h ; @
                db    3
                db  47h ; G
                db    3
                db  48h ; H
                db    3
                db  49h ; I
                db    3
                db  4Ah ; J
                db    3
                db  4Bh ; K
                db    3
                db  4Ch ; L
                db    3
unk_25AC5       db    0                 ; DATA XREF: sub_18EDF+12↑o
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
off_25ACD       dd aYouSeeRubbleEv      ; DATA XREF: sub_18EDF+23↑o
                                        ; "You see rubble everywhere."
                dd aCrumblingBuild      ; "Crumbling buildings surround you."
                dd aYouReInAnAband      ; "You're in an abandoned building."
                dd aTheTwoMoonsAre      ; "The two moons are rising above."
                dd aYouHearVolcano      ; "You hear volcanoes erupt in the distanc"...
                dd aYouFeelAColdBr      ; "You feel a cold breeze."
                dd aGraffitiLinesT      ; "Graffiti lines the city walls."
                dd aRelicsOfTheWar      ; "Relics of the war line the streets."
                dd aBrokenLampPost      ; "Broken lamp posts line the streets."
                dd aTheStreetIsCra      ; "The street is cracked here."
                dd aYouReInAWrecke      ; "You're in a wrecked building."
                dd aAnOldHydroLine      ; "An old hydro line has fallen here."
                dd aBrokenGlassCov      ; "Broken glass covers the road."
                dd aTheWindIsWhist      ; "The wind is whistling through open wind"...
                dd aAnEerieCalmSet      ; "An eerie calm settles in the distance."
off_25B09       dd asc_26197            ; DATA XREF: sub_1AC72+16↑o
                                        ; "   *     "
                dd asc_261A1            ; "  **     "
                dd asc_26197            ; "   *     "
                dd asc_26197            ; "   *     "
                dd asc_26197            ; "   *     "
                dd asc_26197            ; "   *     "
                dd asc_261AB            ; "******** "
                dd asc_261B5            ; " *****   "
                dd asc_261BF            ; "      *  "
                dd asc_261BF            ; "      *  "
                dd asc_261C9            ; "  ****   "
                dd asc_261D3            ; "*        "
                dd asc_261D3            ; "*        "
                dd asc_261DD            ; " ******  "
                dd asc_261DD            ; " ******  "
                dd asc_261E7            ; "       * "
                dd asc_261E7            ; "       * "
                dd asc_261F1            ; "    ***  "
                dd asc_261E7            ; "       * "
                dd asc_261E7            ; "       * "
                dd asc_261DD            ; " ******  "
                dd asc_261FB            ; "*    *   "
                dd asc_261FB            ; "*    *   "
                dd asc_261FB            ; "*    *   "
                dd asc_261AB            ; "******** "
                dd asc_26205            ; "     *   "
                dd asc_26205            ; "     *   "
                dd asc_26205            ; "     *   "
                dd asc_261DD            ; " ******  "
                dd asc_261D3            ; "*        "
                dd asc_261D3            ; "*        "
                dd asc_261B5            ; " *****   "
                dd asc_261BF            ; "      *  "
                dd asc_261BF            ; "      *  "
                dd asc_2620F            ; "******   "
                dd asc_26219            ; "   **     "
                dd asc_26224            ; "  *       "
                dd asc_2622F            ; " *        "
                dd asc_2623A            ; " * *****  "
                dd asc_26245            ; " *      * "
                dd asc_26245            ; " *      * "
                dd asc_26250            ; "  ******  "
                dd asc_2625B            ; " *******  "
                dd asc_26266            ; "       *  "
                dd asc_26271            ; "      *   "
                dd asc_2627C            ; "     *    "
                dd asc_26287            ; "    *     "
                dd asc_26287            ; "    *     "
                dd asc_26287            ; "    *     "
                dd asc_26250            ; "  ******  "
                dd asc_26245            ; " *      * "
                dd asc_26245            ; " *      * "
                dd asc_26250            ; "  ******  "
                dd asc_26245            ; " *      * "
                dd asc_26245            ; " *      * "
                dd asc_26250            ; "  ******  "
                dd asc_26292            ; "   *****  "
                dd asc_2629D            ; "  *     * "
                dd asc_2629D            ; "  *     * "
                dd asc_262A8            ; "   ****** "
                dd asc_262B3            ; "        * "
                dd asc_26266            ; "       *  "
                dd asc_26271            ; "      *   "
                dd asc_262BE            ; "     *      "
                dd asc_262BE            ; "     *      "
                dd asc_262BE            ; "     *      "
                dd asc_262CB            ; " ********** "
                dd asc_262BE            ; "     *      "
                dd asc_262BE            ; "     *      "
                dd asc_262BE            ; "     *      "
                dd asc_262D8            ; "           "
                dd asc_262D8            ; "           "
                dd asc_262D8            ; "           "
                dd asc_262E4            ; " ********* "
                dd asc_262D8            ; "           "
                dd asc_262D8            ; "           "
                dd asc_262D8            ; "           "
aAeiou          db 'AEIOU',0            ; DATA XREF: sub_15560+C↑o
                                        ; sub_17667+18F↑o ...
aD              db '%d',0               ; DATA XREF: sub_155D9+33↑o
                                        ; sub_163FE+45A↑o ...
unk_25C46       db    0                 ; DATA XREF: sub_15677+5C↑o
                db    0
aAeiou_0        db 'aeiou',0            ; DATA XREF: sub_156EA+E↑o
aBcdmnprstz     db 'bcdmnprstz',0       ; DATA XREF: sub_156EA+DC↑o
aIng            db 'ing',0              ; DATA XREF: sub_156EA+14E↑o
aVillageShop    db 'Village Shop',0     ; DATA XREF: sub_158D5+9F↑o
                                        ; sub_18770+D↑o ...
asc_25C6A       db 0Dh,0                ; DATA XREF: sub_159AB+24↑o
                                        ; sub_159AB+12C↑o ...
aD18sLevel3dYea db '%d. %-18s Level: %-3d Year: %-4d  (%-3d%3d)',0
                                        ; DATA XREF: sub_159AB+F3↑o
aDeadDDaySLeft  db ' DEAD: %d day(s) left.',0
                                        ; DATA XREF: sub_159AB+120↑o
aTypeBuryClassN db 0Dh,'Type BURY [class number] to reset a player.',0Dh,0
                                        ; DATA XREF: sub_159AB+1A2↑o
aS_14           db '%s',0               ; DATA XREF: sub_15C18+25↑o
                                        ; sub_15C18+58↑o ...
a131m           db 1Bh,'[1;31m',0       ; DATA XREF: sub_15C18+21↑o
a137m           db 1Bh,'[1;37m',0       ; DATA XREF: sub_15C18+54↑o
                                        ; sub_15C7E+3A↑o ...
aSS_2           db '%s***',0Dh,'%s',0   ; DATA XREF: sub_15C7E+3E↑o
a133m           db 1Bh,'[1;33m',0       ; DATA XREF: sub_15C7E+36↑o
aWhat           db 'WHAT?',0Dh,0        ; DATA XREF: sub_15CFA+5F↑o
asc_25D08       db '.........',0        ; DATA XREF: sub_15E3B+26↑o
                db    0
aCombat_1       db 'combat',0           ; DATA XREF: sub_163FE+656↑o
aSSsSS          db '%s %ss %s, %s!',0Dh,0
                                        ; DATA XREF: sub_16AD9+170↑o
aSHasSlain      db ' %s has slain ',0   ; DATA XREF: sub_16D39+73↑o
aS_5            db '%s ',0              ; DATA XREF: sub_16D39+A2↑o
aS_6            db '%s!',0              ; DATA XREF: sub_16D39+C4↑o
aSouth_2        db 'south-',0           ; DATA XREF: sub_16D39+1E6↑o
                                        ; sub_17667+1A4↑o
aNorth_2        db 'north-',0           ; DATA XREF: sub_16D39+20D↑o
aWest_2         db 'west-',0            ; DATA XREF: sub_16D39+240↑o
aEast_2         db 'east-',0            ; DATA XREF: sub_16D39+267↑o
aLd             db '%ld',0              ; DATA XREF: sub_16D39+377↑o
                                        ; sub_16D39+395↑o ...
aS              db '%s***',0Dh,0        ; DATA XREF: sub_17567+23↑o
                                        ; sub_175B0+7E↑o
aCCC_0          db '%c%c%c',0           ; DATA XREF: sub_17667+4E↑o
                                        ; sub_17667+79↑o ...
aSouth          db 'south',0            ; DATA XREF: sub_17667+174↑o
aNorth          db 'north',0            ; DATA XREF: sub_17667+17E↑o
aWest           db 'west',0             ; DATA XREF: sub_17667+1C1↑o
aEast           db 'east',0             ; DATA XREF: sub_17667+1CB↑o
aLoud           db 'loud',0             ; DATA XREF: sub_17667+237↑o
aFar            db ' far',0             ; DATA XREF: sub_17667+23D↑o
aFaint          db 'faint',0            ; DATA XREF: sub_17667+24E↑o
aYouRegainYourS db '***',0Dh,'You regain your strength.',0Dh,0
                                        ; DATA XREF: sub_1790E+CB↑o
aNoSpellMemoriz db 'No spell memorized.',0
                                        ; DATA XREF: sub_1830F+19↑o
aS_12           db '%s: ',0             ; DATA XREF: sub_1830F+41↑o
aCasted         db 'CASTED.',0          ; DATA XREF: sub_1830F+71↑o
aReady          db 'READY.',0           ; DATA XREF: sub_1830F+9B↑o
aMemorizingD    db '(memorizing %d)',0  ; DATA XREF: sub_1830F+B1↑o
aSSIsFallingFro db 0Dh,'%s%s is falling from %s',27h,'s body!',0Dh,'***',0
                                        ; DATA XREF: sub_183D9+175↑o
aPost           db 'POST',0             ; DATA XREF: sub_18770+3B↑o
                                        ; sub_18770+AA↑o ...
aLdRibletsHaveB db '%ld Riblets have been added to your bank balance.',0
                                        ; DATA XREF: sub_18770+57↑o
aS_0            db '%s',0Dh,0           ; DATA XREF: sub_18770+E5↑o
                                        ; sub_1893B+118↑o
aYouSeeRubbleEv db 'You see rubble everywhere.',0
                                        ; DATA XREF: dseg14:off_25ACD↑o
aCrumblingBuild db 'Crumbling buildings surround you.',0
                                        ; DATA XREF: dseg14:0131↑o
aYouReInAnAband db 'You',27h,'re in an abandoned building.',0
                                        ; DATA XREF: dseg14:0135↑o
aTheTwoMoonsAre db 'The two moons are rising above.',0
                                        ; DATA XREF: dseg14:0139↑o
aYouHearVolcano db 'You hear volcanoes erupt in the distance.',0
                                        ; DATA XREF: dseg14:013D↑o
aYouFeelAColdBr db 'You feel a cold breeze.',0
                                        ; DATA XREF: dseg14:0141↑o
aGraffitiLinesT db 'Graffiti lines the city walls.',0
                                        ; DATA XREF: dseg14:0145↑o
aRelicsOfTheWar db 'Relics of the war line the streets.',0
                                        ; DATA XREF: dseg14:0149↑o
aBrokenLampPost db 'Broken lamp posts line the streets.',0
                                        ; DATA XREF: dseg14:014D↑o
aTheStreetIsCra db 'The street is cracked here.',0
                                        ; DATA XREF: dseg14:0151↑o
aYouReInAWrecke db 'You',27h,'re in a wrecked building.',0
                                        ; DATA XREF: dseg14:0155↑o
aAnOldHydroLine db 'An old hydro line has fallen here.',0
                                        ; DATA XREF: dseg14:0159↑o
aBrokenGlassCov db 'Broken glass covers the road.',0
                                        ; DATA XREF: dseg14:015D↑o
aTheWindIsWhist db 'The wind is whistling through open windows.',0
                                        ; DATA XREF: dseg14:0161↑o
aAnEerieCalmSet db 'An eerie calm settles in the distance.',0
                                        ; DATA XREF: dseg14:0165↑o
aCityTradingCen db 'City Trading Centre',0
                                        ; DATA XREF: sub_18EDF+2DB↑o
aYouReInAMainte db 'You',27h,'re in a maintenance shop.',0
                                        ; DATA XREF: sub_18EDF+3E3↑o
aMutantError    db 'MUTANT ERROR',0     ; DATA XREF: sub_1951C+E7↑o
aMutantsCantSav db 'MUTANTS->CANT SAVE PLAYER',0
                                        ; DATA XREF: sub_1951C+E3↑o
aForSale_0      db 'FOR SALE',0         ; DATA XREF: sub_1968E+3A↑o
aASignReadsForS db 'A sign reads: FOR SALE $ %ld',0
                                        ; DATA XREF: sub_1968E+1DC↑o
aYourSHasBeenPu db 'Your %s has been punished for exiting the last battle! (%d points'
                                        ; DATA XREF: sub_19B55+19C↑o
                db ' per stat lost)',0
aTelepathicBlur db '***',0Dh,'Telepathic Blurb: %s',0Dh,0
                                        ; DATA XREF: sub_19D25+11↑o
aHashingErrorIl db 'Hashing Error: Illegal member to hash array',0
                                        ; DATA XREF: sub_1A075+18↑o
aSatan          db 'Satan',0            ; DATA XREF: sub_1A1CA+B9↑o
                                        ; sub_1A1CA+E7↑o
aDCD            db '%d%c%d',0           ; DATA XREF: sub_1A972+D7↑o
aAn             db 'AN',0               ; DATA XREF: sub_1AA7B+1B↑o
aGood           db 0Dh,0Dh,7,'GOOD!',0Dh,0Dh,0
                                        ; DATA XREF: sub_1AA7B+92↑o
aSSHasJustArriv_0 db '%s %s has just arrived into this world',0
                                        ; DATA XREF: sub_1AA7B+164↑o
asc_26197       db '   *     ',0        ; DATA XREF: dseg14:off_25B09↑o
                                        ; dseg14:0171↑o ...
asc_261A1       db '  **     ',0        ; DATA XREF: dseg14:016D↑o
asc_261AB       db '******** ',0        ; DATA XREF: dseg14:0181↑o
                                        ; dseg14:01C9↑o
asc_261B5       db ' *****   ',0        ; DATA XREF: dseg14:0185↑o
                                        ; dseg14:01E5↑o
asc_261BF       db '      *  ',0        ; DATA XREF: dseg14:0189↑o
                                        ; dseg14:018D↑o ...
asc_261C9       db '  ****   ',0        ; DATA XREF: dseg14:0191↑o
asc_261D3       db '*        ',0        ; DATA XREF: dseg14:0195↑o
                                        ; dseg14:0199↑o ...
asc_261DD       db ' ******  ',0        ; DATA XREF: dseg14:019D↑o
                                        ; dseg14:01A1↑o ...
asc_261E7       db '       * ',0        ; DATA XREF: dseg14:01A5↑o
                                        ; dseg14:01A9↑o ...
asc_261F1       db '    ***  ',0        ; DATA XREF: dseg14:01AD↑o
asc_261FB       db '*    *   ',0        ; DATA XREF: dseg14:01BD↑o
                                        ; dseg14:01C1↑o ...
asc_26205       db '     *   ',0        ; DATA XREF: dseg14:01CD↑o
                                        ; dseg14:01D1↑o ...
asc_2620F       db '******   ',0        ; DATA XREF: dseg14:01F1↑o
asc_26219       db '   **     ',0       ; DATA XREF: dseg14:01F5↑o
asc_26224       db '  *       ',0       ; DATA XREF: dseg14:01F9↑o
asc_2622F       db ' *        ',0       ; DATA XREF: dseg14:01FD↑o
asc_2623A       db ' * *****  ',0       ; DATA XREF: dseg14:0201↑o
asc_26245       db ' *      * ',0       ; DATA XREF: dseg14:0205↑o
                                        ; dseg14:0209↑o ...
asc_26250       db '  ******  ',0       ; DATA XREF: dseg14:020D↑o
                                        ; dseg14:022D↑o ...
asc_2625B       db ' *******  ',0       ; DATA XREF: dseg14:0211↑o
asc_26266       db '       *  ',0       ; DATA XREF: dseg14:0215↑o
                                        ; dseg14:025D↑o
asc_26271       db '      *   ',0       ; DATA XREF: dseg14:0219↑o
                                        ; dseg14:0261↑o
asc_2627C       db '     *    ',0       ; DATA XREF: dseg14:021D↑o
asc_26287       db '    *     ',0       ; DATA XREF: dseg14:0221↑o
                                        ; dseg14:0225↑o ...
asc_26292       db '   *****  ',0       ; DATA XREF: dseg14:0249↑o
asc_2629D       db '  *     * ',0       ; DATA XREF: dseg14:024D↑o
                                        ; dseg14:0251↑o
asc_262A8       db '   ****** ',0       ; DATA XREF: dseg14:0255↑o
asc_262B3       db '        * ',0       ; DATA XREF: dseg14:0259↑o
asc_262BE       db '     *      ',0     ; DATA XREF: dseg14:0265↑o
                                        ; dseg14:0269↑o ...
asc_262CB       db ' ********** ',0     ; DATA XREF: dseg14:0271↑o
asc_262D8       db '           ',0      ; DATA XREF: dseg14:0281↑o
                                        ; dseg14:0285↑o ...
asc_262E4       db ' ********* ',0      ; DATA XREF: dseg14:028D↑o
aSS_3           db '%s%s',0             ; DATA XREF: sub_1AC72+12A↑o
                                        ; sub_1AC72+185↑o
aSS_4           db '%s%s',0Dh,0         ; DATA XREF: sub_1AC72+1DF↑o
aPleaseAnswerTh db 0Dh,0Dh,'Please answer the above math question. We do this to make'
                                        ; DATA XREF: sub_1AC72+1F4↑o
                db ' sure that',0Dh,0
aYouAreOnTheOth db 'you are on the other end of the computer and not a script.',0Dh,0
                                        ; DATA XREF: sub_1AC72+200↑o
aAnswerTheQuest db 'Answer the question by typing AN answer. For example, for 2+2',0Dh
                                        ; DATA XREF: sub_1AC72+20C↑o
                db 0
aYouWouldEnterA db 'you would enter       AN 4',0Dh,0Dh,0
                                        ; DATA XREF: sub_1AC72+218↑o
                align 8
dseg14          ends

; Segment Number    : 15
; Alloc Size        : 00B6h
; Offset in the file: 39000h  Length: 00B6h
; Attributes  (0C21): DATA Pure DPL: 3
; ===========================================================================

; Segment type: Pure data
dseg15          segment para public 'DATA' use16
                assume cs:dseg15
                db  68h ; h
                db  69h ; i
                db  73h ; s
                db    0
                db  68h ; h
                db  65h ; e
                db  72h ; r
                db    0
unk_263E8       db  25h ; %             ; DATA XREF: sub_1AFF1+435↑o
                db  63h ; c
                db    0
unk_263EB       db  25h ; %             ; DATA XREF: sub_1B463+1EF↑o
                                        ; sub_1C07A+499↑o
                db  6Ch ; l
                db  64h ; d
                db    0
unk_263EF       db  25h ; %             ; DATA XREF: sub_1C07A+154↑o
                db  64h ; d
                db    0
unk_263F2       db  63h ; c             ; DATA XREF: sub_1C9D9+1E8↑o
                db  61h ; a
                db  73h ; s
                db    0
aSIsTheYearDAD  db '%s is the year %d A.D.',0Dh,0
                                        ; DATA XREF: sub_1D1B7+82↑o
aForSomeReasonY db 'For some reason you can',27h,'t search %s!',0Dh,0
                                        ; DATA XREF: sub_1D1B7+96↑o
aSIs            db '%s is ',0           ; DATA XREF: sub_1D2A3+12C↑o
aRightHere      db 'right here!',0Dh,0  ; DATA XREF: sub_1D2A3+140↑o
aDEast          db '%d east; ',0        ; DATA XREF: sub_1D2A3+16A↑o
aDWest          db '%d west; ',0        ; DATA XREF: sub_1D2A3+175↑o
aDNorth         db '%d north; ',0       ; DATA XREF: sub_1D2A3+18D↑o
aDSouth         db '%d south; ',0       ; DATA XREF: sub_1D2A3+198↑o
aForSomeReasonY_0 db 'For some reason,you can',27h,'t find %s!',0Dh,0
                                        ; DATA XREF: sub_1D2A3+1DC↑o
                align 10h
dseg15          ends

; Segment Number    : 16
; Alloc Size        : 0B41h
; Offset in the file: 39200h  Length: 0B41h
; Attributes  (0D21): DATA Pure Relocations DPL: 3
; ===========================================================================

; Segment type: Pure data
dseg16          segment para public 'DATA' use16
                assume cs:dseg16
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
off_26C70       dd aLookingAroundD      ; DATA XREF: sub_200EF+10↑o
                                        ; "looking around dumbfounded."
                dd aSniffingAround      ; "sniffing around."
                dd aGrunting            ; "grunting."
                dd aLookingAtYou        ; "looking at you."
                dd aGaspingInAmaze      ; "gasping in amazement!"
                dd aWonderingWhatY      ; "wondering what your doing."
                dd aLookingAtYouSt      ; "looking at you stupidly."
                dd aLookingAwefull      ; "looking awefully sad."
                dd aLookingVeryHap      ; "looking very happy."
                dd aSmilingAtYou        ; "smiling at you."
                dd aSayingWhat          ; "saying: what?"
                dd aSittingDown         ; "sitting down."
                dd aCrying              ; "crying."
                dd aPleadingWithYo      ; "pleading with you."
                dd aBeggingYou          ; "begging you."
                dd aTryingToMakeFr      ; "trying to make friends with you."
                dd aLookingAwayFro      ; "looking away from you."
                dd aThinking            ; "thinking."
                dd aMakingStrangeN      ; "making strange noises."
                dd aSingingAStrang      ; "singing a strange song."
                dd aLaughing            ; "laughing."
aCCC_1          db '%c%c%c',0           ; DATA XREF: sub_1E0E0+79↑o
                                        ; sub_1E0E0+B4↑o ...
                align 2
aSD_0           db '%s-%d',0            ; DATA XREF: sub_1E0E0+23A↑o
                                        ; sub_1E0E0+5FE↑o
aSSaysAwaitingY db '%s says: Awaiting your command, Master %s.',0Dh,0
                                        ; DATA XREF: sub_1EA0C+472↑o
                                        ; sub_2058A+4C0↑o
aGet_0          db 'get',0              ; DATA XREF: sub_1EEDB+68↑o
aDrop           db 'drop',0             ; DATA XREF: sub_1EFB5+4D↑o
aS_7            db '%s ',0              ; DATA XREF: sub_1F07A+154↑o
aSs_0           db '%ss ',0             ; DATA XREF: sub_1F07A+187↑o
aS_8            db '%s, ',0             ; DATA XREF: sub_1F07A+1BA↑o
aS_9            db '%s!',0Dh,0          ; DATA XREF: sub_1F07A+1E9↑o
aSSsSS_0        db '%s %ss: %s, %s!',0Dh,0
                                        ; DATA XREF: sub_1F2CD+F4↑o
aSHasAnyoneSeen db '%s: Has anyone seen %s?',0Dh,0
                                        ; DATA XREF: sub_1F2CD+123↑o
aSScreamsGetAwa db '%s screams: Get away from me, %s!!!',0Dh,0
                                        ; DATA XREF: sub_1F53F+1AD↑o
aTheSSYou       db 'The %s %s you!',0Dh,0
                                        ; DATA XREF: sub_1F755+13A↑o
aTheSSS         db 'The %s %s %s!',0Dh,0
                                        ; DATA XREF: sub_1F755+1A6↑o
aWield_0        db 'wield',0            ; DATA XREF: sub_1F755+2D7↑o
aRemove         db 'remove',0           ; DATA XREF: sub_1FA9B+FE↑o
aWear           db 'wear',0             ; DATA XREF: sub_1FBDE+122↑o
aConvert_1      db 'convert',0          ; DATA XREF: sub_1FD81+22↑o
                                        ; sub_1FD81+8E↑o
aSkull          db 'skull',0            ; DATA XREF: sub_1FD81+36↑o
aCast           db 'cast',0             ; DATA XREF: sub_1FE75+53↑o
aSGetsAConfused db '%s gets a confused look on %s face.',0Dh,0
                                        ; DATA XREF: sub_1FF54+A6↑o
aHis_0          db 'his',0
aHer_0          db 'her',0
aLookingAroundD db 'looking around dumbfounded.',0
                                        ; DATA XREF: dseg16:off_26C70↑o
aSniffingAround db 'sniffing around.',0 ; DATA XREF: dseg16:07D4↑o
aGrunting       db 'grunting.',0        ; DATA XREF: dseg16:07D8↑o
aLookingAtYou   db 'looking at you.',0  ; DATA XREF: dseg16:07DC↑o
aGaspingInAmaze db 'gasping in amazement!',0
                                        ; DATA XREF: dseg16:07E0↑o
aWonderingWhatY db 'wondering what your doing.',0
                                        ; DATA XREF: dseg16:07E4↑o
aLookingAtYouSt db 'looking at you stupidly.',0
                                        ; DATA XREF: dseg16:07E8↑o
aLookingAwefull db 'looking awefully sad.',0
                                        ; DATA XREF: dseg16:07EC↑o
aLookingVeryHap db 'looking very happy.',0
                                        ; DATA XREF: dseg16:07F0↑o
aSmilingAtYou   db 'smiling at you.',0  ; DATA XREF: dseg16:07F4↑o
aSayingWhat     db 'saying: what?',0    ; DATA XREF: dseg16:07F8↑o
aSittingDown    db 'sitting down.',0    ; DATA XREF: dseg16:07FC↑o
aCrying         db 'crying.',0          ; DATA XREF: dseg16:0800↑o
aPleadingWithYo db 'pleading with you.',0
                                        ; DATA XREF: dseg16:0804↑o
aBeggingYou     db 'begging you.',0     ; DATA XREF: dseg16:0808↑o
aTryingToMakeFr db 'trying to make friends with you.',0
                                        ; DATA XREF: dseg16:080C↑o
aLookingAwayFro db 'looking away from you.',0
                                        ; DATA XREF: dseg16:0810↑o
aThinking       db 'thinking.',0        ; DATA XREF: dseg16:0814↑o
aMakingStrangeN db 'making strange noises.',0
                                        ; DATA XREF: dseg16:0818↑o
aSingingAStrang db 'singing a strange song.',0
                                        ; DATA XREF: dseg16:081C↑o
aLaughing       db 'laughing.',0        ; DATA XREF: dseg16:0820↑o
aSIsS           db '%s is %s',0Dh,0     ; DATA XREF: sub_200EF+68↑o
aSLaughsYouCanT db '%s laughs: You can',27h,'t fool me!!',0Dh,0
                                        ; DATA XREF: sub_201B3+A9↑o
aConv           db 'CONV',0             ; DATA XREF: sub_201B3+F9↑o
aEast_3         db 'east',0             ; DATA XREF: sub_201B3+21D↑o
aWest_3         db 'west',0             ; DATA XREF: sub_201B3+223↑o
aNorth_3        db 'north',0            ; DATA XREF: sub_201B3+27F↑o
aSouth_3        db 'south',0            ; DATA XREF: sub_201B3+285↑o
aPoint_0        db 'point',0            ; DATA XREF: sub_201B3+2AC↑o
aSIWillEscapeS  db '%s: I will escape, %s!',0Dh,0
                                        ; DATA XREF: sub_20AA2+95↑o
aSLeaveHimAlone db '%s: Leave him alone, %s!',0Ah,0
                                        ; DATA XREF: sub_20BC8+1C6↑o
                align 10h
dseg16          ends

; Segment Number    : 17
; Alloc Size        : 0008h
; Offset in the file: 39E00h  Length: 0008h
; Attributes  (0C21): DATA Pure DPL: 3
; ===========================================================================

; Segment type: Pure data
dseg17          segment para public 'DATA' use16
                assume cs:dseg17
                db  68h ; h
                db  69h ; i
                db  73h ; s
                db    0
                db  68h ; h
                db  65h ; e
                db  72h ; r
                db    0
                align 10h
dseg17          ends

; Segment Number    : 18
; Alloc Size        : 12E7h
; Offset in the file: 3A000h  Length: 12E7h
; Attributes  (0C21): DATA Pure DPL: 3
; ===========================================================================

; Segment type: Pure data
dseg18          segment para public 'DATA' use16
                assume cs:dseg18
word_27000      dw 0                    ; DATA XREF: sub_21184+A↑r
                                        ; sub_2121B+14↑r ...
word_27002      dw 0                    ; DATA XREF: sub_216A2+41↑r
                                        ; sub_216A2+4B↑r ...
                db 0FEh
                db    1
                db 0FEh
                db    1
                db 0FEh
                db    1
                db 0FEh
                db    1
                db 0FEh
                db    1
                db 0FEh
                db    1
                db 0FEh
                db    1
                db 0FEh
                db    1
                db 0FEh
                db    1
                db 0FEh
                db    1
                db    0
                db    0
                db  14h
                db    0
                db  28h ; (
                db    0
                db  3Ch ; <
                db    0
                db  50h ; P
                db    0
                db  64h ; d
                db    0
                db  78h ; x
                db    0
                db  8Ch
                db    0
                db 0A0h
                db    0
                db 0B4h
                db    0
unk_2702C       db    0                 ; DATA XREF: sub_2121B+2D↑o
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
aRipNotInitiali db 'RIP NOT INITIALIZED! USE INITRIP!',0
                                        ; DATA XREF: sub_21184+12↑o
aS_10           db '%s',0Dh,0           ; DATA XREF: sub_21184+2D↑o
a0123456789abcd db '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ',0
aRipInitialized db 'RIP INITIALIZED MORE THAN ONCE!',0
                                        ; DATA XREF: sub_2121B+1C↑o
asc_281D3       db '!|*',0              ; DATA XREF: sub_212A7+7↑o
aWSSSS1S        db '!|w%s%s%s%s1%s',0   ; DATA XREF: sub_212BA+59↑o
aD_4            db '%d',0               ; DATA XREF: sub_212BA+1F↑o
aVSSSS          db '!|v%s%s%s%s',0      ; DATA XREF: sub_21332+48↑o
a1k             db '!|1K',0             ; DATA XREF: sub_21399+7↑o
a1uSSSS0000SS   db '!|1U%s%s%s%s0000<>%s<>%s',0
                                        ; DATA XREF: sub_213AC+56↑o
a1b3c0k02010q03 db '!|1B3C0K02010Q030E000F08%s0000000000003C|Y00000100',0
                                        ; DATA XREF: sub_21423+3D↑o
a1b00000200lc03 db '!|1B00000200LC030F000F08%s00000F07000000',0
                                        ; DATA XREF: sub_21423+4D↑o
a1b0a0a02030202 db '!|1B0A0A020302020E000F08%s00000000000008',0
                                        ; DATA XREF: sub_21423+5D↑o
aBSSSS          db '!|B%s%s%s%s',0      ; DATA XREF: sub_214A0+48↑o
aRSSSS          db '!|R%s%s%s%s',0      ; DATA XREF: sub_21507+48↑o
aMSS            db '!|m%s%s',0          ; DATA XREF: sub_2156E+32↑o
aTS             db '!|T%s',0            ; DATA XREF: sub_215BF+22↑o
aYSSS00         db '!|Y%s%s%s00',0      ; DATA XREF: sub_21600+3D↑o
aCS             db '!|c%s',0            ; DATA XREF: sub_2165C+27↑o
aSM_0           db '%s^M',0             ; DATA XREF: sub_216A2+22↑o
aRmf            db '$RMF$',0            ; DATA XREF: sub_21712+B↑o
a1C0000S        db '!|1%c0000%s',0      ; DATA XREF: sub_21751+24↑o
                align 10h
dseg18          ends

; Segment Number    : 19
; Alloc Size        : 2F5Eh
; Offset in the file: 3B400h  Length: 2F5Eh
; Attributes  (0D21): DATA Pure Relocations DPL: 3
; ===========================================================================

; Segment type: Pure data
dseg19          segment para public 'DATA' use16
                assume cs:dseg19
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
word_282F6      dw 0                    ; DATA XREF: sub_1EA0C+47↑w
                                        ; sub_2050E+25↑r ...
                db    0
                db    0
                db    0
                db    0
                db    1
                db    0
                db 0FFh
                db 0FFh
                db    1
                db    0
                db 0FFh
                db 0FFh
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
aV315           db 'V3.15',0            ; DATA XREF: sttrou+196↑o
                                        ; sub_2B24+1D1↑o ...
                dd aNorth_5             ; "north"
                dd aSouth_4             ; "south"
                dd aEast_4              ; "east"
                dd aWest_4              ; "west"
                db    3
                db    0
                db  74h ; t
                db  72h ; r
                db  61h ; a
                db  64h ; d
                db  65h ; e
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_145A4
                db 0D6h
                db    4
                db    4
                db    0
                db  6Dh ; m
                db  61h ; a
                db  69h ; i
                db  6Eh ; n
                db  74h ; t
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_1484F
                db 0D7h
                db    4
                db    5
                db    0
                db  64h ; d
                db  61h ; a
                db  72h ; r
                db  6Bh ; k
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_148FB
                db 0D8h
                db    4
                db    6
                db    0
                db  67h ; g
                db  61h ; a
                db  74h ; t
                db  65h ; e
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_152D8
                db 0D9h
                db    4
                db    7
                db    0
                db  69h ; i
                db  74h ; t
                db  65h ; e
                db  6Dh ; m
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_14987
                db 0DAh
                db    4
                db    8
                db    0
                db  73h ; s
                db  70h ; p
                db  65h ; e
                db  6Ch ; l
                db  6Ch ; l
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_144A8
                db 0DBh
                db    4
                db    9
                db    0
                db  62h ; b
                db  61h ; a
                db  72h ; r
                db  72h ; r
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_143B3
                db 0DCh
                db    4
                db  0Ah
                db    0
                db  65h ; e
                db  64h ; d
                db  69h ; i
                db  74h ; t
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_14DA8
                db 0DDh
                db    4
                db  0Bh
                db    0
                db  72h ; r
                db  65h ; e
                db  70h ; p
                db  6Fh ; o
                db  72h ; r
                db  74h ; t
                db    0
                db    0
                db    0
                db    0
                dd sub_140DB
                db 0DEh
                db    4
                db  0Ch
                db    0
                db  6Bh ; k
                db  69h ; i
                db  6Ch ; l
                db  6Ch ; l
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_14261
                db 0DFh
                db    4
                db  0Dh
                db    0
                db  77h ; w
                db  61h ; a
                db  6Ch ; l
                db  6Bh ; k
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_14BBF
                db 0E1h
                db    4
                db  0Eh
                db    0
                db  73h ; s
                db  61h ; a
                db  6Ch ; l
                db  65h ; e
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_1407B
                db 0E0h
                db    4
                db  0Fh
                db    0
                db  72h ; r
                db  65h ; e
                db  73h ; s
                db  65h ; e
                db  74h ; t
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_14C63
                db 0E2h
                db    4
                db  10h
                db    0
                db  64h ; d
                db  65h ; e
                db  73h ; s
                db  63h ; c
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_151BF
                db  0Ah
                db    5
                db  11h
                db    0
                db  72h ; r
                db  65h ; e
                db  6Eh ; n
                db  65h ; e
                db  77h ; w
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_1526C
                db  0Bh
                db    5
                db  12h
                db    0
                db  62h ; b
                db  6Fh ; o
                db  6Fh ; o
                db  73h ; s
                db  74h ; t
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_154CC
                db  14h
                db    5
                db  3Fh ; ?
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_12E92
                db    0
                db    0
                db    0
                db    0
                db 0FFh
                db 0FFh
                db  61h ; a
                db  70h ; p
                db  70h ; p
                db  72h ; r
                db  61h ; a
                db  69h ; i
                db  73h ; s
                db  65h ; e
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_DE45
                align 8
                db  98h
                db    4
                db  61h ; a
                db  74h ; t
                db  74h ; t
                db  61h ; a
                db  63h ; c
                db  6Bh ; k
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_C6BB
                db    0
                db    0
                db    0
                db    0
                db 0FFh
                db 0FFh
                db  62h ; b
                db  6Ch ; l
                db  75h ; u
                db  72h ; r
                db  62h ; b
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_1356C
                db    0
                db    0
                db    0
                db    0
                db 0C2h
                db    4
                db  62h ; b
                db  75h ; u
                db  79h ; y
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_E3E5
                db    0
                db    0
                db    0
                db    0
                db  99h
                db    4
                db  63h ; c
                db  61h ; a
                db  73h ; s
                db  74h ; t
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_1AFF1
                align 8
                db  9Ah
                db    4
                db  63h ; c
                db  68h ; h
                db  65h ; e
                db  63h ; c
                db  6Bh ; k
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_C6BB
                db    0
                db    0
                db    0
                db    0
                db 0FFh
                db 0FFh
                db  63h ; c
                db  6Ch ; l
                db  6Fh ; o
                db  73h ; s
                db  65h ; e
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_10325
                db    0
                db    0
                db    0
                db    0
                db 0AEh
                db    4
                db  63h ; c
                db  6Fh ; o
                db  6Dh ; m
                db  62h ; b
                db  61h ; a
                db  74h ; t
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_C376
                db    1
                db    0
                db    0
                db    0
                db  9Bh
                db    4
                db  63h ; c
                db  6Fh ; o
                db  6Eh ; n
                db  76h ; v
                db  65h ; e
                db  72h ; r
                db  74h ; t
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_10BE0
                db    1
                db    0
                db    0
                db    0
                db  9Ch
                db    4
                db  63h ; c
                db  75h ; u
                db  72h ; r
                db  65h ; e
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_13B61
                db    0
                db    0
                db    0
                db    0
                db    0
                db    5
                db  64h ; d
                db  65h ; e
                db  61h ; a
                db  66h ; f
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_13610
                db    0
                db    0
                db    0
                db    0
                db 0C3h
                db    4
                db  64h ; d
                db  65h ; e
                db  70h ; p
                db  6Fh ; o
                db  73h ; s
                db  69h ; i
                db  74h ; t
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_F8FE
                db    0
                db    0
                db    0
                db    0
                db  9Dh
                db    4
                db  64h ; d
                db  69h ; i
                db  73h ; s
                db  70h ; p
                db  65h ; e
                db  6Ch ; l
                db  6Ch ; l
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_11208
                align 8
                db  9Eh
                db    4
                db  64h ; d
                db  72h ; r
                db  69h ; i
                db  6Eh ; n
                db  6Bh ; k
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_1123E
                db    0
                db    0
                db    0
                db    0
                db  9Fh
                db    4
                db  64h ; d
                db  72h ; r
                db  6Fh ; o
                db  70h ; p
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_B378
                db    0
                db    0
                db    0
                db    0
                db  7Eh ; ~
                db    4
                db  65h ; e
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_8B00
                db    0
                db    0
                db    0
                db    0
                db 0FFh
                db 0FFh
                db  65h ; e
                db  61h ; a
                db  73h ; s
                db  74h ; t
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_8B00
                align 8
                db 0FFh
                db 0FFh
                db  65h ; e
                db  78h ; x
                db  69h ; i
                db  74h ; t
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_93D8
                db    0
                db    0
                db    0
                db    0
                db 0FFh
                db 0FFh
                db  66h ; f
                db  69h ; i
                db  78h ; x
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_E15F
                db    0
                db    0
                db    0
                db    0
                db 0A0h
                db    4
                db  67h ; g
                db  65h ; e
                db  74h ; t
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_B7E3
                db    1
                db    0
                db    0
                db    0
                db 0A1h
                db    4
                db  67h ; g
                db  69h ; i
                db  76h ; v
                db  65h ; e
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_CA86
                align 8
                db 0FCh
                db    4
                db  68h ; h
                db  65h ; e
                db  61h ; a
                db  6Ch ; l
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_10FDD
                db    1
                db    0
                db    0
                db    0
                db 0A2h
                db    4
                db  68h ; h
                db  65h ; e
                db  6Ch ; l
                db  70h ; p
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_12E92
                db    0
                db    0
                db    0
                db    0
                db 0FFh
                db 0FFh
                db  68h ; h
                db  69h ; i
                db  67h ; g
                db  68h ; h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_12D5E
                db    0
                db    0
                db    0
                db    0
                db 0FFh
                db 0FFh
                db  68h ; h
                db  69h ; i
                db  74h ; t
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_C6BB
                align 8
                db 0FFh
                db 0FFh
                db  69h ; i
                db  6Eh ; n
                db  76h ; v
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_AD59
                db    0
                db    0
                db    0
                db    0
                db 0A3h
                db    4
                db  69h ; i
                db  74h ; t
                db  65h ; e
                db  6Dh ; m
                db  73h ; s
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_B091
                db    0
                db    0
                db    0
                db    0
                db 0A4h
                db    4
                db  6Ah ; j
                db  61h ; a
                db  62h ; b
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_C6BB
                db    0
                db    0
                db    0
                db    0
                db 0FFh
                db 0FFh
                db  6Bh ; k
                db  69h ; i
                db  63h ; c
                db  6Bh ; k
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_C6BB
                align 8
                db 0FFh
                db 0FFh
                db  6Ch ; l
                db  69h ; i
                db  73h ; s
                db  74h ; t
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_D12D
                db    0
                db    0
                db    0
                db    0
                db 0A5h
                db    4
                db  6Ch ; l
                db  6Fh ; o
                db  63h ; c
                db  6Bh ; k
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_10596
                db    0
                db    0
                db    0
                db    0
                db 0A6h
                db    4
                db  6Ch ; l
                db  6Fh ; o
                db  6Fh ; o
                db  6Bh ; k
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_955B
                db    0
                db    0
                db    0
                db    0
                db 0A8h
                db    4
                db  6Dh ; m
                db  61h ; a
                db  70h ; p
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_9325
                align 8
                db 0A9h
                db    4
                db  6Dh ; m
                db  61h ; a
                db  72h ; r
                db  6Bh ; k
                db  64h ; d
                db  6Fh ; o
                db  77h ; w
                db  6Eh ; n
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_F5E3
                db    0
                db    0
                db    0
                db    0
                db 0AAh
                db    4
                db  6Dh ; m
                db  61h ; a
                db  72h ; r
                db  6Bh ; k
                db  75h ; u
                db  70h ; p
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_F47C
                db    0
                db    0
                db    0
                db    0
                db 0ABh
                db    4
                db  6Dh ; m
                db  65h ; e
                db  6Dh ; m
                db  6Fh ; o
                db  72h ; r
                db  69h ; i
                db  7Ah ; z
                db  65h ; e
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_1AEB0
                db    0
                db    0
                db    0
                db    0
                db 0ACh
                db    4
                db  6Eh ; n
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_8B00
                align 8
                db 0FFh
                db 0FFh
                db  6Eh ; n
                db  6Fh ; o
                db  72h ; r
                db  74h ; t
                db  68h ; h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_8B00
                db    0
                db    0
                db    0
                db    0
                db 0FFh
                db 0FFh
                db  6Fh ; o
                db  70h ; p
                db  65h ; e
                db  6Eh ; n
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_1008D
                db    0
                db    0
                db    0
                db    0
                db 0ADh
                db    4
                db  70h ; p
                db  6Fh ; o
                db  69h ; i
                db  6Eh ; n
                db  74h ; t
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_20DF0
                db    0
                db    0
                db    0
                db    0
                db 0AFh
                db    4
                db  70h ; p
                db  75h ; u
                db  6Eh ; n
                db  63h ; c
                db  68h ; h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_C6BB
                align 8
                db 0FFh
                db 0FFh
                db  71h ; q
                db  75h ; u
                db  69h ; i
                db  74h ; t
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_93D8
                db    0
                db    0
                db    0
                db    0
                db 0FFh
                db 0FFh
                db  72h ; r
                db  65h ; e
                db  61h ; a
                db  64h ; d
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_1DBD0
                db    0
                db    0
                db    0
                db    0
                db 0B0h
                db    4
                db  72h ; r
                db  65h ; e
                db  6Dh ; m
                db  6Fh ; o
                db  76h ; v
                db  65h ; e
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_D66C
                db    0
                db    0
                db    0
                db    0
                db 0B1h
                db    4
                db  72h ; r
                db  65h ; e
                db  70h ; p
                db  6Fh ; o
                db  72h ; r
                db  74h ; t
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_EBCA
                align 8
                db 0B2h
                db    4
                db  72h ; r
                db  65h ; e
                db  73h ; s
                db  65h ; e
                db  74h ; t
                db  72h ; r
                db  69h ; i
                db  70h ; p
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_3352
                db    0
                db    0
                db    0
                db    0
                db 0FFh
                db 0FFh
                db  72h ; r
                db  65h ; e
                db  73h ; s
                db  73h ; s
                db  75h ; u
                db  72h ; r
                db  65h ; e
                db  63h ; c
                db  74h ; t
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_FD4D
                db    0
                db    0
                db    0
                db    0
                db 0B4h
                db    4
                db  72h ; r
                db  69h ; i
                db  70h ; p
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_3A3B
                db    0
                db    0
                db    0
                db    0
                db 0F2h
                db    4
                db  73h ; s
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_8B00
                align 8
                db 0FFh
                db 0FFh
                db  73h ; s
                db  61h ; a
                db  79h ; y
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_FC62
                db    1
                db    0
                db    0
                db    0
                db 0FFh
                db 0FFh
                db  73h ; s
                db  63h ; c
                db  61h ; a
                db  6Eh ; n
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_13C73
                db    0
unk_28A59       db    0                 ; DATA XREF: sub_3A3B+8D↑o
                db    0
                db    0
                db 0FFh
                db 0FFh
                db  73h ; s
                db  63h ; c
                db  6Fh ; o
                db  72h ; r
                db  65h ; e
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_136B4
                db    0
                db    0
                db    0
                db    0
                db 0B3h
                db    4
                db  73h ; s
                db  63h ; c
                db  72h ; r
                db  61h ; a
                db  74h ; t
                db  63h ; c
                db  68h ; h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_C6BB
                align 8
                db 0FFh
                db 0FFh
                db  73h ; s
                db  63h ; c
                db  72h ; r
                db  65h ; e
                db  61h ; a
                db  6Dh ; m
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_FC62
                db    1
                db    0
                db    0
                db    0
                db 0FFh
                db 0FFh
                db  73h ; s
                db  65h ; e
                db  63h ; c
                db  75h ; u
                db  72h ; r
                db  65h ; e
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_125A2
                db    0
                db    0
                db    0
                db    0
                db  7Bh ; {
                db    4
                db  73h ; s
                db  65h ; e
                db  6Ch ; l
                db  6Ch ; l
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_D871
                db    0
                db    0
                db    0
                db    0
                db 0B5h
                db    4
                db  73h ; s
                db  68h ; h
                db  6Fh ; o
                db  75h ; u
                db  74h ; t
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_FC62
                db    1
                db    0
                db    0
                db    0
                db 0FFh
                db 0FFh
                db  73h ; s
                db  69h ; i
                db  67h ; g
                db  6Eh ; n
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_10E58
                db    0
                db    0
                db    0
                db    0
                db 0B8h
                db    4
                db  73h ; s
                db  69h ; i
                db  6Eh ; n
                db  67h ; g
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_FC62
                db    1
                db    0
                db    0
                db    0
                db 0FFh
                db 0FFh
                db  73h ; s
                db  6Ch ; l
                db  61h ; a
                db  70h ; p
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_C6BB
                db    0
                db    0
                db    0
                db    0
                db 0FFh
                db 0FFh
                db  73h ; s
                db  6Fh ; o
                db  75h ; u
                db  74h ; t
                db  68h ; h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_8B00
                align 8
                db 0FFh
                db 0FFh
                db  73h ; s
                db  74h ; t
                db  61h ; a
                db  74h ; t
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_A9AF
                db    0
                db    0
                db    0
                db    0
                db 0B9h
                db    4
                db  73h ; s
                db  74h ; t
                db  65h ; e
                db  61h ; a
                db  6Ch ; l
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_11A2F
                db    0
                db    0
                db    0
                db    0
                db  77h ; w
                db    4
                db  73h ; s
                db  74h ; t
                db  6Fh ; o
                db  63h ; c
                db  6Bh ; k
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_EF51
                db    0
                db    0
                db    0
                db    0
                db 0BAh
                db    4
                db  73h ; s
                db  74h ; t
                db  6Fh ; o
                db  72h ; r
                db  65h ; e
                db  73h ; s
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_12B3F
                align 8
                db  75h ; u
                db    4
                db  73h ; s
                db  79h ; y
                db  73h ; s
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_13DE0
                align 4
                db    1
                db    0
                db 0FFh
                db 0FFh
                db  74h ; t
                db  61h ; a
                db  6Bh ; k
                db  65h ; e
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_B7E3
                db    1
                db    0
                db    0
                db    0
                db 0FFh
                db 0FFh
                db  74h ; t
                db  65h ; e
                db  6Ch ; l
                db  65h ; e
                db  70h ; p
                db  61h ; a
                db  74h ; t
                db  68h ; h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_12484
                db    1
                db    0
                db    0
                db    0
                db 0FFh
                db 0FFh
                db  74h ; t
                db  68h ; h
                db  72h ; r
                db  6Fh ; o
                db  77h ; w
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_BD0B
                align 8
                db 0BBh
                db    4
                db  74h ; t
                db  72h ; r
                db  61h ; a
                db  76h ; v
                db  65h ; e
                db  6Ch ; l
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_1158D
                db    0
                db    0
                db    0
                db    0
                db 0A7h
                db    4
                db  75h ; u
                db  6Eh ; n
                db  6Ch ; l
                db  6Fh ; o
                db  63h ; c
                db  6Bh ; k
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_108B0
                db    0
                db    0
                db    0
                db    0
                db 0BCh
                db    4
                db  75h ; u
                db  6Eh ; n
                db  73h ; s
                db  65h ; e
                db  63h ; c
                db  75h ; u
                db  72h ; r
                db  65h ; e
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_1282B
                db    0
                db    0
                db    0
                db    0
                db  7Ch ; |
                db    4
                db  75h ; u
                db  6Eh ; n
                db  73h ; s
                db  74h ; t
                db  6Fh ; o
                db  63h ; c
                db  6Bh ; k
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_F198
                align 8
                db 0BDh
                db    4
                db  77h ; w
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_8B00
                db    0
                db    0
                db    0
                db    0
                db 0FFh
                db 0FFh
                db  77h ; w
                db  65h ; e
                db  61h ; a
                db  72h ; r
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_D230
                db    0
                db    0
                db    0
                db    0
                db 0BEh
                db    4
                db  77h ; w
                db  65h ; e
                db  73h ; s
                db  74h ; t
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_8B00
                db    0
                db    0
                db    0
                db    0
                db 0FFh
                db 0FFh
                db  77h ; w
                db  68h ; h
                db  6Fh ; o
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_A259
                align 8
                db 0BFh
                db    4
                db  77h ; w
                db  69h ; i
                db  65h ; e
                db  6Ch ; l
                db  64h ; d
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_CBFE
                db    1
                db    0
                db    0
                db    0
                db 0C0h
                db    4
                db  77h ; w
                db  69h ; i
                db  74h ; t
                db  68h ; h
                db  64h ; d
                db  72h ; r
                db  61h ; a
                db  77h ; w
                db  6Ch ; l
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_F74A
                db    0
                db    0
                db    0
                db    0
                db 0C1h
                db    4
                db  78h ; x
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_93D8
                db    0
                db    0
                db    0
                db    0
                db 0FFh
                db 0FFh
                db  79h ; y
                db  65h ; e
                db  6Ch ; l
                db  6Ch ; l
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd sub_FC62
                db    1
                db    0
                db    0
                db    0
                db 0FFh
                db 0FFh
                db  20h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  0Fh
                db    0
                db    9
                db    0
                db    8
                db    0
                db  0Eh
                db    0
                db  0Fh
                db    0
                db  10h
                db    0
                db  12h
                db    0
                db 0C8h
                db    0
                db 0FAh
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  20h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  14h
                db    0
                db  0Ch
                db    0
                db  0Dh
                db    0
                db  11h
                db    0
                db  11h
                db    0
                db  0Eh
                db    0
                db  1Eh
                db    0
                db 0EEh
                db    2
                db  96h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  20h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  0Eh
                db    0
                db  11h
                db    0
                db  11h
                db    0
                db  0Dh
                db    0
                db  0Eh
                db    0
                db  0Fh
                db    0
                db  17h
                db    0
                db 0E8h
                db    3
                db  96h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  20h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  17h
                db    0
                db  0Ch
                db    0
                db  0Eh
                db    0
                db  14h
                db    0
                db  13h
                db    0
                db    9
                db    0
                db  28h ; (
                db    0
                db 0EEh
                db    2
                db 0C8h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  20h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  12h
                db    0
                db  17h
                db    0
                db  14h
                db    0
                db  10h
                db    0
                db  0Fh
                db    0
                db  14h
                db    0
                db  1Ch
                db    0
                db 0B0h
                db    4
                db 0FAh
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  30h ; 0
                db  75h ; u
                db    0
                db    0
                db 0A0h
                db  86h
                db    1
                db    0
                db  50h ; P
                db  34h ; 4
                db    3
                db    0
                db  20h
                db  30h ; 0
                db    5
                db    0
                db  60h ; `
                db  3Dh ; =
                db    8
                db    0
                db  60h ; `
                db 0AEh
                db  0Ah
                db    0
                db 0D0h
                db  30h ; 0
                db  0Eh
                db    0
                db 0E0h
                db 0FDh
                db  1Ch
                db    0
                db  20h
                db  0Bh
                db  20h
                db    0
                db 0C0h
                db 0C6h
                db  2Dh ; -
                db    0
                db    2
                db    0
                db    2
                db    0
                db    3
                db    0
                db    3
                db    0
                db    3
                db    0
                db    4
                db    0
                db    4
                db    0
                db    4
                db    0
                db    5
                db    0
                db    6
                db    0
                db    2
                db    0
                db    3
                db    0
                db    3
                db    0
                db    3
                db    0
                db    4
                db    0
                db    4
                db    0
                db    4
                db    0
                db    4
                db    0
                db    4
                db    0
                db    5
                db    0
                db    2
                db    0
                db    2
                db    0
                db    2
                db    0
                db    2
                db    0
                db    2
                db    0
                db    3
                db    0
                db    3
                db    0
                db    3
                db    0
                db    3
                db    0
                db    4
                db    0
                db    2
                db    0
                db    3
                db    0
                db    4
                db    0
                db    5
                db    0
                db    6
                db    0
                db    7
                db    0
                db    8
                db    0
                db    9
                db    0
                db  0Ah
                db    0
                db  0Bh
                db    0
                db    3
                db    0
                db    3
                db    0
                db    4
                db    0
                db    4
                db    0
                db    6
                db    0
                db    7
                db    0
                db    7
                db    0
                db    8
                db    0
                db    8
                db    0
                db    9
                db    0
                db    2
                db    0
                db    2
                db    0
                db    2
                db    0
                db    2
                db    0
                db    2
                db    0
                db    3
                db    0
                db    3
                db    0
                db    3
                db    0
                db    3
                db    0
                db    4
                db    0
                db    3
                db    0
                db    3
                db    0
                db    4
                db    0
                db    5
                db    0
                db    6
                db    0
                db    7
                db    0
                db    8
                db    0
                db    8
                db    0
                db    8
                db    0
                db    9
                db    0
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db    4
                db    0
                db    3
                db    0
                db  15h
                db    0
                db 0FFh
                db 0FFh
                db    5
                db    0
                db    6
                db    0
                db    8
                db    0
                db 0FFh
                db 0FFh
                db  40h ; @
                db  9Ch
                db    0
                db    0
                db  80h
                db  38h ; 8
                db    1
                db    0
                db  10h
                db  98h
                db    2
                db    0
                db 0D0h
                db  6Ch ; l
                db    4
                db    0
                db  90h
                db  41h ; A
                db    6
                db    0
                db  10h
                db 0EBh
                db    9
                db    0
                db  90h
                db  94h
                db  0Dh
                db    0
                db 0E0h
                db 0C8h
                db  10h
                db    0
                db  60h ; `
                db  18h
                db  23h ; #
                db    0
                db 0C0h
                db  65h ; e
                db  52h ; R
                db    0
                db    1
                db    0
                db    1
                db    0
                db    2
                db    0
                db    3
                db    0
                db    3
                db    0
                db    3
                db    0
                db    4
                db    0
                db    4
                db    0
                db    5
                db    0
                db    5
                db    0
                db    1
                db    0
                db    1
                db    0
                db    1
                db    0
                db    2
                db    0
                db    2
                db    0
                db    2
                db    0
                db    3
                db    0
                db    3
                db    0
                db    3
                db    0
                db    4
                db    0
                db    1
                db    0
                db    1
                db    0
                db    3
                db    0
                db    3
                db    0
                db    4
                db    0
                db    4
                db    0
                db    5
                db    0
                db    5
                db    0
                db    6
                db    0
                db    6
                db    0
                db    3
                db    0
                db    3
                db    0
                db    3
                db    0
                db    4
                db    0
                db    4
                db    0
                db    4
                db    0
                db    5
                db    0
                db    5
                db    0
                db    5
                db    0
                db    6
                db    0
                db    4
                db    0
                db    4
                db    0
                db    5
                db    0
                db    5
                db    0
                db    6
                db    0
                db    6
                db    0
                db    6
                db    0
                db    7
                db    0
                db    7
                db    0
                db    7
                db    0
                db    2
                db    0
                db    2
                db    0
                db    2
                db    0
                db    2
                db    0
                db    2
                db    0
                db    2
                db    0
                db    3
                db    0
                db    3
                db    0
                db    3
                db    0
                db    3
                db    0
                db    1
                db    0
                db    2
                db    0
                db    3
                db    0
                db    3
                db    0
                db    3
                db    0
                db    3
                db    0
                db    3
                db    0
                db    4
                db    0
                db    4
                db    0
                db    4
                db    0
                db 0FFh
                db 0FFh
                db    6
                db    0
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db  0Dh
                db    0
                db 0FFh
                db 0FFh
                db  14h
                db    0
                db 0FFh
                db 0FFh
                db  0Ah
                db    0
                db 0FFh
                db 0FFh
                db  40h ; @
                db  9Ch
                db    0
                db    0
                db  90h
                db  5Fh ; _
                db    1
                db    0
                db  30h ; 0
                db 0E6h
                db    2
                db    0
                db 0F0h
                db 0BAh
                db    4
                db    0
                db  80h
                db  8Bh
                db    8
                db    0
                db 0E0h
                db 0E6h
                db  0Bh
                db    0
                db  20h
                db 0D6h
                db  13h
                db    0
                db  20h
                db  0Bh
                db  20h
                db    0
                db 0F0h
                db  1Dh
                db  33h ; 3
                db    0
                db    0
                db  3Eh ; >
                db  49h ; I
                db    0
                db    1
                db    0
                db    1
                db    0
                db    1
                db    0
                db    2
                db    0
                db    2
                db    0
                db    2
                db    0
                db    2
                db    0
                db    2
                db    0
                db    2
                db    0
                db    2
                db    0
                db    3
                db    0
                db    3
                db    0
                db    4
                db    0
                db    5
                db    0
                db    6
                db    0
                db    6
                db    0
                db    6
                db    0
                db    7
                db    0
                db    7
                db    0
                db    7
                db    0
                db    2
                db    0
                db    2
                db    0
                db    3
                db    0
                db    3
                db    0
                db    4
                db    0
                db    4
                db    0
                db    5
                db    0
                db    5
                db    0
                db    6
                db    0
                db    7
                db    0
                db    1
                db    0
                db    1
                db    0
                db    1
                db    0
                db    2
                db    0
                db    2
                db    0
                db    2
                db    0
                db    2
                db    0
                db    2
                db    0
                db    3
                db    0
                db    3
                db    0
                db    1
                db    0
                db    1
                db    0
                db    1
                db    0
                db    2
                db    0
                db    2
                db    0
                db    2
                db    0
                db    2
                db    0
                db    3
                db    0
                db    3
                db    0
                db    3
                db    0
                db    5
                db    0
                db    6
                db    0
                db    7
                db    0
                db    8
                db    0
                db    9
                db    0
                db  0Ah
                db    0
                db  0Ah
                db    0
                db  0Ah
                db    0
                db  0Bh
                db    0
                db  0Ch
                db    0
                db    1
                db    0
                db    2
                db    0
                db    2
                db    0
                db    2
                db    0
                db    3
                db    0
                db    3
                db    0
                db    3
                db    0
                db    4
                db    0
                db    4
                db    0
                db    4
                db    0
                db    1
                db    0
                db    0
                db    0
                db    3
                db    0
                db  0Bh
                db    0
                db  0Ch
                db    0
                db    4
                db    0
                db    7
                db    0
                db    2
                db    0
                db    5
                db    0
                db  11h
                db    0
                db  50h ; P
                db 0C3h
                db    0
                db    0
                db 0D0h
                db 0FBh
                db    1
                db    0
                db    0
                db 0E2h
                db    4
                db    0
                db  30h ; 0
                db 0C8h
                db    7
                db    0
                db  60h ; `
                db  1Fh
                db  0Dh
                db    0
                db  30h ; 0
                db  8Ch
                db  11h
                db    0
                db  20h
                db  0Bh
                db  20h
                db    0
                db  50h ; P
                db  97h
                db  31h ; 1
                db    0
                db  30h ; 0
                db  24h ; $
                db  4Ch ; L
                db    0
                db 0C0h
                db  65h ; e
                db  52h ; R
                db    0
                db    8
                db    0
                db    8
                db    0
                db    9
                db    0
                db  0Ah
                db    0
                db  0Ch
                db    0
                db  0Fh
                db    0
                db  12h
                db    0
                db  14h
                db    0
                db  16h
                db    0
                db  19h
                db    0
                db    1
                db    0
                db    1
                db    0
                db    1
                db    0
                db    1
                db    0
                db    1
                db    0
                db    1
                db    0
                db    1
                db    0
                db    1
                db    0
                db    1
                db    0
                db    1
                db    0
                db    1
                db    0
                db    1
                db    0
                db    1
                db    0
                db    1
                db    0
                db    1
                db    0
                db    1
                db    0
                db    1
                db    0
                db    1
                db    0
                db    1
                db    0
                db    1
                db    0
                db    3
                db    0
                db    5
                db    0
                db    7
                db    0
                db    8
                db    0
                db  0Ah
                db    0
                db  0Ch
                db    0
                db  0Ch
                db    0
                db  0Fh
                db    0
                db  12h
                db    0
                db  14h
                db    0
                db    3
                db    0
                db    4
                db    0
                db    6
                db    0
                db    8
                db    0
                db  0Ah
                db    0
                db  0Bh
                db    0
                db  0Dh
                db    0
                db  0Fh
                db    0
                db  12h
                db    0
                db  14h
                db    0
                db    1
                db    0
                db    1
                db    0
                db    1
                db    0
                db    1
                db    0
                db    1
                db    0
                db    1
                db    0
                db    1
                db    0
                db    1
                db    0
                db    1
                db    0
                db    1
                db    0
                db    4
                db    0
                db    5
                db    0
                db    5
                db    0
                db    6
                db    0
                db    7
                db    0
                db    8
                db    0
                db    8
                db    0
                db  0Ah
                db    0
                db  0Ah
                db    0
                db  0Bh
                db    0
                db    1
                db    0
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db  13h
                db    0
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db  10h
                db    0
                db 0FFh
                db 0FFh
                db  0Eh
                db    0
                db 0FFh
                db 0FFh
                db  40h ; @
                db  9Ch
                db    0
                db    0
                db  90h
                db  5Fh ; _
                db    1
                db    0
                db  80h
                db  1Ah
                db    6
                db    0
                db    0
                db  17h
                db  11h
                db    0
                db  50h ; P
                db  2Dh ; -
                db  19h
                db    0
                db    0
                db  9Fh
                db  24h ; $
                db    0
                db  50h ; P
                db  97h
                db  31h ; 1
                db    0
                db    0
                db    9
                db  3Dh ; =
                db    0
                db  80h
                db  58h ; X
                db  4Fh ; O
                db    0
                db  80h
                db  8Dh
                db  5Bh ; [
                db    0
                db    3
                db    0
                db    3
                db    0
                db    3
                db    0
                db    4
                db    0
                db    4
                db    0
                db    4
                db    0
                db    4
                db    0
                db    4
                db    0
                db    4
                db    0
                db    5
                db    0
                db    6
                db    0
                db    6
                db    0
                db    7
                db    0
                db    7
                db    0
                db    8
                db    0
                db    8
                db    0
                db    8
                db    0
                db    9
                db    0
                db    9
                db    0
                db    9
                db    0
                db    5
                db    0
                db    6
                db    0
                db    6
                db    0
                db    7
                db    0
                db    7
                db    0
                db    8
                db    0
                db    8
                db    0
                db    9
                db    0
                db    9
                db    0
                db  0Ah
                db    0
                db    1
                db    0
                db    2
                db    0
                db    3
                db    0
                db    3
                db    0
                db    3
                db    0
                db    3
                db    0
                db    4
                db    0
                db    5
                db    0
                db    5
                db    0
                db    5
                db    0
                db    2
                db    0
                db    3
                db    0
                db    4
                db    0
                db    4
                db    0
                db    4
                db    0
                db    5
                db    0
                db    5
                db    0
                db    5
                db    0
                db    5
                db    0
                db    6
                db    0
                db    3
                db    0
                db    3
                db    0
                db    4
                db    0
                db    4
                db    0
                db    5
                db    0
                db    5
                db    0
                db    5
                db    0
                db    5
                db    0
                db    6
                db    0
                db    7
                db    0
                db    2
                db    0
                db    3
                db    0
                db    4
                db    0
                db    5
                db    0
                db    5
                db    0
                db    5
                db    0
                db    6
                db    0
                db    6
                db    0
                db    7
                db    0
                db    7
                db    0
                db    0
                db    0
                db    1
                db    0
                db    2
                db    0
                db    5
                db    0
                db    4
                db    0
                db    6
                db    0
                db    9
                db    0
                db  0Fh
                db    0
                db  11h
                db    0
                db  12h
                db    0
                db  4Ch ; L
                db  69h ; i
                db  67h ; g
                db  68h ; h
                db  74h ; t
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  1Eh
                db    0
                db    1
                db    0
                dd sub_1B6B4
                dd sub_1D9AA
                db  58h ; X
                db  1Bh
                db    0
                db    0
                db 0F4h
                db    1
                db    0
                db    0
                db 0FFh
                db 0FFh
                db  84h
                db    4
                db  44h ; D
                db  69h ; i
                db  73h ; s
                db  70h ; p
                db  65h ; e
                db  6Ch ; l
                db  6Ch ; l
                db  20h
                db  4Dh ; M
                db  61h ; a
                db  67h ; g
                db  69h ; i
                db  63h ; c
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  1Eh
                db    0
                db    1
                db    0
                dd sub_1B77D
                db    0
                db    0
                db    0
                db    0
                db  10h
                db  27h ; '
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db 0FFh
                db 0FFh
                db  85h
                db    4
                db  53h ; S
                db  65h ; e
                db  61h ; a
                db  72h ; r
                db  63h ; c
                db  68h ; h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  1Eh
                db    0
                db    2
                db    0
                dd sub_1D1B7
                db    0
                db    0
                db    0
                db    0
                db  10h
                db  27h ; '
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db 0FFh
                db 0FFh
                db  86h
                db    4
                db  44h ; D
                db  61h ; a
                db  72h ; r
                db  6Bh ; k
                db  6Eh ; n
                db  65h ; e
                db  73h ; s
                db  73h ; s
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  3Ch ; <
                db    0
                db    1
                db    0
                dd sub_1B986
                db    0
                db    0
                db    0
                db    0
                db 0C8h
                db  32h ; 2
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db 0FFh
                db 0FFh
                db  87h
                db    4
                db  49h ; I
                db  6Eh ; n
                db  76h ; v
                db  69h ; i
                db  73h ; s
                db  69h ; i
                db  62h ; b
                db  69h ; i
                db  6Ch ; l
                db  69h ; i
                db  74h ; t
                db  79h ; y
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  3Ch ; <
                db    0
                db    1
                db    0
                dd sub_1BA56
                dd sub_1DA5C
                db  10h
                db  27h ; '
                db    0
                db    0
                db 0E8h
                db    3
                db    0
                db    0
                db 0FFh
                db 0FFh
                db  80h
                db    4
                db  46h ; F
                db  69h ; i
                db  6Eh ; n
                db  64h ; d
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  1Eh
                db    0
                db    2
                db    0
                dd sub_1D2A3
                db    0
                db    0
                db    0
                db    0
                db  88h
                db  13h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db 0FFh
                db 0FFh
                db  93h
                db    4
                db  48h ; H
                db  69h ; i
                db  64h ; d
                db  65h ; e
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  1Eh
                db    0
                db    1
                db    0
                dd sub_1D4C7
                dd sub_1DB23
                db  98h
                db  3Ah ; :
                db    0
                db    0
                db 0DCh
                db    5
                db    0
                db    0
                db 0FFh
                db 0FFh
                db  94h
                db    4
                db  57h ; W
                db  72h ; r
                db  69h ; i
                db  74h ; t
                db  65h ; e
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  3Ch ; <
                db    0
                db    2
                db    0
                dd sub_1BF77
                db    0
                db    0
                db    0
                db    0
                db 0A0h
                db  86h
                db    1
                db    0
                db    0
                db    0
                db    0
                db    0
                db 0FFh
                db 0FFh
                db  81h
                db    4
                db  41h ; A
                db  72h ; r
                db  65h ; e
                db  61h ; a
                db  20h
                db  4Ch ; L
                db  6Fh ; o
                db  63h ; c
                db  6Bh ; k
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db 0F0h
                db    0
                db    1
                db    0
off_294A0       dd sub_1C854            ; DATA XREF: sub_A9AF+13↑o
                                        ; sub_A9AF+16B↑o ...
                align 8
                db  40h ; @
                db  0Dh
                db    3
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  8Ch
                db    4
                db  57h ; W
                db  61h ; a
                db  6Ch ; l
                db  6Ch ; l
                db  20h
                db  6Fh ; o
                db  66h ; f
                db  20h
                db  69h ; i
                db  63h ; c
                db  65h ; e
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  78h ; x
                db    0
                db    2
                db    0
                dd sub_1BB1E
                db    0
                db    0
                db    0
                db    0
                db  50h ; P
                db 0C3h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db 0FFh
                db 0FFh
                db  88h
                db    4
                db  49h ; I
                db  6Fh ; o
                db  6Eh ; n
                db  20h
                db  46h ; F
                db  6Fh ; o
                db  72h ; r
                db  63h ; c
                db  65h ; e
                db  20h
                db  46h ; F
                db  69h ; i
                db  65h ; e
                db  6Ch ; l
                db  64h ; d
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db 0F0h
                db    0
                db    2
                db    0
                dd sub_1BD2D
                db    0
                db    0
                db    0
                db    0
                db  80h
                db  1Ah
                db    6
                db    0
                db    0
                db    0
                db    0
                db    0
                db    1
                db    0
                db  89h
                db    4
                db  53h ; S
                db  75h ; u
                db  6Dh ; m
                db  6Dh ; m
                db  6Fh ; o
                db  6Eh ; n
                db  20h
                db  43h ; C
                db  72h ; r
                db  65h ; e
                db  61h ; a
                db  74h ; t
                db  75h ; u
                db  72h ; r
                db  65h ; e
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db 0F0h
                db    0
                db    2
                db    0
                dd sub_1C56E
                db    0
                db    0
                db    0
                db    0
                db  90h
                db 0D0h
                db    3
                db    0
                db    0
                db    0
                db    0
                db    0
                db 0FFh
                db 0FFh
                db  8Ah
                db    4
                db  43h ; C
                db  6Fh ; o
                db  6Dh ; m
                db  6Dh ; m
                db  61h ; a
                db  6Eh ; n
                db  64h ; d
                db  20h
                db  43h ; C
                db  72h ; r
                db  65h ; e
                db  61h ; a
                db  74h ; t
                db  75h ; u
                db  72h ; r
                db  65h ; e
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  3Ch ; <
                db    0
                db    2
                db    0
off_29578       dd sub_1C709            ; DATA XREF: sub_136B4+73↑o
                align 8
                db 0D0h
                db    7
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db 0FFh
                db 0FFh
                db  8Bh
                db    4
                db  50h ; P
                db  6Fh ; o
                db  69h ; i
                db  73h ; s
                db  6Fh ; o
                db  6Eh ; n
                db  20h
                db  42h ; B
                db  6Fh ; o
                db  6Ch ; l
                db  74h ; t
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  78h ; x
                db    0
                db    2
                db    0
off_295AE       dd sub_1D574            ; DATA XREF: sub_A9AF+15B↑o
                db    0
                db    0
                db    0
                db    0
                db  30h ; 0
                db  75h ; u
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db 0FFh
                db 0FFh
                db  95h
                db    4
                db  43h ; C
                db  6Ch ; l
                db  6Fh ; o
                db  6Eh ; n
                db  65h ; e
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  78h ; x
                db    0
                db    2
                db    0
                dd sub_1C07A
                db    0
                db    0
                db    0
                db    0
unk_295EC       db 0A0h                 ; DATA XREF: sub_A9AF+46↑o
                                        ; sub_A9AF+69↑o ...
                db  86h
                db    1
                db    0
                db    0
                db    0
                db    0
                db    0
unk_295F4       db  40h ; @             ; DATA XREF: sub_A9AF+4A↑o
                                        ; sub_A9AF+6D↑o ...
                db    0
                db  82h
                db    4
                db  45h ; E
                db  6Eh ; n
                db  63h ; c
                db  68h ; h
                db  61h ; a
                db  6Eh ; n
                db  74h ; t
                db  6Dh ; m
                db  65h ; e
                db  6Eh ; n
                db  74h ; t
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  78h ; x
                db    0
                db    2
                db    0
                dd sub_1B463
                db    0
                db    0
                db    0
                db    0
                db 0A0h
                db  86h
                db    1
                db    0
                db    0
                db    0
                db    0
                db    0
                db 0FDh
                db    1
                db  83h
                db    4
                db  4Dh ; M
                db  61h ; a
                db  67h ; g
                db  69h ; i
                db  63h ; c
                db  61h ; a
                db  6Ch ; l
                db  20h
                db  44h ; D
                db  65h ; e
                db  78h ; x
                db  74h ; t
                db  65h ; e
                db  72h ; r
                db  69h ; i
                db  74h ; t
                db  79h ; y
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  78h ; x
                db    0
                db    1
                db    0
                dd sub_1C97F
                dd sub_1DAF3
                db  10h
                db  27h ; '
                db    0
                db    0
                db 0D0h
                db    7
                db    0
                db    0
                db 0FFh
                db 0FFh
                db  8Dh
                db    4
                db  4Ch ; L
                db  69h ; i
                db  67h ; g
                db  68h ; h
                db  74h ; t
                db  6Eh ; n
                db  69h ; i
                db  6Eh ; n
                db  67h ; g
                db  20h
                db  42h ; B
                db  6Fh ; o
                db  6Ch ; l
                db  74h ; t
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db 0F0h
                db    0
                db    2
                db    0
                dd sub_1C9D9
                db    0
                db    0
                db    0
                db    0
                db 0A8h
                db  61h ; a
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db 0FFh
                db 0FFh
                db  8Eh
                db    4
                db  4Dh ; M
                db  65h ; e
                db  74h ; t
                db  65h ; e
                db  6Fh ; o
                db  72h ; r
                db  20h
                db  53h ; S
                db  77h ; w
                db  61h ; a
                db  72h ; r
                db  6Dh ; m
                db    0
                db    0
                db    0
                db    0
                db    0
unk_296AB       db    0                 ; DATA XREF: sub_A9AF+4E↑o
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db 0F0h
                db    0
                db    1
                db    0
off_296BC       dd sub_1CE52            ; DATA XREF: sub_A9AF+71↑o
                db    0
                db    0
                db    0
                db    0
                db 0A0h
                db  86h
                db    1
                db    0
                db    0
                db    0
                db    0
                db    0
                db 0FFh
                db 0FFh
                db  8Fh
                db    4
                db  48h ; H
                db  65h ; e
                db  72h ; r
                db  63h ; c
                db  75h ; u
                db  6Ch ; l
                db  65h ; e
                db  73h ; s
                db  20h
aStrength       db 'Strength',0         ; DATA XREF: sub_A9AF+BF↑o
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  78h ; x
                db    0
                db    1
                db    0
                dd sub_1C9AC
                dd sub_1DB0B
                db  10h
                db  27h ; '
                db    0
                db    0
                db 0D0h
                db    7
                db    0
                db    0
                db    2
                db    1
                db  90h
                db    4
                db  43h ; C
                db  75h ; u
                db  72h ; r
aEPoison        db 'e Poison',0         ; DATA XREF: sub_A9AF+10D↑o
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  28h ; (
                db    0
                db    2
                db    0
                dd sub_1DDD0
                align 8
                db  20h
                db  4Eh ; N
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db 0FFh
unk_29739       db 0FFh                 ; DATA XREF: sub_A9AF+13D↑o
                db  91h
                db    4
                db  50h ; P
                db  69h ; i
                db  63h ; c
                db  6Bh ; k
                db  20h
                db  4Ch ; L
                db  6Fh ; o
                db  63h ; c
                db  6Bh ; k
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
unk_29759       db    0                 ; DATA XREF: sub_A9AF+15F↑o
                db  32h ; 2
                db    0
                db    2
                db    0
                dd sub_1DEA6
                db    0
                db    0
                db    0
                db    0
unk_29766       db  10h                 ; DATA XREF: sub_A9AF+1B5↑o
                db  27h ; '
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  92h
                db    4
word_29772      dw 0                    ; DATA XREF: _INIT__MUTANTS+35B↑w
                                        ; sub_3B04+1A↑r
word_29774      dw 0                    ; DATA XREF: _INIT__MUTANTS+356↑w
                                        ; sub_3B04+15↑r
word_29776      dw 0                    ; DATA XREF: _INIT__MUTANTS+9FC↑w
                                        ; _INIT__MUTANTS+D58↑w ...
word_29778      dw 0                    ; DATA XREF: _INIT__MUTANTS+11↑w
                                        ; huprou+C↑w ...
word_2977A      dw 0                    ; DATA XREF: _INIT__MUTANTS+4B1↑w
                                        ; sub_2058A+F↑w ...
word_2977C      dw 0                    ; DATA XREF: _INIT__MUTANTS+4AA↑w
                                        ; sub_2058A+15↑w ...
word_2977E      dw 0                    ; DATA XREF: _INIT__MUTANTS+49E↑w
                                        ; sub_2058A+5C↑w ...
word_29780      dw 0                    ; DATA XREF: _INIT__MUTANTS+9F0↑w
                                        ; sub_1A4E3+16↑r ...
word_29782      dw 0                    ; DATA XREF: _INIT__MUTANTS+32E↑w
                                        ; sub_1E0E0+1D6↑r
word_29784      dw 0                    ; DATA XREF: _INIT__MUTANTS+317↑w
                                        ; sub_1E0E0+1C4↑r
word_29786      dw 0                    ; DATA XREF: _INIT__MUTANTS+300↑w
                                        ; _INIT__MUTANTS+BC2↑r ...
word_29788      dw 0                    ; DATA XREF: _INIT__MUTANTS+62B↑w
                                        ; _INIT__MUTANTS+643↑o ...
word_2978A      dw 0                    ; DATA XREF: _INIT__MUTANTS+635↑w
                                        ; sub_17E7B+4F↑w ...
                align 8
unk_29790       db    0                 ; DATA XREF: sub_A9AF+19F↑o
                                        ; sub_A9AF+1D5↑o ...
                db    0
                db    0
                db    0
unk_29794       db    0                 ; DATA XREF: sub_A9AF+1EB↑o
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
unk_297AE       db    0                 ; DATA XREF: sub_A9AF+221↑o
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
unk_297C8       db    0                 ; DATA XREF: sub_A9AF+231↑o
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
unk_297DB       db    0                 ; DATA XREF: sub_A9AF+27A↑o
                db    0
                db    0
                db    0
                db    0
                db    0
unk_297E1       db    0                 ; DATA XREF: sub_A9AF+28C↑o
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
unk_297EC       db    0                 ; DATA XREF: sub_A9AF+2B1↑o
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
unk_29805       db    0                 ; DATA XREF: sub_A9AF+30F↑o
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
unk_29821       db    0                 ; DATA XREF: sub_A9AF+33C↑o
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
unk_2983D       db    0                 ; DATA XREF: sub_A9AF+34A↑o
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
dword_29854     dd 0                    ; DATA XREF: _INIT__MUTANTS+57F↑w
                                        ; _INIT__MUTANTS+5AC↑r ...
word_29858      dw 0                    ; DATA XREF: _INIT__MUTANTS+547↑w
                                        ; _INIT__MUTANTS+592↑r ...
dword_2985A     dd 0                    ; DATA XREF: _INIT__MUTANTS+4FF↑w
                                        ; _INIT__MUTANTS+52C↑r ...
word_2985E      dw 0                    ; DATA XREF: _INIT__MUTANTS+4BD↑w
                                        ; _INIT__MUTANTS+512↑r ...
word_29860      dw 0                    ; DATA XREF: sub_8791+B↑w
                                        ; sub_2050E+B↑r
word_29862      dw 0                    ; DATA XREF: _INIT__MUTANTS+7E↑w
                                        ; _INIT__MUTANTS+8C↑r ...
word_29864      dw 0                    ; DATA XREF: _INIT__MUTANTS+79↑w
                                        ; _INIT__MUTANTS+87↑r ...
word_29866      dw 0                    ; DATA XREF: finrou+AA↑r
                                        ; sub_3B50+44↑w ...
word_29868      dw 0                    ; DATA XREF: finrou+A5↑r
                                        ; sub_3B50+3F↑w ...
word_2986A      dw 0                    ; DATA XREF: finrou+93↑r
                                        ; sub_3B50+28↑w ...
word_2986C      dw 0                    ; DATA XREF: finrou+8E↑r
                                        ; sub_3B50+23↑w ...
word_2986E      dw 0                    ; DATA XREF: _INIT__MUTANTS+40C↑w
                                        ; _INIT__MUTANTS+885↑r ...
word_29870      dw 0                    ; DATA XREF: _INIT__MUTANTS+407↑w
                                        ; _INIT__MUTANTS+880↑r ...
word_29872      dw 0                    ; DATA XREF: _INIT__MUTANTS+429↑w
                                        ; _INIT__MUTANTS+778↑r ...
word_29874      dw 0                    ; DATA XREF: _INIT__MUTANTS+424↑w
                                        ; _INIT__MUTANTS+773↑r ...
word_29876      dw 0                    ; DATA XREF: _INIT__MUTANTS+3EB↑w
                                        ; mcurou+3C6↑r ...
word_29878      dw 0                    ; DATA XREF: _INIT__MUTANTS+3E6↑w
                                        ; mcurou+3C1↑r ...
word_2987A      dw 0                    ; DATA XREF: _INIT__MUTANTS+3CF↑w
                                        ; dlarou+38↑r ...
word_2987C      dw 0                    ; DATA XREF: _INIT__MUTANTS+3CA↑w
                                        ; dlarou+33↑r ...
word_2987E      dw 0                    ; DATA XREF: _INIT__MUTANTS+395↑w
                                        ; mcurou+48↑r ...
word_29880      dw 0                    ; DATA XREF: _INIT__MUTANTS+390↑w
                                        ; mcurou+43↑r ...
word_29882      dw 0                    ; DATA XREF: _INIT__MUTANTS+378↑w
                                        ; _INIT__MUTANTS+611↑r ...
word_29884      dw 0                    ; DATA XREF: _INIT__MUTANTS+373↑w
                                        ; _INIT__MUTANTS+60C↑r ...
word_29886      dw 0                    ; DATA XREF: _INIT__MUTANTS+3B2↑w
                                        ; mcurou+2C7↑r ...
word_29888      dw 0                    ; DATA XREF: _INIT__MUTANTS+3AD↑w
                                        ; mcurou+2C2↑r ...
dword_2988A     dd 0                    ; DATA XREF: _INIT__MUTANTS+715↑w
                                        ; _INIT__MUTANTS+726↑r ...
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
word_29A1E      dw 0                    ; DATA XREF: _INIT__MUTANTS+9E6↑w
                                        ; sub_17E7B+80↑r
word_29A20      dw 0                    ; DATA XREF: _INIT__MUTANTS+AD↑w
                                        ; _INIT__MUTANTS+44D↑r ...
                align 4
word_29A24      dw 0                    ; DATA XREF: _INIT__MUTANTS+FD↑w
                                        ; mcurou+24B↑r ...
word_29A26      dw 0                    ; DATA XREF: _INIT__MUTANTS+F8↑w
                                        ; mcurou+246↑r ...
word_29A28      dw 0                    ; DATA XREF: _INIT__MUTANTS+D5↑w
                                        ; sub_8791+69↑w ...
word_29A2A      dw 0                    ; DATA XREF: _INIT__MUTANTS+D0↑w
                                        ; sub_8791+62↑w ...
word_29A2C      dw 0                    ; DATA XREF: _INIT__MUTANTS+116↑w
                                        ; sub_8791+75↑w ...
word_29A2E      dw 0                    ; DATA XREF: _INIT__MUTANTS+12F↑w
                                        ; sub_8791+81↑w ...
word_29A30      dw 0                    ; DATA XREF: _INIT__MUTANTS+767↑w
                                        ; mcurou+F↑w ...
word_29A32      dw 0                    ; DATA XREF: _INIT__MUTANTS+146↑w
                                        ; sub_17667+13D↑r ...
word_29A34      dw 0                    ; DATA XREF: _INIT__MUTANTS+167↑w
                                        ; sub_8791+8D↑w
word_29A36      dw 0                    ; DATA XREF: _INIT__MUTANTS+182↑w
                                        ; sub_8791+99↑w ...
                db    0
                db    0
word_29A3A      dw 0                    ; DATA XREF: _INIT__MUTANTS+345↑w
                                        ; sub_8791+A5↑w ...
word_29A3C      dw 0                    ; DATA XREF: _INIT__MUTANTS+199↑w
                                        ; sub_8791+B1↑w ...
word_29A3E      dw 0                    ; DATA XREF: sub_8791+C4↑w
word_29A40      dw 0                    ; DATA XREF: sub_8791+BD↑w
word_29A42      dw 0                    ; DATA XREF: sub_8791+D7↑w
word_29A44      dw 0                    ; DATA XREF: sub_8791+D0↑w
word_29A46      dw 0                    ; DATA XREF: sub_8791+EA↑w
word_29A48      dw 0                    ; DATA XREF: sub_8791+E3↑w
word_29A4A      dw 0                    ; DATA XREF: sub_8791+FD↑w
word_29A4C      dw 0                    ; DATA XREF: sub_8791+F6↑w
word_29A4E      dw 0                    ; DATA XREF: sub_8791+110↑w
word_29A50      dw 0                    ; DATA XREF: sub_8791+109↑w
word_29A52      dw 0                    ; DATA XREF: _INIT__MUTANTS+1C1↑w
                                        ; sub_1374B+56↑r ...
word_29A54      dw 0                    ; DATA XREF: _INIT__MUTANTS+1BC↑w
                                        ; sub_1374B+4C↑r ...
word_29A56      dw 0                    ; DATA XREF: _INIT__MUTANTS+1E9↑w
                                        ; sub_13992+A7↑r
word_29A58      dw 0                    ; DATA XREF: _INIT__MUTANTS+1E4↑w
                                        ; sub_13992+A2↑r
word_29A5A      dw 0                    ; DATA XREF: _INIT__MUTANTS+20B↑w
                                        ; lonrou+B↑r
word_29A5C      dw 0                    ; DATA XREF: _INIT__MUTANTS+1FA↑w
                                        ; sub_1374B+1A1↑r
word_29A5E      dw 0                    ; DATA XREF: sub_8791+11C↑w
word_29A60      dw 0                    ; DATA XREF: _INIT__MUTANTS+22E↑w
                                        ; sub_8791+128↑w ...
word_29A62      dw 0                    ; DATA XREF: _INIT__MUTANTS+256↑w
                                        ; sub_8791+13B↑w ...
word_29A64      dw 0                    ; DATA XREF: _INIT__MUTANTS+251↑w
                                        ; sub_8791+134↑w ...
word_29A66      dw 0                    ; DATA XREF: _INIT__MUTANTS+26F↑w
                                        ; sub_1A17A+22↑r
word_29A68      dw 0                    ; DATA XREF: _INIT__MUTANTS+15E↑w
                                        ; sub_1EA0C+2C↑r ...
word_29A6A      dw 0                    ; DATA XREF: _INIT__MUTANTS+214↑w
word_29A6C      dw 0                    ; DATA XREF: _INIT__MUTANTS+290↑w
                                        ; sub_8791+14E↑w ...
word_29A6E      dw 0                    ; DATA XREF: _INIT__MUTANTS+28B↑w
                                        ; sub_8791+147↑w ...
word_29A70      dw 0                    ; DATA XREF: _INIT__MUTANTS+2A8↑w
                                        ; sub_8791+15A↑w ...
word_29A72      dw 0                    ; DATA XREF: _INIT__MUTANTS+2C0↑w
                                        ; sub_8791+166↑w ...
word_29A74      dw 0                    ; DATA XREF: _INIT__MUTANTS+2D1↑w
                                        ; _INIT__MUTANTS+D64↑r ...
word_29A76      dw 0                    ; DATA XREF: _INIT__MUTANTS+2E9↑w
                                        ; sub_8791+17E↑w ...
unk_29A78       db    0                 ; DATA XREF: mcurou+3F4↑o
                                        ; mcurou+446↑o ...
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
word_29A96      dw 0                    ; DATA XREF: mcurou+40B↑w
                                        ; mcurou+4FC↑w ...
word_29A98      dw 0                    ; DATA XREF: mcurou+404↑w
                                        ; mcurou+4F7↑w ...
word_29A9A      dw 0                    ; DATA XREF: mcurou+41E↑w
                                        ; mcurou+511↑w ...
word_29A9C      dw 0                    ; DATA XREF: mcurou+417↑w
                                        ; mcurou+50C↑w ...
word_29A9E      dw 0                    ; DATA XREF: mcurou+42A↑w
                                        ; sub_3B50+17C↑r ...
unk_29AA0       db    0                 ; DATA XREF: mcurou+438↑o
                                        ; sub_41CC+48F↑o
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
unk_29AAA       db    0                 ; DATA XREF: dlarou+66↑o
                                        ; dlarou+74↑o ...
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
unk_29AC8       db    0                 ; DATA XREF: sub_18770+149↑o
                                        ; sub_18770+1AD↑o ...
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
word_29B2C      dw 0                    ; DATA XREF: sub_18770+164↑w
                                        ; sub_1893B+F1↑r
word_29B2E      dw 0                    ; DATA XREF: sub_18770+15F↑w
                                        ; sub_1893B+F6↑r
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
byte_29B40      db 0                    ; DATA XREF: mcurou+78↑o
                                        ; mcurou+EA↑o ...
byte_29B41      db 0                    ; DATA XREF: sub_12B3F+B3↑r
byte_29B42      db 0                    ; DATA XREF: sub_12B3F+A7↑r
byte_29B43      db 0                    ; DATA XREF: sub_12B3F+FC↑r
byte_29B44      db 0                    ; DATA XREF: sub_12B3F+F0↑r
byte_29B45      db 0                    ; DATA XREF: sub_12B3F+E4↑r
                db    0
byte_29B47      db 0                    ; DATA XREF: sub_12B3F+7C↑r
byte_29B48      db 0                    ; DATA XREF: sub_12B3F+70↑r
                align 2
unk_29B4A       db    0                 ; DATA XREF: mcurou+8A↑o
                                        ; mcurou+FF↑o ...
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
word_29BB8      dw 0                    ; DATA XREF: sub_607A+60↑w
                                        ; sub_EBCA+127↑r ...
word_29BBA      dw 0                    ; DATA XREF: sub_607A+59↑w
                                        ; sub_EBCA+122↑r ...
word_29BBC      dw 0                    ; DATA XREF: sub_607A+73↑w
                                        ; sub_EBCA+10A↑r ...
word_29BBE      dw 0                    ; DATA XREF: sub_607A+6C↑w
                                        ; sub_EBCA+105↑r ...
word_29BC0      dw 0                    ; DATA XREF: mcurou+CD↑w
                                        ; mcurou+11D↑r ...
word_29BC2      dw 0                    ; DATA XREF: mcurou+C6↑w
                                        ; mcurou+116↑r ...
word_29BC4      dw 0                    ; DATA XREF: mcurou+12A↑r
                                        ; mcurou+149↑r ...
word_29BC6      dw 0                    ; DATA XREF: mcurou+12F↑r
                                        ; mcurou+14E↑r ...
word_29BC8      dw 0                    ; DATA XREF: sub_607A+AC↑w
                                        ; sub_D871+154↑w ...
word_29BCA      dw 0                    ; DATA XREF: sub_607A+A5↑w
                                        ; sub_D871+14F↑w ...
word_29BCC      dw 0                    ; DATA XREF: mcurou+E0↑w
                                        ; sub_607A+BF↑w ...
word_29BCE      dw 0                    ; DATA XREF: mcurou+D9↑w
                                        ; sub_607A+B8↑w ...
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
dword_29BD6     dd 0                    ; DATA XREF: _INIT__MUTANTS+7F8↑w
                                        ; _INIT__MUTANTS+809↑r ...
dword_29BDA     dd 0                    ; DATA XREF: _INIT__MUTANTS+903↑w
                                        ; _INIT__MUTANTS+914↑r ...
byte_29BDE      db 0                    ; DATA XREF: _INIT__MUTANTS+649↑o
                                        ; sub_151BF+8A↑o ...
byte_29BDF      db 0                    ; DATA XREF: sub_1968E+234↑r
                                        ; sub_1A1CA+1CE↑r
byte_29BE0      db 0                    ; DATA XREF: sub_1968E+228↑r
                                        ; sub_1A1CA+1DA↑r
byte_29BE1      db 0                    ; DATA XREF: sub_1968E+27D↑r
                                        ; sub_1A1CA+1EA↑r
byte_29BE2      db 0                    ; DATA XREF: sub_1968E+271↑r
                                        ; sub_1A1CA+1F6↑r
byte_29BE3      db 0                    ; DATA XREF: sub_1968E+265↑r
                                        ; sub_1A1CA+202↑r
byte_29BE4      db 0                    ; DATA XREF: sub_1968E+2BA↑r
byte_29BE5      db 0                    ; DATA XREF: mcurou+198↑r
                                        ; sub_1968E+2AE↑r
byte_29BE6      db 0                    ; DATA XREF: mcurou+1A4↑r
                                        ; sub_1968E+2A2↑r
                db    0
                db    0
                db    0
word_29BEA      dw 0                    ; DATA XREF: _INIT__MUTANTS+661↑r
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
word_29BF4      dw 0                    ; DATA XREF: sub_18EDF+194↑w
word_29BF6      dw 0                    ; DATA XREF: mcurou+222↑w
                                        ; sub_D871+231↑w ...
word_29BF8      dw 0                    ; DATA XREF: sub_DE45+31↑r
                                        ; sub_DFB7+32↑r ...
word_29BFA      dw 0                    ; DATA XREF: sub_148FB+47↑r
                                        ; sub_148FB+54↑w ...
word_29BFC      dw 0                    ; DATA XREF: sub_14987+CC↑w
                                        ; sub_14987+D5↑r ...
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
word_29C08      dw 0                    ; DATA XREF: sub_14987+F1↑w
                                        ; sub_17E7B+B7↑w
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
unk_29C14       db    0                 ; DATA XREF: sub_14AF1+A6↑o
                                        ; sub_18EDF+1C6↑o
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
unk_29C1E       db    0                 ; DATA XREF: mcurou+271↑o
                                        ; sub_8B00+585↑o ...
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
unk_29C3C       db    0                 ; DATA XREF: mcurou+230↑o
                                        ; mcurou+25F↑o ...
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
dword_29C74     dd 0                    ; DATA XREF: _INIT__MUTANTS+6D7↑w
                                        ; _INIT__MUTANTS+6E8↑r ...
unk_29C78       db    0                 ; DATA XREF: mcurou+2F7↑o
                                        ; mcurou+345↑o ...
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
word_29C96      dw 0                    ; DATA XREF: mcurou+337↑r
                                        ; mcurou+366↑r ...
word_29C98      dw 0                    ; DATA XREF: sub_18BAA+F4↑w
word_29C9A      dw 0                    ; DATA XREF: sub_18BAA+100↑w
word_29C9C      dw 0                    ; DATA XREF: sub_18BAA+10C↑w
word_29C9E      dw 0                    ; DATA XREF: sub_FD4D+2DE↑w
                                        ; sub_18BAA+EB↑w ...
word_29CA0      dw 0                    ; DATA XREF: sub_FD4D+2D5↑r
                                        ; sub_18BAA+140↑w
word_29CA2      dw 0                    ; DATA XREF: sub_FD4D+245↑r
                                        ; sub_18BAA+118↑w
word_29CA4      dw 0                    ; DATA XREF: mcurou+470↑r
                                        ; sub_18BAA+12B↑w
word_29CA6      dw 0                    ; DATA XREF: mcurou+475↑r
                                        ; sub_18BAA+124↑w
word_29CA8      dw 0                    ; DATA XREF: sub_18BAA+4B↑w
word_29CAA      dw 0                    ; DATA XREF: sub_18BAA+2B↑w
word_29CAC      dw 0                    ; DATA XREF: sub_18BAA+6B↑w
word_29CAE      dw 0                    ; DATA XREF: sub_18BAA+CB↑w
word_29CB0      dw 0                    ; DATA XREF: sub_18BAA+AB↑w
word_29CB2      dw 0                    ; DATA XREF: sub_18BAA+8B↑w
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
word_29D04      dw 0                    ; DATA XREF: sub_18BAA+149↑w
word_29D06      dw 0                    ; DATA XREF: sub_18BAA+155↑w
word_29D08      dw 0                    ; DATA XREF: mcurou+48B↑r
                                        ; sub_18BAA+1A0↑w
word_29D0A      dw 0                    ; DATA XREF: mcurou+490↑r
                                        ; sub_18BAA+199↑w
word_29D0C      dw 0                    ; DATA XREF: sub_FD4D+2EE↑w
                                        ; sub_18BAA+1B3↑w
word_29D0E      dw 0                    ; DATA XREF: sub_FD4D+2E7↑w
                                        ; sub_18BAA+1AC↑w
word_29D10      dw 0                    ; DATA XREF: mcurou+307↑r
                                        ; mcurou+317↑r ...
word_29D12      dw 0                    ; DATA XREF: sub_18BAA+1CB↑w
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
dword_29DD4     dd 0                    ; DATA XREF: huprou+2D↑w
                                        ; huprou+36↑r ...
unk_29DD8       db    0                 ; DATA XREF: sub_3B50+86↑o
                                        ; sub_5B48+9↑o
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
unk_29E14       db    0                 ; DATA XREF: sub_955B+725↑o
                                        ; sub_955B+733↑o ...
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
byte_29F13      db 0                    ; DATA XREF: sttrou+14A↑o
                                        ; sub_2B24+26↑r ...
byte_29F14      db 0                    ; DATA XREF: sub_1F2CD+24C↑w
                                        ; sub_1F53F+168↑w
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
byte_29FDB      db 0                    ; DATA XREF: sub_955B+85↑o
                                        ; sub_955B+323↑o ...
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
unk_2A063       db    0                 ; DATA XREF: sub_1356C+87↑o
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
unk_2A07F       db    0                 ; DATA XREF: sub_13610+87↑o
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
byte_2A0A3      db 0                    ; DATA XREF: sub_BD0B+21↑o
                                        ; sub_CA86+64↑o ...
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
unk_2A16B       db    0                 ; DATA XREF: sub_14AF1+33↑o
                                        ; sub_14DA8+194↑o
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
unk_2A233       db    0                 ; DATA XREF: sub_14AF1+44↑o
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
word_2AEB3      dw 0                    ; DATA XREF: lonrou+3E↑r
                                        ; sub_2B24+66↑r ...
word_2AEB5      dw 0                    ; DATA XREF: _INIT__MUTANTS+45↑w
                                        ; stsrou+1D↑r ...
word_2AEB7      dw 0                    ; DATA XREF: _INIT__MUTANTS+D47↑w
                                        ; sub_1EA0C+19↑w ...
word_2AEB9      dw 0                    ; DATA XREF: _INIT__MUTANTS+D3B↑w
                                        ; huprou+AB↑r ...
word_2AEBB      dw 0                    ; DATA XREF: _INIT__MUTANTS+8D4↑w
                                        ; _INIT__MUTANTS+8DE↑w ...
word_2AEBD      dw 0                    ; DATA XREF: _INIT__MUTANTS+7C7↑w
                                        ; _INIT__MUTANTS+7D1↑w ...
word_2AEBF      dw 0                    ; DATA XREF: _INIT__MUTANTS+75B↑w
                                        ; sub_955B+93B↑w ...
word_2AEC1      dw 0                    ; DATA XREF: _INIT__MUTANTS+1252↑r
                                        ; sub_12E92+4F9↑r ...
word_2AEC3      dw 0                    ; DATA XREF: sub_13DE0+12F↑r
                                        ; sub_13DE0+152↑r ...
word_2AEC5      dw 0                    ; DATA XREF: sub_680+67↑r
                                        ; _INIT__MUTANTS+1293↑r ...
word_2AEC7      dw 0                    ; DATA XREF: sub_2D88+170↑w
                                        ; sub_12E92+6B5↑w ...
word_2AEC9      dw 0                    ; DATA XREF: _INIT__MUTANTS+74F↑w
word_2AECB      dw 0                    ; DATA XREF: sub_1E7C4+D2↑w
                                        ; sub_1E7C4+1B8↑w ...
word_2AECD      dw 0                    ; DATA XREF: _INIT__MUTANTS+469↑w
                                        ; sub_1EA0C+51↑w ...
word_2AECF      dw 0                    ; DATA XREF: _INIT__MUTANTS+457↑w
                                        ; _INIT__MUTANTS+4C9↑r ...
word_2AED1      dw 0                    ; DATA XREF: _INIT__MUTANTS+43B↑w
                                        ; _INIT__MUTANTS+444↑r ...
word_2AED3      dw 0                    ; DATA XREF: sttrou+56↑w
                                        ; sttrou+6F↑r ...
word_2AED5      dw 0                    ; DATA XREF: huprou+54↑w
                                        ; huprou+99↑r ...
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
unk_2B1F7       db    0                 ; DATA XREF: sub_41CC+6B↑o
                                        ; sub_41CC+85↑o ...
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
unk_2B215       db    0                 ; DATA XREF: sub_41CC+3E↑o
                                        ; sub_41CC+50↑o ...
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
word_2B22E      dw 0                    ; DATA XREF: sub_41CC+7B↑w
                                        ; sub_5D04+2A6↑w ...
word_2B230      dw 0                    ; DATA XREF: sub_5D04+2B2↑w
                                        ; sub_89BA+63↑r ...
word_2B232      dw 0                    ; DATA XREF: _INIT__MUTANTS+492↑w
                                        ; sub_1A77E+39↑r ...
dword_2B234     dd 0                    ; DATA XREF: _INIT__MUTANTS+489↑w
                                        ; sub_1A77E+27↑r ...
aNorth_5        db 'north',0            ; DATA XREF: dseg19:0026↑o
aSouth_4        db 'south',0            ; DATA XREF: dseg19:002A↑o
aEast_4         db 'east',0             ; DATA XREF: dseg19:002E↑o
aWest_4         db 'west',0             ; DATA XREF: dseg19:0032↑o
                align 4
dseg19          ends

; Segment Number    : 20
; Alloc Size        : 0080h
; Offset in the file: 3E800h  Length: 0080h
; Attributes  (0C21): DATA Pure DPL: 3
; ===========================================================================

; Segment type: Pure data
dseg20          segment para public 'DATA' use16
                assume cs:dseg20
flt_2B250       dd 1.0                  ; DATA XREF: sub_58D+CB↑r
                db    0
                db    0
                db  20h
                db  41h ; A
                db    0
                db    0
                db 0C8h
                db  42h ; B
                db    0
                db    0
                db  7Ah ; z
                db  44h ; D
                db    0
                db  40h ; @
                db  1Ch
                db  46h ; F
                db    0
                db  50h ; P
                db 0C3h
                db  47h ; G
                db    0
                db  24h ; $
                db  74h ; t
                db  49h ; I
                db  80h
                db  96h
                db  18h
                db  4Bh ; K
flt_2B270       dd 1.0e8                ; DATA XREF: sub_58D+53↑r
dbl_2B274       dq 1.0e16               ; DATA XREF: sub_58D+60↑r
tbyte_2B27C     dt 1.0e32               ; DATA XREF: sub_58D+69↑r
tbyte_2B286     dt 9.9999999999999999998e63
                                        ; DATA XREF: sub_58D+75↑r
tbyte_2B290     dt 1.0e128              ; DATA XREF: sub_58D+81↑r
tbyte_2B29A     dt 1.0e256              ; DATA XREF: sub_58D+8D↑r
tbyte_2B2A4     dt 1.0e512              ; DATA XREF: sub_58D+99↑r
tbyte_2B2AE     dt 9.9999999999999999997e1023
                                        ; DATA XREF: sub_58D+A5↑r
tbyte_2B2B8     dt 1.0e2048             ; DATA XREF: sub_58D+B1↑r
tbyte_2B2C2     dt 1.0e4096             ; DATA XREF: sub_58D+BD↑r
flt_2B2CC       dd +Inf                 ; DATA XREF: sub_58D+23↑r
dseg20          ends

; Segment Number    : 21
; Alloc Size        : 009Ah
; Offset in the file: 3EA00h  Length: 009Ah
; Attributes  (0C21): DATA Pure DPL: 3
; ===========================================================================

; Segment type: Pure data
dseg21          segment para public 'DATA' use16
                assume cs:dseg21
unk_2B2D0       db    0                 ; DATA XREF: lonrou+2B↑o
                                        ; sub_52E5+11↑o ...
                db    0
                db    0
                db    0
byte_2B2D4      db 42h                  ; DATA XREF: sub_8791+1B↑o
                db  6Fh ; o
                db  72h ; r
                db  6Ch ; l
                db  61h ; a
                db  6Eh ; n
                db  64h ; d
                db  20h
                db  43h ; C
                db  2Bh ; +
                db  2Bh ; +
                db  20h
                db  2Dh ; -
                db  20h
                db  43h ; C
                db  6Fh ; o
                db  70h ; p
                db  79h ; y
                db  72h ; r
                db  69h ; i
                db  67h ; g
                db  68h ; h
                db  74h ; t
                db  20h
                db  31h ; 1
                db  39h ; 9
                db  39h ; 9
                db  31h ; 1
                db  20h
                db  42h ; B
                db  6Fh ; o
                db  72h ; r
                db  6Ch ; l
                db  61h ; a
                db  6Eh ; n
                db  64h ; d
                db  20h
                db  49h ; I
                db  6Eh ; n
                db  74h ; t
word_2B2FC      dw 2E6Ch                ; DATA XREF: cseg01:0038↑r
                db    0
                db  44h ; D
                db  69h ; i
                db  76h ; v
                db  69h ; i
                db  64h ; d
                db  65h ; e
                db  20h
                db  65h ; e
                db  72h ; r
                db  72h ; r
                db  6Fh ; o
                db  72h ; r
                db  0Dh
                db  0Ah
                db  41h ; A
                db  62h ; b
                db  6Eh ; n
                db  6Fh ; o
                db  72h ; r
                db  6Dh ; m
                db  61h ; a
                db  6Ch ; l
                db  20h
                db  70h ; p
                db  72h ; r
                db  6Fh ; o
                db  67h ; g
                db  72h ; r
                db  61h ; a
                db  6Dh ; m
                db  20h
                db  74h ; t
                db  65h ; e
                db  72h ; r
                db  6Dh ; m
                db  69h ; i
                db  6Eh ; n
                db  61h ; a
                db  74h ; t
                db  69h ; i
                db  6Fh ; o
                db  6Eh ; n
                db  0Dh
                db  0Ah
;
; External Entry #1 into the Module
; Attributes (0003): Fixed Exported Shared dataseg
;
                public BCC286_EXE
BCC286_EXE      db    0                 ; MJWMUT_1
                db    0
word_2B32D      dw 0                    ; DATA XREF: sub_123+10↑r
word_2B32F      dw 0                    ; DATA XREF: sub_123+C↑r
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
word_2B347      dw 0                    ; DATA XREF: cseg01:0013↑o
                                        ; cseg01:0027↑r ...
dword_2B349     dd 0                    ; DATA XREF: cseg01:0049↑r
                                        ; cseg01:0064↑w ...
word_2B34D      dw 0                    ; DATA XREF: cseg01:0073↑w
word_2B34F      dw 0                    ; DATA XREF: cseg01:0041↑w
word_2B351      dw 0                    ; DATA XREF: cseg01:003E↑w
                db    0
                db    0
word_2B355      dw 0                    ; DATA XREF: cseg01:0084↑w
word_2B357      dw 0                    ; DATA XREF: cseg01:0088↑w
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db 0D2h
                db    1
                align 8
dseg21          ends

; Segment Number    : 22
; Alloc Size        : 0080h
; Offset in the file: 0000h  Length: 0000h
; Attributes  (0C21): DATA Pure DPL: 3
; ===========================================================================

; Segment type: Pure data
dseg22          segment para public 'DATA' use16
                assume cs:dseg22
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
dseg22          ends

; ===========================================================================

; Segment type: Externs
; DOSCALLS
                extrn DOSCALLS_89:far   ; CODE XREF: sub_123+16↑P
                                        ; DATA XREF: cseg01:011E↑o

; ===========================================================================

; Segment type: Externs
; PHAPI
                extrn PHAPI_DOSCREATEDSALIAS:far
                                        ; CODE XREF: cseg01:0016↑P

; ===========================================================================

; Segment type: Externs
; MAJORBBS
                extrn _EXITBUF:far      ; DATA XREF: cseg01:00ED↑o
                                        ; void (*_exitbuf)(void);
                extrn _EXITFOPEN:far    ; DATA XREF: cseg01:00F1↑o
                                        ; void (*_exitfopen)(void)
                extrn _EXITOPEN:far     ; DATA XREF: cseg01:00F5↑o
                                        ; void (*_exitopen)(void)
                extrn AABBTV:far        ; CODE XREF: sub_1A1CA+2C5↑P
                                        ; int aabbtv (void *recptr, long abspos, int keynum);
                extrn ABSBTV:far        ; CODE XREF: _INIT__MUTANTS+79B↑P
                                        ; _INIT__MUTANTS+839↑P ...
                                        ; long absbtv (void);
                extrn ACCBB:byte:3      ; DATA XREF: sub_61BB+F↑r
                                        ; sub_61BB+14↑r
                                        ; BTVFILE *accbb;
                extrn ALCMEM:far        ; CODE XREF: _INIT__MUTANTS+4EF↑P
                                        ; _INIT__MUTANTS+56F↑P ...
                                        ; char *alcmem(unsigned size);
                extrn ALCZER:far        ; CODE XREF: _INIT__MUTANTS+479↑P
                                        ; _INIT__MUTANTS+51B↑P ...
                                        ; char *alczer(unsigned nbytes);
                extrn ANPBTV:far        ; CODE XREF: sttrou+44B↑P
                                        ; sub_FABA+120↑P ...
                                        ; int anpbtv (void *recptr, int anpopt);
                extrn ATOL:far          ; CODE XREF: _INIT__MUTANTS+AC0↑P
                                        ; _INIT__MUTANTS+AF2↑P ...
                                        ; long int atol(const char *str);
                extrn BAUDAT:far        ; CODE XREF: sub_7AC8+3B↑P
                                        ; int baudat(unsigned baud,int blink);
                extrn BEGIN_POLLING:far ; CODE XREF: huprou+117↑P
                                        ; sttrou+4F1↑P ...
                                        ; void begin_polling(int unum,void (*rouptr)());
                extrn CATASTRO:far      ; CODE XREF: _INIT__MUTANTS+7B6↑P
                                        ; _INIT__MUTANTS+873↑P ...
                                        ; catastro(char * ctlstg, TYPE pl, TYPE p2,...,pn)
                extrn CLRPRF:far        ; CODE XREF: sub_1282B+160↑P
                                        ; sub_15C7E:loc_15CF1↑P ...
                                        ; clrprf()
                extrn CLSBTV:far        ; CODE XREF: finrou+25↑P
                                        ; finrou+3C↑P ...
                                        ; void clsbtv (struct btvblk *bbp);
                extrn CLSMSG:far        ; CODE XREF: finrou+F4↑P
                                        ; void clsmsg(FILE *mbkprt);
                extrn DELBTV:far        ; CODE XREF: dlarou+88↑P
                                        ; dlarou+F3↑P ...
                                        ; void delbtv();
                extrn DFSTHN:far        ; CODE XREF: stsrou:def_4836↑P
                                        ; void dfsthn();
                extrn FCLOSE:far        ; CODE XREF: _INIT__MUTANTS+BB5↑P
                                        ; sub_41CC+259↑P ...
                                        ; int fclose(FILE* stream );
                extrn FGETS:far         ; CODE XREF: _INIT__MUTANTS+A8C↑P
                                        ; sub_63A1+42↑P
                                        ; char* fgets(char* str, int num, FILE* stream );
                extrn F_OPEN:far        ; CODE XREF: _INIT__MUTANTS+A0B↑P
                                        ; sub_41CC+21F↑P ...
                                        ; file* fopen(const char* filename, USE);
                extrn F_READ:far        ; CODE XREF: sub_5C3F+7D↑P
                                        ; size_t fread(void* ptr, size_t size, size_t count, FILE* stream );
                extrn GALFREE:far       ; CODE XREF: _INIT__MUTANTS+CEA↑P
                                        ; _INIT__MUTANTS+D07↑P ...
                                        ; void galfree(void *block);
                extrn FWRITE:far        ; CODE XREF: sub_5C3F+96↑P
                                        ; size_t fwrite ( const void * ptr, size_t size, size_t count, FILE * stream );
                extrn GABBTV:far        ; CODE XREF: _INIT__MUTANTS+7A8↑P
                                        ; _INIT__MUTANTS+858↑P ...
                                        ; void garbbtv(char *recptr, long abspos, intkeynum);
                extrn GETBTV:far        ; CODE XREF: _INIT__MUTANTS+64C↑P
                                        ; void getbtv(char *recptr, char *key, int keynum, int getopt);
                extrn GETMSG:far        ; CODE XREF: _INIT__MUTANTS+D8B↑P
                                        ; _INIT__MUTANTS+117D↑P ...
                                        ; char *bufard=getmsg(msgnum);
                extrn GMDNAM:far        ; CODE XREF: _INIT__MUTANTS+1E↑P
                                        ; char *gmdnam(char *mdfnam);
                extrn HASMKEY:far       ; CODE XREF: sub_2D88+18D↑P
                                        ; sub_4A44+6B↑P ...
                                        ; int ok=hasmkey(int msgnum);
                extrn HEXOPT:far        ; CODE XREF: sub_859C+106↑P
                                        ; sub_859C+118↑P
                                        ; unsigned hexopt(int msgnum,unsigned floor,unsigned ceiling);
                extrn INPUT:near        ; DATA XREF: sub_151BF+2B↑o
                                        ; char input[];
                extrn INSBTV:far        ; CODE XREF: mcurou+449↑P
                                        ; sub_3B50+248↑P ...
                                        ; void insbtv(char *recptr);
                extrn INVBTV:far        ; CODE XREF: sub_5D04+2C1↑P
                                        ; sub_8A27+C6↑P
                                        ; void invbtv(char *recptr, int length);
                extrn KILIPG:near       ; DATA XREF: huprou+80↑r
                                        ; int killpg;
                extrn LNGOPT:far        ; CODE XREF: _INIT__MUTANTS+C3↑P
                                        ; _INIT__MUTANTS+EB↑P ...
                                        ; long lngopt(int msgnum,long floor,long ceiling);
                extrn MARGC:near        ; DATA XREF: sttrou+4D↑r
                                        ; sttrou+5F↑r ...
                                        ; int margc;
                extrn MARGV:byte:7      ; DATA XREF: sttrou+B8↑r
                                        ; sttrou+E8↑r ...
                                        ; char *margv[];
                extrn NCDATE:far        ; CODE XREF: sub_4148+12↑P
                                        ; char *ascdat=ncdate(int date);
                extrn NCTIME:far        ; CODE XREF: sub_40D0+12↑P
                                        ; sub_5BAC+19↑P
                                        ; char *asctim=nctime(int time);
                extrn NKYREC:far        ; CODE XREF: sub_61BB+1BF↑P
                                        ; void nkyrec(char *uid);
                extrn NOW:far           ; CODE XREF: sub_40D0+C↑P
                                        ; sub_5BAC+13↑P
                                        ; int time=now()
                extrn NTERMS:near       ; DATA XREF: _INIT__MUTANTS+432↑r
                                        ; _INIT__MUTANTS+6BB↑r ...
                                        ; int nterms;
                extrn NUMOPT:far        ; CODE XREF: _INIT__MUTANTS+A0↑P
                                        ; _INIT__MUTANTS+109↑P ...
                                        ; int numopt(int msgnum,int floor,int ceiling);
                extrn OBTBTV:far        ; CODE XREF: sub_15D7B+45↑P
                                        ; sub_17E7B+63↑P ...
                                        ; int obtbtv(char *recptr, char* key, int keynum, int obtopt);
                extrn OPNBTV:far        ; CODE XREF: sub_3B04+38↑P
                                        ; BTVFILE *bbptr=opnbtv(char *filnae, int reclen);
                extrn OPNMSG:far        ; CODE XREF: _INIT__MUTANTS+6C↑P
                                        ; FILE *mbkprt=opnmsg(char *fileName)
                extrn OTHUAP:byte:3     ; DATA XREF: sub_4F1A+13D↑w
                                        ; sub_4F1A+142↑w ...
                                        ; struct usracc *othuaP;
                extrn OTHUSN:near       ; DATA XREF: sub_4F1A+46↑w
                                        ; sub_4F1A+4F↑r ...
                                        ; int othusn;
                extrn OTHUSP:byte:3     ; DATA XREF: sub_4F1A+11E↑w
                                        ; sub_4F1A+123↑w ...
                                        ; struct user *othusp;
                extrn OUTBSZ:near       ; DATA XREF: sub_7F99+20↑r
                                        ; sub_819F+1F↑r ...
                                        ; int outbsz;
                extrn OUTPRF:far        ; CODE XREF: lonrou+56↑P
                                        ; sttrou+4C9↑P ...
                                        ; outprf (unum);
                extrn PRF:far           ; CODE XREF: sttrou+528↑P
                                        ; sub_2B24+F5↑P ...
                                        ; prf(string);
                extrn PRFMSG:far        ; CODE XREF: lonrou+31↑P
                                        ; sttrou+4B9↑P ...
                                        ; prfmsg(msgnum,p1,p2, ..• ,pn);
                extrn QNPBTV:far        ; CODE XREF: _INIT__MUTANTS+863↑P
                                        ; _INIT__MUTANTS+96D↑P ...
                                        ; int qnpbtv (int getopt);
                extrn QRYBTV:far        ; CODE XREF: _INIT__MUTANTS+78D↑P
                                        ; _INIT__MUTANTS+829↑P ...
                                        ; int is=qrybtv(char *key, int keynum, int qryopt);
                extrn RAND:far          ; CODE XREF: _INIT__MUTANTS+BDD↑P
                                        ; sub_4A44+25B↑P ...
                                        ; int rand (void);
                extrn REGISTER_MODULE:far
                                        ; CODE XREF: _INIT__MUTANTS+38↑P
                                        ; int register_module(struct module *mod);
                extrn RSTCHN:far        ; CODE XREF: sub_7B2D+1F6↑P
                                        ; sub_7D33+10E↑P
                                        ; void rstchn();
                extrn RSTRIN:far        ; CODE XREF: sub_151BF:loc_151DE↑P
                                        ; void rstrin();
                extrn RTKICK:far        ; CODE XREF: _INIT__MUTANTS+D79↑P
                                        ; sub_4961+5F↑P ...
                                        ; rtkick(int time, void *rouptr());
                extrn SAMEAS:far        ; CODE XREF: sub_680+55↑P
                                        ; mcurou+8D↑P ...
                                        ; int match=sameas(char *stgl, char* stg2);
                extrn SAMETO:far        ; CODE XREF: sub_680+33↑P
                                        ; sub_B7E3+2B↑P ...
                                        ; int match=sameto(char *shorts, char *longs);
                extrn SETBTV:far        ; CODE XREF: _INIT__MUTANTS+616↑P
                                        ; _INIT__MUTANTS+742↑P ...
                                        ; void setbtv(BTVFILE *bbprt);
                extrn SETMBK:far        ; CODE XREF: _INIT__MUTANTS+91↑P
                                        ; lonrou+22↑P ...
                                        ; FILE *setmbk(mbkptr);
                extrn SETMEM:far        ; CODE XREF: _INIT__MUTANTS+6ED↑P
                                        ; _INIT__MUTANTS+72B↑P ...
                                        ; void setmem(char *destination, unsigned nbytes, char value);
                extrn SHOCHL:far        ; CODE XREF: sub_7AC8+4D↑P
                                        ; void shochl(char *legend,char sing,int attr);
                extrn SHOCST:far        ; CODE XREF: mcurou+36↑P
                                        ; mcurou+646↑P ...
                                        ; void shocst(char *summary, char *detail, p1, p1,...,pn);
                extrn SPR:far           ; CODE XREF: _INIT__MUTANTS+AB6↑P
                                        ; _INIT__MUTANTS+AE8↑P ...
                                        ; char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);
                extrn SPRINTF:far       ; CODE XREF: mcurou+262↑P
                                        ; mcurou+37D↑P ...
                                        ; int sprintf(char *str, const char *format, ... );
                extrn SRAND:far         ; CODE XREF: _INIT__MUTANTS+62↑P
                                        ; void srand (unsigned int seed);
                extrn STATUS:near       ; DATA XREF: stsrou+2C↑r
                                        ; int status;
                extrn STGOPT:far        ; CODE XREF: _INIT__MUTANTS+34B↑P
                                        ; sub_5D04+2D↑P ...
                                        ; char *string=stgopt(int msgnum);
                extrn STOP_POLLING:far  ; CODE XREF: huprou+C5↑P
                                        ; sub_93D8+8D↑P ...
                                        ; void stop_polling(int unum);
                extrn STRCAT:far        ; CODE XREF: sub_4A44+2B4↑P
                                        ; sub_4A44+2D4↑P ...
                                        ; char *strcat(char *destination, const char *source );
                extrn STRCPY:far        ; CODE XREF: dlarou+26↑P
                                        ; sttrou+3EE↑P ...
                                        ; char* strcpy(char* destination, const char* source );
                extrn STRLEN:far        ; CODE XREF: sub_680+14↑P
                                        ; sttrou+F2↑P ...
                                        ; size_t strlen(const char* str);
                extrn STRNCAT:far       ; CODE XREF: sub_10E58+134↑P
                                        ; char *strncat(char *destination, const char *source, size_t num );
                extrn STRNCMP:far       ; CODE XREF: sub_12E92+5BB↑P
                                        ; sub_14261+BC↑P
                                        ; int strncmp(const char *str1, const char *str2, size_t maxlen);
                extrn STRNCPY:far       ; CODE XREF: mcurou+1CA↑P
                                        ; mcurou+1DE↑P ...
                                        ; char *strncpy(char *destination, const char *source, size_t num);
                extrn STRSTR:far        ; CODE XREF: sub_151BF+2E↑P
                                        ; sub_151BF+49↑P
                                        ; char * strstr(char *str1, const char *str2 );
                extrn STZCPY:far        ; CODE XREF: _INIT__MUTANTS+2C↑P
                                        ; _INIT__MUTANTS+D9F↑P ...
                                        ; stzcpy(char *dest, char *source, int nbytes);
                extrn TIME:far          ; CODE XREF: _INIT__MUTANTS+59↑P
                                        ; time_t time (time_t* timer);
                extrn TODAY:far         ; CODE XREF: sub_4148+C↑P
                                        ; sub_61BB+17E↑P
                                        ; int date=today();
                extrn TOLOWER:far       ; CODE XREF: sttrou+C5↑P
                                        ; sub_12E92+57F↑P ...
                                        ; int tolower (int c);
                extrn TOUPPER:far       ; CODE XREF: sttrou+1E0↑P
                                        ; sttrou+22F↑P ...
                                        ; int toupper (int c);
                extrn UPDBTV:far        ; CODE XREF: mcurou+ED↑P
                                        ; mcurou+203↑P ...
                                        ; void updbtv(char *recptr);
                extrn UPVBTV:far        ; CODE XREF: sub_41CC+88↑P
                                        ; sub_8A27+8D↑P
                                        ; void upvbtv(char *recptr, int length);
                extrn USAPTR:byte:3     ; DATA XREF: sub_54B6+A5↑w
                                        ; sub_54B6+AA↑w ...
                                        ; struct usracc *usaptr;
                extrn USER:byte:3       ; DATA XREF: sub_4F1A+10D↑r
                                        ; sub_4F1A+112↑r ...
                                        ; struct user;
                extrn USRIDX:far        ; CODE XREF: sub_4F1A+3B↑P
                                        ; int usridx(int chan);
                extrn USRNUM:near       ; DATA XREF: _INIT__MUTANTS+4E↑w
                                        ; lonrou+51↑r ...
                                        ; int usrnum;
                extrn USRPTR:byte:3     ; DATA XREF: sttrou+15A↑r
                                        ; sttrou+1C7↑r ...
                                        ; struct user *usrptr;
                extrn YNOPT:far         ; CODE XREF: _INIT__MUTANTS+1EF↑P
                                        ; _INIT__MUTANTS+200↑P ...
                                        ; int ynopt(int msgnum);
                extrn F_LDIV:far        ; CODE XREF: _INIT__MUTANTS+BFF↑P
                                        ; sub_4A44+271↑P ...
                extrn F_LUDIV:far       ; CODE XREF: sub_16D39+32D↑P
                extrn F_LXLSH:far       ; CODE XREF: sub_1B463+11F↑P
                                        ; sub_1E7C4+15A↑P ...
                extrn F_LXMUL:far       ; CODE XREF: _INIT__MUTANTS+BF8↑P
                                        ; mcurou+251↑P ...
                extrn F_SCOPY:far       ; CODE XREF: sub_41CC+19↑P
                                        ; sub_7E49+17↑P ...
                extrn UACOFF:far        ; CODE XREF: sttrou+3E1↑P
                                        ; sub_2B24+8D↑P ...
                                        ; struct usracc *uaptr=uacoff(unum);
                extrn GENBB:byte:3      ; DATA XREF: sub_41CC+23↑r
                                        ; sub_41CC+28↑r ...
                                        ; BTVFILE *genbb;
; ===========================================================================

; Segment type: Externs
; GALGSBL
                extrn _BTUCHI:far       ; CODE XREF: sub_4961+49↑P
                                        ; sub_54B6+190↑P ...
                                        ; int err=btuchi(int chan, char (*rouadr)());
                extrn _BTUCLI:far       ; CODE XREF: sub_4961+29↑P
                                        ; sub_63A1+C5↑P ...
                                        ; int btucli(int chan);
                extrn _BTUCLO:far       ; CODE XREF: sub_4961+33↑P
                                        ; sub_4A44+486↑P ...
                                        ; int btuclo(int chan);
                extrn _BTUCMD:far       ; CODE XREF: sub_4F1A+1C7↑P
                                        ; int btucmd(int chan,char *cmdstg);
                extrn _BTECH:far        ; CODE XREF: sub_4F1A+28C↑P
                                        ; sub_54B6+172↑P
                                        ; int btuech(int chan, int mode);
                extrn _BTUINJ:far       ; CODE XREF: stsrou+150↑P
                                        ; sub_4961+D1↑P ...
                                        ; int btuinj(int chan,int status);
                extrn _BTULOK:far       ; CODE XREF: sub_7B2D+BB↑P
                                        ; sub_7D33+9A↑P
                                        ; int btulok(int chan,int onoff);
                extrn _BTUOBA:far       ; CODE XREF: sub_7F99+15↑P
                                        ; sub_819F+14↑P ...
                                        ; int btuoba(int chan);
                extrn _BTUOES:far       ; CODE XREF: sub_7B2D+105↑P
                                        ; sub_7D33+E4↑P
                                        ; int btuoes(int chan,int onoff);
                extrn _BTUPMT:far       ; CODE XREF: huprou+9E↑P
                                        ; sttrou+2F8↑P ...
                                        ; int btupmt(int chan, char pmchar);
                extrn _BTUXCT:far       ; CODE XREF: sub_4F1A+199↑P
                                        ; int btuxct(int chan,int nbyt,char *datstg);
                extrn _BTUXMT:far       ; CODE XREF: sub_17567+31↑P
                                        ; sub_175B0+82↑P ...
                                        ; int btuxmt(int chan,char *datstg);
                extrn _CHIOUT:far       ; CODE XREF: sub_5214+44↑P
                                        ; sub_538A+74↑P ...
                                        ; void chiout(int chan,char c);
                extrn _BTURNO:near      ; DATA XREF: sub_5D04+E↑o
                                        ; sub_5D04+E4↑o ...
                                        ; char bturno[];

                end
